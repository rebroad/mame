#include "cpu_6809.h"

namespace StarWars {

void global_routine_impl(CPU6809& cpu) {

    label_6005:
    // 6005: LDX #$0000
    cpu.m_x = 0x0000;

    // 6008: LDD #$F800
    cpu.m_d = 0xF800;

    // 600B: LDA #$48
    cpu.m_a = 0x48;

    // 600D: TFR A,DP
    cpu.m_dp = cpu.m_a;

    // 600F: LSR <$3D
    // TODO: Convert LSR <$3D

    // 6011: BCC $6005
    if (!cpu.carry_flag()) cpu.m_pc = 0x6005;

    // 6013: CMPS #$4FFF
    cpu.execute_cmps_immediate(0x4FFF);

    // 6017: BEQ $601A
    if (cpu.zero_flag()) cpu.m_pc = 0x601A;

    // 6019: RTS 
    return;

    // 601A: LDA <$28
    cpu.m_a = cpu.read_memory(0x28);

    // 601C: BNE $602F
    if (!cpu.zero_flag()) cpu.m_pc = 0x602F;

    // 601E: LDA $4824
    cpu.m_a = cpu.read_memory(0x4824);

    // 6021: ANDA #$80
    cpu.m_a &= 0x80;

    // 6023: BNE $602F
    if (!cpu.zero_flag()) cpu.m_pc = 0x602F;

    // 6025: LDA <$31
    cpu.m_a = cpu.read_memory(0x31);

    // 6027: BITA #$80
    // TODO: Convert BITA #$80

    // 6029: BEQ $6005
    if (cpu.zero_flag()) cpu.m_pc = 0x6005;

    // 602B: ANDA #$7F
    cpu.m_a &= 0x7F;

    // 602D: STA <$31
    cpu.write_memory(0x31, cpu.m_a);

    // 602F: JSR $60BE
    cpu.call_function(0x60BE);

    // 6032: LDA <$3F
    cpu.m_a = cpu.read_memory(0x3F);

    // 6034: BMI $6032
    if (cpu.negative_flag()) cpu.m_pc = 0x6032;

    label_6036:
    // 6036: JMP $6036
    goto label_6036;

    // 6038: CMPA #$3D
    cpu.compare_a(0x3D);

    // 603A: BCC $603A
    if (!cpu.carry_flag()) cpu.m_pc = 0x603A;

    // 603C: ASLA 
    cpu.m_a <<= 1;

    // 603D: LDX #$6044
    cpu.m_x = 0x6044;

    // 6040: JSR [A,X]
    // TODO: Complex indexed addressing: [A,X]

    // 6042: BRA $6005
    goto label_6005;

    // 6044: XNC -$B,S
    // TODO: Convert XNC -$B,S

    // 6046: LSR ,-S
    // TODO: Convert LSR ,-S

    // 6048: LSR [,S++]
    // TODO: Convert LSR [,S++]

    // 604A: LSR -$D,X
    // TODO: Convert LSR -$D,X

    // 604C: LSR -$E,Y
    // TODO: Convert LSR -$E,Y

    // 604E: ASR $8,X
    // TODO: Convert ASR $8,X

    // 6050: ASR $B,S
    // TODO: Convert ASR $B,S

    // 6052: XNC ,S
    // TODO: Convert XNC ,S

    // 6054: COM $6,X
    // TODO: Convert COM $6,X

    // 6056: COM $6,Y
    // TODO: Convert COM $6,Y

    // 6058: COM $8,U
    // TODO: Convert COM $8,U

    // 605A: LSR -$7,U
    // TODO: Convert LSR -$7,U

    // 605C: LSR ,--X
    // TODO: Convert LSR ,--X

    // 605E: LSR $C,S
    // TODO: Convert LSR $C,S

    // 6060: LSR [$6670]
    // TODO: Convert LSR [$6670]

    // 6064: ROR $60D4,PCR
    // TODO: Convert ROR $60D4,PCR

    // 6067: RTI 
    // TODO: Convert RTI 

    // 60BE: INC <$43
    cpu.increment_memory(0x43);

    // 60C0: BNE $60CA
    if (!cpu.zero_flag()) cpu.m_pc = 0x60CA;

    // 60C2: INC <$42
    cpu.increment_memory(0x42);

    // 60C4: BNE $60CA
    if (!cpu.zero_flag()) cpu.m_pc = 0x60CA;

    // 60C6: LDA #$80
    cpu.m_a = 0x80;

    // 60C8: STA <$42
    cpu.write_memory(0x42, cpu.m_a);

    label_60CA:
    // 60CA: JMP $60ca
    goto label_60CA;

    // 60CD: BNE $60D4
    if (!cpu.zero_flag()) cpu.m_pc = 0x60D4;

    // 60CF: STA $4B31
    cpu.write_memory(0x4B31, cpu.m_a);

    // 60D2: BRA $60F4
    goto label_60F4;

    label_60D4:
    // 60D4: JMP $60d4
    goto label_60D4;

    // 60D7: BNE $60E4
    if (!cpu.zero_flag()) cpu.m_pc = 0x60E4;

    // 60D9: JSR $BD12
    cpu.call_function(0xBD12);

    // 60DC: LDA $4814
    cpu.m_a = cpu.read_memory(0x4814);

    // 60DF: STA $4B31
    cpu.write_memory(0x4B31, cpu.m_a);

    // 60E2: BRA $60F4
    goto label_60F4;

    // 60E4: LDA $4B31
    cpu.m_a = cpu.read_memory(0x4B31);

    // 60E7: CMPA $4814
    cpu.compare_a(cpu.read_memory(cpu.read_memory(0x4814)));

    // 60EA: BCC $60F4
    if (!cpu.carry_flag()) cpu.m_pc = 0x60F4;

    // 60EC: JSR $BD03
    cpu.call_function(0xBD03);

    // 60EF: LDA #$FF
    cpu.m_a = 0xFF;

    // 60F1: STA $4B31
    cpu.write_memory(0x4B31, cpu.m_a);

    label_60F4:
    // 60F4: JMP $60f4
    goto label_60F4;

    // 60F7: LDA <$AB
    cpu.m_a = cpu.read_memory(0xAB);

    // 60F9: STA <$AA
    cpu.write_memory(0xAA, cpu.m_a);

    // 60FB: LDA <$21
    cpu.m_a = cpu.read_memory(0x21);

    // 60FD: ANDA #$30
    cpu.m_a &= 0x30;

    // 60FF: PSHS A
    // TODO: Convert PSHS A

    // 6101: LDA <$1E
    cpu.m_a = cpu.read_memory(0x1E);

    // 6103: ANDA #$CF
    cpu.m_a &= 0xCF;

    // 6105: ORA ,S+
    // TODO: Complex indexed addressing: ,S+

    // 6107: ANDA #$F4
    cpu.m_a &= 0xF4;

    // 6109: STA <$AB
    cpu.write_memory(0xAB, cpu.m_a);

    // 610B: EORA <$AA
    cpu.m_a ^= 0xAA;

    // 610D: ANDA <$AA
    cpu.m_a &= 0xAA;

    // 610F: STA <$AC
    cpu.write_memory(0xAC, cpu.m_a);

    // 6111: RTS 
    return;

    // 6112: LDA <$3F
    cpu.m_a = cpu.read_memory(0x3F);

    // 6114: LDB #$70
    cpu.m_b = 0x70;

    // 6116: TFR D,Y
    cpu.m_y = cpu.m_d;

    // 6118: LDD #$B99E
    cpu.m_d = 0xB99E;

    // 611B: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 611D: RTS 
    return;

    // 611E: LDX #$CEDE
    cpu.m_x = 0xCEDE;

    // 6121: LDU #$2800
    cpu.m_u = 0x2800;

    label_6124:
    // 6124: JMP $6124
    goto label_6124;

    // 6126: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // 6128: CMPU #$3000
    cpu.execute_cmpu_immediate(0x3000);

    // 612C: BCS $6124
    if (cpu.carry_flag()) cpu.m_pc = 0x6124;

    // 612E: RTS 
    return;

    // 612F: LDD #$8040
    cpu.m_d = 0x8040;

    // 6132: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 6134: LDD #$2020
    cpu.m_d = 0x2020;

    // 6137: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 6139: STD ,Y+
    cpu.write_memory16(cpu.m_y, cpu.m_d);
    cpu.m_y++;

    // 613B: TFR Y,D
    cpu.m_d = cpu.m_y;

    // 613D: SUBA <$3F
    cpu.m_a -= 0x3F;

    // 613F: SUBA #$14
    cpu.m_a -= 0x14;

    // 6141: BCS $6155
    if (cpu.carry_flag()) cpu.m_pc = 0x6155;

    // 6143: JSR $611E
    cpu.call_function(0x611E);

    // 6146: LDD #$2020
    cpu.m_d = 0x2020;

    // 6149: STD $13FE
    cpu.write_memory16(0x13FE, cpu.m_d);

    // 614C: STD $13FC
    cpu.write_memory16(0x13FC, cpu.m_d);

    // 614F: STD $27FE
    cpu.write_memory16(0x27FE, cpu.m_d);

    // 6152: STD $27FC
    cpu.write_memory16(0x27FC, cpu.m_d);

    // 6155: LDA #$FF
    cpu.m_a = 0xFF;

    // 6157: STA <$3F
    cpu.write_memory(0x3F, cpu.m_a);

    // 6159: RTS 
    return;

    // 615A: JSR $6161
    cpu.call_function(0x6161);

    // 615D: JSR $7A48
    cpu.call_function(0x7A48);

    // 6160: RTS 
    return;

    // 6161: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // 6164: SUBA $4703
    cpu.m_a -= cpu.read_memory(0x4703);

    // 6167: BNE $6171
    if (!cpu.zero_flag()) cpu.m_pc = 0x6171;

    // 6169: STA $4685
    cpu.write_memory(0x4685, cpu.m_a);

    // 616C: LDA #$80
    cpu.m_a = 0x80;

    // 616E: STA $4685
    cpu.write_memory(0x4685, cpu.m_a);

    // 6171: LDA #$80
    cpu.m_a = 0x80;

    // 6173: STA <$83
    cpu.write_memory(0x83, cpu.m_a);

    // 6175: LDX #$4900
    cpu.m_x = 0x4900;

    // 6178: LDU #$50F0
    cpu.m_u = 0x50F0;

    // 617B: LDB #$1C
    cpu.m_b = 0x1C;

    // 617D: STU ,X
    cpu.write_memory16(cpu.m_x, cpu.m_u);

    // 617F: STB $2,X
    cpu.write_memory(cpu.m_x + 0x02, cpu.m_b);

    // 6181: LEAU $20,U
    // TODO: Fix comma operator: LEAU $20,U

    // 6184: ADDB #$04
    cpu.m_b += 0x04;

    // 6186: LEAX $19,X
    // TODO: Fix comma operator: LEAX $19,X

    // 6189: CMPX #$494B
    cpu.compare_x(0x494B);

    // 618C: BCS $617D
    if (cpu.carry_flag()) cpu.m_pc = 0x617D;

    // 618E: LDX #$494B
    cpu.m_x = 0x494B;

    // 6191: LDU #$5160
    cpu.m_u = 0x5160;

    // 6194: LDB #$2C
    cpu.m_b = 0x2C;

    // 6196: STU ,X
    cpu.write_memory16(cpu.m_x, cpu.m_u);

    // 6198: STB $2,X
    cpu.write_memory(cpu.m_x + 0x02, cpu.m_b);

    // 619A: CLR $3,X
    // TODO: Fix comma operator: CLR $3,X

    // 619C: LEAU $8,U
    // TODO: Fix comma operator: LEAU $8,U

    // 619E: ADDB #$01
    cpu.m_b += 0x01;

    // 61A0: LEAX $6,X
    // TODO: Fix comma operator: LEAX $6,X

    // 61A2: CMPX #$496F
    cpu.compare_x(0x496F);

    // 61A5: BCS $6196
    if (cpu.carry_flag()) cpu.m_pc = 0x6196;

    // 61A7: JSR $8ED6
    cpu.call_function(0x8ED6);

    // 61AA: LDB #$04
    cpu.m_b = 0x04;

    // 61AC: JSR $CCCC
    cpu.call_function(0xCCCC);

    // 61AF: LDB #$07
    cpu.m_b = 0x07;

    // 61B1: JSR $CCCC
    cpu.call_function(0xCCCC);

    // 61B4: RTS 
    return;

    // 61B5: LDD #$0000
    cpu.m_d = 0x0000;

    // 61B8: STD $501E
    cpu.write_memory16(0x501E, cpu.m_d);

    // 61BB: LDD #$4000
    cpu.m_d = 0x4000;

    // 61BE: STD $5020
    cpu.write_memory16(0x5020, cpu.m_d);

    // 61C1: LDD #$E000
    cpu.m_d = 0xE000;

    // 61C4: STD $5026
    cpu.write_memory16(0x5026, cpu.m_d);

    // 61C7: LDD #$0080
    cpu.m_d = 0x0080;

    // 61CA: STD $506A
    cpu.write_memory16(0x506A, cpu.m_d);

    // 61CD: LDD #$0040
    cpu.m_d = 0x0040;

    // 61D0: STD $5068
    cpu.write_memory16(0x5068, cpu.m_d);

    // 61D3: LDD #$021F
    cpu.m_d = 0x021F;

    // 61D6: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 61D9: LDD #$3FF7
    cpu.m_d = 0x3FF7;

    // 61DC: STD $5024
    cpu.write_memory16(0x5024, cpu.m_d);

    // 61DF: LDD #$4000
    cpu.m_d = 0x4000;

    // 61E2: STD $506C
    cpu.write_memory16(0x506C, cpu.m_d);

    // 61E5: LDD #$0200
    cpu.m_d = 0x0200;

    // 61E8: STD $4706
    cpu.write_memory16(0x4706, cpu.m_d);

    // 61EB: RTS 
    return;

    // 61EC: LDA #$80
    cpu.m_a = 0x80;

    // 61EE: STA <$83
    cpu.write_memory(0x83, cpu.m_a);

    // 61F0: LDX #$5C60
    cpu.m_x = 0x5C60;

    // 61F3: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // 61F6: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // 61F9: STD ,X
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // 61FB: MUL 
    // TODO: Convert MUL 

    // 61FC: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // 61FF: STD $2,X
    cpu.write_memory16(cpu.m_x + 0x02, cpu.m_d);

    // 6201: MUL 
    // TODO: Convert MUL 

    // 6202: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // 6205: STD $4,X
    cpu.write_memory16(cpu.m_x + 0x04, cpu.m_d);

    // 6207: LEAX $8,X
    // TODO: Fix comma operator: LEAX $8,X

    // 6209: CMPX #$5DF0
    cpu.compare_x(0x5DF0);

    // 620C: BCS $61F3
    if (cpu.carry_flag()) cpu.m_pc = 0x61F3;

    // 620E: RTS 
    return;

    // 620F: LDX #$5C60
    cpu.m_x = 0x5C60;

    // 6212: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // 6215: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // 6218: STD ,X
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // 621A: MUL 
    // TODO: Convert MUL 

    // 621B: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // 621E: STD $2,X
    cpu.write_memory16(cpu.m_x + 0x02, cpu.m_d);

    // 6220: LDD #$0000
    cpu.m_d = 0x0000;

    // 6223: STD $4,X
    cpu.write_memory16(cpu.m_x + 0x04, cpu.m_d);

    // 6225: LEAX $8,X
    // TODO: Fix comma operator: LEAX $8,X

    // 6227: CMPX #$5DF0
    cpu.compare_x(0x5DF0);

    // 622A: BCS $6212
    if (cpu.carry_flag()) cpu.m_pc = 0x6212;

    // 622C: RTS 
    return;

    // 622D: LDB <$7D
    cpu.m_b = cpu.read_memory(0x7D);

    // 622F: CMPB #$A0
    cpu.compare_b(0xA0);

    // 6231: BGT $623E
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x623E;

    // 6233: LDA #$08
    cpu.m_a = 0x08;

    // 6235: CMPA <$41
    cpu.compare_a(cpu.read_memory(0x41));

    // 6237: BEQ $623C
    if (cpu.zero_flag()) cpu.m_pc = 0x623C;

    // 6239: DECA 
    cpu.m_a--;

    // 623A: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    label_623C:
    // 623C: JMP $623c
    goto label_623C;

    label_623E:
    // 623E: JMP $623e
    goto label_623E;

    // 6240: BLT $624B
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x624B;

    // 6242: LDA #$0C
    cpu.m_a = 0x0C;

    // 6244: CMPA <$41
    cpu.compare_a(cpu.read_memory(0x41));

    // 6246: BEQ $624B
    if (cpu.zero_flag()) cpu.m_pc = 0x624B;

    // 6248: DECA 
    cpu.m_a--;

    // 6249: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    label_624B:
    // 624B: JMP $624b
    goto label_624B;

    // 624E: ANDA #$03
    cpu.m_a &= 0x03;

    // 6250: BNE $6257
    if (!cpu.zero_flag()) cpu.m_pc = 0x6257;

    // 6252: LDA #$01
    cpu.m_a = 0x01;

    // 6254: STA $4814
    cpu.write_memory(0x4814, cpu.m_a);

    // 6257: LDA $4814
    cpu.m_a = cpu.read_memory(0x4814);

    // 625A: BEQ $6269
    if (cpu.zero_flag()) cpu.m_pc = 0x6269;

    // 625C: LDA <$AC
    cpu.m_a = cpu.read_memory(0xAC);

    // 625E: ANDA #$F0
    cpu.m_a &= 0xF0;

    // 6260: BEQ $6269
    if (cpu.zero_flag()) cpu.m_pc = 0x6269;

    // 6262: LDA #$19
    cpu.m_a = 0x19;

    // 6264: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6266: DEC $4814
    cpu.decrement_memory(0x4814);

    // 6269: LDA $481E
    cpu.m_a = cpu.read_memory(0x481E);

    // 626C: ANDA #$10
    cpu.m_a &= 0x10;

    // 626E: BNE $6274
    if (!cpu.zero_flag()) cpu.m_pc = 0x6274;

    // 6270: LDA #$01
    cpu.m_a = 0x01;

    // 6272: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6274: RTS 
    return;

    // 6275: ORCC #$10
    cpu.m_cc |= 0x10;

    // 6277: LDX #$4534
    cpu.m_x = 0x4534;

    // 627A: JSR $C6D4
    cpu.call_function(0xC6D4);

    // 627D: LDX #$4AFA
    cpu.m_x = 0x4AFA;

    // 6280: JSR $62D5
    cpu.call_function(0x62D5);

    // 6283: STA $4866
    cpu.write_memory(0x4866, cpu.m_a);

    // 6286: LDX #$4AFB
    cpu.m_x = 0x4AFB;

    // 6289: JSR $62D5
    cpu.call_function(0x62D5);

    // 628C: STA $4868
    cpu.write_memory(0x4868, cpu.m_a);

    // 628F: LDX #$4AFC
    cpu.m_x = 0x4AFC;

    // 6292: JSR $62D5
    cpu.call_function(0x62D5);

    // 6295: STA $486F
    cpu.write_memory(0x486F, cpu.m_a);

    // 6298: LDX #$4AFD
    cpu.m_x = 0x4AFD;

    // 629B: JSR $62D5
    cpu.call_function(0x62D5);

    // 629E: STA $4871
    cpu.write_memory(0x4871, cpu.m_a);

    // 62A1: ANDCC #$EF
    // TODO: Convert ANDCC #$EF

    // 62A3: LDA #$0B
    cpu.m_a = 0x0B;

    // 62A5: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 62A7: LDA #$FF
    cpu.m_a = 0xFF;

    // 62A9: STA $4B34
    cpu.write_memory(0x4B34, cpu.m_a);

    // 62AC: JSR $61B5
    cpu.call_function(0x61B5);

    // 62AF: JSR $615A
    cpu.call_function(0x615A);

    // 62B2: JSR $611E
    cpu.call_function(0x611E);

    // 62B5: JSR $61EC
    cpu.call_function(0x61EC);

    // 62B8: JSR $D91A
    cpu.call_function(0xD91A);

    // 62BB: LDA #$00
    cpu.m_a = 0x00;

    // 62BD: STA <$5C
    cpu.write_memory(0x5C, cpu.m_a);

    // 62BF: STA <$5D
    cpu.write_memory(0x5D, cpu.m_a);

    // 62C1: STA <$5E
    cpu.write_memory(0x5E, cpu.m_a);

    // 62C3: STA <$5F
    cpu.write_memory(0x5F, cpu.m_a);

    // 62C5: STA <$8B
    cpu.write_memory(0x8B, cpu.m_a);

    // 62C7: STA <$8C
    cpu.write_memory(0x8C, cpu.m_a);

    // 62C9: JSR $CC18
    cpu.call_function(0xCC18);

    // 62CC: LDA #$FF
    cpu.m_a = 0xFF;

    // 62CE: STA $4AEC
    cpu.write_memory(0x4AEC, cpu.m_a);

    // 62D1: STA $4818
    cpu.write_memory(0x4818, cpu.m_a);

    // 62D4: RTS 
    return;

    // 62D5: LDA #$40
    cpu.m_a = 0x40;

    // 62D7: CMPA ,X
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_x));

    // 62D9: BLS $62E3
    // TODO: Convert BLS $62E3

    // 62DB: SUBA ,X
    // TODO: Complex indexed addressing: ,X

    // 62DD: LSRA 
    cpu.m_a >>= 1;

    // 62DE: LSRA 
    cpu.m_a >>= 1;

    // 62DF: LSRA 
    cpu.m_a >>= 1;

    // 62E0: INCA 
    cpu.m_a++;

    // 62E1: ADDA ,X
    // TODO: Complex indexed addressing: ,X

    // 62E3: RTS 
    return;

    // 62E4: LDD #$0000
    cpu.m_d = 0x0000;

    // 62E7: STD $4B0C
    cpu.write_memory16(0x4B0C, cpu.m_d);

    // 62EA: LDD #$0200
    cpu.m_d = 0x0200;

    // 62ED: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 62F0: LDA #$0F
    cpu.m_a = 0x0F;

    // 62F2: STA $4ADB
    cpu.write_memory(0x4ADB, cpu.m_a);

    // 62F5: LDA #$1F
    cpu.m_a = 0x1F;

    // 62F7: STA $4ADC
    cpu.write_memory(0x4ADC, cpu.m_a);

    // 62FA: LDD #$6480
    cpu.m_d = 0x6480;

    // 62FD: STD $4B10
    cpu.write_memory16(0x4B10, cpu.m_d);

    // 6300: JSR $D91A
    cpu.call_function(0xD91A);

    // 6303: INC <$41
    cpu.increment_memory(0x41);

    // 6305: RTS 
    return;

    // 6306: JSR $6112
    cpu.call_function(0x6112);

    // 6309: JSR $761D
    cpu.call_function(0x761D);

    // 630C: JSR $63D5
    cpu.call_function(0x63D5);

    // 630F: JSR $6368
    cpu.call_function(0x6368);

    // 6312: JSR $CD80
    cpu.call_function(0xCD80);

    // 6315: JSR $612F
    cpu.call_function(0x612F);

    // 6318: JSR $6DB6
    cpu.call_function(0x6DB6);

    // 631B: LDD $4B0E
    cpu.m_d = cpu.read_memory16(0x4B0E);

    // 631E: BPL $6322
    if (!cpu.negative_flag()) cpu.m_pc = 0x6322;

    // 6320: INC <$41
    cpu.increment_memory(0x41);

    label_6322:
    // 6322: JMP $6322
    goto label_6322;

    // 6325: RTS 
    return;

    // 6326: LDD #$03C0
    cpu.m_d = 0x03C0;

    // 6329: STD $4B0C
    cpu.write_memory16(0x4B0C, cpu.m_d);

    // 632C: LDD #$0200
    cpu.m_d = 0x0200;

    // 632F: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 6332: LDA #$23
    cpu.m_a = 0x23;

    // 6334: STA $4ADB
    cpu.write_memory(0x4ADB, cpu.m_a);

    // 6337: LDA #$2C
    cpu.m_a = 0x2C;

    // 6339: STA $4ADC
    cpu.write_memory(0x4ADC, cpu.m_a);

    // 633C: LDD #$6580
    cpu.m_d = 0x6580;

    // 633F: STD $4B10
    cpu.write_memory16(0x4B10, cpu.m_d);

    // 6342: JSR $D91A
    cpu.call_function(0xD91A);

    // 6345: INC <$41
    cpu.increment_memory(0x41);

    // 6347: RTS 
    return;

    // 6348: JSR $6112
    cpu.call_function(0x6112);

    // 634B: JSR $761D
    cpu.call_function(0x761D);

    // 634E: JSR $63D5
    cpu.call_function(0x63D5);

    // 6351: JSR $6368
    cpu.call_function(0x6368);

    // 6354: JSR $CD80
    cpu.call_function(0xCD80);

    // 6357: JSR $612F
    cpu.call_function(0x612F);

    // 635A: JSR $6DC0
    cpu.call_function(0x6DC0);

    // 635D: LDD $4B0E
    cpu.m_d = cpu.read_memory16(0x4B0E);

    // 6360: BPL $6364
    if (!cpu.negative_flag()) cpu.m_pc = 0x6364;

    // 6362: INC <$41
    cpu.increment_memory(0x41);

    // 6364: JSR $622D
    cpu.call_function(0x622D);

    // 6367: RTS 
    return;

    // 6368: LDD $4B0E
    cpu.m_d = cpu.read_memory16(0x4B0E);

    // 636B: SUBD #$0001
    cpu.m_d -= 0x0001;

    // 636E: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 6371: ANDB #$07
    cpu.m_b &= 0x07;

    // 6373: BNE $639D
    if (!cpu.zero_flag()) cpu.m_pc = 0x639D;

    // 6375: LDA $4ADB
    cpu.m_a = cpu.read_memory(0x4ADB);

    // 6378: BMI $637D
    if (cpu.negative_flag()) cpu.m_pc = 0x637D;

    // 637A: JSR $D8DF
    cpu.call_function(0xD8DF);

    // 637D: LDA $4ADB
    cpu.m_a = cpu.read_memory(0x4ADB);

    // 6380: CMPA #$12
    cpu.compare_a(0x12);

    // 6382: BNE $638E
    if (!cpu.zero_flag()) cpu.m_pc = 0x638E;

    // 6384: LDA $4593
    cpu.m_a = cpu.read_memory(0x4593);

    // 6387: ANDA #$03
    cpu.m_a &= 0x03;

    // 6389: ADDA #$1F
    cpu.m_a += 0x1F;

    // 638B: JSR $D8DF
    cpu.call_function(0xD8DF);

    // 638E: LDA $4ADB
    cpu.m_a = cpu.read_memory(0x4ADB);

    // 6391: ADDA #$01
    cpu.m_a += 0x01;

    // 6393: CMPA $4ADC
    cpu.compare_a(cpu.read_memory(cpu.read_memory(0x4ADC)));

    // 6396: BCS $639A
    if (cpu.carry_flag()) cpu.m_pc = 0x639A;

    // 6398: LDA #$80
    cpu.m_a = 0x80;

    // 639A: STA $4ADB
    cpu.write_memory(0x4ADB, cpu.m_a);

    // 639D: LDD $4B0C
    cpu.m_d = cpu.read_memory16(0x4B0C);

    // 63A0: SUBD #$0008
    cpu.m_d -= 0x0008;

    // 63A3: BPL $63A8
    if (!cpu.negative_flag()) cpu.m_pc = 0x63A8;

    // 63A5: LDD #$0000
    cpu.m_d = 0x0000;

    // 63A8: STD $4B0C
    cpu.write_memory16(0x4B0C, cpu.m_d);

    // 63AB: LDD $4B0E
    cpu.m_d = cpu.read_memory16(0x4B0E);

    // 63AE: CMPD #$00C0
    cpu.execute_cmpd_immediate(0x00C0);

    // 63B2: BCC $63C6
    if (!cpu.carry_flag()) cpu.m_pc = 0x63C6;

    // 63B4: LDB $4B11
    cpu.m_b = cpu.read_memory(0x4B11);

    // 63B7: SUBB #$01
    cpu.m_b -= 0x01;

    // 63B9: CMPB #$10
    cpu.compare_b(0x10);

    // 63BB: BCC $63C3
    if (!cpu.carry_flag()) cpu.m_pc = 0x63C3;

    // 63BD: LDD #$0000
    cpu.m_d = 0x0000;

    // 63C0: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 63C3: STB $4B11
    cpu.write_memory(0x4B11, cpu.m_b);

    // 63C6: LDD $4B0C
    cpu.m_d = cpu.read_memory16(0x4B0C);

    // 63C9: STD $48AF
    cpu.write_memory16(0x48AF, cpu.m_d);

    // 63CC: LDD $4B10
    cpu.m_d = cpu.read_memory16(0x4B10);

    // 63CF: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 63D1: JSR $D942
    cpu.call_function(0xD942);

    // 63D4: RTS 
    return;

    // 63D5: LDA $4814
    cpu.m_a = cpu.read_memory(0x4814);

    // 63D8: BNE $63EB
    if (!cpu.zero_flag()) cpu.m_pc = 0x63EB;

    // 63DA: LDA <$43
    cpu.m_a = cpu.read_memory(0x43);

    // 63DC: ANDA #$10
    cpu.m_a &= 0x10;

    // 63DE: BNE $63E4
    if (!cpu.zero_flag()) cpu.m_pc = 0x63E4;

    // 63E0: LDB #$06
    cpu.m_b = 0x06;

    // 63E2: BRA $63E6
    goto label_63E6;

    // 63E4: LDB #$05
    cpu.m_b = 0x05;

    label_63E6:
    // 63E6: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 63E9: BRA $63F0
    goto label_63F0;

    // 63EB: LDB #$0B
    cpu.m_b = 0x0B;

    // 63ED: JSR $E7C7
    cpu.call_function(0xE7C7);

    label_63F0:
    // 63F0: LDA $4814
    cpu.m_a = cpu.read_memory(0x4814);

    // 63F3: BNE $6410
    if (!cpu.zero_flag()) cpu.m_pc = 0x6410;

    // 63F5: LDA $4812
    cpu.m_a = cpu.read_memory(0x4812);

    // 63F8: BEQ $6404
    if (cpu.zero_flag()) cpu.m_pc = 0x6404;

    // 63FA: LDA <$43
    cpu.m_a = cpu.read_memory(0x43);

    // 63FC: ANDA #$10
    cpu.m_a &= 0x10;

    // 63FE: BEQ $6404
    if (cpu.zero_flag()) cpu.m_pc = 0x6404;

    // 6400: BRA $6410
    goto label_6410;

    // 6402: BRA $640E
    goto label_640E;

    // 6404: LDB $4591
    cpu.m_b = cpu.read_memory(0x4591);

    // 6407: ANDB #$03
    cpu.m_b &= 0x03;

    // 6409: ADDB #$07
    cpu.m_b += 0x07;

    // 640B: JSR $E7C7
    cpu.call_function(0xE7C7);

    label_640E:
    // 640E: JMP $640e
    goto label_640E;

    label_6410:
    // 6410: LDA $4814
    cpu.m_a = cpu.read_memory(0x4814);

    // 6413: ADDA $4812
    cpu.m_a += cpu.read_memory(0x4812);

    // 6416: CMPA #$01
    cpu.compare_a(0x01);

    // 6418: BNE $641E
    if (!cpu.zero_flag()) cpu.m_pc = 0x641E;

    // 641A: LDB #$0D
    cpu.m_b = 0x0D;

    // 641C: BRA $6420
    goto label_6420;

    // 641E: LDB #$0C
    cpu.m_b = 0x0C;

    label_6420:
    // 6420: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 6423: LDD #$01B0
    cpu.m_d = 0x01B0;

    // 6426: ANDA #$1F
    cpu.m_a &= 0x1F;

    // 6428: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 642A: LDD #$FF80
    cpu.m_d = 0xFF80;

    // 642D: TST $4812
    // TODO: Convert TST $4812

    // 6430: BEQ $6435
    if (cpu.zero_flag()) cpu.m_pc = 0x6435;

    // 6432: SUBD #$0018
    cpu.m_d -= 0x0018;

    // 6435: ANDA #$1F
    cpu.m_a &= 0x1F;

    // 6437: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 6439: LDA $4814
    cpu.m_a = cpu.read_memory(0x4814);

    // 643C: CMPA #$0A
    cpu.compare_a(0x0A);

    // 643E: BCS $6442
    if (cpu.carry_flag()) cpu.m_pc = 0x6442;

    // 6440: ADDA #$06
    cpu.m_a += 0x06;

    // 6442: LDB #$02
    cpu.m_b = 0x02;

    // 6444: STB <$AD
    cpu.write_memory(0xAD, cpu.m_b);

    // 6446: JSR $E790
    cpu.call_function(0xE790);

    // 6449: LDA $4812
    cpu.m_a = cpu.read_memory(0x4812);

    // 644C: BEQ $6453
    if (cpu.zero_flag()) cpu.m_pc = 0x6453;

    // 644E: LDD #$B8F3
    cpu.m_d = 0xB8F3;

    // 6451: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 6453: LDD #$8040
    cpu.m_d = 0x8040;

    // 6456: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 6458: RTS 
    return;

    // 6459: LDD #$0000
    cpu.m_d = 0x0000;

    // 645C: STD $4B0C
    cpu.write_memory16(0x4B0C, cpu.m_d);

    // 645F: STD $48AF
    cpu.write_memory16(0x48AF, cpu.m_d);

    // 6462: LDD #$0100
    cpu.m_d = 0x0100;

    // 6465: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 6468: LDD #$6180
    cpu.m_d = 0x6180;

    // 646B: STD $4B10
    cpu.write_memory16(0x4B10, cpu.m_d);

    // 646E: JSR $D91A
    cpu.call_function(0xD91A);

    // 6471: JSR $61B5
    cpu.call_function(0x61B5);

    // 6474: JSR $615A
    cpu.call_function(0x615A);

    // 6477: LDU #$5038
    cpu.m_u = 0x5038;

    // 647A: JSR $CDC3
    cpu.call_function(0xCDC3);

    // 647D: JSR $CC38
    cpu.call_function(0xCC38);

    // 6480: INC <$41
    cpu.increment_memory(0x41);

    // 6482: RTS 
    return;

    // 6483: JSR $6112
    cpu.call_function(0x6112);

    // 6486: JSR $64CD
    cpu.call_function(0x64CD);

    // 6489: JSR $CD80
    cpu.call_function(0xCD80);

    // 648C: JSR $761D
    cpu.call_function(0x761D);

    // 648F: JSR $63D5
    cpu.call_function(0x63D5);

    // 6492: LDD $4B0E
    cpu.m_d = cpu.read_memory16(0x4B0E);

    // 6495: CMPD #$0050
    cpu.execute_cmpd_immediate(0x0050);

    // 6499: BCC $64A9
    if (!cpu.carry_flag()) cpu.m_pc = 0x64A9;

    // 649B: LDB $4B11
    cpu.m_b = cpu.read_memory(0x4B11);

    // 649E: SUBB #$01
    cpu.m_b -= 0x01;

    // 64A0: CMPB #$F0
    cpu.compare_b(0xF0);

    // 64A2: BCS $64A6
    if (cpu.carry_flag()) cpu.m_pc = 0x64A6;

    // 64A4: LDB #$00
    cpu.m_b = 0x00;

    label_64A6:
    // 64A6: JMP $64a6
    goto label_64A6;

    // 64A9: LDD $4B10
    cpu.m_d = cpu.read_memory16(0x4B10);

    // 64AC: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 64AE: JSR $C7FD
    cpu.call_function(0xC7FD);

    // 64B1: JSR $D923
    cpu.call_function(0xD923);

    // 64B4: JSR $612F
    cpu.call_function(0x612F);

    // 64B7: JSR $6DCA
    cpu.call_function(0x6DCA);

    // 64BA: LDD $4B0E
    cpu.m_d = cpu.read_memory16(0x4B0E);

    // 64BD: SUBD #$0001
    cpu.m_d -= 0x0001;

    // 64C0: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 64C3: BPL $64C9
    if (!cpu.negative_flag()) cpu.m_pc = 0x64C9;

    // 64C5: LDA #$05
    cpu.m_a = 0x05;

    // 64C7: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    label_64C9:
    // 64C9: JMP $64c9
    goto label_64C9;

    // 64CC: RTS 
    return;

    // 64CD: LDB #$00
    cpu.m_b = 0x00;

    // 64CF: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 64D2: LDB #$01
    cpu.m_b = 0x01;

    // 64D4: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 64D7: LDB #$02
    cpu.m_b = 0x02;

    // 64D9: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 64DC: LDB #$03
    cpu.m_b = 0x03;

    // 64DE: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 64E1: RTS 
    return;

    // 64E2: JSR $D91A
    cpu.call_function(0xD91A);

    // 64E5: LDD #$0000
    cpu.m_d = 0x0000;

    // 64E8: STD $4B0C
    cpu.write_memory16(0x4B0C, cpu.m_d);

    // 64EB: STD $48AF
    cpu.write_memory16(0x48AF, cpu.m_d);

    // 64EE: INC <$41
    cpu.increment_memory(0x41);

    // 64F0: RTS 
    return;

    // 64F1: JSR $6112
    cpu.call_function(0x6112);

    // 64F4: JSR $BE20
    cpu.call_function(0xBE20);

    // 64F7: JSR $D923
    cpu.call_function(0xD923);

    // 64FA: JSR $612F
    cpu.call_function(0x612F);

    // 64FD: LDA <$AC
    cpu.m_a = cpu.read_memory(0xAC);

    // 64FF: ANDA #$04
    cpu.m_a &= 0x04;

    // 6501: BEQ $6507
    if (cpu.zero_flag()) cpu.m_pc = 0x6507;

    // 6503: LDA #$03
    cpu.m_a = 0x03;

    // 6505: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6507: LDA $481E
    cpu.m_a = cpu.read_memory(0x481E);

    // 650A: ANDA #$10
    cpu.m_a &= 0x10;

    // 650C: BEQ $6512
    if (cpu.zero_flag()) cpu.m_pc = 0x6512;

    // 650E: LDA #$05
    cpu.m_a = 0x05;

    // 6510: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6512: RTS 
    return;

    // 6513: JSR $D91A
    cpu.call_function(0xD91A);

    // 6516: LDA #$0A
    cpu.m_a = 0x0A;

    // 6518: STA $4AF6
    cpu.write_memory(0x4AF6, cpu.m_a);

    // 651B: LDA #$00
    cpu.m_a = 0x00;

    // 651D: STA $4598
    cpu.write_memory(0x4598, cpu.m_a);

    // 6520: STA $4AF7
    cpu.write_memory(0x4AF7, cpu.m_a);

    // 6523: LDA #$03
    cpu.m_a = 0x03;

    // 6525: JSR $C2C3
    cpu.call_function(0xC2C3);

    // 6528: BEQ $652F
    if (cpu.zero_flag()) cpu.m_pc = 0x652F;

    // 652A: LDA #$03
    cpu.m_a = 0x03;

    // 652C: JSR $C369
    cpu.call_function(0xC369);

    // 652F: INC <$41
    cpu.increment_memory(0x41);

    // 6531: RTS 
    return;

    // 6532: JSR $6112
    cpu.call_function(0x6112);

    // 6535: JSR $C450
    cpu.call_function(0xC450);

    // 6538: LDD #$6780
    cpu.m_d = 0x6780;

    // 653B: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 653D: LDB #$66
    cpu.m_b = 0x66;

    // 653F: ADDB $4AF6
    cpu.m_b += cpu.read_memory(0x4AF6);

    // 6542: JSR $E7D3
    cpu.call_function(0xE7D3);

    // 6545: LDA $4AF6
    cpu.m_a = cpu.read_memory(0x4AF6);

    // 6548: JSR $C5A4
    cpu.call_function(0xC5A4);

    // 654B: JSR $C4EB
    cpu.call_function(0xC4EB);

    // 654E: JSR $D923
    cpu.call_function(0xD923);

    // 6551: JSR $612F
    cpu.call_function(0x612F);

    // 6554: LDA <$AC
    cpu.m_a = cpu.read_memory(0xAC);

    // 6556: ANDA #$04
    cpu.m_a &= 0x04;

    // 6558: BEQ $655D
    if (cpu.zero_flag()) cpu.m_pc = 0x655D;

    // 655A: JMP $F261
    goto label_F261;

    // 655D: LDA $481E
    cpu.m_a = cpu.read_memory(0x481E);

    // 6560: ANDA #$10
    cpu.m_a &= 0x10;

    // 6562: BEQ $656B
    if (cpu.zero_flag()) cpu.m_pc = 0x656B;

    // 6564: JSR $D91A
    cpu.call_function(0xD91A);

    // 6567: LDA #$05
    cpu.m_a = 0x05;

    // 6569: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 656B: RTS 
    return;

    // 656C: LDD #$0100
    cpu.m_d = 0x0100;

    // 656F: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 6572: LDD #$0000
    cpu.m_d = 0x0000;

    // 6575: STD $4B0C
    cpu.write_memory16(0x4B0C, cpu.m_d);

    // 6578: STD $48AF
    cpu.write_memory16(0x48AF, cpu.m_d);

    // 657B: LDD #$6480
    cpu.m_d = 0x6480;

    // 657E: STD $4B10
    cpu.write_memory16(0x4B10, cpu.m_d);

    // 6581: JSR $D91A
    cpu.call_function(0xD91A);

    // 6584: LDB #$2C
    cpu.m_b = 0x2C;

    // 6586: TFR B,A
    cpu.m_a = cpu.m_b;

    // 6588: JSR $D8DF
    cpu.call_function(0xD8DF);

    // 658B: INCB 
    cpu.m_b++;

    // 658C: CMPB #$3A
    cpu.compare_b(0x3A);

    // 658E: BCS $6586
    if (cpu.carry_flag()) cpu.m_pc = 0x6586;

    // 6590: INC <$41
    cpu.increment_memory(0x41);

    // 6592: RTS 
    return;

    // 6593: NEG <$64
    // TODO: Convert NEG <$64

    // 6595: LDU $70FE
    cpu.m_u = cpu.read_memory16(0x70FE);

    // 6598: ANDB <$00
    cpu.m_b &= 0x00;

    // 659A: NEG <$00
    // TODO: Convert NEG <$00

    // 659C: LSR $1,X
    // TODO: Convert LSR $1,X

    // 659E: SUBA <$FC
    cpu.m_a -= 0xFC;

    // 65A0: XDECA 
    cpu.m_a--;

    // 65A1: JMP <$83
    // TODO: Invalid branch offset: <$83

    // 65A3: NEG <$01
    // TODO: Convert NEG <$01

    // 65A5: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 65A8: BPL $65BD
    if (!cpu.negative_flag()) cpu.m_pc = 0x65BD;

    // 65AA: LDA #$00
    cpu.m_a = 0x00;

    // 65AC: STA $4B15
    cpu.write_memory(0x4B15, cpu.m_a);

    // 65AF: LDA #$1B
    cpu.m_a = 0x1B;

    // 65B1: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 65B3: CLR $481B
    cpu.write_memory(0x481B, 0);

    // 65B6: CLR $481A
    cpu.write_memory(0x481A, 0);

    // 65B9: CLR $4819
    cpu.write_memory(0x4819, 0);

    // 65BC: RTS 
    return;

    // 65BD: JSR $6112
    cpu.call_function(0x6112);

    // 65C0: LDX #$6593
    cpu.m_x = 0x6593;

    // 65C3: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // 65C5: ANDA #$1F
    cpu.m_a &= 0x1F;

    // 65C7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 65C9: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // 65CB: ANDA #$1F
    cpu.m_a &= 0x1F;

    // 65CD: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 65CF: LDD #$7200
    cpu.m_d = 0x7200;

    // 65D2: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 65D4: LDD #$BE50
    cpu.m_d = 0xBE50;

    // 65D7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 65D9: CMPX #$659F
    cpu.compare_x(0x659F);

    // 65DC: BCS $65C3
    if (cpu.carry_flag()) cpu.m_pc = 0x65C3;

    // 65DE: LDA <$DD
    cpu.m_a = cpu.read_memory(0xDD);

    // 65E0: BPL $65E7
    if (!cpu.negative_flag()) cpu.m_pc = 0x65E7;

    // 65E2: LDD #$6380
    cpu.m_d = 0x6380;

    // 65E5: BRA $65EA
    goto label_65EA;

    // 65E7: LDD #$6680
    cpu.m_d = 0x6680;

    label_65EA:
    // 65EA: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 65EC: JSR $B6C0
    cpu.call_function(0xB6C0);

    // 65EF: JSR $D923
    cpu.call_function(0xD923);

    // 65F2: LDD #$00C8
    cpu.m_d = 0x00C8;

    // 65F5: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 65F7: LDD #$1FF0
    cpu.m_d = 0x1FF0;

    // 65FA: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 65FC: LDD $4B0E
    cpu.m_d = cpu.read_memory16(0x4B0E);

    // 65FF: ASLB 
    cpu.m_b <<= 1;

    // 6600: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 6601: ASLB 
    cpu.m_b <<= 1;

    // 6602: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 6603: ASLB 
    cpu.m_b <<= 1;

    // 6604: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 6605: CMPA #$0A
    cpu.compare_a(0x0A);

    // 6607: BCS $660B
    if (cpu.carry_flag()) cpu.m_pc = 0x660B;

    // 6609: ADDA #$06
    cpu.m_a += 0x06;

    // 660B: JSR $E790
    cpu.call_function(0xE790);

    // 660E: JSR $612F
    cpu.call_function(0x612F);

    // 6611: LDA #$FF
    cpu.m_a = 0xFF;

    // 6613: STA <$DD
    cpu.write_memory(0xDD, cpu.m_a);

    // 6615: LDX #$6593
    cpu.m_x = 0x6593;

    // 6618: LDD <$7B
    cpu.m_d = cpu.read_memory16(0x7B);

    // 661A: ADDD #$FF98
    cpu.m_d += 0xFF98;

    // 661D: SUBD ,X
    // TODO: Complex indexed addressing: ,X

    // 661F: TSTA 
    cpu.test_a();

    // 6620: BPL $6626
    if (!cpu.negative_flag()) cpu.m_pc = 0x6626;

    // 6622: COMA 
    cpu.m_a = ~cpu.m_a;

    // 6623: NEGB 
    cpu.m_b = -cpu.m_b;

    // 6624: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    label_6626:
    // 6626: JMP $6626
    goto label_6626;

    // 6629: CMPD #$0048
    cpu.execute_cmpd_immediate(0x0048);

    // 662D: BCC $6668
    if (!cpu.carry_flag()) cpu.m_pc = 0x6668;

    // 662F: LDD <$79
    cpu.m_d = cpu.read_memory16(0x79);

    // 6631: SUBD $2,X
    // TODO: Fix comma operator: SUBD $2,X

    // 6633: TSTA 
    cpu.test_a();

    // 6634: BPL $663A
    if (!cpu.negative_flag()) cpu.m_pc = 0x663A;

    // 6636: COMA 
    cpu.m_a = ~cpu.m_a;

    // 6637: NEGB 
    cpu.m_b = -cpu.m_b;

    // 6638: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 663A: CMPD #$0034
    cpu.execute_cmpd_immediate(0x0034);

    // 663E: BCC $6668
    if (!cpu.carry_flag()) cpu.m_pc = 0x6668;

    // 6640: ADDD $4AFA
    cpu.m_d += 0x4AFA;

    // 6643: CMPD #$0050
    cpu.execute_cmpd_immediate(0x0050);

    // 6647: BCC $6668
    if (!cpu.carry_flag()) cpu.m_pc = 0x6668;

    // 6649: TFR X,D
    cpu.m_d = cpu.m_x;

    // 664B: SUBD #$6593
    cpu.m_d -= 0x6593;

    // 664E: LSRB 
    cpu.m_b >>= 1;

    // 664F: STB <$DD
    cpu.write_memory(0xDD, cpu.m_b);

    // 6651: STB $4B15
    cpu.write_memory(0x4B15, cpu.m_b);

    // 6654: LDA <$AC
    cpu.m_a = cpu.read_memory(0xAC);

    // 6656: ANDA #$F0
    cpu.m_a &= 0xF0;

    // 6658: BEQ $6667
    if (cpu.zero_flag()) cpu.m_pc = 0x6667;

    // 665A: LDA #$1B
    cpu.m_a = 0x1B;

    // 665C: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 665E: CLR $481B
    cpu.write_memory(0x481B, 0);

    // 6661: CLR $481A
    cpu.write_memory(0x481A, 0);

    // 6664: CLR $4819
    cpu.write_memory(0x4819, 0);

    // 6667: RTS 
    return;

    // 6668: LEAX $4,X
    // TODO: Fix comma operator: LEAX $4,X

    // 666A: CMPX #$659F
    cpu.compare_x(0x659F);

    // 666D: BCS $6618
    if (cpu.carry_flag()) cpu.m_pc = 0x6618;

    // 666F: RTS 
    return;

    // 66CE: LDD $4B0E
    cpu.m_d = cpu.read_memory16(0x4B0E);

    // 66D1: ADDD #$0001
    cpu.m_d += 0x0001;

    // 66D4: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 66D7: CMPD #$0280
    cpu.execute_cmpd_immediate(0x0280);

    // 66DB: BCS $66E3
    if (cpu.carry_flag()) cpu.m_pc = 0x66E3;

    // 66DD: LDD #$FFFF
    cpu.m_d = 0xFFFF;

    // 66E0: STD $4AEC
    cpu.write_memory16(0x4AEC, cpu.m_d);

    label_66E3:
    // 66E3: JMP $66e3
    goto label_66E3;

    // 66E6: BPL $6707
    if (!cpu.negative_flag()) cpu.m_pc = 0x6707;

    // 66E8: LDA #$0B
    cpu.m_a = 0x0B;

    // 66EA: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 66EC: LDU #$4AB6
    cpu.m_u = 0x4AB6;

    // 66EF: LDX #$4520
    cpu.m_x = 0x4520;

    // 66F2: LDA #$08
    cpu.m_a = 0x08;

    // 66F4: JSR $C6F9
    cpu.call_function(0xC6F9);

    // 66F7: LDU #$4A8E
    cpu.m_u = 0x4A8E;

    // 66FA: LDX #$4508
    cpu.m_x = 0x4508;

    // 66FD: LDA #$0B
    cpu.m_a = 0x0B;

    // 66FF: JSR $C6F9
    cpu.call_function(0xC6F9);

    // 6702: LDA #$01
    cpu.m_a = 0x01;

    // 6704: JSR $C2B3
    cpu.call_function(0xC2B3);

    // 6707: RTS 
    return;

    // 6708: INC <$41
    cpu.increment_memory(0x41);

    // 670A: JSR $611E
    cpu.call_function(0x611E);

    // 670D: JSR $D91A
    cpu.call_function(0xD91A);

    // 6710: LDD #$0000
    cpu.m_d = 0x0000;

    // 6713: STD $4B0C
    cpu.write_memory16(0x4B0C, cpu.m_d);

    // 6716: STD $48AF
    cpu.write_memory16(0x48AF, cpu.m_d);

    // 6719: JSR $D9DC
    cpu.call_function(0xD9DC);

    // 671C: JSR $61B5
    cpu.call_function(0x61B5);

    // 671F: JSR $615A
    cpu.call_function(0x615A);

    // 6722: LDU #$5038
    cpu.m_u = 0x5038;

    // 6725: JSR $CDC3
    cpu.call_function(0xCDC3);

    // 6728: LDA $4B34
    cpu.m_a = cpu.read_memory(0x4B34);

    // 672B: CMPA #$FF
    cpu.compare_a(0xFF);

    // 672D: BNE $6737
    if (!cpu.zero_flag()) cpu.m_pc = 0x6737;

    // 672F: LDA $4B06
    cpu.m_a = cpu.read_memory(0x4B06);

    // 6732: STA $4B34
    cpu.write_memory(0x4B34, cpu.m_a);

    // 6735: BRA $6758
    goto label_6758;

    // 6737: LDA $4B06
    cpu.m_a = cpu.read_memory(0x4B06);

    // 673A: CMPA $4B34
    cpu.compare_a(cpu.read_memory(cpu.read_memory(0x4B34)));

    // 673D: BEQ $6758
    if (cpu.zero_flag()) cpu.m_pc = 0x6758;

    // 673F: STA $4B34
    cpu.write_memory(0x4B34, cpu.m_a);

    // 6742: JSR $C20C
    cpu.call_function(0xC20C);

    // 6745: LDA $4592
    cpu.m_a = cpu.read_memory(0x4592);

    // 6748: ANDA #$04
    cpu.m_a &= 0x04;

    // 674A: BNE $6758
    if (!cpu.zero_flag()) cpu.m_pc = 0x6758;

    // 674C: LDX #$6759
    cpu.m_x = 0x6759;

    // 674F: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // 6752: LDB #$09
    cpu.m_b = 0x09;

    // 6754: MUL 
    // TODO: Convert MUL 

    // 6755: ASLA 
    cpu.m_a <<= 1;

    // 6756: JSR [A,X]
    // TODO: Complex indexed addressing: [A,X]

    label_6758:
    // 6758: RTS 
    return;

    // 6759: JSR $7BBD
    cpu.call_function(0x7BBD);

    // 675C: SUBA #$BD
    cpu.m_a -= 0xBD;

    // 675E: XSTX #$BD9E
    // TODO: Convert XSTX #$BD9E

    // 6761: JSR $ADBD
    cpu.call_function(0xADBD);

    // 6764: EORA [$0125,PCR]
    // TODO: Complex indexed addressing: [$0125,PCR]

    // 6768: ANDA <$BD
    cpu.m_a &= 0xBD;

    // 676A: BITA #$BD
    // TODO: Convert BITA #$BD

    // 676C: NEG -$E,X
    // TODO: Convert NEG -$E,X

    // 676E: JSR $CD80
    cpu.call_function(0xCD80);

    // 6771: JSR $D9FA
    cpu.call_function(0xD9FA);

    // 6774: JSR $D985
    cpu.call_function(0xD985);

    // 6777: JSR $63D5
    cpu.call_function(0x63D5);

    // 677A: JSR $761D
    cpu.call_function(0x761D);

    // 677D: JSR $612F
    cpu.call_function(0x612F);

    // 6780: JSR $6DA5
    cpu.call_function(0x6DA5);

    // 6783: JSR $622D
    cpu.call_function(0x622D);

    // 6786: RTS 
    return;

    // 6787: LDA #$05
    cpu.m_a = 0x05;

    // 6789: STA $4B0E
    cpu.write_memory(0x4B0E, cpu.m_a);

    // 678C: LDA #$FF
    cpu.m_a = 0xFF;

    // 678E: STA $4B34
    cpu.write_memory(0x4B34, cpu.m_a);

    // 6791: JSR $D91A
    cpu.call_function(0xD91A);

    // 6794: JSR $BD44
    cpu.call_function(0xBD44);

    // 6797: INC <$41
    cpu.increment_memory(0x41);

    // 6799: RTS 
    return;

    // 679A: LDA #$0D
    cpu.m_a = 0x0D;

    // 679C: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 679E: LDD #$0000
    cpu.m_d = 0x0000;

    // 67A1: STD <$42
    cpu.write_memory16(0x42, cpu.m_d);

    // 67A3: STA <$DD
    cpu.write_memory(0xDD, cpu.m_a);

    // 67A5: LDA $4593
    cpu.m_a = cpu.read_memory(0x4593);

    // 67A8: ANDA #$03
    cpu.m_a &= 0x03;

    // 67AA: ADDA #$06
    cpu.m_a += 0x06;

    // 67AC: STA <$60
    cpu.write_memory(0x60, cpu.m_a);

    // 67AE: STA <$8E
    cpu.write_memory(0x8E, cpu.m_a);

    // 67B0: LDA $4593
    cpu.m_a = cpu.read_memory(0x4593);

    // 67B3: LSRA 
    cpu.m_a >>= 1;

    // 67B4: LSRA 
    cpu.m_a >>= 1;

    // 67B5: ANDA #$03
    cpu.m_a &= 0x03;

    // 67B7: STA $4B18
    cpu.write_memory(0x4B18, cpu.m_a);

    // 67BA: LDA #$00
    cpu.m_a = 0x00;

    // 67BC: STA $4B17
    cpu.write_memory(0x4B17, cpu.m_a);

    // 67BF: STA <$8B
    cpu.write_memory(0x8B, cpu.m_a);

    // 67C1: STA <$8C
    cpu.write_memory(0x8C, cpu.m_a);

    // 67C3: STA <$5C
    cpu.write_memory(0x5C, cpu.m_a);

    // 67C5: STA <$5D
    cpu.write_memory(0x5D, cpu.m_a);

    // 67C7: STA <$5E
    cpu.write_memory(0x5E, cpu.m_a);

    // 67C9: STA <$5F
    cpu.write_memory(0x5F, cpu.m_a);

    // 67CB: STA $4B2D
    cpu.write_memory(0x4B2D, cpu.m_a);

    // 67CE: STA $4B37
    cpu.write_memory(0x4B37, cpu.m_a);

    // 67D1: STA $4B35
    cpu.write_memory(0x4B35, cpu.m_a);

    // 67D4: ORCC #$10
    cpu.m_cc |= 0x10;

    // 67D6: INC $486F
    cpu.increment_memory(0x486F);

    // 67D9: INC $4866
    cpu.increment_memory(0x4866);

    // 67DC: INC $4871
    cpu.increment_memory(0x4871);

    // 67DF: INC $4868
    cpu.increment_memory(0x4868);

    // 67E2: ANDCC #$EF
    // TODO: Convert ANDCC #$EF

    // 67E4: RTS 
    return;

    // 67E5: JSR $61B5
    cpu.call_function(0x61B5);

    // 67E8: JSR $615A
    cpu.call_function(0x615A);

    // 67EB: JSR $61EC
    cpu.call_function(0x61EC);

    // 67EE: LDA #$C0
    cpu.m_a = 0xC0;

    // 67F0: STA $5080
    cpu.write_memory(0x5080, cpu.m_a);

    // 67F3: STA $508A
    cpu.write_memory(0x508A, cpu.m_a);

    // 67F6: LDA #$00
    cpu.m_a = 0x00;

    // 67F8: STA $4813
    cpu.write_memory(0x4813, cpu.m_a);

    // 67FB: INC <$41
    cpu.increment_memory(0x41);

    // 67FD: LDA #$1D
    cpu.m_a = 0x1D;

    // 67FF: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6801: RTS 
    return;

    // 6802: JSR $7A5A
    cpu.call_function(0x7A5A);

    // 6805: LDX #$0008
    cpu.m_x = 0x0008;

    // 6808: LDA $4B15
    cpu.m_a = cpu.read_memory(0x4B15);

    // 680B: INCA 
    cpu.m_a++;

    // 680C: JSR $7720
    cpu.call_function(0x7720);

    // 680F: LDA $4AD6
    cpu.m_a = cpu.read_memory(0x4AD6);

    // 6812: STA $4B16
    cpu.write_memory(0x4B16, cpu.m_a);

    // 6815: LDA $4B15
    cpu.m_a = cpu.read_memory(0x4B15);

    // 6818: CMPA #$1F
    cpu.compare_a(0x1F);

    // 681A: BLS $681E
    // TODO: Convert BLS $681E

    // 681C: LDA #$1F
    cpu.m_a = 0x1F;

    label_681E:
    // 681E: JMP $681e
    goto label_681E;

    // 6821: ADDA $4B18
    cpu.m_a += cpu.read_memory(0x4B18);

    // 6824: CMPA #$0F
    cpu.compare_a(0x0F);

    // 6826: BLS $682A
    // TODO: Convert BLS $682A

    // 6828: LDA #$0F
    cpu.m_a = 0x0F;

    label_682A:
    // 682A: JMP $682a
    goto label_682A;

    // 682D: INC <$41
    cpu.increment_memory(0x41);

    // 682F: LDA #$1F
    cpu.m_a = 0x1F;

    // 6831: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6833: LDA #$00
    cpu.m_a = 0x00;

    // 6835: STA <$DD
    cpu.write_memory(0xDD, cpu.m_a);

    // 6837: RTS 
    return;

    // 6857: INC <$41
    cpu.increment_memory(0x41);

    // 6859: JSR $72C7
    cpu.call_function(0x72C7);

    // 685C: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // 685E: LBMI $6C76
    // TODO: Convert LBMI $6C76

    // 6862: JSR $A849
    cpu.call_function(0xA849);

    label_6864:
    // 6864: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 6865: JMP $6864
    goto label_6864;

    // 6868: JSR $B98B
    cpu.call_function(0xB98B);

    // 686B: JSR $9890
    cpu.call_function(0x9890);

    // 686E: JSR $9558
    cpu.call_function(0x9558);

    // 6871: JSR $8B6D
    cpu.call_function(0x8B6D);

    // 6874: JSR $70DB
    cpu.call_function(0x70DB);

    // 6877: JSR $6DD2
    cpu.call_function(0x6DD2);

    // 687A: LDA #$10
    cpu.m_a = 0x10;

    // 687C: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 687F: JSR $6F5F
    cpu.call_function(0x6F5F);

    // 6882: LDD $4B0E
    cpu.m_d = cpu.read_memory16(0x4B0E);

    // 6885: ADDD #$0001
    cpu.m_d += 0x0001;

    // 6888: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 688B: CMPD #$0028
    cpu.execute_cmpd_immediate(0x0028);

    // 688F: BNE $68A6
    if (!cpu.zero_flag()) cpu.m_pc = 0x68A6;

    // 6891: LDA $4B15
    cpu.m_a = cpu.read_memory(0x4B15);

    // 6894: CMPA #$03
    cpu.compare_a(0x03);

    // 6896: BLT $68A1
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x68A1;

    // 6898: ANDA #$01
    cpu.m_a &= 0x01;

    // 689A: BEQ $68A1
    if (cpu.zero_flag()) cpu.m_pc = 0x68A1;

    // 689C: JSR $BD85
    cpu.call_function(0xBD85);

    // 689F: BRA $68A4
    goto label_68A4;

    // 68A1: JSR $BDA8
    cpu.call_function(0xBDA8);

    label_68A4:
    // 68A4: BRA $68C6
    goto label_68C6;

    // 68A6: CMPD #$00C8
    cpu.execute_cmpd_immediate(0x00C8);

    // 68AA: BNE $68B1
    if (!cpu.zero_flag()) cpu.m_pc = 0x68B1;

    // 68AC: JSR $BDAD
    cpu.call_function(0xBDAD);

    // 68AF: BRA $68C6
    goto label_68C6;

    // 68B1: CMPD #$0190
    cpu.execute_cmpd_immediate(0x0190);

    // 68B5: BNE $68BC
    if (!cpu.zero_flag()) cpu.m_pc = 0x68BC;

    // 68B7: JSR $BD8A
    cpu.call_function(0xBD8A);

    // 68BA: BRA $68C6
    goto label_68C6;

    // 68BC: CMPD #$01A4
    cpu.execute_cmpd_immediate(0x01A4);

    // 68C0: BCS $68C6
    if (cpu.carry_flag()) cpu.m_pc = 0x68C6;

    // 68C2: LDA #$21
    cpu.m_a = 0x21;

    // 68C4: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    label_68C6:
    // 68C6: LDA <$E6
    cpu.m_a = cpu.read_memory(0xE6);

    // 68C8: CMPA #$03
    cpu.compare_a(0x03);

    // 68CA: BCC $68CF
    if (!cpu.carry_flag()) cpu.m_pc = 0x68CF;

    // 68CC: JSR $8F7B
    cpu.call_function(0x8F7B);

    // 68CF: RTS 
    return;

    // 6901: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // 6903: BNE $6911
    if (!cpu.zero_flag()) cpu.m_pc = 0x6911;

    // 6905: LEAX $19,X
    // TODO: Fix comma operator: LEAX $19,X

    // 6908: CMPX #$494B
    cpu.compare_x(0x494B);

    // 690B: BCS $6901
    if (cpu.carry_flag()) cpu.m_pc = 0x6901;

    // 690D: LDA #$23
    cpu.m_a = 0x23;

    // 690F: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    label_6911:
    // 6911: JMP $6911
    goto label_6911;

    // 6912: LDD #$7780
    cpu.m_d = 0x7780;

    // 6915: STD <$56
    cpu.write_memory16(0x56, cpu.m_d);

    // 6917: LDD #$0100
    cpu.m_d = 0x0100;

    // 691A: STD <$58
    cpu.write_memory16(0x58, cpu.m_d);

    // 691C: LDA $4B2D
    cpu.m_a = cpu.read_memory(0x4B2D);

    // 691F: BNE $692A
    if (!cpu.zero_flag()) cpu.m_pc = 0x692A;

    // 6921: LDA $4B14
    cpu.m_a = cpu.read_memory(0x4B14);

    // 6924: CMPA #$04
    cpu.compare_a(0x04);

    // 6926: BNE $692A
    if (!cpu.zero_flag()) cpu.m_pc = 0x692A;

    // 6928: BRA $6930
    goto label_6930;

    label_692A:
    // 692A: JMP $692a
    goto label_692A;

    label_692D:
    // 692D: JMP $692d
    goto label_692D;

    label_6930:
    // 6930: INC <$41
    cpu.increment_memory(0x41);

    // 6932: RTS 
    return;

    // 6933: JSR $733C
    cpu.call_function(0x733C);

    // 6936: JSR $B98B
    cpu.call_function(0xB98B);

    // 6939: JSR $9890
    cpu.call_function(0x9890);

    // 693C: JSR $9558
    cpu.call_function(0x9558);

    // 693F: JSR $6DD2
    cpu.call_function(0x6DD2);

    // 6942: JSR $6F67
    cpu.call_function(0x6F67);

    // 6945: LDD $5080
    cpu.m_d = cpu.read_memory16(0x5080);

    // 6948: CMPD #$3F00
    cpu.execute_cmpd_immediate(0x3F00);

    // 694C: BLT $6952
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x6952;

    // 694E: LDA #$25
    cpu.m_a = 0x25;

    // 6950: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6952: RTS 
    return;

    // 6953: LDA $4B2D
    cpu.m_a = cpu.read_memory(0x4B2D);

    // 6956: BNE $6962
    if (!cpu.zero_flag()) cpu.m_pc = 0x6962;

    // 6958: LDA $4B14
    cpu.m_a = cpu.read_memory(0x4B14);

    // 695B: CMPA #$04
    cpu.compare_a(0x04);

    // 695D: BNE $6962
    if (!cpu.zero_flag()) cpu.m_pc = 0x6962;

    // 695F: JSR $BD53
    cpu.call_function(0xBD53);

    // 6962: JSR $BE0C
    cpu.call_function(0xBE0C);

    // 6965: INC <$41
    cpu.increment_memory(0x41);

    // 6967: RTS 
    return;

    // 6968: JSR $736F
    cpu.call_function(0x736F);

    // 696B: JSR $9898
    cpu.call_function(0x9898);

    // 696E: JSR $9890
    cpu.call_function(0x9890);

    // 6971: JSR $9558
    cpu.call_function(0x9558);

    // 6974: JSR $6DD2
    cpu.call_function(0x6DD2);

    // 6977: JSR $6F67
    cpu.call_function(0x6F67);

    // 697A: LDB <$58
    cpu.m_b = cpu.read_memory(0x58);

    // 697C: NEGB 
    cpu.m_b = -cpu.m_b;

    // 697D: SEX 
    // TODO: Convert SEX 

    // 697E: ADDD <$56
    cpu.m_d += 0x56;

    // 6980: ANDB #$7F
    cpu.m_b &= 0x7F;

    // 6982: STD <$56
    cpu.write_memory16(0x56, cpu.m_d);

    // 6984: CMPD #$7310
    cpu.execute_cmpd_immediate(0x7310);

    // 6988: BHI $6997
    // TODO: Convert BHI $6997

    // 698A: LDA $4B14
    cpu.m_a = cpu.read_memory(0x4B14);

    // 698D: BNE $6993
    if (!cpu.zero_flag()) cpu.m_pc = 0x6993;

    // 698F: LDA #$27
    cpu.m_a = 0x27;

    // 6991: BRA $6995
    goto label_6995;

    // 6993: LDA #$29
    cpu.m_a = 0x29;

    label_6995:
    // 6995: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6997: LDD <$58
    cpu.m_d = cpu.read_memory16(0x58);

    // 6999: ADDD #$0060
    cpu.m_d += 0x0060;

    // 699C: STD <$58
    cpu.write_memory16(0x58, cpu.m_d);

    // 699E: LDA <$83
    cpu.m_a = cpu.read_memory(0x83);

    // 69A0: SUBA #$02
    cpu.m_a -= 0x02;

    // 69A2: BHI $69A6
    // TODO: Convert BHI $69A6

    // 69A4: LDA #$00
    cpu.m_a = 0x00;

    // 69A6: STA <$83
    cpu.write_memory(0x83, cpu.m_a);

    // 69A8: RTS 
    return;

    // 69A9: LDA $4B15
    cpu.m_a = cpu.read_memory(0x4B15);

    // 69AC: DECA 
    cpu.m_a--;

    // 69AD: CMPA #$1F
    cpu.compare_a(0x1F);

    // 69AF: BCS $69B3
    if (cpu.carry_flag()) cpu.m_pc = 0x69B3;

    // 69B1: LDA #$1F
    cpu.m_a = 0x1F;

    // 69B3: STA $4B13
    cpu.write_memory(0x4B13, cpu.m_a);

    // 69B6: ADDA $4B18
    cpu.m_a += cpu.read_memory(0x4B18);

    // 69B9: CMPA #$0F
    cpu.compare_a(0x0F);

    // 69BB: BLS $69BF
    // TODO: Convert BLS $69BF

    // 69BD: LDA #$0F
    cpu.m_a = 0x0F;

    // 69BF: STA $4B19
    cpu.write_memory(0x4B19, cpu.m_a);

    // 69C2: JSR $615A
    cpu.call_function(0x615A);

    // 69C5: JSR $620F
    cpu.call_function(0x620F);

    // 69C8: JSR $A1CE
    cpu.call_function(0xA1CE);

    // 69CB: JSR $B939
    cpu.call_function(0xB939);

    // 69CE: LDD #$0100
    cpu.m_d = 0x0100;

    // 69D1: STD $5086
    cpu.write_memory16(0x5086, cpu.m_d);

    // 69D4: ASRA 
    // TODO: Convert ASRA 

    // 69D5: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // 69D6: STD $5098
    cpu.write_memory16(0x5098, cpu.m_d);

    // 69D9: LDD #$2000
    cpu.m_d = 0x2000;

    // 69DC: STD $509C
    cpu.write_memory16(0x509C, cpu.m_d);

    // 69DF: LDA #$00
    cpu.m_a = 0x00;

    // 69E1: STA <$A7
    cpu.write_memory(0xA7, cpu.m_a);

    // 69E3: STA $4B35
    cpu.write_memory(0x4B35, cpu.m_a);

    // 69E6: STA $4B3D
    cpu.write_memory(0x4B3D, cpu.m_a);

    // 69E9: LDA #$00
    cpu.m_a = 0x00;

    // 69EB: STA $4B0E
    cpu.write_memory(0x4B0E, cpu.m_a);

    // 69EE: JSR $BD94
    cpu.call_function(0xBD94);

    // 69F1: INC <$41
    cpu.increment_memory(0x41);

    // 69F3: RTS 
    return;

    // 69F4: JSR $7390
    cpu.call_function(0x7390);

    // 69F7: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // 69F9: LBMI $6CB6
    // TODO: Convert LBMI $6CB6

    // 69FD: JSR $A849
    cpu.call_function(0xA849);

    // 6A00: JSR $9890
    cpu.call_function(0x9890);

    // 6A03: JSR $9558
    cpu.call_function(0x9558);

    // 6A06: JSR $B98B
    cpu.call_function(0xB98B);

    // 6A09: JSR $70DB
    cpu.call_function(0x70DB);

    // 6A0C: JSR $6E22
    cpu.call_function(0x6E22);

    // 6A0F: LDA #$10
    cpu.m_a = 0x10;

    // 6A11: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 6A14: JSR $6F6F
    cpu.call_function(0x6F6F);

    // 6A17: LDD $5086
    cpu.m_d = cpu.read_memory16(0x5086);

    // 6A1A: ADDD #$0001
    cpu.m_d += 0x0001;

    // 6A1D: CMPD #$0400
    cpu.execute_cmpd_immediate(0x0400);

    // 6A21: BHI $6A26
    // TODO: Convert BHI $6A26

    // 6A23: STD $5086
    cpu.write_memory16(0x5086, cpu.m_d);

    // 6A26: LDA <$43
    cpu.m_a = cpu.read_memory(0x43);

    // 6A28: ANDA #$0F
    cpu.m_a &= 0x0F;

    // 6A2A: BNE $6A39
    if (!cpu.zero_flag()) cpu.m_pc = 0x6A39;

    // 6A2C: LDA $4B0E
    cpu.m_a = cpu.read_memory(0x4B0E);

    // 6A2F: CMPA #$0E
    cpu.compare_a(0x0E);

    // 6A31: BNE $6A36
    if (!cpu.zero_flag()) cpu.m_pc = 0x6A36;

    // 6A33: JSR $BD99
    cpu.call_function(0xBD99);

    // 6A36: INC $4B0E
    cpu.increment_memory(0x4B0E);

    // 6A39: LDA <$A7
    cpu.m_a = cpu.read_memory(0xA7);

    // 6A3B: CMPA #$05
    cpu.compare_a(0x05);

    // 6A3D: BCS $6A4F
    if (cpu.carry_flag()) cpu.m_pc = 0x6A4F;

    // 6A3F: LDA #$01
    cpu.m_a = 0x01;

    // 6A41: STA $4B3D
    cpu.write_memory(0x4B3D, cpu.m_a);

    // 6A44: LDA $5098
    cpu.m_a = cpu.read_memory(0x5098);

    // 6A47: CMPA #$80
    cpu.compare_a(0x80);

    // 6A49: BCC $6A4F
    if (!cpu.carry_flag()) cpu.m_pc = 0x6A4F;

    // 6A4B: LDA #$2B
    cpu.m_a = 0x2B;

    // 6A4D: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6A4F: RTS 
    return;

    // 6A50: LDA #$00
    cpu.m_a = 0x00;

    // 6A52: STA <$98
    cpu.write_memory(0x98, cpu.m_a);

    // 6A54: STA $4B36
    cpu.write_memory(0x4B36, cpu.m_a);

    // 6A57: LDA $4B15
    cpu.m_a = cpu.read_memory(0x4B15);

    // 6A5A: CMPA #$1F
    cpu.compare_a(0x1F);

    // 6A5C: BLS $6A60
    // TODO: Convert BLS $6A60

    // 6A5E: LDA #$1F
    cpu.m_a = 0x1F;

    // 6A60: STA $4B12
    cpu.write_memory(0x4B12, cpu.m_a);

    // 6A63: ADDA $4B18
    cpu.m_a += cpu.read_memory(0x4B18);

    // 6A66: CMPA #$0F
    cpu.compare_a(0x0F);

    // 6A68: BLS $6A6C
    // TODO: Convert BLS $6A6C

    // 6A6A: LDA #$0F
    cpu.m_a = 0x0F;

    // 6A6C: STA $4B19
    cpu.write_memory(0x4B19, cpu.m_a);

    // 6A6F: JSR $83A4
    cpu.call_function(0x83A4);

    // 6A72: JSR $BD71
    cpu.call_function(0xBD71);

    // 6A75: LDD #$0000
    cpu.m_d = 0x0000;

    // 6A78: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 6A7B: INC <$41
    cpu.increment_memory(0x41);

    // 6A7D: RTS 
    return;

    // 6A7E: JSR $615A
    cpu.call_function(0x615A);

    // 6A81: JSR $8341
    cpu.call_function(0x8341);

    // 6A84: LDA #$2F
    cpu.m_a = 0x2F;

    // 6A86: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6A88: RTS 
    return;

    // 6A89: JSR $73EA
    cpu.call_function(0x73EA);

    // 6A8C: JSR $9890
    cpu.call_function(0x9890);

    // 6A8F: JSR $9558
    cpu.call_function(0x9558);

    // 6A92: JSR $B98B
    cpu.call_function(0xB98B);

    // 6A95: JSR $6FE0
    cpu.call_function(0x6FE0);

    // 6A98: LDD $4B0E
    cpu.m_d = cpu.read_memory16(0x4B0E);

    // 6A9B: ADDD #$0001
    cpu.m_d += 0x0001;

    // 6A9E: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 6AA1: SUBD #$0011
    cpu.m_d -= 0x0011;

    // 6AA4: BCS $6AAA
    if (cpu.carry_flag()) cpu.m_pc = 0x6AAA;

    // 6AA6: LDA #$2D
    cpu.m_a = 0x2D;

    // 6AA8: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6AAA: RTS 
    return;

    // 6AAB: LDD #$0000
    cpu.m_d = 0x0000;

    // 6AAE: STD $5098
    cpu.write_memory16(0x5098, cpu.m_d);

    // 6AB1: STD $509A
    cpu.write_memory16(0x509A, cpu.m_d);

    // 6AB4: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 6AB7: JSR $6FF1
    cpu.call_function(0x6FF1);

    // 6ABA: JSR $8341
    cpu.call_function(0x8341);

    // 6ABD: INC <$41
    cpu.increment_memory(0x41);

    // 6ABF: JSR $7413
    cpu.call_function(0x7413);

    // 6AC2: JSR $9890
    cpu.call_function(0x9890);

    // 6AC5: JSR $9558
    cpu.call_function(0x9558);

    // 6AC8: JSR $B98B
    cpu.call_function(0xB98B);

    // 6ACB: JSR $6FF1
    cpu.call_function(0x6FF1);

    // 6ACE: LDD $4B0E
    cpu.m_d = cpu.read_memory16(0x4B0E);

    // 6AD1: ADDD #$0001
    cpu.m_d += 0x0001;

    // 6AD4: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 6AD7: SUBD #$0011
    cpu.m_d -= 0x0011;

    // 6ADA: BCS $6AFE
    if (cpu.carry_flag()) cpu.m_pc = 0x6AFE;

    // 6ADC: LDX $5098
    cpu.m_x = cpu.read_memory16(0x5098);

    // 6ADF: LDU $509A
    cpu.m_u = cpu.read_memory16(0x509A);

    // 6AE2: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // 6AE5: PSHS U,X,D
    // TODO: Convert PSHS U,X,D

    // 6AE7: JSR $615A
    cpu.call_function(0x615A);

    // 6AEA: PULS D,X,U
    // TODO: Convert PULS D,X,U

    // 6AEC: STX $5098
    cpu.write_memory16(0x5098, cpu.m_x);

    // 6AEF: STU $509A
    cpu.write_memory16(0x509A, cpu.m_u);

    // 6AF2: STD $509C
    cpu.write_memory16(0x509C, cpu.m_d);

    // 6AF5: LDA #$00
    cpu.m_a = 0x00;

    // 6AF7: STA $4B36
    cpu.write_memory(0x4B36, cpu.m_a);

    // 6AFA: LDA #$2F
    cpu.m_a = 0x2F;

    // 6AFC: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6AFE: RTS 
    return;

    // 6AFF: LDA #$01
    cpu.m_a = 0x01;

    // 6B01: STA <$98
    cpu.write_memory(0x98, cpu.m_a);

    // 6B03: JSR $615A
    cpu.call_function(0x615A);

    // 6B06: JSR $8341
    cpu.call_function(0x8341);

    // 6B09: LDA #$FF
    cpu.m_a = 0xFF;

    // 6B0B: STA $4B36
    cpu.write_memory(0x4B36, cpu.m_a);

    // 6B0E: LDA $4B19
    cpu.m_a = cpu.read_memory(0x4B19);

    // 6B11: ADDA $4B17
    cpu.m_a += cpu.read_memory(0x4B17);

    // 6B14: CMPA #$0F
    cpu.compare_a(0x0F);

    // 6B16: BLS $6B1A
    // TODO: Convert BLS $6B1A

    // 6B18: LDA #$0F
    cpu.m_a = 0x0F;

    // 6B1A: STA $4B19
    cpu.write_memory(0x4B19, cpu.m_a);

    // 6B1D: LDA #$2F
    cpu.m_a = 0x2F;

    // 6B1F: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6B21: RTS 
    return;

    // 6B22: LDA #$00
    cpu.m_a = 0x00;

    // 6B24: STA $4B3E
    cpu.write_memory(0x4B3E, cpu.m_a);

    // 6B27: STA $4B0E
    cpu.write_memory(0x4B0E, cpu.m_a);

    // 6B2A: LDD #$0300
    cpu.m_d = 0x0300;

    // 6B2D: STD $5086
    cpu.write_memory16(0x5086, cpu.m_d);

    // 6B30: INC <$41
    cpu.increment_memory(0x41);

    // 6B32: JSR $743C
    cpu.call_function(0x743C);

    // 6B35: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // 6B37: LBMI $6CE1
    // TODO: Convert LBMI $6CE1

    // 6B3B: JSR $A849
    cpu.call_function(0xA849);

    // 6B3E: JSR $AD6C
    cpu.call_function(0xAD6C);

    // 6B41: JSR $8495
    cpu.call_function(0x8495);

    // 6B44: JSR $9886
    cpu.call_function(0x9886);

    // 6B47: JSR $9558
    cpu.call_function(0x9558);

    // 6B4A: JSR $70DB
    cpu.call_function(0x70DB);

    // 6B4D: JSR $6EA1
    cpu.call_function(0x6EA1);

    // 6B50: LDA #$10
    cpu.m_a = 0x10;

    // 6B52: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 6B55: JSR $703B
    cpu.call_function(0x703B);

    // 6B58: LDA <$43
    cpu.m_a = cpu.read_memory(0x43);

    // 6B5A: ANDA #$0F
    cpu.m_a &= 0x0F;

    // 6B5C: BNE $6B99
    if (!cpu.zero_flag()) cpu.m_pc = 0x6B99;

    // 6B5E: LDA $4B0E
    cpu.m_a = cpu.read_memory(0x4B0E);

    // 6B61: CMPA #$02
    cpu.compare_a(0x02);

    // 6B63: BNE $6B68
    if (!cpu.zero_flag()) cpu.m_pc = 0x6B68;

    // 6B65: JSR $BD9E
    cpu.call_function(0xBD9E);

    // 6B68: LDA $4B12
    cpu.m_a = cpu.read_memory(0x4B12);

    // 6B6B: LSRA 
    cpu.m_a >>= 1;

    // 6B6C: BCS $6B83
    if (cpu.carry_flag()) cpu.m_pc = 0x6B83;

    // 6B6E: LDA $4B0E
    cpu.m_a = cpu.read_memory(0x4B0E);

    // 6B71: CMPA #$10
    cpu.compare_a(0x10);

    // 6B73: BNE $6B7A
    if (!cpu.zero_flag()) cpu.m_pc = 0x6B7A;

    // 6B75: JSR $BD6C
    cpu.call_function(0xBD6C);

    // 6B78: BRA $6B81
    goto label_6B81;

    // 6B7A: CMPA #$18
    cpu.compare_a(0x18);

    // 6B7C: BNE $6B81
    if (!cpu.zero_flag()) cpu.m_pc = 0x6B81;

    // 6B7E: JSR $BD76
    cpu.call_function(0xBD76);

    label_6B81:
    // 6B81: BRA $6B96
    goto label_6B96;

    // 6B83: LDA $4B0E
    cpu.m_a = cpu.read_memory(0x4B0E);

    // 6B86: CMPA #$10
    cpu.compare_a(0x10);

    // 6B88: BNE $6B8F
    if (!cpu.zero_flag()) cpu.m_pc = 0x6B8F;

    // 6B8A: JSR $BD30
    cpu.call_function(0xBD30);

    // 6B8D: BRA $6B96
    goto label_6B96;

    // 6B8F: CMPA #$16
    cpu.compare_a(0x16);

    // 6B91: BNE $6B96
    if (!cpu.zero_flag()) cpu.m_pc = 0x6B96;

    // 6B93: JSR $BD62
    cpu.call_function(0xBD62);

    label_6B96:
    // 6B96: INC $4B0E
    cpu.increment_memory(0x4B0E);

    // 6B99: LDA <$92
    cpu.m_a = cpu.read_memory(0x92);

    // 6B9B: BEQ $6BDA
    if (cpu.zero_flag()) cpu.m_pc = 0x6BDA;

    // 6B9D: LDD <$93
    cpu.m_d = cpu.read_memory16(0x93);

    // 6B9F: SUBD $5098
    cpu.m_d -= 0x5098;

    // 6BA2: SUBD #$0800
    cpu.m_d -= 0x0800;

    // 6BA5: BHI $6BDA
    // TODO: Convert BHI $6BDA

    // 6BA7: LDA $4845
    cpu.m_a = cpu.read_memory(0x4845);

    // 6BAA: BNE $6BC6
    if (!cpu.zero_flag()) cpu.m_pc = 0x6BC6;

    // 6BAC: LDA #$01
    cpu.m_a = 0x01;

    // 6BAE: STA $4B3E
    cpu.write_memory(0x4B3E, cpu.m_a);

    // 6BB1: JSR $BDB2
    cpu.call_function(0xBDB2);

    // 6BB4: JSR $9874
    cpu.call_function(0x9874);

    // 6BB7: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // 6BB9: LBLE $6CE1
    // TODO: Convert LBLE $6CE1

    // 6BBD: LDA #$31
    cpu.m_a = 0x31;

    // 6BBF: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6BC1: JSR $BD3A
    cpu.call_function(0xBD3A);

    // 6BC4: BRA $6BDA
    goto label_6BDA;

    // 6BC6: LDA #$11
    cpu.m_a = 0x11;

    // 6BC8: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6BCA: LDA $4B15
    cpu.m_a = cpu.read_memory(0x4B15);

    // 6BCD: CMPA #$03
    cpu.compare_a(0x03);

    // 6BCF: BLT $6BDA
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x6BDA;

    // 6BD1: ANDA #$01
    cpu.m_a &= 0x01;

    // 6BD3: BEQ $6BDA
    if (cpu.zero_flag()) cpu.m_pc = 0x6BDA;

    // 6BD5: JSR $BD17
    cpu.call_function(0xBD17);

    // 6BD8: BRA $6BDA
    goto label_6BDA;

    label_6BDA:
    // 6BDA: RTS 
    return;

    // 6BDB: JSR $61B5
    cpu.call_function(0x61B5);

    // 6BDE: JSR $615A
    cpu.call_function(0x615A);

    // 6BE1: LDA #$C0
    cpu.m_a = 0xC0;

    // 6BE3: STA $5080
    cpu.write_memory(0x5080, cpu.m_a);

    // 6BE6: STA $508A
    cpu.write_memory(0x508A, cpu.m_a);

    // 6BE9: LDA #$04
    cpu.m_a = 0x04;

    // 6BEB: STA $4B0E
    cpu.write_memory(0x4B0E, cpu.m_a);

    // 6BEE: INC <$41
    cpu.increment_memory(0x41);

    // 6BF0: RTS 
    return;

    // 6BF1: LDA <$43
    cpu.m_a = cpu.read_memory(0x43);

    // 6BF3: ANDA #$0F
    cpu.m_a &= 0x0F;

    // 6BF5: BNE $6C2C
    if (!cpu.zero_flag()) cpu.m_pc = 0x6C2C;

    // 6BF7: DEC $4B0E
    cpu.decrement_memory(0x4B0E);

    // 6BFA: LDA $4B0E
    cpu.m_a = cpu.read_memory(0x4B0E);

    // 6BFD: CMPA #$03
    cpu.compare_a(0x03);

    // 6BFF: BNE $6C09
    if (!cpu.zero_flag()) cpu.m_pc = 0x6C09;

    // 6C01: LDA $4845
    cpu.m_a = cpu.read_memory(0x4845);

    // 6C04: BEQ $6C09
    if (cpu.zero_flag()) cpu.m_pc = 0x6C09;

    // 6C06: JSR $9806
    cpu.call_function(0x9806);

    // 6C09: LDA $4B0E
    cpu.m_a = cpu.read_memory(0x4B0E);

    // 6C0C: CMPA #$02
    cpu.compare_a(0x02);

    // 6C0E: BNE $6C13
    if (!cpu.zero_flag()) cpu.m_pc = 0x6C13;

    // 6C10: JSR $9775
    cpu.call_function(0x9775);

    // 6C13: LDA $4B0E
    cpu.m_a = cpu.read_memory(0x4B0E);

    // 6C16: CMPA #$01
    cpu.compare_a(0x01);

    // 6C18: BNE $6C22
    if (!cpu.zero_flag()) cpu.m_pc = 0x6C22;

    // 6C1A: LDA $4845
    cpu.m_a = cpu.read_memory(0x4845);

    // 6C1D: BEQ $6C22
    if (cpu.zero_flag()) cpu.m_pc = 0x6C22;

    // 6C1F: JSR $953B
    cpu.call_function(0x953B);

    // 6C22: LDA $4B0E
    cpu.m_a = cpu.read_memory(0x4B0E);

    // 6C25: CMPA #$00
    cpu.compare_a(0x00);

    // 6C27: BNE $6C2C
    if (!cpu.zero_flag()) cpu.m_pc = 0x6C2C;

    // 6C29: JSR $9722
    cpu.call_function(0x9722);

    // 6C2C: JSR $7519
    cpu.call_function(0x7519);

    // 6C2F: JSR $9558
    cpu.call_function(0x9558);

    // 6C32: JSR $6F5F
    cpu.call_function(0x6F5F);

    // 6C35: LDA $4B0E
    cpu.m_a = cpu.read_memory(0x4B0E);

    // 6C38: CMPA #$FE
    cpu.compare_a(0xFE);

    // 6C3A: BNE $6C75
    if (!cpu.zero_flag()) cpu.m_pc = 0x6C75;

    // 6C3C: LDA $4B15
    cpu.m_a = cpu.read_memory(0x4B15);

    // 6C3F: INCA 
    cpu.m_a++;

    // 6C40: CMPA #$62
    cpu.compare_a(0x62);

    // 6C42: BLS $6C46
    // TODO: Convert BLS $6C46

    // 6C44: LDA #$62
    cpu.m_a = 0x62;

    // 6C46: STA $4B15
    cpu.write_memory(0x4B15, cpu.m_a);

    // 6C49: LDA $4B15
    cpu.m_a = cpu.read_memory(0x4B15);

    // 6C4C: CMPA #$05
    cpu.compare_a(0x05);

    // 6C4E: BCC $6C5D
    if (!cpu.carry_flag()) cpu.m_pc = 0x6C5D;

    // 6C50: LDA $4B17
    cpu.m_a = cpu.read_memory(0x4B17);

    // 6C53: INCA 
    cpu.m_a++;

    // 6C54: CMPA #$04
    cpu.compare_a(0x04);

    // 6C56: BLS $6C5A
    // TODO: Convert BLS $6C5A

    // 6C58: LDA #$04
    cpu.m_a = 0x04;

    // 6C5A: STA $4B17
    cpu.write_memory(0x4B17, cpu.m_a);

    // 6C5D: LDA $4B18
    cpu.m_a = cpu.read_memory(0x4B18);

    // 6C60: ADDA $4B17
    cpu.m_a += cpu.read_memory(0x4B17);

    // 6C63: CMPA #$0F
    cpu.compare_a(0x0F);

    // 6C65: BLS $6C69
    // TODO: Convert BLS $6C69

    // 6C67: LDA #$0F
    cpu.m_a = 0x0F;

    // 6C69: STA $4B18
    cpu.write_memory(0x4B18, cpu.m_a);

    // 6C6C: LDA #$FF
    cpu.m_a = 0xFF;

    // 6C6E: STA $4B2D
    cpu.write_memory(0x4B2D, cpu.m_a);

    // 6C71: LDA #$1D
    cpu.m_a = 0x1D;

    // 6C73: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6C75: RTS 
    return;

    // 6C76: JSR $BD58
    cpu.call_function(0xBD58);

    // 6C79: LDA #$36
    cpu.m_a = 0x36;

    // 6C7B: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6C7D: LDD #$0000
    cpu.m_d = 0x0000;

    // 6C80: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 6C83: RTS 
    return;

    // 6C84: JSR $7315
    cpu.call_function(0x7315);

    // 6C87: JSR $A849
    cpu.call_function(0xA849);

    // 6C8A: JSR $987F
    cpu.call_function(0x987F);

    // 6C8D: JSR $9898
    cpu.call_function(0x9898);

    // 6C90: JSR $B98B
    cpu.call_function(0xB98B);

    // 6C93: LDD #$FB01
    cpu.m_d = 0xFB01;

    // 6C96: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 6C99: LDD #$3FCE
    cpu.m_d = 0x3FCE;

    // 6C9C: STD $5024
    cpu.write_memory16(0x5024, cpu.m_d);

    // 6C9F: JSR $CE24
    cpu.call_function(0xCE24);

    // 6CA2: LDD $4B0E
    cpu.m_d = cpu.read_memory16(0x4B0E);

    // 6CA5: ADDD #$0001
    cpu.m_d += 0x0001;

    // 6CA8: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 6CAB: CMPD #$0028
    cpu.execute_cmpd_immediate(0x0028);

    // 6CAF: BCS $6CB5
    if (cpu.carry_flag()) cpu.m_pc = 0x6CB5;

    // 6CB1: LDA #$3B
    cpu.m_a = 0x3B;

    // 6CB3: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6CB5: RTS 
    return;

    // 6CB6: JSR $BD58
    cpu.call_function(0xBD58);

    // 6CB9: LDA #$38
    cpu.m_a = 0x38;

    // 6CBB: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6CBD: LDD #$0000
    cpu.m_d = 0x0000;

    // 6CC0: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 6CC3: RTS 
    return;

    // 6CC4: JSR $73C3
    cpu.call_function(0x73C3);

    // 6CC7: JSR $A849
    cpu.call_function(0xA849);

    // 6CCA: JSR $987F
    cpu.call_function(0x987F);

    // 6CCD: LDD $4B0E
    cpu.m_d = cpu.read_memory16(0x4B0E);

    // 6CD0: ADDD #$0001
    cpu.m_d += 0x0001;

    // 6CD3: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 6CD6: CMPD #$0028
    cpu.execute_cmpd_immediate(0x0028);

    // 6CDA: BCS $6CE0
    if (cpu.carry_flag()) cpu.m_pc = 0x6CE0;

    // 6CDC: LDA #$3B
    cpu.m_a = 0x3B;

    // 6CDE: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6CE0: RTS 
    return;

    // 6CE1: JSR $BD58
    cpu.call_function(0xBD58);

    // 6CE4: LDA #$3A
    cpu.m_a = 0x3A;

    // 6CE6: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6CE8: LDD #$0000
    cpu.m_d = 0x0000;

    // 6CEB: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 6CEE: RTS 
    return;

    // 6CEF: JSR $74D5
    cpu.call_function(0x74D5);

    // 6CF2: JSR $A849
    cpu.call_function(0xA849);

    // 6CF5: JSR $987F
    cpu.call_function(0x987F);

    // 6CF8: LDD $4B0E
    cpu.m_d = cpu.read_memory16(0x4B0E);

    // 6CFB: ADDD #$0001
    cpu.m_d += 0x0001;

    // 6CFE: STD $4B0E
    cpu.write_memory16(0x4B0E, cpu.m_d);

    // 6D01: CMPD #$0028
    cpu.execute_cmpd_immediate(0x0028);

    // 6D05: BCS $6D0B
    if (cpu.carry_flag()) cpu.m_pc = 0x6D0B;

    // 6D07: LDA #$3B
    cpu.m_a = 0x3B;

    // 6D09: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6D0B: RTS 
    return;

    // 6D0C: JSR $BD49
    cpu.call_function(0xBD49);

    // 6D0F: JSR $BD0D
    cpu.call_function(0xBD0D);

    // 6D12: INC <$41
    cpu.increment_memory(0x41);

    // 6D14: RTS 
    return;

    // 6D15: JSR $61B5
    cpu.call_function(0x61B5);

    // 6D18: JSR $615A
    cpu.call_function(0x615A);

    // 6D1B: JSR $61EC
    cpu.call_function(0x61EC);

    // 6D1E: LDU #$5038
    cpu.m_u = 0x5038;

    // 6D21: JSR $CDC3
    cpu.call_function(0xCDC3);

    // 6D24: JSR $C0FF
    cpu.call_function(0xC0FF);

    // 6D27: JSR $CA8C
    cpu.call_function(0xCA8C);

    // 6D2A: LDA $4AEC
    cpu.m_a = cpu.read_memory(0x4AEC);

    // 6D2D: BMI $6D33
    if (cpu.negative_flag()) cpu.m_pc = 0x6D33;

    // 6D2F: LDA #$0F
    cpu.m_a = 0x0F;

    // 6D31: BRA $6D38
    goto label_6D38;

    // 6D33: JSR $BD7B
    cpu.call_function(0xBD7B);

    // 6D36: LDA #$05
    cpu.m_a = 0x05;

    label_6D38:
    // 6D38: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6D3A: RTS 
    return;

    // 6D3B: LDD #$7304
    cpu.m_d = 0x7304;

    // 6D3E: STD <$56
    cpu.write_memory16(0x56, cpu.m_d);

    // 6D40: LDD #$0AFF
    cpu.m_d = 0x0AFF;

    // 6D43: STD <$58
    cpu.write_memory16(0x58, cpu.m_d);

    // 6D45: JSR $61EC
    cpu.call_function(0x61EC);

    // 6D48: LDU #$5038
    cpu.m_u = 0x5038;

    // 6D4B: JSR $CDC3
    cpu.call_function(0xCDC3);

    // 6D4E: INC <$41
    cpu.increment_memory(0x41);

    // 6D50: JSR $BD8F
    cpu.call_function(0xBD8F);

    // 6D53: RTS 
    return;

    // 6D54: JSR $75B9
    cpu.call_function(0x75B9);

    // 6D57: JSR $9558
    cpu.call_function(0x9558);

    // 6D5A: JSR $9890
    cpu.call_function(0x9890);

    // 6D5D: LDB <$58
    cpu.m_b = cpu.read_memory(0x58);

    // 6D5F: SEX 
    // TODO: Convert SEX 

    // 6D60: ADDD <$56
    cpu.m_d += 0x56;

    // 6D62: ADDD #$0080
    cpu.m_d += 0x0080;

    // 6D65: ANDB #$7F
    cpu.m_b &= 0x7F;

    // 6D67: STD <$56
    cpu.write_memory16(0x56, cpu.m_d);

    // 6D69: CMPD #$7680
    cpu.execute_cmpd_immediate(0x7680);

    // 6D6D: BCS $6D73
    if (cpu.carry_flag()) cpu.m_pc = 0x6D73;

    // 6D6F: LDA #$13
    cpu.m_a = 0x13;

    // 6D71: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6D73: LDD <$58
    cpu.m_d = cpu.read_memory16(0x58);

    // 6D75: SUBD #$0010
    cpu.m_d -= 0x0010;

    // 6D78: BPL $6D7D
    if (!cpu.negative_flag()) cpu.m_pc = 0x6D7D;

    // 6D7A: LDD #$0000
    cpu.m_d = 0x0000;

    // 6D7D: STD <$58
    cpu.write_memory16(0x58, cpu.m_d);

    // 6D7F: RTS 
    return;

    // 6D80: JSR $BB7B
    cpu.call_function(0xBB7B);

    // 6D83: INC <$41
    cpu.increment_memory(0x41);

    // 6D85: RTS 
    return;

    // 6D86: JSR $75D9
    cpu.call_function(0x75D9);

    // 6D89: LDA $48A1
    cpu.m_a = cpu.read_memory(0x48A1);

    // 6D8C: CMPA #$01
    cpu.compare_a(0x01);

    // 6D8E: BCS $6D94
    if (cpu.carry_flag()) cpu.m_pc = 0x6D94;

    // 6D90: LDA #$15
    cpu.m_a = 0x15;

    // 6D92: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6D94: RTS 
    return;

    // 6D95: INC <$41
    cpu.increment_memory(0x41);

    // 6D97: RTS 
    return;

    // 6D98: JSR $760A
    cpu.call_function(0x760A);

    // 6D9B: LDA $48A1
    cpu.m_a = cpu.read_memory(0x48A1);

    // 6D9E: BNE $6DA4
    if (!cpu.zero_flag()) cpu.m_pc = 0x6DA4;

    // 6DA0: LDA #$33
    cpu.m_a = 0x33;

    // 6DA2: STA <$41
    cpu.write_memory(0x41, cpu.m_a);

    // 6DA4: RTS 
    return;

    // 6DA5: LDD <$89
    cpu.m_d = cpu.read_memory16(0x89);

    // 6DA7: ADDD #$0080
    cpu.m_d += 0x0080;

    // 6DAA: STD <$89
    cpu.write_memory16(0x89, cpu.m_d);

    // 6DAC: LDD $4B26
    cpu.m_d = cpu.read_memory16(0x4B26);

    // 6DAF: ADDD #$0080
    cpu.m_d += 0x0080;

    // 6DB2: STD $4B26
    cpu.write_memory16(0x4B26, cpu.m_d);

    // 6DB5: RTS 
    return;

    // 6DB6: LDD $4B24
    cpu.m_d = cpu.read_memory16(0x4B24);

    // 6DB9: ADDD #$FF80
    cpu.m_d += 0xFF80;

    // 6DBC: STD $4B24
    cpu.write_memory16(0x4B24, cpu.m_d);

    // 6DBF: RTS 
    return;

    // 6DC0: LDD $4B26
    cpu.m_d = cpu.read_memory16(0x4B26);

    // 6DC3: ADDD #$0080
    cpu.m_d += 0x0080;

    // 6DC6: STD $4B26
    cpu.write_memory16(0x4B26, cpu.m_d);

    // 6DC9: RTS 
    return;

    // 6DCA: LDD <$89
    cpu.m_d = cpu.read_memory16(0x89);

    // 6DCC: ADDD #$0080
    cpu.m_d += 0x0080;

    // 6DCF: STD <$89
    cpu.write_memory16(0x89, cpu.m_d);

    // 6DD1: RTS 
    return;

    // 6DD2: LDA <$63
    cpu.m_a = cpu.read_memory(0x63);

    // 6DD4: BEQ $6DF0
    if (cpu.zero_flag()) cpu.m_pc = 0x6DF0;

    // 6DD6: BLE $6DDF
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x6DDF;

    // 6DD8: DEC <$63
    cpu.decrement_memory(0x63);

    // 6DDA: LDD #$04FF
    cpu.m_d = 0x04FF;

    // 6DDD: BRA $6DE4
    goto label_6DE4;

    // 6DDF: INC <$63
    cpu.increment_memory(0x63);

    // 6DE1: LDD #$FB01
    cpu.m_d = 0xFB01;

    label_6DE4:
    // 6DE4: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 6DE7: LDD #$3FCE
    cpu.m_d = 0x3FCE;

    // 6DEA: STD $5024
    cpu.write_memory16(0x5024, cpu.m_d);

    // 6DED: JSR $CE24
    cpu.call_function(0xCE24);

    // 6DF0: JSR $6EA2
    cpu.call_function(0x6EA2);

    // 6DF3: JSR $70BD
    cpu.call_function(0x70BD);

    // 6DF6: JSR $70CC
    cpu.call_function(0x70CC);

    // 6DF9: RTS 
    return;

    // 6DFA: LDA <$63
    cpu.m_a = cpu.read_memory(0x63);

    // 6DFC: BEQ $6E18
    if (cpu.zero_flag()) cpu.m_pc = 0x6E18;

    // 6DFE: BLE $6E07
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x6E07;

    // 6E00: DEC <$63
    cpu.decrement_memory(0x63);

    // 6E02: LDD #$04FF
    cpu.m_d = 0x04FF;

    // 6E05: BRA $6E0C
    goto label_6E0C;

    // 6E07: INC <$63
    cpu.increment_memory(0x63);

    // 6E09: LDD #$FB01
    cpu.m_d = 0xFB01;

    label_6E0C:
    // 6E0C: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 6E0F: LDD #$3FCE
    cpu.m_d = 0x3FCE;

    // 6E12: STD $5024
    cpu.write_memory16(0x5024, cpu.m_d);

    // 6E15: JSR $CE24
    cpu.call_function(0xCE24);

    // 6E18: JSR $6ECB
    cpu.call_function(0x6ECB);

    // 6E1B: JSR $70BD
    cpu.call_function(0x70BD);

    // 6E1E: JSR $70CC
    cpu.call_function(0x70CC);

    // 6E21: RTS 
    return;

    // 6E22: LDA <$63
    cpu.m_a = cpu.read_memory(0x63);

    // 6E24: BEQ $6E2E
    if (cpu.zero_flag()) cpu.m_pc = 0x6E2E;

    // 6E26: BLE $6E2B
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x6E2B;

    // 6E28: DECA 
    cpu.m_a--;

    // 6E29: BRA $6E2C
    goto label_6E2C;

    // 6E2B: INCA 
    cpu.m_a++;

    label_6E2C:
    // 6E2C: STA <$63
    cpu.write_memory(0x63, cpu.m_a);

    // 6E2E: LDA <$63
    cpu.m_a = cpu.read_memory(0x63);

    // 6E30: BPL $6E33
    if (!cpu.negative_flag()) cpu.m_pc = 0x6E33;

    // 6E32: NEGA 
    cpu.m_a = -cpu.m_a;

    // 6E33: LDB #$20
    cpu.m_b = 0x20;

    // 6E35: MUL 
    // TODO: Convert MUL 

    // 6E36: TST <$63
    // TODO: Convert TST <$63

    // 6E38: BPL $6E3E
    if (!cpu.negative_flag()) cpu.m_pc = 0x6E3E;

    // 6E3A: COMA 
    cpu.m_a = ~cpu.m_a;

    // 6E3B: NEGB 
    cpu.m_b = -cpu.m_b;

    // 6E3C: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 6E3E: STD <$A5
    cpu.write_memory16(0xA5, cpu.m_d);

    // 6E40: LDA <$7D
    cpu.m_a = cpu.read_memory(0x7D);

    // 6E42: BPL $6E45
    if (!cpu.negative_flag()) cpu.m_pc = 0x6E45;

    // 6E44: COMA 
    cpu.m_a = ~cpu.m_a;

    // 6E45: LDB #$02
    cpu.m_b = 0x02;

    // 6E47: MUL 
    // TODO: Convert MUL 

    // 6E48: TST <$7D
    // TODO: Convert TST <$7D

    // 6E4A: BPL $6E50
    if (!cpu.negative_flag()) cpu.m_pc = 0x6E50;

    // 6E4C: COMA 
    cpu.m_a = ~cpu.m_a;

    // 6E4D: NEGB 
    cpu.m_b = -cpu.m_b;

    // 6E4E: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 6E50: ADDD <$A5
    cpu.m_d += 0xA5;

    // 6E52: TST <$63
    // TODO: Convert TST <$63

    // 6E54: BNE $6E70
    if (!cpu.zero_flag()) cpu.m_pc = 0x6E70;

    // 6E56: SUBD <$A3
    cpu.m_d -= 0xA3;

    // 6E58: BLE $6E65
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x6E65;

    // 6E5A: CMPD #$0010
    cpu.execute_cmpd_immediate(0x0010);

    // 6E5E: BLE $6E63
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x6E63;

    // 6E60: LDD #$0010
    cpu.m_d = 0x0010;

    // 6E63: BRA $6E6E
    goto label_6E6E;

    // 6E65: CMPD #$FFF0
    cpu.execute_cmpd_immediate(0xFFF0);

    // 6E69: BGE $6E6E
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x6E6E;

    // 6E6B: LDD #$FFF0
    cpu.m_d = 0xFFF0;

    label_6E6E:
    // 6E6E: BRA $6E88
    goto label_6E88;

    // 6E70: SUBD <$A3
    cpu.m_d -= 0xA3;

    // 6E72: BLE $6E7F
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x6E7F;

    // 6E74: CMPD #$0032
    cpu.execute_cmpd_immediate(0x0032);

    // 6E78: BLE $6E7D
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x6E7D;

    // 6E7A: LDD #$0032
    cpu.m_d = 0x0032;

    // 6E7D: BRA $6E88
    goto label_6E88;

    // 6E7F: CMPD #$FFCE
    cpu.execute_cmpd_immediate(0xFFCE);

    // 6E83: BGE $6E88
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x6E88;

    // 6E85: LDD #$FFCE
    cpu.m_d = 0xFFCE;

    label_6E88:
    // 6E88: TFR B,A
    cpu.m_a = cpu.m_b;

    // 6E8A: ADDA $4878
    cpu.m_a += cpu.read_memory(0x4878);

    // 6E8D: STA $4878
    cpu.write_memory(0x4878, cpu.m_a);

    // 6E90: SEX 
    // TODO: Convert SEX 

    // 6E91: ADDD <$A3
    cpu.m_d += 0xA3;

    // 6E93: STD <$A3
    cpu.write_memory16(0xA3, cpu.m_d);

    // 6E95: LDX #$4870
    cpu.m_x = 0x4870;

    // 6E98: JSR $7111
    cpu.call_function(0x7111);

    // 6E9B: BEQ $6EA0
    if (cpu.zero_flag()) cpu.m_pc = 0x6EA0;

    // 6E9D: JSR $CE24
    cpu.call_function(0xCE24);

    // 6EA0: RTS 
    return;

    // 6EA1: RTS 
    return;

    // 6EA2: LDX $4B32
    cpu.m_x = cpu.read_memory16(0x4B32);

    // 6EA5: BNE $6EAA
    if (!cpu.zero_flag()) cpu.m_pc = 0x6EAA;

    // 6EA7: LDX #$4900
    cpu.m_x = 0x4900;

    // 6EAA: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // 6EAC: CMPA #$01
    cpu.compare_a(0x01);

    // 6EAE: BNE $6EB9
    if (!cpu.zero_flag()) cpu.m_pc = 0x6EB9;

    // 6EB0: LDA $6,X
    // TODO: Fix comma operator: LDA $6,X

    // 6EB2: BNE $6EB9
    if (!cpu.zero_flag()) cpu.m_pc = 0x6EB9;

    // 6EB4: STX <$64
    cpu.write_memory16(0x64, cpu.m_x);

    // 6EB6: JMP $6EF7
    goto label_6EF7;

    // 6EB9: LDA $4B3C
    cpu.m_a = cpu.read_memory(0x4B3C);

    // 6EBC: BLE $6EC3
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x6EC3;

    // 6EBE: LDA #$09
    cpu.m_a = 0x09;

    // 6EC0: STA $4B3C
    cpu.write_memory(0x4B3C, cpu.m_a);

    // 6EC3: LEAX $19,X
    // TODO: Fix comma operator: LEAX $19,X

    // 6EC6: CMPX #$494B
    cpu.compare_x(0x494B);

    // 6EC9: BCS $6EAA
    if (cpu.carry_flag()) cpu.m_pc = 0x6EAA;

    // 6ECB: LDD #$0000
    cpu.m_d = 0x0000;

    // 6ECE: STD $4B32
    cpu.write_memory16(0x4B32, cpu.m_d);

    // 6ED1: LDA $5080
    cpu.m_a = cpu.read_memory(0x5080);

    // 6ED4: BMI $6EDB
    if (cpu.negative_flag()) cpu.m_pc = 0x6EDB;

    // 6ED6: LDB $5084
    cpu.m_b = cpu.read_memory(0x5084);

    // 6ED9: BRA $6EE0
    goto label_6EE0;

    // 6EDB: LDB #$7F
    cpu.m_b = 0x7F;

    // 6EDD: SUBB $5084
    cpu.m_b -= cpu.read_memory(0x5084);

    label_6EE0:
    // 6EE0: STB $486D
    cpu.write_memory(0x486D, cpu.m_b);

    // 6EE3: LDA $5080
    cpu.m_a = cpu.read_memory(0x5080);

    // 6EE6: BMI $6EED
    if (cpu.negative_flag()) cpu.m_pc = 0x6EED;

    // 6EE8: LDB $5082
    cpu.m_b = cpu.read_memory(0x5082);

    // 6EEB: BRA $6EF2
    goto label_6EF2;

    // 6EED: LDB #$7F
    cpu.m_b = 0x7F;

    // 6EEF: SUBB $5082
    cpu.m_b -= cpu.read_memory(0x5082);

    label_6EF2:
    // 6EF2: COMB 
    cpu.m_b = ~cpu.m_b;

    // 6EF3: STB $4876
    cpu.write_memory(0x4876, cpu.m_b);

    // 6EF6: RTS 
    return;

    label_6EF7:
    // 6EF7: LDA #$10
    cpu.m_a = 0x10;

    // 6EF9: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 6EFC: JSR $7160
    cpu.call_function(0x7160);

    // 6EFF: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // 6F01: STX $4B32
    cpu.write_memory16(0x4B32, cpu.m_x);

    // 6F04: CLRA 
    cpu.m_a = 0;

    // 6F05: LDB $2,X
    // TODO: Fix comma operator: LDB $2,X

    // 6F07: ADDB #$03
    cpu.m_b += 0x03;

    // 6F09: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 6F0C: LDA #$67
    cpu.m_a = 0x67;

    // 6F0E: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 6F11: LDA $5000
    cpu.m_a = cpu.read_memory(0x5000);

    // 6F14: BLE $6F39
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x6F39;

    // 6F16: LDD $5002
    cpu.m_d = cpu.read_memory16(0x5002);

    // 6F19: ASL $5001
    cpu.arithmetic_shift_left(0x5001);

    // 6F1C: ROL $5000
    cpu.rotate_left(0x5000);

    // 6F1F: BVS $6F54
    // TODO: Convert BVS $6F54

    // 6F21: ASLB 
    cpu.m_b <<= 1;

    // 6F22: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 6F23: BVC $6F29
    // TODO: Convert BVC $6F29

    // 6F25: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // 6F26: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // 6F27: BRA $6F54
    goto label_6F54;

    // 6F29: ASL $5005
    cpu.arithmetic_shift_left(0x5005);

    // 6F2C: ROL $5004
    cpu.rotate_left(0x5004);

    // 6F2F: BVC $6F19
    // TODO: Convert BVC $6F19

    // 6F31: ROR $5004
    // TODO: Convert ROR $5004

    // 6F34: ROR $5005
    // TODO: Convert ROR $5005

    // 6F37: BRA $6F54
    goto label_6F54;

    // 6F39: LDD $5002
    cpu.m_d = cpu.read_memory16(0x5002);

    // 6F3C: ORB #$01
    cpu.m_b |= 0x01;

    // 6F3E: ASLB 
    cpu.m_b <<= 1;

    // 6F3F: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 6F40: BVC $6F46
    // TODO: Convert BVC $6F46

    // 6F42: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // 6F43: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // 6F44: BRA $6F54
    goto label_6F54;

    // 6F46: ASL $5005
    cpu.arithmetic_shift_left(0x5005);

    // 6F49: ROL $5004
    cpu.rotate_left(0x5004);

    // 6F4C: BVC $6F3E
    // TODO: Convert BVC $6F3E

    // 6F4E: ROR $5004
    // TODO: Convert ROR $5004

    // 6F51: ROR $5005
    // TODO: Convert ROR $5005

    label_6F54:
    // 6F54: COMA 
    cpu.m_a = ~cpu.m_a;

    // 6F55: STA $4876
    cpu.write_memory(0x4876, cpu.m_a);

    // 6F58: LDB $5004
    cpu.m_b = cpu.read_memory(0x5004);

    // 6F5B: STB $486D
    cpu.write_memory(0x486D, cpu.m_b);

    // 6F5E: RTS 
    return;

    // 6F5F: LDD <$42
    cpu.m_d = cpu.read_memory16(0x42);

    // 6F61: JSR $CDAB
    cpu.call_function(0xCDAB);

    // 6F64: STD <$89
    cpu.write_memory16(0x89, cpu.m_d);

    // 6F66: RTS 
    return;

    // 6F67: LDD <$42
    cpu.m_d = cpu.read_memory16(0x42);

    // 6F69: JSR $CDA9
    cpu.call_function(0xCDA9);

    // 6F6C: STD <$89
    cpu.write_memory16(0x89, cpu.m_d);

    // 6F6E: RTS 
    return;

    // 6F6F: LDD $5086
    cpu.m_d = cpu.read_memory16(0x5086);

    // 6F72: ADDD $5098
    cpu.m_d += 0x5098;

    // 6F75: BVC $6F7D
    // TODO: Convert BVC $6F7D

    // 6F77: INC <$A7
    cpu.increment_memory(0xA7);

    // 6F79: BVC $6F7D
    // TODO: Convert BVC $6F7D

    // 6F7B: DEC <$A7
    cpu.decrement_memory(0xA7);

    // 6F7D: STD $5098
    cpu.write_memory16(0x5098, cpu.m_d);

    // 6F80: STD $5040
    cpu.write_memory16(0x5040, cpu.m_d);

    // 6F83: LDD $5086
    cpu.m_d = cpu.read_memory16(0x5086);

    // 6F86: JSR $CDB1
    cpu.call_function(0xCDB1);

    // 6F89: LDB <$7D
    cpu.m_b = cpu.read_memory(0x7D);

    // 6F8B: BPL $6F8E
    if (!cpu.negative_flag()) cpu.m_pc = 0x6F8E;

    // 6F8D: COMB 
    cpu.m_b = ~cpu.m_b;

    // 6F8E: ASLB 
    cpu.m_b <<= 1;

    // 6F8F: MUL 
    // TODO: Convert MUL 

    // 6F90: TST <$7D
    // TODO: Convert TST <$7D

    // 6F92: BGE $6F98
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x6F98;

    // 6F94: COMA 
    cpu.m_a = ~cpu.m_a;

    // 6F95: NEGB 
    cpu.m_b = -cpu.m_b;

    // 6F96: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 6F98: JSR $CDA0
    cpu.call_function(0xCDA0);

    // 6F9B: STD $508E
    cpu.write_memory16(0x508E, cpu.m_d);

    // 6F9E: ADDD $509A
    cpu.m_d += 0x509A;

    // 6FA1: STD $509A
    cpu.write_memory16(0x509A, cpu.m_d);

    // 6FA4: STD $5042
    cpu.write_memory16(0x5042, cpu.m_d);

    // 6FA7: LDD $5086
    cpu.m_d = cpu.read_memory16(0x5086);

    // 6FAA: JSR $CDB1
    cpu.call_function(0xCDB1);

    // 6FAD: LDB <$7F
    cpu.m_b = cpu.read_memory(0x7F);

    // 6FAF: BPL $6FB2
    if (!cpu.negative_flag()) cpu.m_pc = 0x6FB2;

    // 6FB1: COMB 
    cpu.m_b = ~cpu.m_b;

    // 6FB2: NOP 
    // NOP;

    // 6FB3: MUL 
    // TODO: Convert MUL 

    // 6FB4: TST <$7F
    // TODO: Convert TST <$7F

    // 6FB6: BPL $6FBC
    if (!cpu.negative_flag()) cpu.m_pc = 0x6FBC;

    // 6FB8: COMA 
    cpu.m_a = ~cpu.m_a;

    // 6FB9: NEGB 
    cpu.m_b = -cpu.m_b;

    // 6FBA: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 6FBC: JSR $CDA0
    cpu.call_function(0xCDA0);

    // 6FBF: STD $5096
    cpu.write_memory16(0x5096, cpu.m_d);

    // 6FC2: ADDD $509C
    cpu.m_d += 0x509C;

    // 6FC5: CMPD #$1C00
    cpu.execute_cmpd_immediate(0x1C00);

    // 6FC9: BLE $6FD0
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x6FD0;

    // 6FCB: LDD #$1C00
    cpu.m_d = 0x1C00;

    // 6FCE: BRA $6FD9
    goto label_6FD9;

    // 6FD0: CMPD #$0200
    cpu.execute_cmpd_immediate(0x0200);

    // 6FD4: BGE $6FD9
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x6FD9;

    // 6FD6: LDD #$0200
    cpu.m_d = 0x0200;

    label_6FD9:
    // 6FD9: STD $509C
    cpu.write_memory16(0x509C, cpu.m_d);

    // 6FDC: STD $5044
    cpu.write_memory16(0x5044, cpu.m_d);

    // 6FDF: RTS 
    return;

    // 6FE0: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // 6FE3: CMPD #$0380
    cpu.execute_cmpd_immediate(0x0380);

    // 6FE7: BLE $6FEF
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x6FEF;

    // 6FE9: SUBD #$0180
    cpu.m_d -= 0x0180;

    // 6FEC: STD $509C
    cpu.write_memory16(0x509C, cpu.m_d);

    // 6FEF: BRA $7000
    goto label_7000;

    // 6FF1: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // 6FF4: CMPD #$F300
    cpu.execute_cmpd_immediate(0xF300);

    // 6FF8: BLE $7000
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x7000;

    // 6FFA: SUBD #$0100
    cpu.m_d -= 0x0100;

    // 6FFD: STD $509C
    cpu.write_memory16(0x509C, cpu.m_d);

    label_7000:
    // 7000: LDD $5086
    cpu.m_d = cpu.read_memory16(0x5086);

    // 7003: ADDD $5098
    cpu.m_d += 0x5098;

    // 7006: STD $5098
    cpu.write_memory16(0x5098, cpu.m_d);

    // 7009: LDD #$0300
    cpu.m_d = 0x0300;

    // 700C: SUBD $5086
    cpu.m_d -= 0x5086;

    // 700F: JSR $CDA2
    cpu.call_function(0xCDA2);

    // 7012: ADDD $5086
    cpu.m_d += 0x5086;

    // 7015: STD $5086
    cpu.write_memory16(0x5086, cpu.m_d);

    // 7018: LDA $4B15
    cpu.m_a = cpu.read_memory(0x4B15);

    // 701B: LSRA 
    cpu.m_a >>= 1;

    // 701C: BCC $7023
    if (!cpu.carry_flag()) cpu.m_pc = 0x7023;

    // 701E: LDD #$0BB8
    cpu.m_d = 0x0BB8;

    // 7021: BRA $7026
    goto label_7026;

    // 7023: LDD #$F448
    cpu.m_d = 0xF448;

    label_7026:
    // 7026: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 7029: LDD #$3EEB
    cpu.m_d = 0x3EEB;

    // 702C: STD $5024
    cpu.write_memory16(0x5024, cpu.m_d);

    // 702F: JSR $CE24
    cpu.call_function(0xCE24);

    // 7032: LDD #$0000
    cpu.m_d = 0x0000;

    // 7035: SUBD <$A3
    cpu.m_d -= 0xA3;

    // 7037: JSR $6E70
    cpu.call_function(0x6E70);

    // 703A: RTS 
    return;

    // 703B: LDD $5086
    cpu.m_d = cpu.read_memory16(0x5086);

    // 703E: ADDD $5098
    cpu.m_d += 0x5098;

    // 7041: STD $5098
    cpu.write_memory16(0x5098, cpu.m_d);

    // 7044: STD $5040
    cpu.write_memory16(0x5040, cpu.m_d);

    // 7047: LDD $5086
    cpu.m_d = cpu.read_memory16(0x5086);

    // 704A: JSR $CDB1
    cpu.call_function(0xCDB1);

    // 704D: LDB <$7D
    cpu.m_b = cpu.read_memory(0x7D);

    // 704F: BPL $7052
    if (!cpu.negative_flag()) cpu.m_pc = 0x7052;

    // 7051: COMB 
    cpu.m_b = ~cpu.m_b;

    // 7052: MUL 
    // TODO: Convert MUL 

    // 7053: TST <$7D
    // TODO: Convert TST <$7D

    // 7055: BGE $705B
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x705B;

    // 7057: COMA 
    cpu.m_a = ~cpu.m_a;

    // 7058: NEGB 
    cpu.m_b = -cpu.m_b;

    // 7059: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 705B: JSR $CDA0
    cpu.call_function(0xCDA0);

    // 705E: STD $508E
    cpu.write_memory16(0x508E, cpu.m_d);

    // 7061: ADDD $509A
    cpu.m_d += 0x509A;

    // 7064: CMPD #$01FF
    cpu.execute_cmpd_immediate(0x01FF);

    // 7068: BLE $706D
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x706D;

    // 706A: LDD #$01FF
    cpu.m_d = 0x01FF;

    // 706D: CMPD #$FE01
    cpu.execute_cmpd_immediate(0xFE01);

    // 7071: BGE $7076
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x7076;

    // 7073: LDD #$FE01
    cpu.m_d = 0xFE01;

    // 7076: STD $509A
    cpu.write_memory16(0x509A, cpu.m_d);

    // 7079: STD $5042
    cpu.write_memory16(0x5042, cpu.m_d);

    // 707C: LDD $5086
    cpu.m_d = cpu.read_memory16(0x5086);

    // 707F: ASLB 
    cpu.m_b <<= 1;

    // 7080: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 7081: ASLB 
    cpu.m_b <<= 1;

    // 7082: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 7083: ASLB 
    cpu.m_b <<= 1;

    // 7084: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 7085: ASLB 
    cpu.m_b <<= 1;

    // 7086: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 7087: LDB <$7F
    cpu.m_b = cpu.read_memory(0x7F);

    // 7089: BPL $708C
    if (!cpu.negative_flag()) cpu.m_pc = 0x708C;

    // 708B: COMB 
    cpu.m_b = ~cpu.m_b;

    // 708C: ASLB 
    cpu.m_b <<= 1;

    // 708D: MUL 
    // TODO: Convert MUL 

    // 708E: TST <$7F
    // TODO: Convert TST <$7F

    // 7090: BPL $7096
    if (!cpu.negative_flag()) cpu.m_pc = 0x7096;

    // 7092: COMA 
    cpu.m_a = ~cpu.m_a;

    // 7093: NEGB 
    cpu.m_b = -cpu.m_b;

    // 7094: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 7096: ASRA 
    // TODO: Convert ASRA 

    // 7097: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // 7098: ASRA 
    // TODO: Convert ASRA 

    // 7099: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // 709A: ASRA 
    // TODO: Convert ASRA 

    // 709B: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // 709C: ASRA 
    // TODO: Convert ASRA 

    // 709D: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // 709E: STD $5096
    cpu.write_memory16(0x5096, cpu.m_d);

    // 70A1: ADDD $509C
    cpu.m_d += 0x509C;

    // 70A4: CMPD #$FEFF
    cpu.execute_cmpd_immediate(0xFEFF);

    // 70A8: BLE $70AD
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x70AD;

    // 70AA: LDD #$FEFF
    cpu.m_d = 0xFEFF;

    // 70AD: CMPD #$F201
    cpu.execute_cmpd_immediate(0xF201);

    // 70B1: BGE $70B6
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x70B6;

    // 70B3: LDD #$F201
    cpu.m_d = 0xF201;

    // 70B6: STD $509C
    cpu.write_memory16(0x509C, cpu.m_d);

    // 70B9: STD $5044
    cpu.write_memory16(0x5044, cpu.m_d);

    // 70BC: RTS 
    return;

    // 70BD: LDX #$4866
    cpu.m_x = 0x4866;

    // 70C0: JSR $70F0
    cpu.call_function(0x70F0);

    // 70C3: JSR $7111
    cpu.call_function(0x7111);

    // 70C6: BEQ $70CB
    if (cpu.zero_flag()) cpu.m_pc = 0x70CB;

    // 70C8: JSR $CE2F
    cpu.call_function(0xCE2F);

    // 70CB: RTS 
    return;

    // 70CC: LDX #$486F
    cpu.m_x = 0x486F;

    // 70CF: JSR $70F0
    cpu.call_function(0x70F0);

    // 70D2: JSR $7111
    cpu.call_function(0x7111);

    // 70D5: BEQ $70DA
    if (cpu.zero_flag()) cpu.m_pc = 0x70DA;

    // 70D7: JSR $CE3A
    cpu.call_function(0xCE3A);

    // 70DA: RTS 
    return;

    label_70DB:
    // 70DB: JMP $70db
    goto label_70DB;

    // 70DD: LDD <$6B
    cpu.m_d = cpu.read_memory16(0x6B);

    // 70DF: STD <$7F
    cpu.write_memory16(0x7F, cpu.m_d);

    // 70E1: LDD <$74
    cpu.m_d = cpu.read_memory16(0x74);

    // 70E3: STD <$7D
    cpu.write_memory16(0x7D, cpu.m_d);

    // 70E5: LDD <$2F
    cpu.m_d = cpu.read_memory16(0x2F);

    // 70E7: STD <$7B
    cpu.write_memory16(0x7B, cpu.m_d);

    // 70E9: LDD <$2D
    cpu.m_d = cpu.read_memory16(0x2D);

    // 70EB: STD <$79
    cpu.write_memory16(0x79, cpu.m_d);

    // 70ED: ANDCC #$EF
    // TODO: Convert ANDCC #$EF

    // 70EF: RTS 
    return;

    // 70F5: LDB #$80
    cpu.m_b = 0x80;

    // 70F7: MUL 
    // TODO: Convert MUL 

    // 70F8: NOP 
    // NOP;

    // 70F9: NOP 
    // NOP;

    // 70FA: NOP 
    // NOP;

    // 70FB: LDB $7,X
    // TODO: Fix comma operator: LDB $7,X

    // 70FD: BMI $7107
    if (cpu.negative_flag()) cpu.m_pc = 0x7107;

    // 70FF: ADDA $8,X
    // TODO: Fix comma operator: ADDA $8,X

    // 7101: BVC $7105
    // TODO: Convert BVC $7105

    // 7103: LDA #$7F
    cpu.m_a = 0x7F;

    label_7105:
    // 7105: JMP $7105
    goto label_7105;

    // 7107: NEGA 
    cpu.m_a = -cpu.m_a;

    // 7108: ADDA $8,X
    // TODO: Fix comma operator: ADDA $8,X

    // 710A: BVC $710E
    // TODO: Convert BVC $710E

    // 710C: LDA #$81
    cpu.m_a = 0x81;

    // 710E: STA $8,X
    cpu.write_memory(cpu.m_x + 0x08, cpu.m_a);

    // 7110: RTS 
    return;

    // 7111: LDA $8,X
    // TODO: Fix comma operator: LDA $8,X

    // 7113: BPL $7116
    if (!cpu.negative_flag()) cpu.m_pc = 0x7116;

    // 7115: NEGA 
    cpu.m_a = -cpu.m_a;

    // 7116: CMPA #$4E
    cpu.compare_a(0x4E);

    // 7118: BCS $713A
    if (cpu.carry_flag()) cpu.m_pc = 0x713A;

    // 711A: LDD #$3FC2
    cpu.m_d = 0x3FC2;

    // 711D: STD $5024
    cpu.write_memory16(0x5024, cpu.m_d);

    // 7120: LDA $8,X
    // TODO: Fix comma operator: LDA $8,X

    // 7122: BPL $712F
    if (!cpu.negative_flag()) cpu.m_pc = 0x712F;

    // 7124: ADDA #$4E
    cpu.m_a += 0x4E;

    // 7126: STA $8,X
    cpu.write_memory(cpu.m_x + 0x08, cpu.m_a);

    // 7128: LDD #$FA70
    cpu.m_d = 0xFA70;

    // 712B: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 712E: RTS 
    return;

    // 712F: SUBA #$4E
    cpu.m_a -= 0x4E;

    // 7131: STA $8,X
    cpu.write_memory(cpu.m_x + 0x08, cpu.m_a);

    // 7133: LDD #$0590
    cpu.m_d = 0x0590;

    // 7136: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 7139: RTS 
    return;

    // 713A: CMPA #$0E
    cpu.compare_a(0x0E);

    // 713C: BCS $715E
    if (cpu.carry_flag()) cpu.m_pc = 0x715E;

    // 713E: LDD #$3FFE
    cpu.m_d = 0x3FFE;

    // 7141: STD $5024
    cpu.write_memory16(0x5024, cpu.m_d);

    // 7144: LDA $8,X
    // TODO: Fix comma operator: LDA $8,X

    // 7146: BPL $7153
    if (!cpu.negative_flag()) cpu.m_pc = 0x7153;

    // 7148: ADDA #$0E
    cpu.m_a += 0x0E;

    // 714A: STA $8,X
    cpu.write_memory(cpu.m_x + 0x08, cpu.m_a);

    // 714C: LDD #$FF00
    cpu.m_d = 0xFF00;

    // 714F: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 7152: RTS 
    return;

    label_7153:
    // 7153: JMP $7153
    goto label_7153;

    // 7155: STA $8,X
    cpu.write_memory(cpu.m_x + 0x08, cpu.m_a);

    // 7157: LDD #$0100
    cpu.m_d = 0x0100;

    // 715A: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 715D: RTS 
    return;

    // 715E: CLRB 
    cpu.m_b = 0;

    // 715F: RTS 
    return;

    // 7160: LDA $486E
    cpu.m_a = cpu.read_memory(0x486E);

    // 7163: BEQ $7181
    if (cpu.zero_flag()) cpu.m_pc = 0x7181;

    // 7165: JSR $71C4
    cpu.call_function(0x71C4);

    // 7168: LDA $486E
    cpu.m_a = cpu.read_memory(0x486E);

    // 716B: BPL $7176
    if (!cpu.negative_flag()) cpu.m_pc = 0x7176;

    // 716D: LDD #$0000
    cpu.m_d = 0x0000;

    // 7170: SUBD $5022
    cpu.m_d -= 0x5022;

    // 7173: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 7176: CLRA 
    cpu.m_a = 0;

    // 7177: LDB #$05
    cpu.m_b = 0x05;

    // 7179: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 717C: LDA #$0E
    cpu.m_a = 0x0E;

    // 717E: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 7181: LDA $4877
    cpu.m_a = cpu.read_memory(0x4877);

    // 7184: BEQ $71A2
    if (cpu.zero_flag()) cpu.m_pc = 0x71A2;

    // 7186: JSR $71C4
    cpu.call_function(0x71C4);

    // 7189: LDA $4877
    cpu.m_a = cpu.read_memory(0x4877);

    // 718C: BPL $7197
    if (!cpu.negative_flag()) cpu.m_pc = 0x7197;

    // 718E: LDD #$0000
    cpu.m_d = 0x0000;

    // 7191: SUBD $5022
    cpu.m_d -= 0x5022;

    // 7194: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 7197: CLRA 
    cpu.m_a = 0;

    // 7198: LDB #$05
    cpu.m_b = 0x05;

    // 719A: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 719D: LDA #$1C
    cpu.m_a = 0x1C;

    // 719F: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 71A2: LDA $4878
    cpu.m_a = cpu.read_memory(0x4878);

    // 71A5: BEQ $71C3
    if (cpu.zero_flag()) cpu.m_pc = 0x71C3;

    // 71A7: JSR $71C4
    cpu.call_function(0x71C4);

    // 71AA: LDA $4878
    cpu.m_a = cpu.read_memory(0x4878);

    // 71AD: BPL $71B8
    if (!cpu.negative_flag()) cpu.m_pc = 0x71B8;

    // 71AF: LDD #$0000
    cpu.m_d = 0x0000;

    // 71B2: SUBD $5022
    cpu.m_d -= 0x5022;

    // 71B5: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 71B8: CLRA 
    cpu.m_a = 0;

    // 71B9: LDB #$05
    cpu.m_b = 0x05;

    // 71BB: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 71BE: LDA #$00
    cpu.m_a = 0x00;

    // 71C0: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 71C3: RTS 
    return;

    // 71C4: BPL $71C7
    if (!cpu.negative_flag()) cpu.m_pc = 0x71C7;

    // 71C6: NEGA 
    cpu.m_a = -cpu.m_a;

    // 71C7: LDB #$03
    cpu.m_b = 0x03;

    // 71C9: MUL 
    // TODO: Convert MUL 

    // 71CA: LDX #$71DA
    cpu.m_x = 0x71DA;

    // 71CD: ABX 
    // TODO: Convert ABX 

    // 71CE: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // 71D0: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 71D3: LDB $2,X
    // TODO: Fix comma operator: LDB $2,X

    // 71D5: SEX 
    // TODO: Convert SEX 

    // 71D6: ADDD #$4000
    cpu.m_d += 0x4000;

    // 71D9: STD $5024
    cpu.write_memory16(0x5024, cpu.m_d);

    // 71DC: RTS 
    return;

    // 71DD: NEG <$12
    // TODO: Convert NEG <$12

    // 71DF: NEG <$00
    // TODO: Convert NEG <$00

    // 71E1: BCS $71E3
    if (cpu.carry_flag()) cpu.m_pc = 0x71E3;

    // 71E3: NEG <$37
    // TODO: Convert NEG <$37

    // 71E5: NEG <$00
    // TODO: Convert NEG <$00

    // 71E7: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 71E8: NEG <$00
    // TODO: Convert NEG <$00

    // 71EA: XDECB 
    cpu.m_b--;

    // 71EB: NEG <$00
    // TODO: Convert NEG <$00

    // 71ED: JMP $0,X
    // TODO: Invalid branch offset: $0,X

    // 71EF: NEG <$80
    // TODO: Convert NEG <$80

    // 71F1: NEG <$00
    // TODO: Convert NEG <$00

    // 71F3: SBCA <$FF
    cpu.sub_a_with_carry(0xFF);

    // 71F5: NEG <$A5
    // TODO: Convert NEG <$A5

    // 71F7: STU >$00B7
    cpu.write_memory16(0x00B7, cpu.m_u);

    // 71FA: STU >$00C9
    cpu.write_memory16(0x00C9, cpu.m_u);

    // 71FD: STU >$00DB
    cpu.write_memory16(0x00DB, cpu.m_u);

    // 7200: STU >$00EE
    cpu.write_memory16(0x00EE, cpu.m_u);

    // 7203: LDU $0100
    cpu.m_u = cpu.read_memory16(0x0100);

    // 7206: LDU $0112
    cpu.m_u = cpu.read_memory16(0x0112);

    // 7209: LDU $0124
    cpu.m_u = cpu.read_memory16(0x0124);

    // 720C: STD $0137
    cpu.write_memory16(0x0137, cpu.m_d);

    // 720F: STD $0149
    cpu.write_memory16(0x0149, cpu.m_d);

    // 7212: STD $015B
    cpu.write_memory16(0x015B, cpu.m_d);

    // 7215: LDD $016E
    cpu.m_d = cpu.read_memory16(0x016E);

    // 7218: LDD $0180
    cpu.m_d = cpu.read_memory16(0x0180);

    // 721B: LDD $0192
    cpu.m_d = cpu.read_memory16(0x0192);

    // 721E: ADDB $01A4
    cpu.m_b += cpu.read_memory(0x01A4);

    // 7221: ADDB $01B7
    cpu.m_b += cpu.read_memory(0x01B7);

    // 7224: ORB $01C9
    cpu.m_b |= cpu.read_memory(0x01C9);

    // 7227: ORB $01DB
    cpu.m_b |= cpu.read_memory(0x01DB);

    // 722A: ADCB $01ED
    cpu.add_b_with_carry(cpu.read_memory(0x01ED));

    // 722D: ADCB $0200
    cpu.add_b_with_carry(cpu.read_memory(0x0200));

    // 7230: EORB $0212
    cpu.m_b ^= cpu.read_memory(0x0212);

    // 7233: STB $0224
    cpu.write_memory(0x0224, cpu.m_b);

    // 7236: STB $0237
    cpu.write_memory(0x0237, cpu.m_b);

    // 7239: LDB $0249
    cpu.m_b = cpu.read_memory(0x0249);

    // 723C: LDB $025B
    cpu.m_b = cpu.read_memory(0x025B);

    // 723F: BITB $026D
    // TODO: Convert BITB $026D

    // 7242: ANDB $0280
    cpu.m_b &= cpu.read_memory(0x0280);

    // 7245: ANDB $0292
    cpu.m_b &= cpu.read_memory(0x0292);

    // 7248: ADDD $02A4
    cpu.m_d += 0x02A4;

    // 724B: SBCB $02B6
    cpu.sub_b_with_carry(cpu.read_memory(0x02B6));

    // 724E: CMPB $02C9
    cpu.compare_b(cpu.read_memory(cpu.read_memory(0x02C9)));

    // 7251: SUBB $02DB
    cpu.m_b -= cpu.read_memory(0x02DB);

    // 7254: SUBB $02ED
    cpu.m_b -= cpu.read_memory(0x02ED);

    // 7257: STU $2,X
    cpu.write_memory16(cpu.m_x + 0x02, cpu.m_u);

    // 7259: STU $EE03
    cpu.write_memory16(0xEE03, cpu.m_u);

    // 725C: NOP 
    // NOP;

    // 725D: STD $3,X
    cpu.write_memory16(cpu.m_x + 0x03, cpu.m_d);

    // 725F: BCC $724D
    // TODO: External jump to 0x724D - not implemented

    // 7261: COM <$36
    // TODO: Convert COM <$36

    // 7263: ADDB $3,X
    // TODO: Fix comma operator: ADDB $3,X

    // 7265: ASLA 
    cpu.m_a <<= 1;

    // 7266: ORB $3,X
    // TODO: Fix comma operator: ORB $3,X

    // 7268: XDECB 
    cpu.m_b--;

    // 7269: ADCB $3,X
    // TODO: Fix comma operator: ADCB $3,X

    // 726B: TST $037F,S
    // TODO: Convert TST $037F,S

    // 726F: EORB $3,X
    // TODO: Fix comma operator: EORB $3,X

    // 7271: CMPA <$E7
    cpu.compare_a(cpu.read_memory(0xE7));

    // 7273: COM <$A4
    // TODO: Convert COM <$A4

    // 7275: BITB $3,X
    // TODO: Convert BITB $3,X

    // 7277: LDA $E403
    cpu.m_a = cpu.read_memory(0xE403);

    // 727A: EORB #$E3
    cpu.m_b ^= 0xE3;

    // 727C: COM <$DA
    // TODO: Convert COM <$DA

    // 727E: SBCB $3,X
    // TODO: Fix comma operator: SBCB $3,X

    // 7280: STD ,S++
    cpu.write_memory16(cpu.m_sp++, cpu.m_d);

    // 7282: COM <$FF
    // TODO: Convert COM <$FF

    // 7284: SUBB $4,X
    // TODO: Fix comma operator: SUBB $4,X

    // 7286: STU <$04
    cpu.write_memory16(0x04, cpu.m_u);

    // 7289: BLS $7269
    // TODO: Convert BLS $7269

    // 728B: LSR <$36
    // TODO: Convert LSR <$36

    // 728D: STD <$04
    cpu.write_memory16(0x04, cpu.m_d);

    // 728F: ASLA 
    cpu.m_a <<= 1;

    // 7290: ADDB <$04
    cpu.m_b += 0x04;

    // 7292: DECB 
    cpu.m_b--;

    // 7293: ORB <$04
    cpu.m_b |= 0x04;

    // 7295: INC [$047F,U]
    // TODO: Complex indexed addressing: [$047F,U]

    // 7299: EORB <$04
    cpu.m_b ^= 0x04;

    // 729B: CMPA <$D6
    cpu.compare_a(cpu.read_memory(0xD6));

    // 729D: LSR <$A3
    // TODO: Convert LSR <$A3

    // 729F: BITB <$04
    // TODO: Convert BITB <$04

    // 72A1: BITA $D404
    // TODO: Convert BITA $D404

    // 72A4: EORB #$D2
    cpu.m_b ^= 0xD2;

    // 72A6: LSR <$DA
    // TODO: Convert LSR <$DA

    // 72A8: CMPB <$04
    cpu.compare_b(cpu.read_memory(0x04));

    // 72AA: LDD ,W++
    // TODO: Complex indexed addressing: ,W++

    // 72AC: LSR <$FE
    // TODO: Convert LSR <$FE

    // 72AE: LDU #$0510
    cpu.m_u = 0x0510;

    // 72B1: XHCF 
    // TODO: Convert XHCF 

    // 72B2: LSR <$23
    // TODO: Convert LSR <$23

    // 72B4: ADDB #$05
    cpu.m_b += 0x05;

    // 72B6: PULS A,DP,U,PC
    // TODO: Convert PULS A,DP,U,PC

    // 72B8: LSR <$47
    // TODO: Convert LSR <$47

    // 72BA: EORB #$05
    cpu.m_b ^= 0x05;

    // 72BC: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // 72BD: XSTB #$05
    // TODO: Convert XSTB #$05

    // 72BF: INC B,U
    // TODO: Fix comma operator: INC B,U

    // 72C1: LSR <$7E
    // TODO: Convert LSR <$7E

    // 72C3: ANDB #$05
    cpu.m_b &= 0x05;

    // 72C5: SUBA <$C2
    cpu.m_a -= 0xC2;

    label_72C7:
    // 72C7: JMP $72c7
    goto label_72C7;

    // 72CA: LDA #$10
    cpu.m_a = 0x10;

    // 72CC: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 72CF: JSR $7160
    cpu.call_function(0x7160);

    // 72D2: JSR $761D
    cpu.call_function(0x761D);

    // 72D5: LDA $4B2D
    cpu.m_a = cpu.read_memory(0x4B2D);

    // 72D8: BNE $72F0
    if (!cpu.zero_flag()) cpu.m_pc = 0x72F0;

    // 72DA: LDD $4B0E
    cpu.m_d = cpu.read_memory16(0x4B0E);

    // 72DD: CMPD #$00A0
    cpu.execute_cmpd_immediate(0x00A0);

    // 72E1: BCC $72F0
    if (!cpu.carry_flag()) cpu.m_pc = 0x72F0;

    // 72E3: ANDB #$10
    cpu.m_b &= 0x10;

    // 72E5: BNE $72EB
    if (!cpu.zero_flag()) cpu.m_pc = 0x72EB;

    // 72E7: LDB #$4C
    cpu.m_b = 0x4C;

    // 72E9: BRA $72ED
    goto label_72ED;

    // 72EB: LDB #$4D
    cpu.m_b = 0x4D;

    label_72ED:
    // 72ED: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 72F0: JSR $95A7
    cpu.call_function(0x95A7);

    // 72F3: JSR $7765
    cpu.call_function(0x7765);

    // 72F6: JSR $B6B9
    cpu.call_function(0xB6B9);

    // 72F9: JSR $CD80
    cpu.call_function(0xCD80);

    // 72FC: JSR $BA12
    cpu.call_function(0xBA12);

    // 72FF: JSR $AE60
    cpu.call_function(0xAE60);

    // 7302: JSR $786A
    cpu.call_function(0x786A);

    // 7305: JSR $AAE4
    cpu.call_function(0xAAE4);

    // 7308: JSR $B32B
    cpu.call_function(0xB32B);

    // 730B: JSR $AEBD
    cpu.call_function(0xAEBD);

    // 730E: JSR $98B0
    cpu.call_function(0x98B0);

    // 7311: JSR $612F
    cpu.call_function(0x612F);

    // 7314: RTS 
    return;

    // 7315: JSR $6112
    cpu.call_function(0x6112);

    // 7318: LDA #$10
    cpu.m_a = 0x10;

    // 731A: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 731D: JSR $7160
    cpu.call_function(0x7160);

    // 7320: JSR $761D
    cpu.call_function(0x761D);

    // 7323: JSR $95A7
    cpu.call_function(0x95A7);

    // 7326: JSR $CD80
    cpu.call_function(0xCD80);

    // 7329: JSR $BA12
    cpu.call_function(0xBA12);

    // 732C: JSR $786A
    cpu.call_function(0x786A);

    // 732F: JSR $AAE4
    cpu.call_function(0xAAE4);

    // 7332: JSR $7707
    cpu.call_function(0x7707);

    // 7335: JSR $98B0
    cpu.call_function(0x98B0);

    // 7338: JSR $612F
    cpu.call_function(0x612F);

    // 733B: RTS 
    return;

    // 733C: JSR $6112
    cpu.call_function(0x6112);

    // 733F: LDA #$10
    cpu.m_a = 0x10;

    // 7341: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 7344: JSR $7160
    cpu.call_function(0x7160);

    // 7347: JSR $761D
    cpu.call_function(0x761D);

    // 734A: JSR $95A7
    cpu.call_function(0x95A7);

    // 734D: JSR $B6B9
    cpu.call_function(0xB6B9);

    // 7350: JSR $CD80
    cpu.call_function(0xCD80);

    // 7353: JSR $7765
    cpu.call_function(0x7765);

    // 7356: JSR $BA12
    cpu.call_function(0xBA12);

    // 7359: JSR $AE60
    cpu.call_function(0xAE60);

    // 735C: JSR $786A
    cpu.call_function(0x786A);

    // 735F: JSR $AAE4
    cpu.call_function(0xAAE4);

    // 7362: JSR $B32B
    cpu.call_function(0xB32B);

    // 7365: JSR $AEBD
    cpu.call_function(0xAEBD);

    // 7368: JSR $98B0
    cpu.call_function(0x98B0);

    // 736B: JSR $612F
    cpu.call_function(0x612F);

    // 736E: RTS 
    return;

    // 736F: JSR $6112
    cpu.call_function(0x6112);

    // 7372: LDA #$10
    cpu.m_a = 0x10;

    // 7374: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 7377: JSR $7160
    cpu.call_function(0x7160);

    // 737A: JSR $761D
    cpu.call_function(0x761D);

    // 737D: JSR $95A7
    cpu.call_function(0x95A7);

    // 7380: JSR $B6B9
    cpu.call_function(0xB6B9);

    // 7383: JSR $CD80
    cpu.call_function(0xCD80);

    // 7386: JSR $77A4
    cpu.call_function(0x77A4);

    // 7389: JSR $98B0
    cpu.call_function(0x98B0);

    // 738C: JSR $612F
    cpu.call_function(0x612F);

    // 738F: RTS 
    return;

    // 7390: JSR $6112
    cpu.call_function(0x6112);

    // 7393: LDA #$10
    cpu.m_a = 0x10;

    // 7395: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 7398: JSR $7160
    cpu.call_function(0x7160);

    // 739B: JSR $761D
    cpu.call_function(0x761D);

    // 739E: JSR $768D
    cpu.call_function(0x768D);

    // 73A1: JSR $95A7
    cpu.call_function(0x95A7);

    // 73A4: JSR $B6B9
    cpu.call_function(0xB6B9);

    // 73A7: JSR $CD8C
    cpu.call_function(0xCD8C);

    // 73AA: JSR $AE60
    cpu.call_function(0xAE60);

    // 73AD: JSR $AAE4
    cpu.call_function(0xAAE4);

    // 73B0: JSR $A214
    cpu.call_function(0xA214);

    // 73B3: JSR $B2D2
    cpu.call_function(0xB2D2);

    // 73B6: JSR $AEBD
    cpu.call_function(0xAEBD);

    // 73B9: JSR $BA12
    cpu.call_function(0xBA12);

    // 73BC: JSR $98B0
    cpu.call_function(0x98B0);

    // 73BF: JSR $612F
    cpu.call_function(0x612F);

    // 73C2: RTS 
    return;

    // 73C3: JSR $6112
    cpu.call_function(0x6112);

    // 73C6: LDA #$10
    cpu.m_a = 0x10;

    // 73C8: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 73CB: JSR $7160
    cpu.call_function(0x7160);

    // 73CE: JSR $761D
    cpu.call_function(0x761D);

    // 73D1: JSR $768D
    cpu.call_function(0x768D);

    // 73D4: JSR $95A7
    cpu.call_function(0x95A7);

    // 73D7: JSR $CD8C
    cpu.call_function(0xCD8C);

    // 73DA: JSR $AAE4
    cpu.call_function(0xAAE4);

    // 73DD: JSR $A214
    cpu.call_function(0xA214);

    // 73E0: JSR $7707
    cpu.call_function(0x7707);

    // 73E3: JSR $98B0
    cpu.call_function(0x98B0);

    // 73E6: JSR $612F
    cpu.call_function(0x612F);

    // 73E9: RTS 
    return;

    // 73EA: JSR $6112
    cpu.call_function(0x6112);

    // 73ED: LDA #$10
    cpu.m_a = 0x10;

    // 73EF: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 73F2: JSR $7160
    cpu.call_function(0x7160);

    // 73F5: JSR $761D
    cpu.call_function(0x761D);

    // 73F8: JSR $76D3
    cpu.call_function(0x76D3);

    // 73FB: LDB #$4F
    cpu.m_b = 0x4F;

    // 73FD: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 7400: JSR $95A7
    cpu.call_function(0x95A7);

    // 7403: JSR $B6B9
    cpu.call_function(0xB6B9);

    // 7406: JSR $CD8C
    cpu.call_function(0xCD8C);

    // 7409: JSR $BA12
    cpu.call_function(0xBA12);

    // 740C: JSR $98B0
    cpu.call_function(0x98B0);

    // 740F: JSR $612F
    cpu.call_function(0x612F);

    // 7412: RTS 
    return;

    // 7413: JSR $6112
    cpu.call_function(0x6112);

    // 7416: LDA #$10
    cpu.m_a = 0x10;

    // 7418: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 741B: JSR $7160
    cpu.call_function(0x7160);

    // 741E: JSR $761D
    cpu.call_function(0x761D);

    // 7421: JSR $76D3
    cpu.call_function(0x76D3);

    // 7424: LDB #$4F
    cpu.m_b = 0x4F;

    // 7426: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 7429: JSR $95A7
    cpu.call_function(0x95A7);

    // 742C: JSR $B6B9
    cpu.call_function(0xB6B9);

    // 742F: JSR $859B
    cpu.call_function(0x859B);

    // 7432: JSR $BA12
    cpu.call_function(0xBA12);

    // 7435: JSR $98B0
    cpu.call_function(0x98B0);

    // 7438: JSR $612F
    cpu.call_function(0x612F);

    // 743B: RTS 
    return;

    // 743C: JSR $6112
    cpu.call_function(0x6112);

    // 743F: LDA #$10
    cpu.m_a = 0x10;

    // 7441: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 7444: JSR $7160
    cpu.call_function(0x7160);

    // 7447: JSR $761D
    cpu.call_function(0x761D);

    // 744A: LDA $4B0E
    cpu.m_a = cpu.read_memory(0x4B0E);

    // 744D: CMPA #$04
    cpu.compare_a(0x04);

    // 744F: BHI $7464
    // TODO: Convert BHI $7464

    // 7451: LDA <$98
    cpu.m_a = cpu.read_memory(0x98);

    // 7453: BNE $745A
    if (!cpu.zero_flag()) cpu.m_pc = 0x745A;

    // 7455: JSR $76D3
    cpu.call_function(0x76D3);

    // 7458: BRA $7464
    goto label_7464;

    // 745A: LDD #$7100
    cpu.m_d = 0x7100;

    // 745D: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 745F: LDB #$46
    cpu.m_b = 0x46;

    // 7461: JSR $E7C7
    cpu.call_function(0xE7C7);

    label_7464:
    // 7464: LDA $4B2D
    cpu.m_a = cpu.read_memory(0x4B2D);

    // 7467: BNE $7491
    if (!cpu.zero_flag()) cpu.m_pc = 0x7491;

    // 7469: LDA $4B0E
    cpu.m_a = cpu.read_memory(0x4B0E);

    // 746C: CMPA #$08
    cpu.compare_a(0x08);

    // 746E: BHI $7491
    // TODO: Convert BHI $7491

    // 7470: LDA <$98
    cpu.m_a = cpu.read_memory(0x98);

    // 7472: BNE $7491
    if (!cpu.zero_flag()) cpu.m_pc = 0x7491;

    // 7474: LDA $4B35
    cpu.m_a = cpu.read_memory(0x4B35);

    // 7477: BNE $7491
    if (!cpu.zero_flag()) cpu.m_pc = 0x7491;

    // 7479: LDA $4B12
    cpu.m_a = cpu.read_memory(0x4B12);

    // 747C: BNE $7482
    if (!cpu.zero_flag()) cpu.m_pc = 0x7482;

    // 747E: LDB #$4C
    cpu.m_b = 0x4C;

    // 7480: BRA $748E
    goto label_748E;

    // 7482: LDA <$43
    cpu.m_a = cpu.read_memory(0x43);

    // 7484: ANDA #$10
    cpu.m_a &= 0x10;

    // 7486: BNE $748C
    if (!cpu.zero_flag()) cpu.m_pc = 0x748C;

    // 7488: LDB #$4C
    cpu.m_b = 0x4C;

    // 748A: BRA $748E
    goto label_748E;

    // 748C: LDB #$4E
    cpu.m_b = 0x4E;

    label_748E:
    // 748E: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 7491: LDA $4B2D
    cpu.m_a = cpu.read_memory(0x4B2D);

    // 7494: BNE $74A5
    if (!cpu.zero_flag()) cpu.m_pc = 0x74A5;

    // 7496: LDA $4895
    cpu.m_a = cpu.read_memory(0x4895);

    // 7499: BEQ $74A5
    if (cpu.zero_flag()) cpu.m_pc = 0x74A5;

    // 749B: LDD #$7100
    cpu.m_d = 0x7100;

    // 749E: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 74A0: LDB #$44
    cpu.m_b = 0x44;

    // 74A2: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 74A5: LDA $4B36
    cpu.m_a = cpu.read_memory(0x4B36);

    // 74A8: BLT $74B6
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x74B6;

    // 74AA: BNE $74B3
    if (!cpu.zero_flag()) cpu.m_pc = 0x74B3;

    // 74AC: LDB #$4F
    cpu.m_b = 0x4F;

    // 74AE: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 74B1: BRA $74B6
    goto label_74B6;

    // 74B3: JSR $97C2
    cpu.call_function(0x97C2);

    label_74B6:
    // 74B6: JSR $95A7
    cpu.call_function(0x95A7);

    // 74B9: JSR $B6B9
    cpu.call_function(0xB6B9);

    // 74BC: JSR $859B
    cpu.call_function(0x859B);

    // 74BF: JSR $AE60
    cpu.call_function(0xAE60);

    // 74C2: JSR $AAE4
    cpu.call_function(0xAAE4);

    // 74C5: JSR $B071
    cpu.call_function(0xB071);

    // 74C8: JSR $AEBD
    cpu.call_function(0xAEBD);

    // 74CB: JSR $ADAF
    cpu.call_function(0xADAF);

    // 74CE: JSR $98B0
    cpu.call_function(0x98B0);

    // 74D1: JSR $612F
    cpu.call_function(0x612F);

    // 74D4: RTS 
    return;

    // 74D5: JSR $6112
    cpu.call_function(0x6112);

    // 74D8: LDA #$10
    cpu.m_a = 0x10;

    // 74DA: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 74DD: JSR $7160
    cpu.call_function(0x7160);

    // 74E0: JSR $761D
    cpu.call_function(0x761D);

    // 74E3: LDA $4B3E
    cpu.m_a = cpu.read_memory(0x4B3E);

    // 74E6: BEQ $74F2
    if (cpu.zero_flag()) cpu.m_pc = 0x74F2;

    // 74E8: LDD #$7100
    cpu.m_d = 0x7100;

    // 74EB: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 74ED: LDB #$46
    cpu.m_b = 0x46;

    // 74EF: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 74F2: JSR $95A7
    cpu.call_function(0x95A7);

    // 74F5: JSR $859B
    cpu.call_function(0x859B);

    // 74F8: JSR $AAE4
    cpu.call_function(0xAAE4);

    // 74FB: LDA $4B2D
    cpu.m_a = cpu.read_memory(0x4B2D);

    // 74FE: BNE $750F
    if (!cpu.zero_flag()) cpu.m_pc = 0x750F;

    // 7500: LDA $4895
    cpu.m_a = cpu.read_memory(0x4895);

    // 7503: BEQ $750F
    if (cpu.zero_flag()) cpu.m_pc = 0x750F;

    // 7505: LDD #$7100
    cpu.m_d = 0x7100;

    // 7508: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 750A: LDB #$44
    cpu.m_b = 0x44;

    // 750C: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 750F: JSR $7707
    cpu.call_function(0x7707);

    // 7512: JSR $98B0
    cpu.call_function(0x98B0);

    // 7515: JSR $612F
    cpu.call_function(0x612F);

    // 7518: RTS 
    return;

    // 7519: JSR $6112
    cpu.call_function(0x6112);

    // 751C: LDA #$10
    cpu.m_a = 0x10;

    // 751E: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 7521: JSR $7160
    cpu.call_function(0x7160);

    // 7524: JSR $761D
    cpu.call_function(0x761D);

    // 7527: JSR $95A7
    cpu.call_function(0x95A7);

    // 752A: JSR $B6B9
    cpu.call_function(0xB6B9);

    // 752D: JSR $CD80
    cpu.call_function(0xCD80);

    // 7530: LDB #$45
    cpu.m_b = 0x45;

    // 7532: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 7535: LDA $4B0E
    cpu.m_a = cpu.read_memory(0x4B0E);

    // 7538: CMPA #$02
    cpu.compare_a(0x02);

    // 753A: BGT $755A
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x755A;

    // 753C: LDB #$47
    cpu.m_b = 0x47;

    // 753E: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 7541: LDB #$48
    cpu.m_b = 0x48;

    // 7543: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 7546: LDD #$0090
    cpu.m_d = 0x0090;

    // 7549: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 754B: LDD #$0070
    cpu.m_d = 0x0070;

    // 754E: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 7550: LDA <$8E
    cpu.m_a = cpu.read_memory(0x8E);

    // 7552: JSR $E7AD
    cpu.call_function(0xE7AD);

    // 7555: LDD #$8040
    cpu.m_d = 0x8040;

    // 7558: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 755A: LDA $4B0E
    cpu.m_a = cpu.read_memory(0x4B0E);

    // 755D: CMPA #$01
    cpu.compare_a(0x01);

    // 755F: BGT $759C
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x759C;

    // 7561: LDA $4845
    cpu.m_a = cpu.read_memory(0x4845);

    // 7564: BEQ $759C
    if (cpu.zero_flag()) cpu.m_pc = 0x759C;

    // 7566: LDA $4592
    cpu.m_a = cpu.read_memory(0x4592);

    // 7569: ANDA #$03
    cpu.m_a &= 0x03;

    // 756B: BEQ $759C
    if (cpu.zero_flag()) cpu.m_pc = 0x759C;

    // 756D: LDB $4593
    cpu.m_b = cpu.read_memory(0x4593);

    // 7570: ANDB #$03
    cpu.m_b &= 0x03;

    // 7572: ADDB #$06
    cpu.m_b += 0x06;

    // 7574: CMPB <$60
    cpu.compare_b(cpu.read_memory(0x60));

    // 7576: BHI $757C
    // TODO: Convert BHI $757C

    // 7578: LDB #$4A
    cpu.m_b = 0x4A;

    // 757A: BRA $7599
    goto label_7599;

    // 757C: LDU #$A01A
    cpu.m_u = 0xA01A;

    // 757F: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // 7581: LDU #$0048
    cpu.m_u = 0x0048;

    // 7584: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // 7586: LDU #$1EC0
    cpu.m_u = 0x1EC0;

    // 7589: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // 758B: LDB #$01
    cpu.m_b = 0x01;

    // 758D: STB <$AD
    cpu.write_memory(0xAD, cpu.m_b);

    // 758F: JSR $E7AD
    cpu.call_function(0xE7AD);

    // 7592: LDD #$8040
    cpu.m_d = 0x8040;

    // 7595: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 7597: LDB #$49
    cpu.m_b = 0x49;

    label_7599:
    // 7599: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 759C: LDA $4B0E
    cpu.m_a = cpu.read_memory(0x4B0E);

    // 759F: CMPA #$00
    cpu.compare_a(0x00);

    // 75A1: BGT $75B2
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x75B2;

    // 75A3: LDA $4B2D
    cpu.m_a = cpu.read_memory(0x4B2D);

    // 75A6: BNE $75B2
    if (!cpu.zero_flag()) cpu.m_pc = 0x75B2;

    // 75A8: LDB $4B15
    cpu.m_b = cpu.read_memory(0x4B15);

    // 75AB: BEQ $75B2
    if (cpu.zero_flag()) cpu.m_pc = 0x75B2;

    // 75AD: LDB #$4B
    cpu.m_b = 0x4B;

    // 75AF: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 75B2: JSR $98B0
    cpu.call_function(0x98B0);

    // 75B5: JSR $612F
    cpu.call_function(0x612F);

    // 75B8: RTS 
    return;

    // 75B9: JSR $6112
    cpu.call_function(0x6112);

    // 75BC: LDA #$10
    cpu.m_a = 0x10;

    // 75BE: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 75C1: JSR $761D
    cpu.call_function(0x761D);

    // 75C4: LDA $4B36
    cpu.m_a = cpu.read_memory(0x4B36);

    // 75C7: BLE $75CC
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x75CC;

    // 75C9: JSR $97C2
    cpu.call_function(0x97C2);

    // 75CC: JSR $95A7
    cpu.call_function(0x95A7);

    // 75CF: JSR $B6B9
    cpu.call_function(0xB6B9);

    // 75D2: JSR $77A4
    cpu.call_function(0x77A4);

    // 75D5: JSR $612F
    cpu.call_function(0x612F);

    // 75D8: RTS 
    return;

    // 75D9: JSR $6112
    cpu.call_function(0x6112);

    // 75DC: LDA #$10
    cpu.m_a = 0x10;

    // 75DE: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 75E1: JSR $761D
    cpu.call_function(0x761D);

    // 75E4: JSR $95A7
    cpu.call_function(0x95A7);

    // 75E7: JSR $B6B9
    cpu.call_function(0xB6B9);

    // 75EA: LDD #$1F98
    cpu.m_d = 0x1F98;

    // 75ED: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 75EF: LDD #$0000
    cpu.m_d = 0x0000;

    // 75F2: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 75F4: LDD #$7200
    cpu.m_d = 0x7200;

    // 75F7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 75F9: LDD #$BE50
    cpu.m_d = 0xBE50;

    // 75FC: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 75FE: LDD #$7200
    cpu.m_d = 0x7200;

    // 7601: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 7603: JSR $BB85
    cpu.call_function(0xBB85);

    // 7606: JSR $612F
    cpu.call_function(0x612F);

    // 7609: RTS 
    return;

    // 760A: JSR $6112
    cpu.call_function(0x6112);

    // 760D: JSR $761D
    cpu.call_function(0x761D);

    // 7610: JSR $95A7
    cpu.call_function(0x95A7);

    // 7613: JSR $B6B9
    cpu.call_function(0xB6B9);

    // 7616: JSR $BB85
    cpu.call_function(0xBB85);

    // 7619: JSR $612F
    cpu.call_function(0x612F);

    // 761C: RTS 
    return;

    label_761D:
    // 761D: JMP $761d
    goto label_761D;

    // 7620: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 7622: LDD #$6280
    cpu.m_d = 0x6280;

    // 7625: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 7627: LDD #$01E0
    cpu.m_d = 0x01E0;

    // 762A: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 762C: LDD #$1E20
    cpu.m_d = 0x1E20;

    // 762F: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 7631: LDA #$06
    cpu.m_a = 0x06;

    // 7633: STA <$AD
    cpu.write_memory(0xAD, cpu.m_a);

    // 7635: LDX #$485C
    cpu.m_x = 0x485C;

    // 7638: JSR $E764
    cpu.call_function(0xE764);

    // 763B: LDD #$8040
    cpu.m_d = 0x8040;

    // 763E: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 7640: LDB $4B2C
    cpu.m_b = cpu.read_memory(0x4B2C);

    // 7643: BEQ $766E
    if (cpu.zero_flag()) cpu.m_pc = 0x766E;

    // 7645: SUBB #$08
    cpu.m_b -= 0x08;

    // 7647: CMPB #$20
    cpu.compare_b(0x20);

    // 7649: BCC $764D
    if (!cpu.carry_flag()) cpu.m_pc = 0x764D;

    // 764B: LDB #$00
    cpu.m_b = 0x00;

    // 764D: STB $4B2C
    cpu.write_memory(0x4B2C, cpu.m_b);

    // 7650: LSRB 
    cpu.m_b >>= 1;

    // 7651: LDA #$66
    cpu.m_a = 0x66;

    // 7653: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 7655: LDD #$01B0
    cpu.m_d = 0x01B0;

    // 7658: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 765A: LDD #$1E50
    cpu.m_d = 0x1E50;

    // 765D: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 765F: LDA #$05
    cpu.m_a = 0x05;

    // 7661: STA <$AD
    cpu.write_memory(0xAD, cpu.m_a);

    // 7663: LDX #$4B28
    cpu.m_x = 0x4B28;

    // 7666: JSR $E772
    cpu.call_function(0xE772);

    // 7669: LDD #$8040
    cpu.m_d = 0x8040;

    // 766C: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 766E: LDD #$6280
    cpu.m_d = 0x6280;

    // 7671: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 7673: LDD #$0210
    cpu.m_d = 0x0210;

    // 7676: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 7678: LDD #$0138
    cpu.m_d = 0x0138;

    // 767B: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 767D: LDA #$01
    cpu.m_a = 0x01;

    // 767F: STA <$AD
    cpu.write_memory(0xAD, cpu.m_a);

    // 7681: LDA $4B16
    cpu.m_a = cpu.read_memory(0x4B16);

    // 7684: JSR $E790
    cpu.call_function(0xE790);

    // 7687: LDD #$8040
    cpu.m_d = 0x8040;

    // 768A: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 768C: RTS 
    return;

    // 768D: LDA $4B13
    cpu.m_a = cpu.read_memory(0x4B13);

    // 7690: BLE $76FC
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x76FC;

    // 7692: LDA $4B1A
    cpu.m_a = cpu.read_memory(0x4B1A);

    // 7695: BEQ $76D3
    if (cpu.zero_flag()) cpu.m_pc = 0x76D3;

    // 7697: LDA <$43
    cpu.m_a = cpu.read_memory(0x43);

    // 7699: ANDA #$30
    cpu.m_a &= 0x30;

    // 769B: BEQ $76CE
    if (cpu.zero_flag()) cpu.m_pc = 0x76CE;

    // 769D: LDB #$40
    cpu.m_b = 0x40;

    // 769F: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 76A2: LDD #$6280
    cpu.m_d = 0x6280;

    // 76A5: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 76A7: LDD #$0180
    cpu.m_d = 0x0180;

    // 76AA: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 76AC: LDD #$1ED0
    cpu.m_d = 0x1ED0;

    // 76AF: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 76B1: LDA #$04
    cpu.m_a = 0x04;

    // 76B3: STA <$AD
    cpu.write_memory(0xAD, cpu.m_a);

    // 76B5: LDA $4B2E
    cpu.m_a = cpu.read_memory(0x4B2E);

    // 76B8: JSR $E790
    cpu.call_function(0xE790);

    // 76BB: LDA $4B2F
    cpu.m_a = cpu.read_memory(0x4B2F);

    // 76BE: JSR $E790
    cpu.call_function(0xE790);

    // 76C1: LDA $4B30
    cpu.m_a = cpu.read_memory(0x4B30);

    // 76C4: JSR $E790
    cpu.call_function(0xE790);

    // 76C7: LDD #$8040
    cpu.m_d = 0x8040;

    // 76CA: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 76CC: BRA $76D3
    goto label_76D3;

    // 76CE: LDB #$43
    cpu.m_b = 0x43;

    // 76D0: JSR $E7C7
    cpu.call_function(0xE7C7);

    label_76D3:
    // 76D3: LDA $4B13
    cpu.m_a = cpu.read_memory(0x4B13);

    // 76D6: BLE $76FC
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x76FC;

    // 76D8: LDD #$0041
    cpu.m_d = 0x0041;

    // 76DB: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 76DE: LDD #$6280
    cpu.m_d = 0x6280;

    // 76E1: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 76E3: LDD #$0198
    cpu.m_d = 0x0198;

    // 76E6: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 76E8: LDD #$0168
    cpu.m_d = 0x0168;

    // 76EB: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 76ED: LDA #$01
    cpu.m_a = 0x01;

    // 76EF: STA <$AD
    cpu.write_memory(0xAD, cpu.m_a);

    // 76F1: LDA $4B1A
    cpu.m_a = cpu.read_memory(0x4B1A);

    // 76F4: JSR $E790
    cpu.call_function(0xE790);

    // 76F7: LDD #$8040
    cpu.m_d = 0x8040;

    // 76FA: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 76FC: LDA $4B35
    cpu.m_a = cpu.read_memory(0x4B35);

    // 76FF: BEQ $7706
    if (cpu.zero_flag()) cpu.m_pc = 0x7706;

    // 7701: LDB #$42
    cpu.m_b = 0x42;

    // 7703: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 7706: RTS 
    return;

    // 7707: LDA $4B0F
    cpu.m_a = cpu.read_memory(0x4B0F);

    // 770A: CMPA #$20
    cpu.compare_a(0x20);

    // 770C: BLS $7710
    // TODO: Convert BLS $7710

    // 770E: LDA #$20
    cpu.m_a = 0x20;

    // 7710: LDB #$06
    cpu.m_b = 0x06;

    // 7712: MUL 
    // TODO: Convert MUL 

    // 7713: NEGB 
    cpu.m_b = -cpu.m_b;

    // 7714: ADDB #$C0
    cpu.m_b += 0xC0;

    // 7716: LDA #$70
    cpu.m_a = 0x70;

    // 7718: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 771A: LDB #$04
    cpu.m_b = 0x04;

    // 771C: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 771F: RTS 
    return;

    // 7720: STD $4AD7
    cpu.write_memory16(0x4AD7, cpu.m_d);

    // 7723: LDD #$0000
    cpu.m_d = 0x0000;

    // 7726: STD $4AD4
    cpu.write_memory16(0x4AD4, cpu.m_d);

    // 7729: STA $4AD6
    cpu.write_memory(0x4AD6, cpu.m_a);

    // 772C: ASL $4AD8
    cpu.arithmetic_shift_left(0x4AD8);

    // 772F: ROL $4AD7
    cpu.rotate_left(0x4AD7);

    // 7732: LDA $4AD6
    cpu.m_a = cpu.read_memory(0x4AD6);

    // 7735: ADCA $4AD6
    cpu.add_a_with_carry(cpu.read_memory(0x4AD6));

    // 7738: DAA 
    // TODO: Convert DAA 

    // 7739: STA $4AD6
    cpu.write_memory(0x4AD6, cpu.m_a);

    // 773C: LDA $4AD5
    cpu.m_a = cpu.read_memory(0x4AD5);

    // 773F: ADCA $4AD5
    cpu.add_a_with_carry(cpu.read_memory(0x4AD5));

    // 7742: DAA 
    // TODO: Convert DAA 

    // 7743: STA $4AD5
    cpu.write_memory(0x4AD5, cpu.m_a);

    // 7746: ROL $4AD4
    cpu.rotate_left(0x4AD4);

    // 7749: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // 774B: BNE $772C
    if (!cpu.zero_flag()) cpu.m_pc = 0x772C;

    // 774D: RTS 
    return;

    // 774E: STA $4AD7
    cpu.write_memory(0x4AD7, cpu.m_a);

    // 7751: ANDA #$F0
    cpu.m_a &= 0xF0;

    // 7753: LDB #$A0
    cpu.m_b = 0xA0;

    // 7755: MUL 
    // TODO: Convert MUL 

    // 7756: LDB $4AD7
    cpu.m_b = cpu.read_memory(0x4AD7);

    // 7759: ANDB #$0F
    cpu.m_b &= 0x0F;

    // 775B: STB $4AD7
    cpu.write_memory(0x4AD7, cpu.m_b);

    // 775E: ADDA $4AD7
    cpu.m_a += cpu.read_memory(0x4AD7);

    // 7761: STA $4AD7
    cpu.write_memory(0x4AD7, cpu.m_a);

    // 7764: RTS 
    return;

    // 7765: LDD $5028
    cpu.m_d = cpu.read_memory16(0x5028);

    // 7768: BLE $77A3
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x77A3;

    // 776A: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // 776D: LDD $502A
    cpu.m_d = cpu.read_memory16(0x502A);

    // 7770: STD $5002
    cpu.write_memory16(0x5002, cpu.m_d);

    // 7773: TSTA 
    cpu.test_a();

    // 7774: BPL $777A
    if (!cpu.negative_flag()) cpu.m_pc = 0x777A;

    // 7776: COMA 
    cpu.m_a = ~cpu.m_a;

    // 7777: NEGB 
    cpu.m_b = -cpu.m_b;

    // 7778: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 777A: SUBD $5028
    cpu.m_d -= 0x5028;

    // 777D: BGE $77A3
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x77A3;

    // 777F: LDD $502C
    cpu.m_d = cpu.read_memory16(0x502C);

    // 7782: STD $5004
    cpu.write_memory16(0x5004, cpu.m_d);

    // 7785: TSTA 
    cpu.test_a();

    // 7786: BPL $778C
    if (!cpu.negative_flag()) cpu.m_pc = 0x778C;

    // 7788: COMA 
    cpu.m_a = ~cpu.m_a;

    // 7789: NEGB 
    cpu.m_b = -cpu.m_b;

    // 778A: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 778C: SUBD $5028
    cpu.m_d -= 0x5028;

    // 778F: BGE $77A3
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x77A3;

    // 7791: JSR $CCF0
    cpu.call_function(0xCCF0);

    // 7794: LDD #$7300
    cpu.m_d = 0x7300;

    // 7797: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 7799: LDD #$BE50
    cpu.m_d = 0xBE50;

    // 779C: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 779E: LDD #$7200
    cpu.m_d = 0x7200;

    // 77A1: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 77A3: RTS 
    return;

    // 77A4: LDD $5028
    cpu.m_d = cpu.read_memory16(0x5028);

    // 77A7: BLE $77D3
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x77D3;

    // 77A9: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // 77AC: LDD $502A
    cpu.m_d = cpu.read_memory16(0x502A);

    // 77AF: STD $5002
    cpu.write_memory16(0x5002, cpu.m_d);

    // 77B2: TSTA 
    cpu.test_a();

    // 77B3: BPL $77B9
    if (!cpu.negative_flag()) cpu.m_pc = 0x77B9;

    // 77B5: COMA 
    cpu.m_a = ~cpu.m_a;

    // 77B6: NEGB 
    cpu.m_b = -cpu.m_b;

    // 77B7: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 77B9: SUBD $5028
    cpu.m_d -= 0x5028;

    // 77BC: BGE $77D3
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x77D3;

    // 77BE: LDD $502C
    cpu.m_d = cpu.read_memory16(0x502C);

    // 77C1: STD $5004
    cpu.write_memory16(0x5004, cpu.m_d);

    // 77C4: TSTA 
    cpu.test_a();

    // 77C5: BPL $77CB
    if (!cpu.negative_flag()) cpu.m_pc = 0x77CB;

    // 77C7: COMA 
    cpu.m_a = ~cpu.m_a;

    // 77C8: NEGB 
    cpu.m_b = -cpu.m_b;

    // 77C9: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 77CB: SUBD $5028
    cpu.m_d -= 0x5028;

    // 77CE: BGE $77D3
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x77D3;

    // 77D0: JSR $77D4
    cpu.call_function(0x77D4);

    // 77D3: RTS 
    return;

    // 77D4: JSR $CCF0
    cpu.call_function(0xCCF0);

    // 77D7: LDD -$4,Y
    // TODO: Fix comma operator: LDD -$4,Y

    // 77D9: STD <$05
    cpu.write_memory16(0x05, cpu.m_d);

    // 77DB: LDD -$2,Y
    // TODO: Fix comma operator: LDD -$2,Y

    // 77DD: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    // 77DF: LDD <$56
    cpu.m_d = cpu.read_memory16(0x56);

    // 77E1: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // 77E3: LDU #$BD68
    cpu.m_u = 0xBD68;

    // 77E6: JSR $7863
    cpu.call_function(0x7863);

    // 77E9: LDU #$BDA6
    cpu.m_u = 0xBDA6;

    // 77EC: JSR $785B
    cpu.call_function(0x785B);

    // 77EF: LDU #$BDB2
    cpu.m_u = 0xBDB2;

    // 77F2: JSR $785B
    cpu.call_function(0x785B);

    // 77F5: LDU #$BDDA
    cpu.m_u = 0xBDDA;

    // 77F8: JSR $785B
    cpu.call_function(0x785B);

    // 77FB: LDU #$BE06
    cpu.m_u = 0xBE06;

    // 77FE: JSR $785B
    cpu.call_function(0x785B);

    // 7801: LDD <$56
    cpu.m_d = cpu.read_memory16(0x56);

    // 7803: SUBA #$03
    cpu.m_a -= 0x03;

    // 7805: CMPD #$7000
    cpu.execute_cmpd_immediate(0x7000);

    // 7809: BCC $780E
    if (!cpu.carry_flag()) cpu.m_pc = 0x780E;

    // 780B: LDD #$7000
    cpu.m_d = 0x7000;

    // 780E: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // 7810: CMPA #$70
    cpu.compare_a(0x70);

    // 7812: BNE $7819
    if (!cpu.zero_flag()) cpu.m_pc = 0x7819;

    // 7814: LDD #$6660
    cpu.m_d = 0x6660;

    // 7817: BRA $781C
    goto label_781C;

    // 7819: LDD #$6630
    cpu.m_d = 0x6630;

    label_781C:
    // 781C: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 781E: LDA $4B14
    cpu.m_a = cpu.read_memory(0x4B14);

    // 7821: BITA #$01
    // TODO: Convert BITA #$01

    // 7823: BNE $782A
    if (!cpu.zero_flag()) cpu.m_pc = 0x782A;

    // 7825: LDU #$B728
    cpu.m_u = 0xB728;

    // 7828: BRA $7839
    goto label_7839;

    // 782A: LDU #$B73C
    cpu.m_u = 0xB73C;

    // 782D: JSR $785B
    cpu.call_function(0x785B);

    // 7830: LDU #$B749
    cpu.m_u = 0xB749;

    // 7833: JSR $785B
    cpu.call_function(0x785B);

    // 7836: LDU #$B754
    cpu.m_u = 0xB754;

    label_7839:
    // 7839: JSR $785B
    cpu.call_function(0x785B);

    // 783C: LDA $4B14
    cpu.m_a = cpu.read_memory(0x4B14);

    // 783F: BITA #$01
    // TODO: Convert BITA #$01

    // 7841: BNE $7848
    if (!cpu.zero_flag()) cpu.m_pc = 0x7848;

    // 7843: LDU #$B75E
    cpu.m_u = 0xB75E;

    // 7846: BRA $7857
    goto label_7857;

    // 7848: LDU #$B770
    cpu.m_u = 0xB770;

    // 784B: JSR $785B
    cpu.call_function(0x785B);

    // 784E: LDU #$B77C
    cpu.m_u = 0xB77C;

    // 7851: JSR $785B
    cpu.call_function(0x785B);

    // 7854: LDU #$B788
    cpu.m_u = 0xB788;

    label_7857:
    // 7857: JSR $785B
    cpu.call_function(0x785B);

    // 785A: RTS 
    return;

    // 785B: LDD <$05
    cpu.m_d = cpu.read_memory16(0x05);

    // 785D: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 785F: LDD <$03
    cpu.m_d = cpu.read_memory16(0x03);

    // 7861: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 7863: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    // 7865: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 7867: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // 7869: RTS 
    return;

    // 786A: LDX #$4900
    cpu.m_x = 0x4900;

    // 786D: STX <$64
    cpu.write_memory16(0x64, cpu.m_x);

    // 786F: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // 7871: BEQ $7876
    if (cpu.zero_flag()) cpu.m_pc = 0x7876;

    // 7873: JSR $7881
    cpu.call_function(0x7881);

    // 7876: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // 7878: LEAX $19,X
    // TODO: Fix comma operator: LEAX $19,X

    // 787B: CMPX #$494B
    cpu.compare_x(0x494B);

    // 787E: BCS $786D
    if (cpu.carry_flag()) cpu.m_pc = 0x786D;

    // 7880: RTS 
    return;

    // 7881: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // 7883: CLRA 
    cpu.m_a = 0;

    // 7884: LDB $2,X
    // TODO: Fix comma operator: LDB $2,X

    // 7886: ADDB #$03
    cpu.m_b += 0x03;

    // 7888: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 788B: LDA #$67
    cpu.m_a = 0x67;

    // 788D: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 7890: LDA $5000
    cpu.m_a = cpu.read_memory(0x5000);

    // 7893: ASLA 
    cpu.m_a <<= 1;

    // 7894: BVS $7909
    // TODO: Convert BVS $7909

    // 7896: LDA $5002
    cpu.m_a = cpu.read_memory(0x5002);

    // 7899: ASLA 
    cpu.m_a <<= 1;

    // 789A: BVS $7909
    // TODO: Convert BVS $7909

    // 789C: LDA $5004
    cpu.m_a = cpu.read_memory(0x5004);

    // 789F: ASLA 
    cpu.m_a <<= 1;

    // 78A0: BVS $7909
    // TODO: Convert BVS $7909

    // 78A2: LDD $5070
    cpu.m_d = cpu.read_memory16(0x5070);

    // 78A5: ADDD $5072
    cpu.m_d += 0x5072;

    // 78A8: ADDD $5074
    cpu.m_d += 0x5074;

    // 78AB: TFR D,U
    cpu.m_u = cpu.m_d;

    // 78AD: CMPU #$0900
    cpu.execute_cmpu_immediate(0x0900);

    // 78B1: BHI $78BB
    // TODO: Convert BHI $78BB

    // 78B3: LDD $15,X
    // TODO: Fix comma operator: LDD $15,X

    // 78B6: ORA #$20
    cpu.m_a |= 0x20;

    // 78B8: STD $15,X
    cpu.write_memory16(cpu.m_x + 0x15, cpu.m_d);

    // 78BB: CMPU #$0100
    cpu.execute_cmpu_immediate(0x0100);

    // 78BF: BHI $78C9
    // TODO: Convert BHI $78C9

    // 78C1: LDD $15,X
    // TODO: Fix comma operator: LDD $15,X

    // 78C4: ORA #$04
    cpu.m_a |= 0x04;

    // 78C6: STD $15,X
    cpu.write_memory16(cpu.m_x + 0x15, cpu.m_d);

    // 78C9: CMPU #$00A0
    cpu.execute_cmpu_immediate(0x00A0);

    // 78CD: BHI $78FF
    // TODO: Convert BHI $78FF

    // 78CF: LDA $4B38
    cpu.m_a = cpu.read_memory(0x4B38);

    // 78D2: BNE $78E4
    if (!cpu.zero_flag()) cpu.m_pc = 0x78E4;

    // 78D4: LDA $2,X
    // TODO: Fix comma operator: LDA $2,X

    // 78D6: STA $4B38
    cpu.write_memory(0x4B38, cpu.m_a);

    // 78D9: JSR $BD08
    cpu.call_function(0xBD08);

    // 78DC: JSR $BDC6
    cpu.call_function(0xBDC6);

    // 78DF: STU $4B39
    cpu.write_memory16(0x4B39, cpu.m_u);

    // 78E2: BRA $78FD
    goto label_78FD;

    // 78E4: CMPA $2,X
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_x + 0x02));

    // 78E6: BNE $78FD
    if (!cpu.zero_flag()) cpu.m_pc = 0x78FD;

    // 78E8: CMPU $4B39
    cpu.execute_cmpu_immediate(0x4B39);

    // 78EC: BGT $78F3
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x78F3;

    // 78EE: STU $4B39
    cpu.write_memory16(0x4B39, cpu.m_u);

    // 78F1: BRA $78FD
    goto label_78FD;

    // 78F3: BCS $78FD
    if (cpu.carry_flag()) cpu.m_pc = 0x78FD;

    // 78F5: LDA #$FF
    cpu.m_a = 0xFF;

    // 78F7: STA $4B39
    cpu.write_memory(0x4B39, cpu.m_a);

    // 78FA: JSR $BDDA
    cpu.call_function(0xBDDA);

    label_78FD:
    // 78FD: BRA $7909
    goto label_7909;

    // 78FF: LDA $2,X
    // TODO: Fix comma operator: LDA $2,X

    // 7901: CMPA $4B38
    cpu.compare_a(cpu.read_memory(cpu.read_memory(0x4B38)));

    // 7904: BNE $7909
    if (!cpu.zero_flag()) cpu.m_pc = 0x7909;

    // 7906: CLR $4B38
    cpu.write_memory(0x4B38, 0);

    label_7909:
    // 7909: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // 790C: CMPD #$0010
    cpu.execute_cmpd_immediate(0x0010);

    // 7910: LBLE $7880
    // TODO: Convert LBLE $7880

    // 7914: CMPD #$7F00
    cpu.execute_cmpd_immediate(0x7F00);

    // 7918: LBHI $7880
    // TODO: Convert LBHI $7880

    // 791C: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // 791F: STD $5018
    cpu.write_memory16(0x5018, cpu.m_d);

    // 7922: LDD $5002
    cpu.m_d = cpu.read_memory16(0x5002);

    // 7925: STD $501A
    cpu.write_memory16(0x501A, cpu.m_d);

    // 7928: LDD $5072
    cpu.m_d = cpu.read_memory16(0x5072);

    // 792B: SUBD $5070
    cpu.m_d -= 0x5070;

    // 792E: LBCC $7880
    // TODO: Convert LBCC $7880

    // 7932: LDD $5004
    cpu.m_d = cpu.read_memory16(0x5004);

    // 7935: STD $501C
    cpu.write_memory16(0x501C, cpu.m_d);

    // 7938: LDD $5074
    cpu.m_d = cpu.read_memory16(0x5074);

    // 793B: SUBD $5070
    cpu.m_d -= 0x5070;

    // 793E: LBCC $7880
    // TODO: Convert LBCC $7880

    // 7942: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // 7944: LDD $15,X
    // TODO: Fix comma operator: LDD $15,X

    // 7947: ORA #$10
    cpu.m_a |= 0x10;

    // 7949: STD $15,X
    cpu.write_memory16(cpu.m_x + 0x15, cpu.m_d);

    // 794C: LDA $4B3B
    cpu.m_a = cpu.read_memory(0x4B3B);

    // 794F: BNE $7972
    if (!cpu.zero_flag()) cpu.m_pc = 0x7972;

    // 7951: LDA $4,X
    // TODO: Fix comma operator: LDA $4,X

    // 7953: CMPA #$04
    cpu.compare_a(0x04);

    // 7955: BNE $7972
    if (!cpu.zero_flag()) cpu.m_pc = 0x7972;

    // 7957: INC $4B3B
    cpu.increment_memory(0x4B3B);

    // 795A: LDA $4B14
    cpu.m_a = cpu.read_memory(0x4B14);

    // 795D: LSRA 
    cpu.m_a >>= 1;

    // 795E: BCS $796F
    if (cpu.carry_flag()) cpu.m_pc = 0x796F;

    // 7960: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // 7963: BPL $796A
    if (!cpu.negative_flag()) cpu.m_pc = 0x796A;

    // 7965: JSR $BD5D
    cpu.call_function(0xBD5D);

    // 7968: BRA $796D
    goto label_796D;

    // 796A: JSR $BD2B
    cpu.call_function(0xBD2B);

    label_796D:
    // 796D: BRA $7972
    goto label_7972;

    // 796F: JSR $BD1C
    cpu.call_function(0xBD1C);

    label_7972:
    // 7972: LDA $2,X
    // TODO: Fix comma operator: LDA $2,X

    // 7974: JSR $CE18
    cpu.call_function(0xCE18);

    // 7977: JSR $CCF0
    cpu.call_function(0xCCF0);

    // 797A: LDD #$0050
    cpu.m_d = 0x0050;

    // 797D: STD $5002
    cpu.write_memory16(0x5002, cpu.m_d);

    // 7980: LDA #$86
    cpu.m_a = 0x86;

    // 7982: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 7985: LDD $5002
    cpu.m_d = cpu.read_memory16(0x5002);

    // 7988: ADDD #$000A
    cpu.m_d += 0x000A;

    // 798B: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // 798D: LDD <$D6
    cpu.m_d = cpu.read_memory16(0xD6);

    // 798F: SUBD <$B3
    cpu.m_d -= 0xB3;

    // 7991: BPL $7997
    if (!cpu.negative_flag()) cpu.m_pc = 0x7997;

    // 7993: COMA 
    cpu.m_a = ~cpu.m_a;

    // 7994: NEGB 
    cpu.m_b = -cpu.m_b;

    // 7995: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 7997: STD <$05
    cpu.write_memory16(0x05, cpu.m_d);

    // 7999: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    // 799B: LDD <$D8
    cpu.m_d = cpu.read_memory16(0xD8);

    // 799D: SUBD <$B5
    cpu.m_d -= 0xB5;

    // 799F: BPL $79A5
    if (!cpu.negative_flag()) cpu.m_pc = 0x79A5;

    // 79A1: COMA 
    cpu.m_a = ~cpu.m_a;

    // 79A2: NEGB 
    cpu.m_b = -cpu.m_b;

    // 79A3: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 79A5: STD <$07
    cpu.write_memory16(0x07, cpu.m_d);

    // 79A7: ADDD <$03
    cpu.m_d += 0x03;

    // 79A9: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    // 79AB: LDD <$05
    cpu.m_d = cpu.read_memory16(0x05);

    // 79AD: SUBD <$01
    cpu.m_d -= 0x01;

    // 79AF: BGT $79CF
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x79CF;

    // 79B1: LDD <$07
    cpu.m_d = cpu.read_memory16(0x07);

    // 79B3: SUBD <$01
    cpu.m_d -= 0x01;

    // 79B5: BGT $79CF
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x79CF;

    // 79B7: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    // 79B9: LSRA 
    cpu.m_a >>= 1;

    // 79BA: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // 79BB: ADDD <$01
    cpu.m_d += 0x01;

    // 79BD: SUBD <$03
    cpu.m_d -= 0x03;

    // 79BF: BLT $79CF
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x79CF;

    // 79C1: LDD $5018
    cpu.m_d = cpu.read_memory16(0x5018);

    // 79C4: CMPD <$C4
    cpu.execute_cmpd_immediate(0xC4);

    // 79C7: BCC $79CF
    if (!cpu.carry_flag()) cpu.m_pc = 0x79CF;

    // 79C9: STD <$C4
    cpu.write_memory16(0xC4, cpu.m_d);

    // 79CB: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // 79CD: STX <$C2
    cpu.write_memory16(0xC2, cpu.m_x);

    // 79CF: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    // 79D1: ADDD <$01
    cpu.m_d += 0x01;

    // 79D3: ADDD <$01
    cpu.m_d += 0x01;

    // 79D5: SUBD <$03
    cpu.m_d -= 0x03;

    // 79D7: BCS $79E9
    if (cpu.carry_flag()) cpu.m_pc = 0x79E9;

    // 79D9: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // 79DB: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // 79DD: CMPA #$01
    cpu.compare_a(0x01);

    // 79DF: BNE $79E9
    if (!cpu.zero_flag()) cpu.m_pc = 0x79E9;

    // 79E1: LDD $15,X
    // TODO: Fix comma operator: LDD $15,X

    // 79E4: ORA #$08
    cpu.m_a |= 0x08;

    // 79E6: STD $15,X
    cpu.write_memory16(cpu.m_x + 0x15, cpu.m_d);

    // 79E9: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // 79EB: LDB $6,X
    // TODO: Fix comma operator: LDB $6,X

    // 79ED: LDU #$7A08
    cpu.m_u = 0x7A08;

    // 79F0: ASLB 
    cpu.m_b <<= 1;

    // 79F1: LDD B,U
    // TODO: Fix comma operator: LDD B,U

    // 79F3: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 79F5: LDA #$40
    cpu.m_a = 0x40;

    // 79F7: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 79FA: LDB $4,X
    // TODO: Fix comma operator: LDB $4,X

    // 79FC: JSR $CD14
    cpu.call_function(0xCD14);

    // 79FF: JSR $CD2C
    cpu.call_function(0xCD2C);

    // 7A02: LDD #$8040
    cpu.m_d = 0x8040;

    // 7A05: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 7A07: RTS 
    return;

    // 7A08: XNC ,X+
    // TODO: Convert XNC ,X+

    // 7A0A: ASR -$10,Y
    // TODO: Convert ASR -$10,Y

    // 7A0C: XNC ,X+
    // TODO: Convert XNC ,X+

    // 7A0E: ASR -$10,Y
    // TODO: Convert ASR -$10,Y

    // 7A10: XNC ,X+
    // TODO: Convert XNC ,X+

    // 7A12: ASR $0,U
    // TODO: Convert ASR $0,U

    // 7A14: XNC ,X+
    // TODO: Convert XNC ,X+

    // 7A16: ASR $0,U
    // TODO: Convert ASR $0,U

    // 7A18: XNC ,X+
    // TODO: Convert XNC ,X+

    // 7A1A: ASR -$10,U
    // TODO: Convert ASR -$10,U

    // 7A1C: XNC ,X+
    // TODO: Convert XNC ,X+

    // 7A1E: ASR -$10,U
    // TODO: Convert ASR -$10,U

    // 7A20: XNC ,X+
    // TODO: Convert XNC ,X+

    // 7A22: ASR $0,S
    // TODO: Convert ASR $0,S

    // 7A24: XNC ,X+
    // TODO: Convert XNC ,X+

    // 7A26: ASR $0,S
    // TODO: Convert ASR $0,S

    // 7A28: XNC ,X+
    // TODO: Convert XNC ,X+

    // 7A2A: ASR -$10,S
    // TODO: Convert ASR -$10,S

    // 7A2C: XNC ,X+
    // TODO: Convert XNC ,X+

    // 7A2E: ASR -$10,S
    // TODO: Convert ASR -$10,S

    // 7A30: XNC ,X+
    // TODO: Convert XNC ,X+

    // 7A32: ASR ,X+
    // TODO: Convert ASR ,X+

    // 7A34: XNC ,X+
    // TODO: Convert XNC ,X+

    // 7A36: ASR ,X+
    // TODO: Convert ASR ,X+

    // 7A38: XNC ,X+
    // TODO: Convert XNC ,X+

    // 7A3A: ASR ,X+
    // TODO: Convert ASR ,X+

    // 7A3C: XNC ,X+
    // TODO: Convert XNC ,X+

    // 7A3E: ASR ,X+
    // TODO: Convert ASR ,X+

    // 7A40: XNC ,X+
    // TODO: Convert XNC ,X+

    // 7A42: ASR ,X+
    // TODO: Convert ASR ,X+

    // 7A44: ASR ,U+
    // TODO: Convert ASR ,U+

    // 7A46: ASR ,U+
    // TODO: Convert ASR ,U+

    label_7A48:
    // 7A48: JMP $7a48
    goto label_7A48;

    // 7A4B: JSR $CDC3
    cpu.call_function(0xCDC3);

    // 7A4E: LDD #$0000
    cpu.m_d = 0x0000;

    // 7A51: STD $5098
    cpu.write_memory16(0x5098, cpu.m_d);

    // 7A54: STD $509A
    cpu.write_memory16(0x509A, cpu.m_d);

    // 7A57: STD $509C
    cpu.write_memory16(0x509C, cpu.m_d);

    // 7A5A: LDD #$0000
    cpu.m_d = 0x0000;

    // 7A5D: STA <$62
    cpu.write_memory(0x62, cpu.m_a);

    // 7A5F: STA <$63
    cpu.write_memory(0x63, cpu.m_a);

    // 7A61: STA <$31
    cpu.write_memory(0x31, cpu.m_a);

    // 7A63: STA <$BC
    cpu.write_memory(0xBC, cpu.m_a);

    // 7A65: STA <$B7
    cpu.write_memory(0xB7, cpu.m_a);

    // 7A67: STA <$BD
    cpu.write_memory(0xBD, cpu.m_a);

    // 7A69: STD <$A3
    cpu.write_memory16(0xA3, cpu.m_d);

    // 7A6B: STA $4878
    cpu.write_memory(0x4878, cpu.m_a);

    // 7A6E: STA $486E
    cpu.write_memory(0x486E, cpu.m_a);

    // 7A71: STA $4877
    cpu.write_memory(0x4877, cpu.m_a);

    // 7A74: STD $4874
    cpu.write_memory16(0x4874, cpu.m_d);

    // 7A77: STD $486B
    cpu.write_memory16(0x486B, cpu.m_d);

    // 7A7A: RTS 
    return;

    // 7B27: XNCA 
    // TODO: Convert XNCA 

    // 7B28: SBCA #$DC
    cpu.sub_a_with_carry(0xDC);

    // 7B2A: CMPA #$E2
    cpu.compare_a(0xE2);

    // 7B2C: SBCA #$DC
    cpu.sub_a_with_carry(0xDC);

    // 7B2E: CMPA #$C3
    cpu.compare_a(0xC3);

    // 7B30: SBCA #$DC
    cpu.sub_a_with_carry(0xDC);

    // 7B32: SBCA #$67
    cpu.sub_a_with_carry(0x67);

    label_7B34:
    // 7B34: JMP $7b34
    goto label_7B34;

    // 7B36: SBCA #$01
    cpu.sub_a_with_carry(0x01);

    // 7B38: SBCA #$DC
    cpu.sub_a_with_carry(0xDC);

    // 7B3A: CMPA #$E2
    cpu.compare_a(0xE2);

    // 7B3C: SBCA #$FA
    cpu.sub_a_with_carry(0xFA);

    // 7B3E: JMP $0882
    // TODO: External jump to 0x0882 - not implemented

    // 7B41: LDD <$7D
    cpu.m_d = cpu.read_memory16(0x7D);

    // 7B43: XNCA 
    // TODO: Convert XNCA 

    // 7B44: SBCA #$C8
    cpu.sub_a_with_carry(0xC8);

    // 7B46: TST $B182
    // TODO: Convert TST $B182

    label_7B49:
    // 7B49: JMP $7b49
    goto label_7B49;

    // 7B4B: LDB #$82
    cpu.m_b = 0x82;

    // 7B4D: LDD <$7F
    cpu.m_d = cpu.read_memory16(0x7F);

    // 7B4F: ASL $82DC
    cpu.arithmetic_shift_left(0x82DC);

    // 7B52: CLR $9782
    cpu.write_memory(0x9782, 0);

    // 7B55: LDD <$81
    cpu.m_d = cpu.read_memory16(0x81);

    // 7B57: ADDD #$82D2
    cpu.m_d += 0x82D2;

    // 7B5A: TST $B182
    // TODO: Convert TST $B182

    // 7B5D: ORB $7E08
    cpu.m_b |= cpu.read_memory(0x7E08);

    // 7B60: SBCA #$DC
    cpu.sub_a_with_carry(0xDC);

    // 7B62: INC $F882
    cpu.increment_memory(0xF882);

    // 7B65: EORB #$7D
    cpu.m_b ^= 0x7D;

    // 7B67: ORB #$82
    cpu.m_b |= 0x82;

    // 7B69: LDD <$80
    cpu.m_d = cpu.read_memory16(0x80);

    // 7B6B: ROR ,-X
    // TODO: Convert ROR ,-X

    // 7B6D: LDB ,X+
    // TODO: Complex indexed addressing: ,X+

    // 7B6F: TSTA 
    cpu.test_a();

    // 7B70: SBCA #$BE
    cpu.sub_a_with_carry(0xBE);

    // 7B72: SUBA #$C6
    cpu.m_a -= 0xC6;

    // 7B74: SBCA #$C8
    cpu.sub_a_with_carry(0xC8);

    // 7B76: JMP $3D82
    // TODO: External jump to 0x3D82 - not implemented

    // 7B79: SBCB <$82
    cpu.sub_b_with_carry(0x82);

    // 7B7B: ASR ,--X
    // TODO: Convert ASR ,--X

    // 7B7D: BCS $7BFD
    if (cpu.carry_flag()) cpu.m_pc = 0x7BFD;

    // 7B7F: ASL <$82
    cpu.arithmetic_shift_left(0x82);

    // 7B81: LDD <$7D
    cpu.m_d = cpu.read_memory16(0x7D);

    // 7B83: XDECB 
    cpu.m_b--;

    // 7B84: SBCA #$C8
    cpu.sub_a_with_carry(0xC8);

    // 7B86: JMP $D882
    goto label_D882;

    // 7B89: SUBB $7E75
    cpu.m_b -= cpu.read_memory(0x7E75);

    // 7B8C: SBCA #$D2
    cpu.sub_a_with_carry(0xD2);

    // 7B8E: CMPA #$35
    cpu.compare_a(0x35);

    // 7B90: SBCA #$D2
    cpu.sub_a_with_carry(0xD2);

    // 7B92: SBCA #$26
    cpu.sub_a_with_carry(0x26);

    // 7B94: SBCA #$C8
    cpu.sub_a_with_carry(0xC8);

    // 7B96: JMP $D882
    goto label_D882;

    // 7B99: SUBB $7E75
    cpu.m_b -= cpu.read_memory(0x7E75);

    // 7B9C: SUBD #$257E
    cpu.m_d -= 0x257E;

    label_7B9E:
    // 7B9E: JMP $0882
    // TODO: External jump to 0x0882 - not implemented

    // 7B9F: ASL <$82
    cpu.arithmetic_shift_left(0x82);

    // 7BA1: LDD <$82
    cpu.m_d = cpu.read_memory16(0x82);

    // 7BA3: BNE $7B27
    if (!cpu.zero_flag()) cpu.m_pc = 0x7B27;

    // 7BA5: EORB #$81
    cpu.m_b ^= 0x81;

    // 7BA7: DEC <$82
    cpu.decrement_memory(0x82);

    // 7BA9: SBCB <$80
    cpu.sub_b_with_carry(0x80);

    // 7BAB: TSTA 
    cpu.test_a();

    // 7BAC: SBCA #$BE
    cpu.sub_a_with_carry(0xBE);

    // 7BAE: SUBA #$66
    cpu.m_a -= 0x66;

    // 7BB0: SBCA #$E6
    cpu.sub_a_with_carry(0xE6);

    // 7BB2: JMP $3D82
    // TODO: External jump to 0x3D82 - not implemented

    // 7BB5: SBCB <$7E
    cpu.sub_b_with_carry(0x7E);

    // 7BB7: BRN $7B3B
    // TODO: Convert BRN $7B3B

    // 7BB9: SBCB <$7C
    cpu.sub_b_with_carry(0x7C);

    // 7BBB: LDB <$83
    cpu.m_b = cpu.read_memory(0x83);

    label_7BBD:
    // 7BBD: JMP $7bbd
    goto label_7BBD;

    // 7BBF: ASL <$82
    cpu.arithmetic_shift_left(0x82);

    // 7BC1: LDD <$7D
    cpu.m_d = cpu.read_memory16(0x7D);

    // 7BC3: XDECB 
    cpu.m_b--;

    // 7BC4: SBCA #$C8
    cpu.sub_a_with_carry(0xC8);

    // 7BC6: CMPA #$0A
    cpu.compare_a(0x0A);

    // 7BC8: SBCA #$D2
    cpu.sub_a_with_carry(0xD2);

    // 7BCA: CLR $B982
    cpu.write_memory(0xB982, 0);

    // 7BCD: EORB #$81
    cpu.m_b ^= 0x81;

    // 7BCF: PULS A,PC
    // TODO: Convert PULS A,PC

    // 7BD1: SBCB <$7E
    cpu.sub_b_with_carry(0x7E);

    // 7BD3: LSR $82D2
    // TODO: Convert LSR $82D2

    // 7BD6: SUBA #$C6
    cpu.m_a -= 0xC6;

    // 7BD8: SBCA #$C8
    cpu.sub_a_with_carry(0xC8);

    // 7BDA: JMP $D883
    goto label_D883;

    // 7BDD: BCS $7C5D
    // TODO: External jump to 0x7C5D - not implemented

    // 7BDF: ASL <$82
    cpu.arithmetic_shift_left(0x82);

    // 7BE1: LDD <$80
    cpu.m_d = cpu.read_memory16(0x80);

    // 7BE3: BCS $7B67
    if (cpu.carry_flag()) cpu.m_pc = 0x7B67;

    // 7BE5: SUBB $7DE3
    cpu.m_b -= cpu.read_memory(0x7DE3);

    // 7BE8: SBCA #$E6
    cpu.sub_a_with_carry(0xE6);

    // 7BEA: CLR $1682
    cpu.write_memory(0x1682, 0);

    // 7BED: EORB #$7F
    cpu.m_b ^= 0x7F;

    // 7BEF: ADCA $82C8
    cpu.add_a_with_carry(cpu.read_memory(0x82C8));

    // 7BF2: SUBA #$EE
    cpu.m_a -= 0xEE;

    // 7BF4: SBCA #$BE
    cpu.sub_a_with_carry(0xBE);

    // 7BF6: SBCA #$42
    cpu.sub_a_with_carry(0x42);

    // 7BF8: SBCA #$C8
    cpu.sub_a_with_carry(0xC8);

    // 7BFA: JMP $5680
    // TODO: External jump to 0x5680 - not implemented

    // 7BFD: CLR $7E08
    cpu.write_memory(0x7E08, 0);

    // 7C00: SBCA #$DC
    cpu.sub_a_with_carry(0xDC);

    // 7C02: TST $1182
    // TODO: Convert TST $1182

    // 7C05: SBCB <$81
    cpu.sub_b_with_carry(0x81);

    // 7C07: CMPA ,-X
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_x));

    // 7C09: LDB -$3,S
    // TODO: Fix comma operator: LDB -$3,S

    // 7C0B: SUBA #$82
    cpu.m_a -= 0x82;

    // 7C0D: LDB ,X+
    // TODO: Complex indexed addressing: ,X+

    // 7C0F: COM <$82
    // TODO: Convert COM <$82

    // 7C11: SBCB <$7E
    cpu.sub_b_with_carry(0x7E);

    // 7C13: ADCA $82D2
    cpu.add_a_with_carry(cpu.read_memory(0x82D2));

    // 7C16: CLR $4782
    cpu.write_memory(0x4782, 0);

    // 7C19: SBCB <$7E
    cpu.sub_b_with_carry(0x7E);

    // 7C1B: CMPB $807F
    cpu.compare_b(cpu.read_memory(cpu.read_memory(0x807F)));

    // 7C1E: JMP $0882
    // TODO: External jump to 0x0882 - not implemented

    // 7C21: LDD <$7E
    cpu.m_d = cpu.read_memory16(0x7E);

    // 7C23: JSR <$82
    cpu.call_function(0x82);

    // 7C25: SUBB $7FD2
    cpu.m_b -= cpu.read_memory(0x7FD2);

    // 7C28: SBCA #$F0
    cpu.sub_a_with_carry(0xF0);

    // 7C2A: SUBA #$9B
    cpu.m_a -= 0x9B;

    // 7C2C: SBCA #$F0
    cpu.sub_a_with_carry(0xF0);

    // 7C2E: CMPA #$76
    cpu.compare_a(0x76);

    // 7C30: SBCA #$E6
    cpu.sub_a_with_carry(0xE6);

    // 7C32: SBCA #$A5
    cpu.sub_a_with_carry(0xA5);

    // 7C34: SBCA #$F0
    cpu.sub_a_with_carry(0xF0);

    // 7C36: CMPA #$A1
    cpu.compare_a(0xA1);

    // 7C38: SBCA #$F0
    cpu.sub_a_with_carry(0xF0);

    // 7C3A: SBCA #$01
    cpu.sub_a_with_carry(0x01);

    // 7C3C: SUBA #$7F
    cpu.m_a -= 0x7F;

    // 7C3E: JMP $0882
    // TODO: External jump to 0x0882 - not implemented

    // 7C41: LDD <$7D
    cpu.m_d = cpu.read_memory16(0x7D);

    // 7C43: XDECB 
    cpu.m_b--;

    // 7C44: SBCA #$C8
    cpu.sub_a_with_carry(0xC8);

    // 7C46: JMP $D882
    goto label_D882;

    // 7C49: SUBB $7FD2
    cpu.m_b -= cpu.read_memory(0x7FD2);

    // 7C4C: SBCA #$F0
    cpu.sub_a_with_carry(0xF0);

    // 7C4E: SBCA #$A5
    cpu.sub_a_with_carry(0xA5);

    // 7C50: SBCA #$F0
    cpu.sub_a_with_carry(0xF0);

    // 7C52: TST $8082
    // TODO: Convert TST $8082

    // 7C55: LDB ,X++
    cpu.m_b = cpu.read_memory(cpu.m_x++);

    // 7C57: CMPA ,-X
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_x));

    // 7C59: SUBB $8176
    cpu.m_b -= cpu.read_memory(0x8176);

    // 7C5C: SUBA #$7F
    cpu.m_a -= 0x7F;

    // 7C5E: JMP $0882
    // TODO: External jump to 0x0882 - not implemented

    // 7C61: LDD <$7E
    cpu.m_d = cpu.read_memory16(0x7E);

    // 7C63: JSR <$82
    cpu.call_function(0x82);

    // 7C65: SUBB $7FD2
    cpu.m_b -= cpu.read_memory(0x7FD2);

    // 7C68: SBCA #$F0
    cpu.sub_a_with_carry(0xF0);

    // 7C6A: CMPA #$54
    cpu.compare_a(0x54);

    // 7C6C: SBCA #$C8
    cpu.sub_a_with_carry(0xC8);

    // 7C6E: JMP $B982
    goto label_B982;

    // 7C71: SBCB <$7F
    cpu.sub_b_with_carry(0x7F);

    // 7C73: ASRA 
    // TODO: Convert ASRA 

    // 7C74: SBCA #$D2
    cpu.sub_a_with_carry(0xD2);

    // 7C76: JMP $F182
    // TODO: External jump to 0xF182 - not implemented

    // 7C79: LDX $7D80
    cpu.m_x = cpu.read_memory16(0x7D80);

    // 7C7C: SUBA #$7F
    cpu.m_a -= 0x7F;

    // 7C7E: JMP $0882
    // TODO: External jump to 0x0882 - not implemented

    // 7C81: LDD <$7C
    cpu.m_d = cpu.read_memory16(0x7C);

    // 7C83: LDX <$82
    cpu.m_x = cpu.read_memory16(0x82);

    // 7C85: SBCB <$7C
    cpu.sub_b_with_carry(0x7C);

    // 7C87: LDX <$82
    cpu.m_x = cpu.read_memory16(0x82);

    // 7C89: SUBB $7C9E
    cpu.m_b -= cpu.read_memory(0x7C9E);

    // 7C8C: SBCA #$D2
    cpu.sub_a_with_carry(0xD2);

    // 7C8E: INC $9E82
    cpu.increment_memory(0x9E82);

    // 7C91: SUBB $7C9E
    cpu.m_b -= cpu.read_memory(0x7C9E);

    // 7C94: SBCA #$D2
    cpu.sub_a_with_carry(0xD2);

    // 7C96: INC $9E82
    cpu.increment_memory(0x9E82);

    // 7C99: SUBB $7C9E
    cpu.m_b -= cpu.read_memory(0x7C9E);

    // 7C9C: SUBA #$7F
    cpu.m_a -= 0x7F;

    // 7C9E: TST $117D
    // TODO: Convert TST $117D

    // 7CA1: SUBA #$7D
    cpu.m_a -= 0x7D;

    // 7CA3: ADDD -$2,S
    // TODO: Fix comma operator: ADDD -$2,S

    // 7CA5: JSR <$7E
    cpu.call_function(0x7E);

    // 7CA7: LSR $7EB9
    // TODO: Convert LSR $7EB9

    // 7CAA: JMP $F17F
    // TODO: External jump to 0xF17F - not implemented

    // 7CAD: ASRA 
    // TODO: Convert ASRA 

    // 7CAE: CLR $D280
    cpu.write_memory(0xD280, 0);

    // 7CB1: COM <$80
    // TODO: Convert COM <$80

    // 7CB3: BCS $7C35
    // TODO: External jump to 0x7C35 - not implemented

    // 7CB5: ADDA <$80
    cpu.m_a += 0x80;

    // 7CB7: LDU ,X++
    cpu.m_u = cpu.read_memory16(cpu.m_x++);

    // 7CB9: LSRB 
    cpu.m_b >>= 1;

    // 7CBA: CMPA #$76
    cpu.compare_a(0x76);

    // 7CBC: CMPA #$A1
    cpu.compare_a(0xA1);

    // 7CBE: SBCA #$A5
    cpu.sub_a_with_carry(0xA5);

    // 7CC0: XDEC $1E7B
    // TODO: Convert XDEC $1E7B

    // 7CC3: XRES 
    // TODO: Convert XRES 

    // 7CC4: XDEC $5E7B
    // TODO: Convert XDEC $5E7B

    // 7CC7: JMP $7B9E
    goto label_7B9E;

    // 7CCA: XDEC $BE7B
    // TODO: Convert XDEC $BE7B

    // 7CCD: LDU <$7B
    cpu.m_u = cpu.read_memory16(0x7B);

    // 7CCF: LDU $7C1E
    cpu.m_u = cpu.read_memory16(0x7C1E);

    // 7CD2: INC $3E7C
    cpu.increment_memory(0x3E7C);

    // 7CD5: XCLRB 
    // TODO: Convert XCLRB 

    // 7CD6: NEG <$08
    // TODO: Convert NEG <$08

    // 7CD8: ASL <$02
    cpu.arithmetic_shift_left(0x02);

    // 7CDA: NEG <$03
    // TODO: Convert NEG <$03

    // 7CDC: XNC <$20
    // TODO: Convert XNC <$20

    // 7CDE: BRA $7CE1
    // TODO: External jump to 0x7CE1 - not implemented

    // 7CE0: COM <$30
    // TODO: Convert COM <$30

    // 7CE2: NEG <$02
    // TODO: Convert NEG <$02

    // 7CE4: XNC <$02
    // TODO: Convert XNC <$02

    // 7CE6: SUBA #$8C
    cpu.m_a -= 0x8C;

    // 7CE8: XNC <$38
    // TODO: Convert XNC <$38

    // 7CEA: ASL <$01
    cpu.arithmetic_shift_left(0x01);

    // 7CEC: NEG <$00
    // TODO: Convert NEG <$00

    // 7CEE: NEG <$0E
    // TODO: Convert NEG <$0E

    // 7CF0: SBCB #$01
    cpu.sub_b_with_carry(0x01);

    // 7CF2: SUBB #$00
    cpu.m_b -= 0x00;

    // 7CF4: XNC <$80
    // TODO: Convert XNC <$80

    // 7CF6: SUBA #$05
    cpu.m_a -= 0x05;

    // 7CF8: XNC <$00
    // TODO: Convert XNC <$00

    // 7CFA: NEG <$02
    // TODO: Convert NEG <$02

    // 7CFC: XANDCC #$08
    // TODO: Convert XANDCC #$08

    // 7CFE: XNC <$03
    // TODO: Convert XNC <$03

    // 7D00: COM <$02
    // TODO: Convert COM <$02

    // 7D02: SUBA #$B0
    cpu.m_a -= 0xB0;

    // 7D04: XNC <$0C
    // TODO: Convert XNC <$0C

    // 7D06: INC <$02
    cpu.increment_memory(0x02);

    // 7D08: SBCB #$C2
    cpu.sub_b_with_carry(0xC2);

    // 7D0A: XNC <$00
    // TODO: Convert XNC <$00

    // 7D0C: NEG <$02
    // TODO: Convert NEG <$02

    // 7D0E: ASL <$08
    cpu.arithmetic_shift_left(0x08);

    // 7D10: LSR <$01
    // TODO: Convert LSR <$01

    // 7D12: NEG <$00
    // TODO: Convert NEG <$00

    // 7D14: NEG <$A0
    // TODO: Convert NEG <$A0

    // 7D16: SUBA $1,X
    // TODO: Fix comma operator: SUBA $1,X

    // 7D18: COM <$03
    // TODO: Convert COM <$03

    // 7D1A: NEG <$0A
    // TODO: Convert NEG <$0A

    // 7D1C: DEC <$01
    cpu.decrement_memory(0x01);

    // 7D1E: NEG <$00
    // TODO: Convert NEG <$00

    // 7D20: NEG <$38
    // TODO: Convert NEG <$38

    // 7D22: XANDCC #$01
    // TODO: Convert XANDCC #$01

    // 7D24: BRA $7D46
    goto label_7D46;

    // 7D26: NEG <$C0
    // TODO: Convert NEG <$C0

    // 7D28: SUBB #$01
    cpu.m_b -= 0x01;

    // 7D2A: NEG <$00
    // TODO: Convert NEG <$00

    // 7D2C: NEG <$00
    // TODO: Convert NEG <$00

    // 7D2E: NEG <$01
    // TODO: Convert NEG <$01

    // 7D30: JMP <$0E
    // TODO: Invalid branch offset: <$0E

    // 7D32: NEG <$08
    // TODO: Convert NEG <$08

    // 7D34: ASL <$01
    cpu.arithmetic_shift_left(0x01);

    // 7D36: NEG <$00
    // TODO: Convert NEG <$00

    // 7D38: NEG <$08
    // TODO: Convert NEG <$08

    // 7D3A: ASL <$01
    cpu.arithmetic_shift_left(0x01);

    // 7D3C: BRA $7D5E
    goto label_7D5E;

    // 7D3E: NEG <$80
    // TODO: Convert NEG <$80

    // 7D40: SUBA #$05
    cpu.m_a -= 0x05;

    // 7D42: XNC <$00
    // TODO: Convert XNC <$00

    // 7D44: LEAX $2,X
    // TODO: Fix comma operator: LEAX $2,X

    label_7D46:
    // 7D46: INC <$00
    cpu.increment_memory(0x00);

    // 7D48: XNC <$00
    // TODO: Convert XNC <$00

    // 7D4A: COM <$02
    // TODO: Convert COM <$02

    // 7D4C: SUBB #$00
    cpu.m_b -= 0x00;

    // 7D4E: XNC <$00
    // TODO: Convert XNC <$00

    // 7D50: SUBB #$02
    cpu.m_b -= 0x02;

    // 7D52: COM <$00
    // TODO: Convert COM <$00

    // 7D54: XNC <$00
    // TODO: Convert XNC <$00

    // 7D56: INC <$02
    cpu.increment_memory(0x02);

    // 7D58: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 7D5A: LSR <$01
    // TODO: Convert LSR <$01

    // 7D5C: NEG <$00
    // TODO: Convert NEG <$00

    label_7D5E:
    // 7D5E: XNC <$A0
    // TODO: Convert XNC <$A0

    // 7D60: SUBA $1,X
    // TODO: Fix comma operator: SUBA $1,X

    // 7D62: NEG <$00
    // TODO: Convert NEG <$00

    // 7D64: NEG <$03
    // TODO: Convert NEG <$03

    // 7D66: COM <$02
    // TODO: Convert COM <$02

    // 7D68: DEC <$0A
    cpu.decrement_memory(0x0A);

    // 7D6A: NEG <$00
    // TODO: Convert NEG <$00

    // 7D6C: NEG <$01
    // TODO: Convert NEG <$01

    // 7D6E: SUBB #$C0
    cpu.m_b -= 0xC0;

    // 7D70: XNC <$A0
    // TODO: Convert XNC <$A0

    // 7D72: SUBA $1,X
    // TODO: Fix comma operator: SUBA $1,X

    // 7D74: COM <$03
    // TODO: Convert COM <$03

    // 7D76: NEG <$00
    // TODO: Convert NEG <$00

    // 7D78: NEG <$02
    // TODO: Convert NEG <$02

    // 7D7A: ABX 
    // TODO: Convert ABX 

    // 7D7B: ABX 
    // TODO: Convert ABX 

    // 7D7C: NEG <$00
    // TODO: Convert NEG <$00

    // 7D7E: NEG <$05
    // TODO: Convert NEG <$05

    // 7D80: NEG <$0A
    // TODO: Convert NEG <$0A

    // 7D82: DEC <$01
    cpu.decrement_memory(0x01);

    // 7D84: NEG <$00
    // TODO: Convert NEG <$00

    // 7D86: NEG <$A0
    // TODO: Convert NEG <$A0

    // 7D88: SUBA $1,X
    // TODO: Fix comma operator: SUBA $1,X

    // 7D8A: NEG <$00
    // TODO: Convert NEG <$00

    // 7D8C: NEG <$0A
    // TODO: Convert NEG <$0A

    // 7D8E: DEC <$01
    cpu.decrement_memory(0x01);

    // 7D90: NEG <$00
    // TODO: Convert NEG <$00

    // 7D92: NEG <$A0
    // TODO: Convert NEG <$A0

    // 7D94: SUBA $1,X
    // TODO: Fix comma operator: SUBA $1,X

    // 7D96: NEG <$00
    // TODO: Convert NEG <$00

    // 7D98: NEG <$0A
    // TODO: Convert NEG <$0A

    // 7D9A: DEC <$01
    cpu.decrement_memory(0x01);

    // 7D9C: NEG <$00
    // TODO: Convert NEG <$00

    // 7D9E: NEG <$A0
    // TODO: Convert NEG <$A0

    // 7DA0: SUBA $1,X
    // TODO: Fix comma operator: SUBA $1,X

    // 7DA2: NEG <$00
    // TODO: Convert NEG <$00

    // 7DA4: NEG <$0A
    // TODO: Convert NEG <$0A

    // 7DA6: DEC <$01
    cpu.decrement_memory(0x01);

    // 7DA8: NEG <$00
    // TODO: Convert NEG <$00

    // 7DAA: NEG <$A0
    // TODO: Convert NEG <$A0

    // 7DAC: SUBA $1,X
    // TODO: Fix comma operator: SUBA $1,X

    // 7DAE: NEG <$00
    // TODO: Convert NEG <$00

    // 7DB0: LSR <$02
    // TODO: Convert LSR <$02

    // 7DB2: SUBA #$80
    cpu.m_a -= 0x80;

    // 7DB4: XNC <$8C
    // TODO: Convert XNC <$8C

    // 7DB6: SUBD #$02B0
    cpu.m_d -= 0x02B0;

    // 7DB9: SUBA #$02
    cpu.m_a -= 0x02;

    // 7DBB: SUBA #$B0
    cpu.m_a -= 0xB0;

    // 7DBD: XNC <$02
    // TODO: Convert XNC <$02

    // 7DBF: XNC <$02
    // TODO: Convert XNC <$02

    // 7DC1: LEAS $E,X
    // TODO: Fix comma operator: LEAS $E,X

    // 7DC3: XNC <$0E
    // TODO: Convert XNC <$0E

    // 7DC5: SBCB #$02
    cpu.sub_b_with_carry(0x02);

    // 7DC7: XNC <$02
    // TODO: Convert XNC <$02

    // 7DC9: LSR <$02
    // TODO: Convert LSR <$02

    // 7DCB: XNC <$02
    // TODO: Convert XNC <$02

    // 7DCD: XNC <$32
    // TODO: Convert XNC <$32

    // 7DCF: LEAS $2,X
    // TODO: Fix comma operator: LEAS $2,X

    // 7DD1: XNC <$02
    // TODO: Convert XNC <$02

    // 7DD3: XNC <$C8
    // TODO: Convert XNC <$C8

    // 7DD5: EORB #$02
    cpu.m_b ^= 0x02;

    // 7DD7: ASL <$08
    cpu.arithmetic_shift_left(0x08);

    // 7DD9: XNC <$08
    // TODO: Convert XNC <$08

    // 7DDB: ASL <$02
    cpu.arithmetic_shift_left(0x02);

    // 7DDD: SUBB ,S+
    // TODO: Complex indexed addressing: ,S+

    // 7DDF: XNC <$20
    // TODO: Convert XNC <$20

    // 7DE1: BRA $7DE8
    // TODO: External jump to 0x7DE8 - not implemented

    // 7DE3: NEG <$22
    // TODO: Convert NEG <$22

    // 7DE5: EORA #$01
    cpu.m_a ^= 0x01;

    // 7DE7: NEG <$00
    // TODO: Convert NEG <$00

    // 7DE9: NEG <$88
    // TODO: Convert NEG <$88

    // 7DEB: BHI $7DEE
    // TODO: Convert BHI $7DEE

    // 7DED: LEAU $7DF1,PCR
    // TODO: Fix comma operator: LEAU $7DF1,PCR

    // 7DF0: SUBA $A,X
    // TODO: Fix comma operator: SUBA $A,X

    // 7DF2: NEG <$00
    // TODO: Convert NEG <$00

    // 7DF4: NEG <$01
    // TODO: Convert NEG <$01

    // 7DF6: DEC <$A0
    cpu.decrement_memory(0xA0);

    // 7DF8: NEG <$C0
    // TODO: Convert NEG <$C0

    // 7DFA: COM <$02
    // TODO: Convert COM <$02

    // 7DFC: BVC $7D80
    // TODO: Convert BVC $7D80

    // 7DFE: XNC <$00
    // TODO: Convert XNC <$00

    // 7E00: NEG <$02
    // TODO: Convert NEG <$02

    // 7E02: EORA #$28
    cpu.m_a ^= 0x28;

    // 7E04: XNC <$00
    // TODO: Convert XNC <$00

    // 7E06: NEG <$05
    // TODO: Convert NEG <$05

    // 7E08: XNC <$41
    // TODO: Convert XNC <$41

    // 7E0A: NEGA 
    cpu.m_a = -cpu.m_a;

    // 7E0B: XNC <$41
    // TODO: Convert XNC <$41

    // 7E0D: NEGA 
    cpu.m_a = -cpu.m_a;

    // 7E0E: XNC <$14
    // TODO: Convert XNC <$14

    // 7E10: XHCF 
    // TODO: Convert XHCF 

    // 7E11: XNC <$14
    // TODO: Convert XNC <$14

    // 7E13: XHCF 
    // TODO: Convert XHCF 

    // 7E14: XNC <$41
    // TODO: Convert XNC <$41

    // 7E16: NEGA 
    cpu.m_a = -cpu.m_a;

    // 7E17: XNC <$41
    // TODO: Convert XNC <$41

    // 7E19: NEGA 
    cpu.m_a = -cpu.m_a;

    // 7E1A: NEG <$3C
    // TODO: Convert NEG <$3C

    // 7E1C: CWAI #$01
    // TODO: Convert CWAI #$01

    // 7E1E: ADDD #$C305
    cpu.m_d += 0xC305;

    // 7E21: XNC <$80
    // TODO: Convert XNC <$80

    // 7E23: SUBA #$02
    cpu.m_a -= 0x02;

    // 7E25: NEG <$00
    // TODO: Convert NEG <$00

    // 7E27: XNC <$08
    // TODO: Convert XNC <$08

    // 7E29: ASL <$01
    cpu.arithmetic_shift_left(0x01);

    // 7E2B: NEG <$00
    // TODO: Convert NEG <$00

    // 7E2D: XNC <$E0
    // TODO: Convert XNC <$E0

    // 7E2F: SUBB $2,X
    // TODO: Fix comma operator: SUBB $2,X

    // 7E31: COM <$03
    // TODO: Convert COM <$03

    // 7E33: XNC <$0E
    // TODO: Convert XNC <$0E

    // 7E35: JMP <$02
    // TODO: Invalid branch offset: <$02

    // 7E37: SUBA $B001
    cpu.m_a -= cpu.read_memory(0xB001);

    // 7E3A: NEG <$00
    // TODO: Convert NEG <$00

    // 7E3C: LSR <$02
    // TODO: Convert LSR <$02

    // 7E3E: NEG <$00
    // TODO: Convert NEG <$00

    // 7E40: XNC <$0A
    // TODO: Convert XNC <$0A

    // 7E42: DEC <$02
    cpu.decrement_memory(0x02);

    // 7E44: LEAX -$10,Y
    // TODO: Fix comma operator: LEAX -$10,Y

    // 7E46: XNC <$00
    // TODO: Convert XNC <$00

    // 7E48: NEG <$02
    // TODO: Convert NEG <$02

    // 7E4A: BMI $7E77
    // TODO: External jump to 0x7E77 - not implemented

    // 7E4C: XNC <$00
    // TODO: Convert XNC <$00

    // 7E4E: NEG <$02
    // TODO: Convert NEG <$02

    // 7E50: SUBB #$C0
    cpu.m_b -= 0xC0;

    // 7E52: XNC <$AC
    // TODO: Convert XNC <$AC

    // 7E54: CMPX $5,X
    cpu.execute_cmpx_immediate(cpu.read_memory16(cpu.m_x + 0x05));

    // 7E56: XNC <$03
    // TODO: Convert XNC <$03

    // 7E58: COM <$02
    // TODO: Convert COM <$02

    // 7E5A: XNC <$00
    // TODO: Convert XNC <$00

    // 7E5C: NEG <$C0
    // TODO: Convert NEG <$C0

    // 7E5E: XNC <$02
    // TODO: Convert XNC <$02

    // 7E60: XNC <$30
    // TODO: Convert XNC <$30

    // 7E62: NEG <$30
    // TODO: Convert NEG <$30

    // 7E64: XNC <$02
    // TODO: Convert XNC <$02

    // 7E66: XNC <$0C
    // TODO: Convert XNC <$0C

    // 7E68: NEG <$0C
    // TODO: Convert NEG <$0C

    // 7E6A: XNC <$02
    // TODO: Convert XNC <$02

    // 7E6C: XNC <$C0
    // TODO: Convert XNC <$C0

    // 7E6E: NEG <$00
    // TODO: Convert NEG <$00

    // 7E70: XNC <$02
    // TODO: Convert XNC <$02

    // 7E72: NEG <$00
    // TODO: Convert NEG <$00

    // 7E74: LSR <$01
    // TODO: Convert LSR <$01

    // 7E76: XNC <$02
    // TODO: Convert XNC <$02

    // 7E78: NEG <$00
    // TODO: Convert NEG <$00

    // 7E7A: NEG <$01
    // TODO: Convert NEG <$01

    // 7E7C: XNC <$02
    // TODO: Convert XNC <$02

    // 7E7E: NEG <$00
    // TODO: Convert NEG <$00

    // 7E80: NEG <$01
    // TODO: Convert NEG <$01

    // 7E82: NEG <$00
    // TODO: Convert NEG <$00

    // 7E84: XNC <$F2
    // TODO: Convert XNC <$F2

    // 7E86: SBCB $010C
    cpu.sub_b_with_carry(cpu.read_memory(0x010C));

    // 7E89: INC <$01
    cpu.increment_memory(0x01);

    // 7E8B: XNC <$02
    // TODO: Convert XNC <$02

    // 7E8D: NEG <$00
    // TODO: Convert NEG <$00

    // 7E8F: NEG <$01
    // TODO: Convert NEG <$01

    // 7E91: EORA $02,Y
    // TODO: Fix comma operator: EORA $02,Y

    // 7E94: NEG <$00
    // TODO: Convert NEG <$00

    // 7E96: XNC <$03
    // TODO: Convert XNC <$03

    // 7E98: COM <$01
    // TODO: Convert COM <$01

    // 7E9A: NEG <$00
    // TODO: Convert NEG <$00

    // 7E9C: LSR <$02
    // TODO: Convert LSR <$02

    // 7E9E: BPL $7E4A
    if (!cpu.negative_flag()) cpu.m_pc = 0x7E4A;

    // 7EA0: NEG <$00
    // TODO: Convert NEG <$00

    // 7EA2: NEG <$02
    // TODO: Convert NEG <$02

    // 7EA4: ORA $02,Y
    // TODO: Fix comma operator: ORA $02,Y

    // 7EA7: NEG <$03
    // TODO: Convert NEG <$03

    // 7EA9: XNC <$00
    // TODO: Convert XNC <$00

    // 7EAB: INC <$02
    cpu.increment_memory(0x02);

    // 7EAD: NEG <$03
    // TODO: Convert NEG <$03

    // 7EAF: XNC <$AA
    // TODO: Convert XNC <$AA

    // 7EB1: EORA $1,X
    // TODO: Fix comma operator: EORA $1,X

    // 7EB3: NEG <$00
    // TODO: Convert NEG <$00

    // 7EB5: XNC <$2A
    // TODO: Convert XNC <$2A

    // 7EB7: ORA $5,X
    // TODO: Fix comma operator: ORA $5,X

    // 7EB9: XNC <$0C
    // TODO: Convert XNC <$0C

    // 7EBB: INC <$02
    cpu.increment_memory(0x02);

    // 7EBD: COM <$03
    // TODO: Convert COM <$03

    // 7EBF: XNC <$A0
    // TODO: Convert XNC <$A0

    // 7EC1: SUBA $1,X
    // TODO: Fix comma operator: SUBA $1,X

    // 7EC3: COM <$03
    // TODO: Convert COM <$03

    // 7EC5: NEG <$0A
    // TODO: Convert NEG <$0A

    // 7EC7: DEC <$01
    cpu.decrement_memory(0x01);

    // 7EC9: BVC $7EF3
    // TODO: Convert BVC $7EF3

    // 7ECB: NEG <$0A
    // TODO: Convert NEG <$0A

    // 7ECD: DEC <$02
    cpu.decrement_memory(0x02);

    // 7ECF: SUBA ,Y+
    // TODO: Complex indexed addressing: ,Y+

    // 7ED1: XNC <$00
    // TODO: Convert XNC <$00

    // 7ED3: NEG <$02
    // TODO: Convert NEG <$02

    // 7ED5: SUBD ,--Y
    // TODO: Complex indexed addressing: ,--Y

    // 7ED7: LSR <$02
    // TODO: Convert LSR <$02

    // 7ED9: EORA $02,Y
    // TODO: Fix comma operator: EORA $02,Y

    // 7EDC: NEG <$00
    // TODO: Convert NEG <$00

    // 7EDE: XNC <$2A
    // TODO: Convert XNC <$2A

    // 7EE0: BPL $7EE4
    if (!cpu.negative_flag()) cpu.m_pc = 0x7EE4;

    // 7EE2: NEG <$00
    // TODO: Convert NEG <$00

    // 7EE4: XNC <$A8
    // TODO: Convert XNC <$A8

    // 7EE6: EORA $2,X
    // TODO: Fix comma operator: EORA $2,X

    // 7EE8: NEG <$00
    // TODO: Convert NEG <$00

    // 7EEA: XNC <$2A
    // TODO: Convert XNC <$2A

    // 7EEC: BPL $7EF0
    if (!cpu.negative_flag()) cpu.m_pc = 0x7EF0;

    // 7EEE: NEG <$00
    // TODO: Convert NEG <$00

    // 7EF0: LSR <$02
    // TODO: Convert LSR <$02

    // 7EF2: EORA #$88
    cpu.m_a ^= 0x88;

    // 7EF4: NEG <$22
    // TODO: Convert NEG <$22

    // 7EF6: BHI $7EF9
    // TODO: Convert BHI $7EF9

    // 7EF8: NEG <$00
    // TODO: Convert NEG <$00

    // 7EFA: XNC <$CC
    // TODO: Convert XNC <$CC

    // 7EFC: LDD #$0282
    cpu.m_d = 0x0282;

    // 7EFF: SBCA #$01
    cpu.sub_a_with_carry(0x01);

    // 7F01: BVC $7F2B
    // TODO: Convert BVC $7F2B

    // 7F03: NEG <$00
    // TODO: Convert NEG <$00

    // 7F05: NEG <$01
    // TODO: Convert NEG <$01

    // 7F07: ORA $0,X
    // TODO: Fix comma operator: ORA $0,X

    // 7F09: NEG <$00
    // TODO: Convert NEG <$00

    // 7F0B: ORA $1,X
    // TODO: Fix comma operator: ORA $1,X

    // 7F0D: NEG <$00
    // TODO: Convert NEG <$00

    // 7F0F: XNC <$A8
    // TODO: Convert XNC <$A8

    // 7F11: EORA $1,X
    // TODO: Fix comma operator: EORA $1,X

    // 7F13: BPL $7F3F
    if (!cpu.negative_flag()) cpu.m_pc = 0x7F3F;

    // 7F15: LSR <$01
    // TODO: Convert LSR <$01

    // 7F17: DEC <$A0
    cpu.decrement_memory(0xA0);

    // 7F19: NEG <$C0
    // TODO: Convert NEG <$C0

    // 7F1B: INC <$01
    cpu.increment_memory(0x01);

    // 7F1D: SUBA $A,X
    // TODO: Fix comma operator: SUBA $A,X

    // 7F1F: NEG <$00
    // TODO: Convert NEG <$00

    // 7F21: NEG <$01
    // TODO: Convert NEG <$01

    // 7F23: BVC $7F25
    // TODO: Convert BVC $7F25

    // 7F25: NEG <$03
    // TODO: Convert NEG <$03

    // 7F27: SUBB #$01
    cpu.m_b -= 0x01;

    // 7F29: BVC $7F53
    // TODO: Convert BVC $7F53

    // 7F2B: NEG <$00
    // TODO: Convert NEG <$00

    // 7F2D: NEG <$01
    // TODO: Convert NEG <$01

    // 7F2F: SUBA #$80
    cpu.m_a -= 0x80;

    // 7F31: NEG <$30
    // TODO: Convert NEG <$30

    // 7F33: COM <$01
    // TODO: Convert COM <$01

    // 7F35: XNC <$02
    // TODO: Convert XNC <$02

    // 7F37: NEG <$0C
    // TODO: Convert NEG <$0C

    // 7F39: NEG <$01
    // TODO: Convert NEG <$01

    // 7F3B: BVC $7F3D
    // TODO: Convert BVC $7F3D

    // 7F3D: NEG <$00
    // TODO: Convert NEG <$00

    // 7F3F: LEAX $1,X
    // TODO: Fix comma operator: LEAX $1,X

    // 7F41: SBCA #$28
    cpu.sub_a_with_carry(0x28);

    // 7F43: NEG <$00
    // TODO: Convert NEG <$00

    // 7F45: NEG <$05
    // TODO: Convert NEG <$05

    // 7F47: NEG <$80
    // TODO: Convert NEG <$80

    // 7F49: SUBA #$01
    cpu.m_a -= 0x01;

    // 7F4B: BRA $7F6D
    goto label_7F6D;

    // 7F4D: NEG <$08
    // TODO: Convert NEG <$08

    // 7F4F: ASL <$01
    cpu.arithmetic_shift_left(0x01);

    // 7F51: LEAX $C,X
    // TODO: Fix comma operator: LEAX $C,X

    // 7F53: NEG <$2A
    // TODO: Convert NEG <$2A

    // 7F55: BPL $7F58
    // TODO: External jump to 0x7F58 - not implemented

    // 7F57: SUBB #$C0
    cpu.m_b -= 0xC0;

    // 7F59: NEG <$20
    // TODO: Convert NEG <$20

    // 7F5B: BRA $7F5E
    // TODO: External jump to 0x7F5E - not implemented

    // 7F5D: NEG <$00
    // TODO: Convert NEG <$00

    // 7F5F: NEG <$20
    // TODO: Convert NEG <$20

    // 7F61: BRA $7F64
    // TODO: External jump to 0x7F64 - not implemented

    // 7F63: SUBB #$C0
    cpu.m_b -= 0xC0;

    // 7F65: NEG <$20
    // TODO: Convert NEG <$20

    // 7F67: BRA $7F6A
    // TODO: External jump to 0x7F6A - not implemented

    // 7F69: SUBB #$C0
    cpu.m_b -= 0xC0;

    // 7F6B: NEG <$A8
    // TODO: Convert NEG <$A8

    label_7F6D:
    // 7F6D: EORA $1,X
    // TODO: Fix comma operator: EORA $1,X

    // 7F6F: ASL <$08
    cpu.arithmetic_shift_left(0x08);

    // 7F71: NEG <$03
    // TODO: Convert NEG <$03

    // 7F73: COM <$01
    // TODO: Convert COM <$01

    // 7F75: ASL <$08
    cpu.arithmetic_shift_left(0x08);

    // 7F77: LSR <$02
    // TODO: Convert LSR <$02

    // 7F79: NEG <$00
    // TODO: Convert NEG <$00

    // 7F7B: XNC <$02
    // TODO: Convert XNC <$02

    // 7F7D: XNC <$02
    // TODO: Convert XNC <$02

    // 7F7F: NEG <$00
    // TODO: Convert NEG <$00

    // 7F81: NEG <$82
    // TODO: Convert NEG <$82

    // 7F83: SBCA #$01
    cpu.sub_a_with_carry(0x01);

    // 7F85: CWAI #$3C
    // TODO: Convert CWAI #$3C

    // 7F87: NEG <$3C
    // TODO: Convert NEG <$3C

    // 7F89: CWAI #$01
    // TODO: Convert CWAI #$01

    // 7F8B: SBCA #$82
    cpu.sub_a_with_carry(0x82);

    // 7F8D: XNC <$00
    // TODO: Convert XNC <$00

    // 7F8F: NEG <$02
    // TODO: Convert NEG <$02

    // 7F91: XNC <$02
    // TODO: Convert XNC <$02

    // 7F93: XNC <$00
    // TODO: Convert XNC <$00

    // 7F95: NEG <$05
    // TODO: Convert NEG <$05

    // 7F97: NEG <$00
    // TODO: Convert NEG <$00

    // 7F99: NEG <$01
    // TODO: Convert NEG <$01

    // 7F9B: XNC <$02
    // TODO: Convert XNC <$02

    // 7F9D: XNC <$8C
    // TODO: Convert XNC <$8C

    // 7F9F: CMPX #$0102
    cpu.compare_x(0x0102);

    // 7FA2: XNC <$02
    // TODO: Convert XNC <$02

    // 7FA4: SUBA $B001
    cpu.m_a -= cpu.read_memory(0xB001);

    // 7FA7: XNC <$02
    // TODO: Convert XNC <$02

    // 7FA9: XNC <$8C
    // TODO: Convert XNC <$8C

    // 7FAB: CMPX #$0102
    cpu.compare_x(0x0102);

    // 7FAE: XNC <$02
    // TODO: Convert XNC <$02

    // 7FB0: SUBA $B001
    cpu.m_a -= cpu.read_memory(0xB001);

    // 7FB3: XNC <$02
    // TODO: Convert XNC <$02

    // 7FB5: XNC <$80
    // TODO: Convert XNC <$80

    // 7FB7: SUBA #$05
    cpu.m_a -= 0x05;

    // 7FB9: XNC <$0A
    // TODO: Convert XNC <$0A

    // 7FBB: DEC <$02
    cpu.decrement_memory(0x02);

    // 7FBD: SUBA $B002
    cpu.m_a -= cpu.read_memory(0xB002);

    // 7FC0: BGE $7FEE
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x7FEE;

    // 7FC2: XNC <$0B
    // TODO: Convert XNC <$0B

    // 7FC4: XDEC <$02
    // TODO: Convert XDEC <$02

    // 7FC6: NEG <$00
    // TODO: Convert NEG <$00

    // 7FC8: XNC <$0E
    // TODO: Convert XNC <$0E

    // 7FCA: JMP <$02
    // TODO: Invalid branch offset: <$02

    // 7FCC: XANDCC #$38
    // TODO: Convert XANDCC #$38

    // 7FCE: XNC <$E0
    // TODO: Convert XNC <$E0

    // 7FD0: SUBB $5,X
    // TODO: Fix comma operator: SUBB $5,X

    // 7FD2: NEG <$00
    // TODO: Convert NEG <$00

    // 7FD4: ORA $1,X
    // TODO: Fix comma operator: ORA $1,X

    // 7FD6: NEG <$00
    // TODO: Convert NEG <$00

    // 7FD8: NEG <$AA
    // TODO: Convert NEG <$AA

    // 7FDA: NEG <$01
    // TODO: Convert NEG <$01

    // 7FDC: NEG <$00
    // TODO: Convert NEG <$00

    // 7FDE: NEG <$00
    // TODO: Convert NEG <$00

    // 7FE0: ORA $1,X
    // TODO: Fix comma operator: ORA $1,X

    // 7FE2: NEG <$00
    // TODO: Convert NEG <$00

    // 7FE4: NEG <$AA
    // TODO: Convert NEG <$AA

    // 7FE6: NEG <$01
    // TODO: Convert NEG <$01

    // 7FE8: NEG <$00
    // TODO: Convert NEG <$00

    // 7FEA: NEG <$00
    // TODO: Convert NEG <$00

    // 7FEC: ORA $1,X
    // TODO: Fix comma operator: ORA $1,X

    // 7FEE: NEG <$00
    // TODO: Convert NEG <$00

    // 7FF0: NEG <$AA
    // TODO: Convert NEG <$AA

    // 7FF2: NEG <$01
    // TODO: Convert NEG <$01

    // 7FF4: NEG <$00
    // TODO: Convert NEG <$00

    // 7FF6: NEG <$00
    // TODO: Convert NEG <$00

    // 7FF8: ORA $1,X
    // TODO: Fix comma operator: ORA $1,X

    // 7FFA: NEG <$00
    // TODO: Convert NEG <$00

    // 7FFC: NEG <$AA
    // TODO: Convert NEG <$AA

    // 7FFE: NEG <$01
    // TODO: Convert NEG <$01

    // 8000: NEG <$00
    // TODO: Convert NEG <$00

    // 8002: LSR <$01
    // TODO: Convert LSR <$01

    // 8004: SUBA $B001
    cpu.m_a -= cpu.read_memory(0xB001);

    // 8007: BGE $8035
    // TODO: External jump to 0x8035 - not implemented

    // 8009: NEG <$08
    // TODO: Convert NEG <$08

    // 800B: ASL <$02
    cpu.arithmetic_shift_left(0x02);

    // 800D: NEG <$00
    // TODO: Convert NEG <$00

    // 800F: XNC <$0A
    // TODO: Convert XNC <$0A

    // 8011: DEC <$02
    cpu.decrement_memory(0x02);

    // 8013: SUBA ,Y+
    // TODO: Complex indexed addressing: ,Y+

    // 8015: XNC <$0A
    // TODO: Convert XNC <$0A

    // 8017: DEC <$02
    cpu.decrement_memory(0x02);

    // 8019: NEG <$00
    // TODO: Convert NEG <$00

    // 801B: NEG <$B0
    // TODO: Convert NEG <$B0

    // 801D: SUBA $012C
    cpu.m_a -= cpu.read_memory(0x012C);

    // 8020: BGE $8023
    // TODO: External jump to 0x8023 - not implemented

    // 8022: ASL <$08
    cpu.arithmetic_shift_left(0x08);

    // 8024: LSR <$01
    // TODO: Convert LSR <$01

    // 8026: ORA $0,X
    // TODO: Fix comma operator: ORA $0,X

    // 8028: NEG <$00
    // TODO: Convert NEG <$00

    // 802A: NEG <$01
    // TODO: Convert NEG <$01

    // 802C: NEG <$AA
    // TODO: Convert NEG <$AA

    // 802E: NEG <$00
    // TODO: Convert NEG <$00

    // 8030: NEG <$02
    // TODO: Convert NEG <$02

    // 8032: ORA $0,X
    // TODO: Fix comma operator: ORA $0,X

    // 8034: NEG <$0A
    // TODO: Convert NEG <$0A

    // 8036: DEC <$02
    cpu.decrement_memory(0x02);

    // 8038: NEG <$00
    // TODO: Convert NEG <$00

    // 803A: NEG <$A0
    // TODO: Convert NEG <$A0

    // 803C: SUBA $2,X
    // TODO: Fix comma operator: SUBA $2,X

    // 803E: DEC <$0A
    cpu.decrement_memory(0x0A);

    // 8040: NEG <$00
    // TODO: Convert NEG <$00

    // 8042: ORA $1,X
    // TODO: Fix comma operator: ORA $1,X

    // 8044: NEG <$00
    // TODO: Convert NEG <$00

    // 8046: NEG <$AA
    // TODO: Convert NEG <$AA

    // 8048: NEG <$01
    // TODO: Convert NEG <$01

    // 804A: NEG <$00
    // TODO: Convert NEG <$00

    // 804C: LSR <$02
    // TODO: Convert LSR <$02

    // 804E: NEG <$00
    // TODO: Convert NEG <$00

    // 8050: XNC <$32
    // TODO: Convert XNC <$32

    // 8052: JMP <$02
    // TODO: Invalid branch offset: <$02

    // 8054: XNC <$02
    // TODO: Convert XNC <$02

    // 8056: XNC <$08
    // TODO: Convert XNC <$08

    // 8058: ASL <$02
    cpu.arithmetic_shift_left(0x02);

    // 805A: EORB #$C8
    cpu.m_b ^= 0xC8;

    // 805C: XNC <$20
    // TODO: Convert XNC <$20

    // 805E: BRA $8062
    goto label_8062;

    // 8060: BRA $8082
    goto label_8082;

    label_8062:
    // 8062: XNC <$00
    // TODO: Convert XNC <$00

    // 8064: NEG <$05
    // TODO: Convert NEG <$05

    // 8066: XNC <$00
    // TODO: Convert XNC <$00

    // 8068: NEG <$02
    // TODO: Convert NEG <$02

    // 806A: CMPX #$8C02
    cpu.compare_x(0x8C02);

    // 806D: SUBA #$80
    cpu.m_a -= 0x80;

    // 806F: XNC <$23
    // TODO: Convert XNC <$23

    // 8071: BLS $8075
    // TODO: Convert BLS $8075

    // 8073: BRA $8095
    goto label_8095;

    // 8075: XNC <$08
    // TODO: Convert XNC <$08

    // 8077: ASL <$02
    cpu.arithmetic_shift_left(0x02);

    // 8079: XDEC <$0B
    // TODO: Convert XDEC <$0B

    // 807B: XNC <$00
    // TODO: Convert XNC <$00

    // 807D: NEG <$05
    // TODO: Convert NEG <$05

    // 807F: NEG <$00
    // TODO: Convert NEG <$00

    // 8081: NEG <$02
    // TODO: Convert NEG <$02

    label_8082:
    // 8082: XNC <$2A
    // TODO: Convert XNC <$2A

    // 8083: BPL $80AF
    if (!cpu.negative_flag()) cpu.m_pc = 0x80AF;

    // 8084: BPL $8087
    if (!cpu.negative_flag()) cpu.m_pc = 0x8087;

    // 8085: NEG <$20
    // TODO: Convert NEG <$20

    // 8086: BRA $80A8
    goto label_80A8;

    // 8087: BRA $808B
    goto label_808B;

    // 8088: XNC <$C0
    // TODO: Convert XNC <$C0

    // 8089: SUBB #$C0
    cpu.m_b -= 0xC0;

    // 808A: SUBB #$02
    cpu.m_b -= 0x02;

    label_808B:
    // 808B: XNC <$30
    // TODO: Convert XNC <$30

    // 808C: LEAX -$10,Y
    // TODO: Fix comma operator: LEAX -$10,Y

    // 808D: LEAX $2,X
    // TODO: Fix comma operator: LEAX $2,X

    // 808E: XNC <$CC
    // TODO: Convert XNC <$CC

    // 808F: LDD #$CC02
    cpu.m_d = 0xCC02;

    // 8090: LDD #$0233
    cpu.m_d = 0x0233;

    // 8092: LEAU -$D,Y
    // TODO: Fix comma operator: LEAU -$D,Y

    // 8093: LEAU $1,X
    // TODO: Fix comma operator: LEAU $1,X

    // 8094: NEG <$0C
    // TODO: Convert NEG <$0C

    label_8095:
    // 8095: INC <$0C
    cpu.increment_memory(0x0C);

    // 8096: INC <$04
    cpu.increment_memory(0x04);

    // 8097: LSR <$03
    // TODO: Convert LSR <$03

    // 8098: COM <$03
    // TODO: Convert COM <$03

    // 8099: COM <$03
    // TODO: Convert COM <$03

    // 809A: COM <$01
    // TODO: Convert COM <$01

    // 809B: NEG <$A8
    // TODO: Convert NEG <$A8

    // 809C: EORA F,Y
    // TODO: Complex indexed addressing: F,Y

    // 809D: ORA $1,X
    // TODO: Fix comma operator: ORA $1,X

    // 809E: NEG <$00
    // TODO: Convert NEG <$00

    // 809F: NEG <$00
    // TODO: Convert NEG <$00

    // 80A0: NEG <$01
    // TODO: Convert NEG <$01

    // 80A1: NEG <$03
    // TODO: Convert NEG <$03

    // 80A2: COM <$AA
    // TODO: Convert COM <$AA

    // 80A3: ORA $2,X
    // TODO: Fix comma operator: ORA $2,X

    // 80A4: XNC <$AA
    // TODO: Convert XNC <$AA

    // 80A5: ORA $3,X
    // TODO: Fix comma operator: ORA $3,X

    // 80A6: COM <$01
    // TODO: Convert COM <$01

    // 80A7: NEG <$00
    // TODO: Convert NEG <$00

    label_80A8:
    // 80A8: NEG <$AA
    // TODO: Convert NEG <$AA

    // 80A9: ORA $1,X
    // TODO: Fix comma operator: ORA $1,X

    // 80AA: NEG <$00
    // TODO: Convert NEG <$00

    // 80AB: NEG <$00
    // TODO: Convert NEG <$00

    // 80AC: NEG <$01
    // TODO: Convert NEG <$01

    // 80AD: NEG <$00
    // TODO: Convert NEG <$00

    // 80AE: NEG <$00
    // TODO: Convert NEG <$00

    // 80AF: NEG <$01
    // TODO: Convert NEG <$01

    // 80B0: NEG <$A2
    // TODO: Convert NEG <$A2

    // 80B1: SBCA F,Y
    // TODO: Complex indexed addressing: F,Y

    // 80B2: ORA $1,X
    // TODO: Fix comma operator: ORA $1,X

    // 80B3: NEG <$00
    // TODO: Convert NEG <$00

    // 80B4: NEG <$00
    // TODO: Convert NEG <$00

    // 80B5: NEG <$01
    // TODO: Convert NEG <$01

    // 80B6: NEG <$00
    // TODO: Convert NEG <$00

    // 80B7: NEG <$00
    // TODO: Convert NEG <$00

    // 80B8: NEG <$01
    // TODO: Convert NEG <$01

    // 80B9: NEG <$00
    // TODO: Convert NEG <$00

    // 80BA: NEG <$AA
    // TODO: Convert NEG <$AA

    // 80BB: ORA $2,X
    // TODO: Fix comma operator: ORA $2,X

    // 80BC: XNC <$AA
    // TODO: Convert XNC <$AA

    // 80BD: ORA $0,X
    // TODO: Fix comma operator: ORA $0,X

    // 80BE: NEG <$01
    // TODO: Convert NEG <$01

    // 80BF: NEG <$00
    // TODO: Convert NEG <$00

    // 80C0: NEG <$AA
    // TODO: Convert NEG <$AA

    // 80C1: ORA $1,X
    // TODO: Fix comma operator: ORA $1,X

    // 80C2: NEG <$00
    // TODO: Convert NEG <$00

    // 80C3: NEG <$00
    // TODO: Convert NEG <$00

    // 80C4: NEG <$05
    // TODO: Convert NEG <$05

    // 80C5: LSR <$01
    // TODO: Convert LSR <$01

    // 80C6: NEG <$00
    // TODO: Convert NEG <$00

    // 80C7: NEG <$00
    // TODO: Convert NEG <$00

    // 80C8: NEG <$01
    // TODO: Convert NEG <$01

    // 80C9: NEG <$C0
    // TODO: Convert NEG <$C0

    // 80CA: SUBB #$30
    cpu.m_b -= 0x30;

    // 80CB: LEAX $2,X
    // TODO: Fix comma operator: LEAX $2,X

    // 80CC: XNC <$0A
    // TODO: Convert XNC <$0A

    // 80CD: DEC <$0A
    cpu.decrement_memory(0x0A);

    // 80CE: DEC <$01
    cpu.decrement_memory(0x01);

    // 80CF: NEG <$30
    // TODO: Convert NEG <$30

    // 80D0: LEAX ,U+
    // TODO: Complex indexed addressing: ,U+

    // 80D1: SUBB #$01
    cpu.m_b -= 0x01;

    // 80D2: NEG <$00
    // TODO: Convert NEG <$00

    // 80D3: NEG <$00
    // TODO: Convert NEG <$00

    // 80D4: NEG <$01
    // TODO: Convert NEG <$01

    // 80D5: NEG <$C0
    // TODO: Convert NEG <$C0

    // 80D6: SUBB #$30
    cpu.m_b -= 0x30;

    // 80D7: LEAX $2,X
    // TODO: Fix comma operator: LEAX $2,X

    // 80D8: XNC <$0A
    // TODO: Convert XNC <$0A

    // 80D9: DEC <$0A
    cpu.decrement_memory(0x0A);

    // 80DA: DEC <$01
    cpu.decrement_memory(0x01);

    // 80DB: NEG <$30
    // TODO: Convert NEG <$30

    // 80DC: LEAX ,U+
    // TODO: Complex indexed addressing: ,U+

    // 80DD: SUBB #$01
    cpu.m_b -= 0x01;

    // 80DE: NEG <$00
    // TODO: Convert NEG <$00

    // 80DF: NEG <$00
    // TODO: Convert NEG <$00

    // 80E0: NEG <$01
    // TODO: Convert NEG <$01

    // 80E1: NEG <$C0
    // TODO: Convert NEG <$C0

    // 80E2: SUBB #$30
    cpu.m_b -= 0x30;

    // 80E3: LEAX $2,X
    // TODO: Fix comma operator: LEAX $2,X

    // 80E4: XNC <$0A
    // TODO: Convert XNC <$0A

    // 80E5: DEC <$0A
    cpu.decrement_memory(0x0A);

    // 80E6: DEC <$01
    cpu.decrement_memory(0x01);

    // 80E7: NEG <$00
    // TODO: Convert NEG <$00

    // 80E8: NEG <$00
    // TODO: Convert NEG <$00

    // 80E9: NEG <$01
    // TODO: Convert NEG <$01

    // 80EA: NEG <$00
    // TODO: Convert NEG <$00

    // 80EB: NEG <$00
    // TODO: Convert NEG <$00

    // 80EC: NEG <$05
    // TODO: Convert NEG <$05

    // 80ED: LSR <$01
    // TODO: Convert LSR <$01

    // 80EE: NEG <$02
    // TODO: Convert NEG <$02

    // 80EF: XNC <$02
    // TODO: Convert XNC <$02

    // 80F0: XNC <$02
    // TODO: Convert XNC <$02

    // 80F1: XNC <$30
    // TODO: Convert XNC <$30

    // 80F2: LEAX ,X+
    // TODO: Complex indexed addressing: ,X+

    // 80F3: SUBA #$02
    cpu.m_a -= 0x02;

    // 80F4: XNC <$0C
    // TODO: Convert XNC <$0C

    // 80F5: INC <$20
    cpu.increment_memory(0x20);

    // 80F6: BRA $80FA
    goto label_80FA;

    // 80F7: XNC <$C2
    // TODO: Convert XNC <$C2

    // 80F8: SBCB #$0A
    cpu.sub_b_with_carry(0x0A);

    // 80F9: DEC <$01
    cpu.decrement_memory(0x01);

    label_80FA:
    // 80FA: NEG <$02
    // TODO: Convert NEG <$02

    // 80FB: XNC <$02
    // TODO: Convert XNC <$02

    // 80FC: XNC <$02
    // TODO: Convert XNC <$02

    // 80FD: XNC <$0A
    // TODO: Convert XNC <$0A

    // 80FE: DEC <$C2
    cpu.decrement_memory(0xC2);

    // 80FF: SBCB #$02
    cpu.sub_b_with_carry(0x02);

    // 8100: XNC <$20
    // TODO: Convert XNC <$20

    // 8101: BRA $810F
    goto label_810F;

    // 8102: INC <$02
    cpu.increment_memory(0x02);

    // 8103: XNC <$80
    // TODO: Convert XNC <$80

    // 8104: SUBA #$30
    cpu.m_a -= 0x30;

    // 8105: LEAX $2,X
    // TODO: Fix comma operator: LEAX $2,X

    // 8106: XNC <$02
    // TODO: Convert XNC <$02

    // 8107: XNC <$02
    // TODO: Convert XNC <$02

    // 8108: XNC <$05
    // TODO: Convert XNC <$05

    // 8109: LSR <$01
    // TODO: Convert LSR <$01

    // 810A: NEG <$02
    // TODO: Convert NEG <$02

    // 810B: XNC <$02
    // TODO: Convert XNC <$02

    // 810C: XNC <$01
    // TODO: Convert XNC <$01

    // 810D: NEG <$C0
    // TODO: Convert NEG <$C0

    // 810E: SUBB #$C0
    cpu.m_b -= 0xC0;

    label_810F:
    // 810F: SUBB #$01
    cpu.m_b -= 0x01;

    // 8110: NEG <$20
    // TODO: Convert NEG <$20

    // 8111: BRA $8133
    goto label_8133;

    // 8112: BRA $8115
    goto label_8115;

    // 8113: NEG <$0E
    // TODO: Convert NEG <$0E

    // 8114: JMP <$0E
    // TODO: Invalid branch offset: <$0E

    label_8115:
    // 8115: JMP <$01
    // TODO: Invalid branch offset: <$01

    // 8116: NEG <$08
    // TODO: Convert NEG <$08

    // 8117: ASL <$08
    cpu.arithmetic_shift_left(0x08);

    // 8118: ASL <$02
    cpu.arithmetic_shift_left(0x02);

    // 8119: XNC <$00
    // TODO: Convert XNC <$00

    // 811A: NEG <$00
    // TODO: Convert NEG <$00

    // 811B: NEG <$01
    // TODO: Convert NEG <$01

    // 811C: NEG <$02
    // TODO: Convert NEG <$02

    // 811D: XNC <$02
    // TODO: Convert XNC <$02

    // 811E: XNC <$01
    // TODO: Convert XNC <$01

    // 811F: NEG <$2C
    // TODO: Convert NEG <$2C

    // 8120: BGE $814E
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x814E;

    // 8121: BGE $8124
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x8124;

    // 8122: NEG <$80
    // TODO: Convert NEG <$80

    // 8123: SUBA #$80
    cpu.m_a -= 0x80;

    // 8124: SUBA #$01
    cpu.m_a -= 0x01;

    // 8125: NEG <$02
    // TODO: Convert NEG <$02

    // 8126: XNC <$02
    // TODO: Convert XNC <$02

    // 8127: XNC <$02
    // TODO: Convert XNC <$02

    // 8128: XNC <$00
    // TODO: Convert XNC <$00

    // 8129: NEG <$00
    // TODO: Convert NEG <$00

    // 812A: NEG <$01
    // TODO: Convert NEG <$01

    // 812B: NEG <$8C
    // TODO: Convert NEG <$8C

    // 812C: CMPX #$8C01
    cpu.compare_x(0x8C01);

    // 812D: CMPX #$0120
    cpu.compare_x(0x0120);

    // 812F: BRA $8151
    goto label_8151;

    // 8130: BRA $8133
    goto label_8133;

    // 8131: NEG <$03
    // TODO: Convert NEG <$03

    // 8132: COM <$03
    // TODO: Convert COM <$03

    label_8133:
    // 8133: COM <$05
    // TODO: Convert COM <$05

    // 8134: LSR <$01
    // TODO: Convert LSR <$01

    // 8135: NEG <$03
    // TODO: Convert NEG <$03

    // 8136: COM <$03
    // TODO: Convert COM <$03

    // 8137: COM <$02
    // TODO: Convert COM <$02

    // 8138: XNC <$02
    // TODO: Convert XNC <$02

    // 8139: XNC <$02
    // TODO: Convert XNC <$02

    // 813A: XNC <$01
    // TODO: Convert XNC <$01

    // 813B: NEG <$08
    // TODO: Convert NEG <$08

    // 813C: ASL <$08
    cpu.arithmetic_shift_left(0x08);

    // 813D: ASL <$02
    cpu.arithmetic_shift_left(0x02);

    // 813E: XNC <$B0
    // TODO: Convert XNC <$B0

    // 813F: SUBA $B002
    cpu.m_a -= cpu.read_memory(0xB002);

    // 8140: SUBA $0208
    cpu.m_a -= cpu.read_memory(0x0208);

    // 8142: ASL <$08
    cpu.arithmetic_shift_left(0x08);

    // 8143: ASL <$01
    cpu.arithmetic_shift_left(0x01);

    // 8144: NEG <$32
    // TODO: Convert NEG <$32

    // 8145: LEAS -$E,Y
    // TODO: Fix comma operator: LEAS -$E,Y

    // 8146: LEAS $2,X
    // TODO: Fix comma operator: LEAS $2,X

    // 8147: XNC <$C8
    // TODO: Convert XNC <$C8

    // 8148: EORB #$C8
    cpu.m_b ^= 0xC8;

    // 8149: EORB #$02
    cpu.m_b ^= 0x02;

    // 814A: XNC <$80
    // TODO: Convert XNC <$80

    // 814B: SUBA #$80
    cpu.m_a -= 0x80;

    // 814C: SUBA #$01
    cpu.m_a -= 0x01;

    // 814D: NEG <$20
    // TODO: Convert NEG <$20

    // 814E: BRA $8170
    goto label_8170;

    // 814F: BRA $8153
    goto label_8153;

    // 8150: XNC <$0B
    // TODO: Convert XNC <$0B

    label_8151:
    // 8151: XDEC <$0B
    // TODO: Convert XDEC <$0B

    // 8152: XDEC <$05
    // TODO: Convert XDEC <$05

    label_8153:
    // 8153: LSR <$01
    // TODO: Convert LSR <$01

    // 8154: NEG <$0E
    // TODO: Convert NEG <$0E

    // 8155: JMP <$0E
    // TODO: Invalid branch offset: <$0E

    // 8156: JMP <$02
    // TODO: Invalid branch offset: <$02

    // 8157: XNC <$0A
    // TODO: Convert XNC <$0A

    // 8158: DEC <$00
    cpu.decrement_memory(0x00);

    // 8159: NEG <$01
    // TODO: Convert NEG <$01

    // 815A: NEG <$A0
    // TODO: Convert NEG <$A0

    // 815B: SUBA ,Y+
    // TODO: Complex indexed addressing: ,Y+

    // 815C: SUBA $2,X
    // TODO: Fix comma operator: SUBA $2,X

    // 815D: XNC <$00
    // TODO: Convert XNC <$00

    // 815E: NEG <$0A
    // TODO: Convert NEG <$0A

    // 815F: DEC <$01
    cpu.decrement_memory(0x01);

    // 8160: NEG <$FA
    // TODO: Convert NEG <$FA

    // 8161: ORB $FA02
    cpu.m_b |= cpu.read_memory(0xFA02);

    // 8162: ORB $020A
    cpu.m_b |= cpu.read_memory(0x020A);

    // 8164: DEC <$00
    cpu.decrement_memory(0x00);

    // 8165: NEG <$01
    // TODO: Convert NEG <$01

    // 8166: NEG <$A0
    // TODO: Convert NEG <$A0

    // 8167: SUBA ,Y+
    // TODO: Complex indexed addressing: ,Y+

    // 8168: SUBA $2,X
    // TODO: Fix comma operator: SUBA $2,X

    // 8169: XNC <$00
    // TODO: Convert XNC <$00

    // 816A: NEG <$0A
    // TODO: Convert NEG <$0A

    // 816B: DEC <$01
    cpu.decrement_memory(0x01);

    // 816C: NEG <$FA
    // TODO: Convert NEG <$FA

    // 816D: ORB $FA02
    cpu.m_b |= cpu.read_memory(0xFA02);

    // 816E: ORB $020A
    cpu.m_b |= cpu.read_memory(0x020A);

    label_8170:
    // 8170: DEC <$00
    cpu.decrement_memory(0x00);

    // 8171: NEG <$01
    // TODO: Convert NEG <$01

    // 8172: NEG <$02
    // TODO: Convert NEG <$02

    // 8173: XNC <$02
    // TODO: Convert XNC <$02

    // 8174: XNC <$05
    // TODO: Convert XNC <$05

    // 8175: LSR <$01
    // TODO: Convert LSR <$01

    // 8176: NEG <$AA
    // TODO: Convert NEG <$AA

    // 8177: ORA $A,Y
    // TODO: Fix comma operator: ORA $A,Y

    // 8178: BPL $817B
    if (!cpu.negative_flag()) cpu.m_pc = 0x817B;

    // 8179: NEG <$00
    // TODO: Convert NEG <$00

    // 817A: NEG <$00
    // TODO: Convert NEG <$00

    // 817B: NEG <$01
    // TODO: Convert NEG <$01

    // 817C: NEG <$AA
    // TODO: Convert NEG <$AA

    // 817D: ORA $3,X
    // TODO: Fix comma operator: ORA $3,X

    // 817E: COM <$02
    // TODO: Convert COM <$02

    // 817F: XNC <$03
    // TODO: Convert XNC <$03

    // 8180: COM <$AA
    // TODO: Convert COM <$AA

    // 8181: ORA $1,X
    // TODO: Fix comma operator: ORA $1,X

    // 8182: NEG <$AA
    // TODO: Convert NEG <$AA

    // 8183: ORA $0,X
    // TODO: Fix comma operator: ORA $0,X

    // 8184: NEG <$01
    // TODO: Convert NEG <$01

    // 8185: NEG <$00
    // TODO: Convert NEG <$00

    // 8186: NEG <$00
    // TODO: Convert NEG <$00

    // 8187: NEG <$01
    // TODO: Convert NEG <$01

    // 8188: NEG <$00
    // TODO: Convert NEG <$00

    // 8189: NEG <$00
    // TODO: Convert NEG <$00

    // 818A: NEG <$01
    // TODO: Convert NEG <$01

    // 818B: NEG <$AA
    // TODO: Convert NEG <$AA

    // 818C: ORA F,X
    // TODO: Complex indexed addressing: F,X

    // 818D: ORA #$01
    cpu.m_a |= 0x01;

    // 818E: NEG <$00
    // TODO: Convert NEG <$00

    // 818F: NEG <$00
    // TODO: Convert NEG <$00

    // 8190: NEG <$01
    // TODO: Convert NEG <$01

    // 8191: NEG <$00
    // TODO: Convert NEG <$00

    // 8192: NEG <$00
    // TODO: Convert NEG <$00

    // 8193: NEG <$01
    // TODO: Convert NEG <$01

    // 8194: NEG <$AA
    // TODO: Convert NEG <$AA

    // 8195: ORA $0,X
    // TODO: Fix comma operator: ORA $0,X

    // 8196: NEG <$02
    // TODO: Convert NEG <$02

    // 8197: XNC <$00
    // TODO: Convert XNC <$00

    // 8198: NEG <$AA
    // TODO: Convert NEG <$AA

    // 8199: ORA $1,X
    // TODO: Fix comma operator: ORA $1,X

    // 819A: NEG <$AA
    // TODO: Convert NEG <$AA

    // 819B: ORA $0,X
    // TODO: Fix comma operator: ORA $0,X

    // 819C: NEG <$01
    // TODO: Convert NEG <$01

    // 819D: NEG <$00
    // TODO: Convert NEG <$00

    // 819E: NEG <$00
    // TODO: Convert NEG <$00

    // 819F: NEG <$05
    // TODO: Convert NEG <$05

    // 81A0: LSR <$02
    // TODO: Convert LSR <$02

    // 81A1: XNC <$2A
    // TODO: Convert XNC <$2A

    // 81A2: BPL $81CE
    // TODO: External jump to 0x81CE - not implemented

    // 81A3: BPL $81A6
    if (!cpu.negative_flag()) cpu.m_pc = 0x81A6;

    // 81A4: NEG <$00
    // TODO: Convert NEG <$00

    // 81A5: NEG <$00
    // TODO: Convert NEG <$00

    // 81A6: NEG <$02
    // TODO: Convert NEG <$02

    // 81A7: XNC <$A8
    // TODO: Convert XNC <$A8

    // 81A8: EORA $01,Y
    // TODO: Fix comma operator: EORA $01,Y

    // 81A9: EORA $1,X
    // TODO: Fix comma operator: EORA $1,X

    // 81AB: NEG <$00
    // TODO: Convert NEG <$00

    // 81AD: XNC <$2A
    // TODO: Convert XNC <$2A

    // 81AF: BPL $81B2
    // TODO: External jump to 0x81B2 - not implemented

    // 81B1: NEG <$00
    // TODO: Convert NEG <$00

    // 81B3: XNC <$A8
    // TODO: Convert XNC <$A8

    // 81B5: EORA $1,X
    // TODO: Fix comma operator: EORA $1,X

    // 81B7: NEG <$00
    // TODO: Convert NEG <$00

    // 81B9: XNC <$8A
    // TODO: Convert XNC <$8A

    // 81BB: ORA $1,X
    // TODO: Fix comma operator: ORA $1,X

    // 81BD: NEG <$00
    // TODO: Convert NEG <$00

    // 81BF: NEG <$AA
    // TODO: Convert NEG <$AA

    // 81C1: SBCA $5,X
    // TODO: Fix comma operator: SBCA $5,X

    // 81C3: NEG <$00
    // TODO: Convert NEG <$00

    // 81C5: NEG <$02
    // TODO: Convert NEG <$02

    // 81C7: LEAX $C,X
    // TODO: Fix comma operator: LEAX $C,X

    // 81C9: NEG <$00
    // TODO: Convert NEG <$00

    // 81CB: NEG <$02
    // TODO: Convert NEG <$02

    // 81CD: NEG <$00
    // TODO: Convert NEG <$00

    // 81CF: XNC <$0C
    // TODO: Convert XNC <$0C

    // 81D1: LEAX $1,X
    // TODO: Fix comma operator: LEAX $1,X

    // 81D3: NEG <$00
    // TODO: Convert NEG <$00

    // 81D5: XNC <$30
    // TODO: Convert XNC <$30

    // 81D7: INC <$01
    cpu.increment_memory(0x01);

    // 81D9: NEG <$00
    // TODO: Convert NEG <$00

    // 81DB: XNC <$00
    // TODO: Convert XNC <$00

    // 81DD: NEG <$02
    // TODO: Convert NEG <$02

    // 81DF: INC <$30
    cpu.increment_memory(0x30);

    // 81E1: LSR <$02
    // TODO: Convert LSR <$02

    // 81E3: NEG <$00
    // TODO: Convert NEG <$00

    // 81E5: NEG <$00
    // TODO: Convert NEG <$00

    // 81E7: NEG <$01
    // TODO: Convert NEG <$01

    // 81E9: NEG <$00
    // TODO: Convert NEG <$00

    // 81EB: NEG <$00
    // TODO: Convert NEG <$00

    // 81ED: NEG <$02
    // TODO: Convert NEG <$02

    // 81EF: NEG <$00
    // TODO: Convert NEG <$00

    // 81F1: XNC <$3C
    // TODO: Convert XNC <$3C

    // 81F3: CWAI #$02
    // TODO: Convert CWAI #$02

    // 81F5: NEG <$00
    // TODO: Convert NEG <$00

    // 81F7: XNC <$C3
    // TODO: Convert XNC <$C3

    // 81F9: ADDD #$0100
    cpu.m_d += 0x0100;

    // 81FC: NEG <$02
    // TODO: Convert NEG <$02

    // 81FE: NEG <$00
    // TODO: Convert NEG <$00

    // 8200: LSR <$01
    // TODO: Convert LSR <$01

    // 8202: NEG <$00
    // TODO: Convert NEG <$00

    // 8204: NEG <$C0
    // TODO: Convert NEG <$C0

    // 8206: SUBB #$02
    cpu.m_b -= 0x02;

    // 8208: LEAX -$10,Y
    // TODO: Fix comma operator: LEAX -$10,Y

    // 820A: NEG <$0C
    // TODO: Convert NEG <$0C

    // 820C: INC <$01
    cpu.increment_memory(0x01);

    // 820E: COM <$03
    // TODO: Convert COM <$03

    // 8210: XNC <$00
    // TODO: Convert XNC <$00

    // 8212: NEG <$01
    // TODO: Convert NEG <$01

    // 8214: SUBB #$C0
    cpu.m_b -= 0xC0;

    // 8216: XNC <$30
    // TODO: Convert XNC <$30

    // 8218: LEAX $1,X
    // TODO: Fix comma operator: LEAX $1,X

    // 821A: INC <$0C
    cpu.increment_memory(0x0C);

    // 821C: NEG <$03
    // TODO: Convert NEG <$03

    // 821E: COM <$02
    // TODO: Convert COM <$02

    // 8220: NEG <$00
    // TODO: Convert NEG <$00

    // 8222: NEG <$00
    // TODO: Convert NEG <$00

    // 8224: NEG <$05
    // TODO: Convert NEG <$05

    // 8226: XNC <$00
    // TODO: Convert XNC <$00

    // 8228: NEG <$02
    // TODO: Convert NEG <$02

    // 822A: XNC <$02
    // TODO: Convert XNC <$02

    // 822C: XNC <$38
    // TODO: Convert XNC <$38

    // 822E: XANDCC #$01
    // TODO: Convert XANDCC #$01

    // 8230: SUBD ,--Y
    // TODO: Complex indexed addressing: ,--Y

    // 8232: NEG <$02
    // TODO: Convert NEG <$02

    // 8234: XNC <$02
    // TODO: Convert XNC <$02

    // 8236: CMPX #$8C02
    cpu.compare_x(0x8C02);

    // 8239: XNC <$02
    // TODO: Convert XNC <$02

    // 823B: XNC <$38
    // TODO: Convert XNC <$38

    // 823D: XANDCC #$02
    // TODO: Convert XANDCC #$02

    // 823F: NEG <$00
    // TODO: Convert NEG <$00

    // 8241: LSR <$01
    // TODO: Convert LSR <$01

    // 8243: XNC <$02
    // TODO: Convert XNC <$02

    // 8245: NEG <$00
    // TODO: Convert NEG <$00

    // 8247: NEG <$02
    // TODO: Convert NEG <$02

    // 8249: LEAS $C,X
    // TODO: Fix comma operator: LEAS $C,X

    // 824B: NEG <$C0
    // TODO: Convert NEG <$C0

    // 824D: LEAS $2,X
    // TODO: Fix comma operator: LEAS $2,X

    // 824F: NEG <$00
    // TODO: Convert NEG <$00

    // 8251: NEG <$83
    // TODO: Convert NEG <$83

    // 8253: ADDD $1,X
    // TODO: Fix comma operator: ADDD $1,X

    // 8255: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 8257: XNC <$03
    // TODO: Convert XNC <$03

    // 8259: NEG <$01
    // TODO: Convert NEG <$01

    // 825B: NEG <$B2
    // TODO: Convert NEG <$B2

    // 825D: NEG <$AC
    // TODO: Convert NEG <$AC

    // 825F: INC <$02
    cpu.increment_memory(0x02);

    // 8261: NEG <$00
    // TODO: Convert NEG <$00

    // 8263: NEG <$00
    // TODO: Convert NEG <$00

    // 8265: NEG <$05
    // TODO: Convert NEG <$05

    // 8267: XNC <$00
    // TODO: Convert XNC <$00

    // 8269: NEG <$02
    // TODO: Convert NEG <$02

    // 826B: NEG <$00
    // TODO: Convert NEG <$00

    // 826D: NEG <$C3
    // TODO: Convert NEG <$C3

    // 826F: ADDD #$0200
    cpu.m_d += 0x0200;

    // 8272: NEG <$01
    // TODO: Convert NEG <$01

    // 8274: ADDD #$C302
    cpu.m_d += 0xC302;

    // 8277: NEG <$00
    // TODO: Convert NEG <$00

    // 8279: NEG <$C3
    // TODO: Convert NEG <$C3

    // 827B: ADDD #$0200
    cpu.m_d += 0x0200;

    // 827E: NEG <$01
    // TODO: Convert NEG <$01

    // 8280: ADDD #$C302
    cpu.m_d += 0xC302;

    // 8283: NEG <$00
    // TODO: Convert NEG <$00

    // 8285: LSR <$01
    // TODO: Convert LSR <$01

    // 8287: NEG <$00
    // TODO: Convert NEG <$00

    // 8289: XNC <$00
    // TODO: Convert XNC <$00

    // 828B: NEG <$01
    // TODO: Convert NEG <$01

    // 828D: ADDD #$0002
    cpu.m_d += 0x0002;

    // 8290: NEG <$00
    // TODO: Convert NEG <$00

    // 8292: XNC <$3C
    // TODO: Convert XNC <$3C

    // 8294: NEG <$01
    // TODO: Convert NEG <$01

    // 8296: NEG <$C3
    // TODO: Convert NEG <$C3

    // 8298: XNC <$00
    // TODO: Convert XNC <$00

    // 829A: NEG <$01
    // TODO: Convert NEG <$01

    // 829C: NEG <$3C
    // TODO: Convert NEG <$3C

    // 829E: XNC <$00
    // TODO: Convert XNC <$00

    // 82A0: NEG <$02
    // TODO: Convert NEG <$02

    // 82A2: NEG <$00
    // TODO: Convert NEG <$00

    // 82A4: LSR <$02
    // TODO: Convert LSR <$02

    // 82A6: ORA F,X
    // TODO: Complex indexed addressing: F,X

    // 82A8: XNC <$00
    // TODO: Convert XNC <$00

    // 82AA: NEG <$02
    // TODO: Convert NEG <$02

    // 82AC: ORA $AA02
    cpu.m_a |= cpu.read_memory(0xAA02);

    // 82AF: NEG <$00
    // TODO: Convert NEG <$00

    // 82B1: XNC <$AA
    // TODO: Convert XNC <$AA

    // 82B3: ADDA $2,X
    // TODO: Fix comma operator: ADDA $2,X

    // 82B5: NEG <$00
    // TODO: Convert NEG <$00

    // 82B7: XNC <$AE
    // TODO: Convert XNC <$AE

    // 82B9: ORA $2,X
    // TODO: Fix comma operator: ORA $2,X

    // 82BB: NEG <$00
    // TODO: Convert NEG <$00

    // 82BD: LSR <$01
    // TODO: Convert LSR <$01

    // 82BF: XHCF 
    // TODO: Convert XHCF 

    // 82C0: XHCF 
    // TODO: Convert XHCF 

    // 82C1: NEG <$BF
    // TODO: Convert NEG <$BF

    // 82C3: STX $0114
    cpu.write_memory16(0x0114, cpu.m_x);

    // 82C6: XHCF 
    // TODO: Convert XHCF 

    // 82C7: LSR <$01
    // TODO: Convert LSR <$01

    // 82C9: NEG <$00
    // TODO: Convert NEG <$00

    // 82CB: NEG <$95
    // TODO: Convert NEG <$95

    // 82CD: BITA <$01
    // TODO: Convert BITA <$01

    // 82CF: NEG <$00
    // TODO: Convert NEG <$00

    // 82D1: LSR <$01
    // TODO: Convert LSR <$01

    // 82D3: NEG <$00
    // TODO: Convert NEG <$00

    // 82D5: NEG <$56
    // TODO: Convert NEG <$56

    // 82D7: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // 82D8: NEG <$00
    // TODO: Convert NEG <$00

    // 82DA: NEG <$05
    // TODO: Convert NEG <$05

    // 82DC: NEG <$00
    // TODO: Convert NEG <$00

    // 82DE: NEG <$01
    // TODO: Convert NEG <$01

    // 82E0: LSRB 
    cpu.m_b >>= 1;

    // 82E1: LSRB 
    cpu.m_b >>= 1;

    // 82E2: NEG <$00
    // TODO: Convert NEG <$00

    // 82E4: NEG <$05
    // TODO: Convert NEG <$05

    // 82E6: NEG <$14
    // TODO: Convert NEG <$14

    // 82E8: XHCF 
    // TODO: Convert XHCF 

    // 82E9: NEG <$FE
    // TODO: Convert NEG <$FE

    // 82EB: LDU $0114
    cpu.m_u = cpu.read_memory16(0x0114);

    // 82EE: XHCF 
    // TODO: Convert XHCF 

    // 82EF: LSR <$01
    // TODO: Convert LSR <$01

    // 82F1: XHCF 
    // TODO: Convert XHCF 

    // 82F2: XHCF 
    // TODO: Convert XHCF 

    // 82F3: NEG <$FF
    // TODO: Convert NEG <$FF

    // 82F5: STU $0114
    cpu.write_memory16(0x0114, cpu.m_u);

    // 82F8: XHCF 
    // TODO: Convert XHCF 

    // 82F9: LSR <$01
    // TODO: Convert LSR <$01

    // 82FB: LSRB 
    cpu.m_b >>= 1;

    // 82FC: LSRB 
    cpu.m_b >>= 1;

    // 82FD: NEG <$15
    // TODO: Convert NEG <$15

    // 82FF: XHCF 
    // TODO: Convert XHCF 

    // 8300: NEG <$05
    // TODO: Convert NEG <$05

    // 8302: LSR <$01
    // TODO: Convert LSR <$01

    // 8304: NEG <$00
    // TODO: Convert NEG <$00

    // 8306: NEG <$05
    // TODO: Convert NEG <$05

    // 8308: LSR <$01
    // TODO: Convert LSR <$01

    // 830A: NEG <$00
    // TODO: Convert NEG <$00

    // 830C: NEG <$05
    // TODO: Convert NEG <$05

    // 830E: LSR <$01
    // TODO: Convert LSR <$01

    // 8310: NEG <$00
    // TODO: Convert NEG <$00

    // 8312: NEG <$05
    // TODO: Convert NEG <$05

    // 8314: LSR <$01
    // TODO: Convert LSR <$01

    // 8316: NEG <$00
    // TODO: Convert NEG <$00

    // 8318: NEG <$01
    // TODO: Convert NEG <$01

    // 831A: NEG <$01
    // TODO: Convert NEG <$01

    // 831C: NEG <$00
    // TODO: Convert NEG <$00

    // 831E: NEG <$01
    // TODO: Convert NEG <$01

    // 8320: NEG <$04
    // TODO: Convert NEG <$04

    // 8322: NEG <$00
    // TODO: Convert NEG <$00

    // 8324: COM <$01
    // TODO: Convert COM <$01

    // 8326: NEG <$00
    // TODO: Convert NEG <$00

    // 8328: XNC <$2A
    // TODO: Convert XNC <$2A

    // 832A: BPL $832D
    // TODO: External jump to 0x832D - not implemented

    // 832C: NEG <$00
    // TODO: Convert NEG <$00

    // 832E: XNC <$40
    // TODO: Convert XNC <$40

    // 8330: NEGA 
    cpu.m_a = -cpu.m_a;

    // 8331: XNC <$10
    // TODO: Convert XNC <$10

    // 8333: XNC <$04
    // TODO: Convert XNC <$04

    // 8336: LSR <$02
    // TODO: Convert LSR <$02

    // 8338: NEG <$01
    // TODO: Convert NEG <$01

    // 833A: NEG <$FF
    // TODO: Convert NEG <$FF

    // 833C: STU $04FF
    cpu.write_memory16(0x04FF, cpu.m_u);

    // 833F: STU $0386
    cpu.write_memory16(0x0386, cpu.m_u);

    // 8342: NEG <$97
    // TODO: Convert NEG <$97

    // 8344: LSRA 
    cpu.m_a >>= 1;

    // 8345: STA <$45
    cpu.write_memory(0x45, cpu.m_a);

    // 8347: LDX #$4989
    cpu.m_x = 0x4989;

    // 834A: LDA #$00
    cpu.m_a = 0x00;

    // 834C: STA ,X+
    cpu.write_memory(cpu.m_x, cpu.m_a);
    cpu.m_x++;

    // 834E: CMPX #$49A9
    cpu.compare_x(0x49A9);

    // 8351: BCS $834C
    if (cpu.carry_flag()) cpu.m_pc = 0x834C;

    // 8353: LDB $4B12
    cpu.m_b = cpu.read_memory(0x4B12);

    // 8356: ASLB 
    cpu.m_b <<= 1;

    // 8357: LDX #$7CC0
    cpu.m_x = 0x7CC0;

    // 835A: ABX 
    // TODO: Convert ABX 

    // 835B: CMPX #$7CD6
    cpu.compare_x(0x7CD6);

    // 835E: BCS $8365
    if (cpu.carry_flag()) cpu.m_pc = 0x8365;

    // 8360: LDU #$4B3F
    cpu.m_u = 0x4B3F;

    // 8363: BRA $8367
    goto label_8367;

    // 8365: LDU ,X
    // TODO: Complex indexed addressing: ,X

    label_8367:
    // 8367: STU $49A9
    cpu.write_memory16(0x49A9, cpu.m_u);

    // 836A: STU $49AB
    cpu.write_memory16(0x49AB, cpu.m_u);

    // 836D: LDU ,U
    // TODO: Complex indexed addressing: ,U

    // 836F: LDD #$0000
    cpu.m_d = 0x0000;

    // 8372: STA $49C0
    cpu.write_memory(0x49C0, cpu.m_a);

    // 8375: STD $49B1
    cpu.write_memory16(0x49B1, cpu.m_d);

    // 8378: STD $49B5
    cpu.write_memory16(0x49B5, cpu.m_d);

    // 837B: STA <$92
    cpu.write_memory(0x92, cpu.m_a);

    // 837D: STA <$95
    cpu.write_memory(0x95, cpu.m_a);

    // 837F: STU $49AF
    cpu.write_memory16(0x49AF, cpu.m_u);

    // 8382: STU $49B3
    cpu.write_memory16(0x49B3, cpu.m_u);

    // 8385: JSR $8434
    cpu.call_function(0x8434);

    // 8388: JSR $8408
    cpu.call_function(0x8408);

    // 838B: JSR $83CE
    cpu.call_function(0x83CE);

    // 838E: JSR $83CE
    cpu.call_function(0x83CE);

    // 8391: JSR $83CE
    cpu.call_function(0x83CE);

    // 8394: JSR $83CE
    cpu.call_function(0x83CE);

    // 8397: JSR $83CE
    cpu.call_function(0x83CE);

    // 839A: JSR $83CE
    cpu.call_function(0x83CE);

    // 839D: JSR $83CE
    cpu.call_function(0x83CE);

    // 83A0: JSR $83CE
    cpu.call_function(0x83CE);

    // 83A3: RTS 
    return;

    // 83A4: LDU #$4B3F
    cpu.m_u = 0x4B3F;

    // 83A7: LDX #$7C7E
    cpu.m_x = 0x7C7E;

    // 83AA: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // 83AC: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // 83AE: CMPU #$4B5F
    cpu.execute_cmpu_immediate(0x4B5F);

    // 83B2: BCS $83AA
    if (cpu.carry_flag()) cpu.m_pc = 0x83AA;

    // 83B4: LDU #$4B43
    cpu.m_u = 0x4B43;

    // 83B7: LDX #$7C9E
    cpu.m_x = 0x7C9E;

    // 83BA: LDA #$11
    cpu.m_a = 0x11;

    // 83BC: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // 83BF: MUL 
    // TODO: Convert MUL 

    // 83C0: ASLA 
    cpu.m_a <<= 1;

    // 83C1: LDD A,X
    // TODO: Fix comma operator: LDD A,X

    // 83C3: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // 83C5: LEAU $4,U
    // TODO: Fix comma operator: LEAU $4,U

    // 83C7: CMPU #$4B5F
    cpu.execute_cmpu_immediate(0x4B5F);

    // 83CB: BCS $83BA
    if (cpu.carry_flag()) cpu.m_pc = 0x83BA;

    // 83CD: RTS 
    return;

    label_83CE:
    // 83CE: JMP $83ce
    goto label_83CE;

    // 83D0: BNE $8407
    if (!cpu.zero_flag()) cpu.m_pc = 0x8407;

    // 83D2: LDU $49B3
    cpu.m_u = cpu.read_memory16(0x49B3);

    // 83D5: LEAU $3,U
    // TODO: Fix comma operator: LEAU $3,U

    // 83D7: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // 83D9: CMPA #$05
    cpu.compare_a(0x05);

    // 83DB: BNE $83E2
    if (!cpu.zero_flag()) cpu.m_pc = 0x83E2;

    // 83DD: LDU $49AB
    cpu.m_u = cpu.read_memory16(0x49AB);

    // 83E0: LDU $2,U
    // TODO: Fix comma operator: LDU $2,U

    // 83E2: LDB ,U
    // TODO: Complex indexed addressing: ,U

    // 83E4: CMPB #$01
    cpu.compare_b(0x01);

    // 83E6: BNE $83ED
    if (!cpu.zero_flag()) cpu.m_pc = 0x83ED;

    // 83E8: LDD #$0800
    cpu.m_d = 0x0800;

    // 83EB: BRA $83F9
    goto label_83F9;

    // 83ED: CMPB #$03
    cpu.compare_b(0x03);

    // 83EF: BNE $83F6
    if (!cpu.zero_flag()) cpu.m_pc = 0x83F6;

    // 83F1: LDD #$0000
    cpu.m_d = 0x0000;

    // 83F4: BRA $83F9
    goto label_83F9;

    // 83F6: LDD #$1000
    cpu.m_d = 0x1000;

    label_83F9:
    // 83F9: ADDD $49B7
    cpu.m_d += 0x49B7;

    // 83FC: SUBD $49B1
    cpu.m_d -= 0x49B1;

    // 83FF: SUBD #$6000
    cpu.m_d -= 0x6000;

    // 8402: BHI $8407
    // TODO: Convert BHI $8407

    // 8404: JSR $8408
    cpu.call_function(0x8408);

    // 8407: RTS 
    return;

    // 8408: LDU $49B3
    cpu.m_u = cpu.read_memory16(0x49B3);

    // 840B: LDB ,U
    // TODO: Complex indexed addressing: ,U

    // 840D: CMPB #$01
    cpu.compare_b(0x01);

    // 840F: BNE $8416
    if (!cpu.zero_flag()) cpu.m_pc = 0x8416;

    // 8411: LDD #$0800
    cpu.m_d = 0x0800;

    // 8414: BRA $8419
    goto label_8419;

    // 8416: LDD #$1000
    cpu.m_d = 0x1000;

    label_8419:
    // 8419: ADDD $49B5
    cpu.m_d += 0x49B5;

    // 841C: STD $49B5
    cpu.write_memory16(0x49B5, cpu.m_d);

    // 841F: LEAU $3,U
    // TODO: Fix comma operator: LEAU $3,U

    // 8421: LDB ,U
    // TODO: Complex indexed addressing: ,U

    // 8423: CMPB #$05
    cpu.compare_b(0x05);

    // 8425: BNE $8431
    if (!cpu.zero_flag()) cpu.m_pc = 0x8431;

    // 8427: LDU $49AB
    cpu.m_u = cpu.read_memory16(0x49AB);

    // 842A: LEAU $2,U
    // TODO: Fix comma operator: LEAU $2,U

    // 842C: STU $49AB
    cpu.write_memory16(0x49AB, cpu.m_u);

    // 842F: LDU ,U
    // TODO: Complex indexed addressing: ,U

    // 8431: STU $49B3
    cpu.write_memory16(0x49B3, cpu.m_u);

    // 8434: LDU $49B3
    cpu.m_u = cpu.read_memory16(0x49B3);

    // 8437: LDB ,U
    // TODO: Complex indexed addressing: ,U

    // 8439: CMPB #$03
    cpu.compare_b(0x03);

    // 843B: BNE $8447
    if (!cpu.zero_flag()) cpu.m_pc = 0x8447;

    // 843D: LDD $49B5
    cpu.m_d = cpu.read_memory16(0x49B5);

    // 8440: STD <$93
    cpu.write_memory16(0x93, cpu.m_d);

    // 8442: LDA #$FF
    cpu.m_a = 0xFF;

    // 8444: STA <$92
    cpu.write_memory(0x92, cpu.m_a);

    // 8446: RTS 
    return;

    // 8447: LDB ,U
    // TODO: Complex indexed addressing: ,U

    // 8449: CMPB #$04
    cpu.compare_b(0x04);

    // 844B: BNE $846A
    if (!cpu.zero_flag()) cpu.m_pc = 0x846A;

    // 844D: LDD $49B5
    cpu.m_d = cpu.read_memory16(0x49B5);

    // 8450: STD <$96
    cpu.write_memory16(0x96, cpu.m_d);

    // 8452: LDA #$FF
    cpu.m_a = 0xFF;

    // 8454: STA <$95
    cpu.write_memory(0x95, cpu.m_a);

    // 8456: LDA #$00
    cpu.m_a = 0x00;

    // 8458: STA <$44
    cpu.write_memory(0x44, cpu.m_a);

    // 845A: STA <$45
    cpu.write_memory(0x45, cpu.m_a);

    // 845C: LDA $4B36
    cpu.m_a = cpu.read_memory(0x4B36);

    // 845F: BNE $846A
    if (!cpu.zero_flag()) cpu.m_pc = 0x846A;

    // 8461: INC $4B36
    cpu.increment_memory(0x4B36);

    // 8464: JSR $97E3
    cpu.call_function(0x97E3);

    // 8467: LDU $49B3
    cpu.m_u = cpu.read_memory16(0x49B3);

    // 846A: LDB ,U
    // TODO: Complex indexed addressing: ,U

    // 846C: CMPB #$01
    cpu.compare_b(0x01);

    // 846E: BNE $8475
    if (!cpu.zero_flag()) cpu.m_pc = 0x8475;

    // 8470: LDD #$0800
    cpu.m_d = 0x0800;

    // 8473: BRA $8478
    goto label_8478;

    // 8475: LDD #$1000
    cpu.m_d = 0x1000;

    label_8478:
    // 8478: ADDD $49B5
    cpu.m_d += 0x49B5;

    // 847B: STD $49B7
    cpu.write_memory16(0x49B7, cpu.m_d);

    // 847E: LDB $49B5
    cpu.m_b = cpu.read_memory(0x49B5);

    // 8481: LSRB 
    cpu.m_b >>= 1;

    // 8482: LSRB 
    cpu.m_b >>= 1;

    // 8483: LSRB 
    cpu.m_b >>= 1;

    // 8484: ANDB #$0F
    cpu.m_b &= 0x0F;

    // 8486: LDX #$4989
    cpu.m_x = 0x4989;

    // 8489: LDA $1,U
    // TODO: Fix comma operator: LDA $1,U

    // 848B: STA B,X
    // TODO: Handle indexed addressing: STA B,X

    // 848D: LDX #$4999
    cpu.m_x = 0x4999;

    // 8490: LDA $2,U
    // TODO: Fix comma operator: LDA $2,U

    // 8492: STA B,X
    // TODO: Handle indexed addressing: STA B,X

    // 8494: RTS 
    return;

    // 8495: LDA <$45
    cpu.m_a = cpu.read_memory(0x45);

    // 8497: BNE $84B5
    if (!cpu.zero_flag()) cpu.m_pc = 0x84B5;

    // 8499: LDB $4B19
    cpu.m_b = cpu.read_memory(0x4B19);

    // 849C: CMPB #$07
    cpu.compare_b(0x07);

    // 849E: BLS $84A2
    // TODO: Convert BLS $84A2

    // 84A0: LDB #$07
    cpu.m_b = 0x07;

    // 84A2: ASLB 
    cpu.m_b <<= 1;

    // 84A3: LDU #$84B6
    cpu.m_u = 0x84B6;

    // 84A6: LEAU B,U
    // TODO: Fix comma operator: LEAU B,U

    // 84A8: LDA <$43
    cpu.m_a = cpu.read_memory(0x43);

    // 84AA: ANDA ,U
    // TODO: Complex indexed addressing: ,U

    // 84AC: BNE $84B5
    if (!cpu.zero_flag()) cpu.m_pc = 0x84B5;

    // 84AE: LDA $1,U
    // TODO: Fix comma operator: LDA $1,U

    // 84B0: STA <$9B
    cpu.write_memory(0x9B, cpu.m_a);

    // 84B2: JSR $84C6
    cpu.call_function(0x84C6);

    // 84B5: RTS 
    return;

    // 84B6: CLR <$80
    cpu.write_memory(0x80, 0);

    // 84B8: CLR <$60
    cpu.write_memory(0x60, 0);

    // 84BA: CLR <$40
    cpu.write_memory(0x40, 0);

    // 84BC: CLR <$20
    cpu.write_memory(0x20, 0);

    // 84BE: ASR <$60
    // TODO: Convert ASR <$60

    // 84C0: ASR <$20
    // TODO: Convert ASR <$20

    // 84C2: COM <$60
    // TODO: Convert COM <$60

    // 84C4: COM <$20
    // TODO: Convert COM <$20

    // 84C6: LDD #$F800
    cpu.m_d = 0xF800;

    // 84C9: ANDA $5098
    cpu.m_a &= cpu.read_memory(0x5098);

    // 84CC: ADDA #$24
    cpu.m_a += 0x24;

    // 84CE: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // 84D1: LDA $5078
    cpu.m_a = cpu.read_memory(0x5078);

    // 84D4: LSRA 
    cpu.m_a >>= 1;

    // 84D5: LSRA 
    cpu.m_a >>= 1;

    // 84D6: LSRA 
    cpu.m_a >>= 1;

    // 84D7: ANDA #$0F
    cpu.m_a &= 0x0F;

    // 84D9: STA <$99
    cpu.write_memory(0x99, cpu.m_a);

    // 84DB: LDD #$FE00
    cpu.m_d = 0xFE00;

    // 84DE: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // 84E1: LDD #$FC80
    cpu.m_d = 0xFC80;

    // 84E4: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // 84E7: LDX #$4989
    cpu.m_x = 0x4989;

    // 84EA: LDB <$99
    cpu.m_b = cpu.read_memory(0x99);

    // 84EC: LDA B,X
    // TODO: Fix comma operator: LDA B,X

    // 84EE: STA <$9A
    cpu.write_memory(0x9A, cpu.m_a);

    // 84F0: ANDA #$C0
    cpu.m_a &= 0xC0;

    // 84F2: CMPA #$C0
    cpu.compare_a(0xC0);

    // 84F4: BNE $8522
    if (!cpu.zero_flag()) cpu.m_pc = 0x8522;

    // 84F6: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // 84F9: SUBD $507C
    cpu.m_d -= 0x507C;

    // 84FC: BLT $8522
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x8522;

    // 84FE: SUBD #$0400
    cpu.m_d -= 0x0400;

    // 8501: BGE $850F
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x850F;

    // 8503: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // 8506: CMPA <$9B
    cpu.compare_a(cpu.read_memory(0x9B));

    // 8508: BCS $850D
    if (cpu.carry_flag()) cpu.m_pc = 0x850D;

    // 850A: JSR $A7F7
    cpu.call_function(0xA7F7);

    // 850D: BRA $8522
    goto label_8522;

    // 850F: SUBD #$0400
    cpu.m_d -= 0x0400;

    // 8512: BGE $8522
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x8522;

    // 8514: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // 8517: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // 851A: MUL 
    // TODO: Convert MUL 

    // 851B: CMPA <$9B
    cpu.compare_a(cpu.read_memory(0x9B));

    // 851D: BCS $8522
    if (cpu.carry_flag()) cpu.m_pc = 0x8522;

    // 851F: JSR $A7F7
    cpu.call_function(0xA7F7);

    label_8522:
    // 8522: LDD $507C
    cpu.m_d = cpu.read_memory16(0x507C);

    // 8525: SUBD #$0400
    cpu.m_d -= 0x0400;

    // 8528: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // 852B: LDA <$9A
    cpu.m_a = cpu.read_memory(0x9A);

    // 852D: ASLA 
    cpu.m_a <<= 1;

    // 852E: ASLA 
    cpu.m_a <<= 1;

    // 852F: BNE $84EE
    if (!cpu.zero_flag()) cpu.m_pc = 0x84EE;

    // 8531: LDD #$FE00
    cpu.m_d = 0xFE00;

    // 8534: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // 8537: LDD #$0380
    cpu.m_d = 0x0380;

    // 853A: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // 853D: LDX #$4999
    cpu.m_x = 0x4999;

    // 8540: LDB <$99
    cpu.m_b = cpu.read_memory(0x99);

    // 8542: LDA B,X
    // TODO: Fix comma operator: LDA B,X

    // 8544: STA <$9A
    cpu.write_memory(0x9A, cpu.m_a);

    // 8546: ANDA #$C0
    cpu.m_a &= 0xC0;

    // 8548: CMPA #$C0
    cpu.compare_a(0xC0);

    // 854A: BNE $8578
    if (!cpu.zero_flag()) cpu.m_pc = 0x8578;

    // 854C: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // 854F: SUBD $507C
    cpu.m_d -= 0x507C;

    // 8552: BLT $8578
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x8578;

    // 8554: SUBD #$0400
    cpu.m_d -= 0x0400;

    // 8557: BGE $8565
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x8565;

    // 8559: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // 855C: CMPA <$9B
    cpu.compare_a(cpu.read_memory(0x9B));

    // 855E: BCS $8563
    if (cpu.carry_flag()) cpu.m_pc = 0x8563;

    // 8560: JSR $A80B
    cpu.call_function(0xA80B);

    // 8563: BRA $8578
    goto label_8578;

    // 8565: SUBD #$0400
    cpu.m_d -= 0x0400;

    // 8568: BGE $8578
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x8578;

    // 856A: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // 856D: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // 8570: MUL 
    // TODO: Convert MUL 

    // 8571: CMPA <$9B
    cpu.compare_a(cpu.read_memory(0x9B));

    // 8573: BCS $8578
    if (cpu.carry_flag()) cpu.m_pc = 0x8578;

    // 8575: JSR $A80B
    cpu.call_function(0xA80B);

    label_8578:
    // 8578: LDD $507C
    cpu.m_d = cpu.read_memory16(0x507C);

    // 857B: SUBD #$0400
    cpu.m_d -= 0x0400;

    // 857E: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // 8581: LDA <$9A
    cpu.m_a = cpu.read_memory(0x9A);

    // 8583: ASLA 
    cpu.m_a <<= 1;

    // 8584: ASLA 
    cpu.m_a <<= 1;

    // 8585: BNE $8544
    if (!cpu.zero_flag()) cpu.m_pc = 0x8544;

    // 8587: LDD $5078
    cpu.m_d = cpu.read_memory16(0x5078);

    // 858A: ADDD #$0800
    cpu.m_d += 0x0800;

    // 858D: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // 8590: SUBD $5098
    cpu.m_d -= 0x5098;

    // 8593: SUBD #$6000
    cpu.m_d -= 0x6000;

    // 8596: LBCS $84D1
    // TODO: Convert LBCS $84D1

    // 859A: RTS 
    return;

    // 859B: LDA $5040
    cpu.m_a = cpu.read_memory(0x5040);

    // 859E: LSRA 
    cpu.m_a >>= 1;

    // 859F: LSRA 
    cpu.m_a >>= 1;

    // 85A0: LSRA 
    cpu.m_a >>= 1;

    // 85A1: ANDA #$0F
    cpu.m_a &= 0x0F;

    // 85A3: CMPA $49BF
    cpu.compare_a(cpu.read_memory(cpu.read_memory(0x49BF)));

    // 85A6: BEQ $85DE
    if (cpu.zero_flag()) cpu.m_pc = 0x85DE;

    // 85A8: LDB $49BF
    cpu.m_b = cpu.read_memory(0x49BF);

    // 85AB: STA $49BF
    cpu.write_memory(0x49BF, cpu.m_a);

    // 85AE: LDX #$4989
    cpu.m_x = 0x4989;

    // 85B1: LDA B,X
    // TODO: Fix comma operator: LDA B,X

    // 85B3: ASLA 
    cpu.m_a <<= 1;

    // 85B4: BCC $85BD
    if (!cpu.carry_flag()) cpu.m_pc = 0x85BD;

    // 85B6: BMI $85BD
    if (cpu.negative_flag()) cpu.m_pc = 0x85BD;

    // 85B8: INC $49C0
    cpu.increment_memory(0x49C0);

    // 85BB: BRA $85D2
    goto label_85D2;

    // 85BD: ASLA 
    cpu.m_a <<= 1;

    // 85BE: BNE $85B3
    if (!cpu.zero_flag()) cpu.m_pc = 0x85B3;

    // 85C0: LDX #$4999
    cpu.m_x = 0x4999;

    // 85C3: LDA B,X
    // TODO: Fix comma operator: LDA B,X

    // 85C5: ASLA 
    cpu.m_a <<= 1;

    // 85C6: BCC $85CF
    if (!cpu.carry_flag()) cpu.m_pc = 0x85CF;

    // 85C8: BMI $85CF
    if (cpu.negative_flag()) cpu.m_pc = 0x85CF;

    // 85CA: INC $49C0
    cpu.increment_memory(0x49C0);

    // 85CD: BRA $85D2
    goto label_85D2;

    // 85CF: ASLA 
    cpu.m_a <<= 1;

    // 85D0: BNE $85C5
    if (!cpu.zero_flag()) cpu.m_pc = 0x85C5;

    label_85D2:
    // 85D2: LDA #$00
    cpu.m_a = 0x00;

    // 85D4: LDX #$4989
    cpu.m_x = 0x4989;

    // 85D7: STA B,X
    // TODO: Handle indexed addressing: STA B,X

    // 85D9: LDX #$4999
    cpu.m_x = 0x4999;

    // 85DC: STA B,X
    // TODO: Handle indexed addressing: STA B,X

    // 85DE: JSR $B3E4
    cpu.call_function(0xB3E4);

    // 85E1: JSR $85F9
    cpu.call_function(0x85F9);

    // 85E4: JSR $8735
    cpu.call_function(0x8735);

    // 85E7: JSR $86AE
    cpu.call_function(0x86AE);

    // 85EA: LDA <$95
    cpu.m_a = cpu.read_memory(0x95);

    // 85EC: BEQ $85F1
    if (cpu.zero_flag()) cpu.m_pc = 0x85F1;

    // 85EE: JSR $889F
    cpu.call_function(0x889F);

    // 85F1: LDA <$92
    cpu.m_a = cpu.read_memory(0x92);

    // 85F3: BEQ $85F8
    if (cpu.zero_flag()) cpu.m_pc = 0x85F8;

    // 85F5: JSR $88F5
    cpu.call_function(0x88F5);

    // 85F8: RTS 
    return;

    // 85F9: LDD #$0000
    cpu.m_d = 0x0000;

    // 85FC: STD $5040
    cpu.write_memory16(0x5040, cpu.m_d);

    // 85FF: LDD #$6270
    cpu.m_d = 0x6270;

    // 8602: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 8604: LDU #$8696
    cpu.m_u = 0x8696;

    // 8607: LDA <$92
    cpu.m_a = cpu.read_memory(0x92);

    // 8609: BEQ $8618
    if (cpu.zero_flag()) cpu.m_pc = 0x8618;

    // 860B: LDD <$93
    cpu.m_d = cpu.read_memory16(0x93);

    // 860D: SUBD $5098
    cpu.m_d -= 0x5098;

    // 8610: CMPD #$7000
    cpu.execute_cmpd_immediate(0x7000);

    // 8614: BHI $8618
    // TODO: Convert BHI $8618

    // 8616: BRA $861B
    goto label_861B;

    // 8618: LDD #$7000
    cpu.m_d = 0x7000;

    label_861B:
    // 861B: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // 861E: LDD ,U
    // TODO: Complex indexed addressing: ,U

    // 8620: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // 8623: LDD $2,U
    // TODO: Fix comma operator: LDD $2,U

    // 8625: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // 8628: LDD #$000F
    cpu.m_d = 0x000F;

    // 862B: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 862E: LDA #$67
    cpu.m_a = 0x67;

    // 8630: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 8633: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // 8636: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // 8639: JSR $CCE4
    cpu.call_function(0xCCE4);

    // 863C: LDD #$0200
    cpu.m_d = 0x0200;

    // 863F: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // 8642: LDD $507A
    cpu.m_d = cpu.read_memory16(0x507A);

    // 8645: SUBD $509A
    cpu.m_d -= 0x509A;

    // 8648: BPL $864E
    if (!cpu.negative_flag()) cpu.m_pc = 0x864E;

    // 864A: COMA 
    cpu.m_a = ~cpu.m_a;

    // 864B: NEGB 
    cpu.m_b = -cpu.m_b;

    // 864C: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 864E: CMPD $5078
    cpu.execute_cmpd_immediate(0x5078);

    // 8652: BLE $8657
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x8657;

    // 8654: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // 8657: LDD $507C
    cpu.m_d = cpu.read_memory16(0x507C);

    // 865A: SUBD $509C
    cpu.m_d -= 0x509C;

    // 865D: BPL $8663
    if (!cpu.negative_flag()) cpu.m_pc = 0x8663;

    // 865F: COMA 
    cpu.m_a = ~cpu.m_a;

    // 8660: NEGB 
    cpu.m_b = -cpu.m_b;

    // 8661: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 8663: CMPD $5078
    cpu.execute_cmpd_immediate(0x5078);

    // 8667: BLE $866C
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x866C;

    // 8669: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // 866C: LDD #$000F
    cpu.m_d = 0x000F;

    // 866F: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 8672: LDA #$67
    cpu.m_a = 0x67;

    // 8674: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 8677: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // 867A: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // 867D: JSR $CCFC
    cpu.call_function(0xCCFC);

    // 8680: LDD #$8040
    cpu.m_d = 0x8040;

    // 8683: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 8685: LEAU $4,U
    // TODO: Fix comma operator: LEAU $4,U

    // 8687: CMPU #$86AE
    cpu.execute_cmpu_immediate(0x86AE);

    label_868A:
    // 868A: LDX -$10,X
    // TODO: Fix comma operator: LDX -$10,X

    // 868B: LBCS $8607
    // TODO: Convert LBCS $8607

    // 868C: BCS $868D
    // TODO: External jump to 0x868D - not implemented

    // 868E: ASL $FC50
    cpu.arithmetic_shift_left(0xFC50);

    // 868F: LDD $5098
    cpu.m_d = cpu.read_memory16(0x5098);

    // 8691: EORA <$FD
    cpu.m_a ^= 0xFD;

    // 8692: STD $5040
    cpu.write_memory16(0x5040, cpu.m_d);

    // 8693: NEGB 
    cpu.m_b = -cpu.m_b;

    // 8694: NEGA 
    cpu.m_a = -cpu.m_a;

    // 8695: RTS 
    return;

    // 8696: LDD >$0000
    cpu.m_d = cpu.read_memory16(0x0000);

    // 8699: NEG <$04
    // TODO: Convert NEG <$04

    // 869B: NEG <$00
    // TODO: Convert NEG <$00

    // 869D: NEG <$FC
    // TODO: Convert NEG <$FC

    // 869F: NEG <$F0
    // TODO: Convert NEG <$F0

    // 86A1: NEG <$FE
    // TODO: Convert NEG <$FE

    // 86A3: NEG <$F0
    // TODO: Convert NEG <$F0

    // 86A5: NEG <$02
    // TODO: Convert NEG <$02

    // 86A7: NEG <$F0
    // TODO: Convert NEG <$F0

    // 86A9: NEG <$04
    // TODO: Convert NEG <$04

    // 86AB: NEG <$F0
    // TODO: Convert NEG <$F0

    // 86AD: NEG <$CC
    // TODO: Convert NEG <$CC

    // 86AF: NEG <$00
    // TODO: Convert NEG <$00

    // 86B1: STD $5040
    cpu.write_memory16(0x5040, cpu.m_d);

    // 86B4: LDD #$6250
    cpu.m_d = 0x6250;

    // 86B7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 86B9: LDU #$8725
    cpu.m_u = 0x8725;

    // 86BC: LDA <$92
    cpu.m_a = cpu.read_memory(0x92);

    // 86BE: BEQ $86CD
    if (cpu.zero_flag()) cpu.m_pc = 0x86CD;

    // 86C0: LDD <$93
    cpu.m_d = cpu.read_memory16(0x93);

    // 86C2: SUBD $5098
    cpu.m_d -= 0x5098;

    // 86C5: CMPD #$7000
    cpu.execute_cmpd_immediate(0x7000);

    // 86C9: BHI $86CD
    // TODO: Convert BHI $86CD

    // 86CB: BRA $86D0
    goto label_86D0;

    // 86CD: LDD #$7000
    cpu.m_d = 0x7000;

    label_86D0:
    // 86D0: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // 86D3: LDD ,U
    // TODO: Complex indexed addressing: ,U

    // 86D5: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // 86D8: LDD $2,U
    // TODO: Fix comma operator: LDD $2,U

    // 86DA: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // 86DD: LDD #$000F
    cpu.m_d = 0x000F;

    // 86E0: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 86E3: LDA #$67
    cpu.m_a = 0x67;

    // 86E5: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 86E8: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // 86EB: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // 86EE: JSR $CCE4
    cpu.call_function(0xCCE4);

    // 86F1: BRA $8711
    goto label_8711;

    // 86F3: LDD ,U
    // TODO: Complex indexed addressing: ,U

    // 86F5: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // 86F8: LDD $2,U
    // TODO: Fix comma operator: LDD $2,U

    // 86FA: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // 86FD: LDD #$000F
    cpu.m_d = 0x000F;

    // 8700: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 8703: LDA #$67
    cpu.m_a = 0x67;

    // 8705: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 8708: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // 870B: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // 870E: JSR $CCFC
    cpu.call_function(0xCCFC);

    label_8711:
    // 8711: LEAU $4,U
    // TODO: Fix comma operator: LEAU $4,U

    // 8713: CMPU #$8735
    cpu.execute_cmpu_immediate(0x8735);

    // 8717: BCS $86F3
    if (cpu.carry_flag()) cpu.m_pc = 0x86F3;

    // 8719: LDD #$8040
    cpu.m_d = 0x8040;

    // 871C: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 871E: LDD $5098
    cpu.m_d = cpu.read_memory16(0x5098);

    // 8721: STD $5040
    cpu.write_memory16(0x5040, cpu.m_d);

    // 8724: RTS 
    return;

    // 8725: LDD >$0000
    cpu.m_d = cpu.read_memory16(0x0000);

    // 8728: NEG <$FC
    // TODO: Convert NEG <$FC

    // 872A: NEG <$F0
    // TODO: Convert NEG <$F0

    // 872C: NEG <$04
    // TODO: Convert NEG <$04

    // 872E: NEG <$F0
    // TODO: Convert NEG <$F0

    // 8730: NEG <$04
    // TODO: Convert NEG <$04

    // 8732: NEG <$00
    // TODO: Convert NEG <$00

    // 8734: NEG <$FE
    // TODO: Convert NEG <$FE

    // 8736: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 8737: STX A,S
    // TODO: Handle indexed addressing: STX A,S

    // 8739: ANDB #$C1
    cpu.m_b &= 0xC1;

    // 873B: COM <$26
    // TODO: Convert COM <$26

    // 873D: NEG <$39
    // TODO: Convert NEG <$39

    // 873F: CMPB #$01
    cpu.compare_b(0x01);

    // 8741: BNE $8748
    if (!cpu.zero_flag()) cpu.m_pc = 0x8748;

    // 8743: LDD #$0800
    cpu.m_d = 0x0800;

    // 8746: BRA $874B
    goto label_874B;

    // 8748: LDD #$1000
    cpu.m_d = 0x1000;

    label_874B:
    // 874B: ADDD $49B1
    cpu.m_d += 0x49B1;

    // 874E: SUBD $5040
    cpu.m_d -= 0x5040;

    // 8751: BPL $8786
    if (!cpu.negative_flag()) cpu.m_pc = 0x8786;

    // 8753: LDB ,U
    // TODO: Complex indexed addressing: ,U

    // 8755: CMPB #$01
    cpu.compare_b(0x01);

    // 8757: BNE $875E
    if (!cpu.zero_flag()) cpu.m_pc = 0x875E;

    // 8759: LDD #$0800
    cpu.m_d = 0x0800;

    // 875C: BRA $8761
    goto label_8761;

    // 875E: LDD #$1000
    cpu.m_d = 0x1000;

    label_8761:
    // 8761: ADDD $49B1
    cpu.m_d += 0x49B1;

    // 8764: STD $49B1
    cpu.write_memory16(0x49B1, cpu.m_d);

    // 8767: LEAU $3,U
    // TODO: Fix comma operator: LEAU $3,U

    // 8769: STU $49AF
    cpu.write_memory16(0x49AF, cpu.m_u);

    // 876C: LDB ,U
    // TODO: Complex indexed addressing: ,U

    // 876E: CMPB #$03
    cpu.compare_b(0x03);

    // 8770: BNE $8773
    if (!cpu.zero_flag()) cpu.m_pc = 0x8773;

    // 8772: RTS 
    return;

    // 8773: LDB ,U
    // TODO: Complex indexed addressing: ,U

    // 8775: CMPB #$05
    cpu.compare_b(0x05);

    // 8777: BNE $8783
    if (!cpu.zero_flag()) cpu.m_pc = 0x8783;

    // 8779: LDU $49A9
    cpu.m_u = cpu.read_memory16(0x49A9);

    // 877C: LEAU $2,U
    // TODO: Fix comma operator: LEAU $2,U

    // 877E: STU $49A9
    cpu.write_memory16(0x49A9, cpu.m_u);

    // 8781: LDU ,U
    // TODO: Complex indexed addressing: ,U

    // 8783: STU $49AF
    cpu.write_memory16(0x49AF, cpu.m_u);

    // 8786: LDD #$6260
    cpu.m_d = 0x6260;

    // 8789: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 878B: JSR $83CE
    cpu.call_function(0x83CE);

    // 878E: LDD $49A9
    cpu.m_d = cpu.read_memory16(0x49A9);

    // 8791: STD $49AD
    cpu.write_memory16(0x49AD, cpu.m_d);

    // 8794: LDD $49AF
    cpu.m_d = cpu.read_memory16(0x49AF);

    // 8797: STD $49B9
    cpu.write_memory16(0x49B9, cpu.m_d);

    // 879A: LDD $49B1
    cpu.m_d = cpu.read_memory16(0x49B1);

    // 879D: STD $49BB
    cpu.write_memory16(0x49BB, cpu.m_d);

    // 87A0: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // 87A3: LDD #$FC00
    cpu.m_d = 0xFC00;

    // 87A6: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // 87A9: JSR $87CB
    cpu.call_function(0x87CB);

    // 87AC: LDD $49A9
    cpu.m_d = cpu.read_memory16(0x49A9);

    // 87AF: STD $49AD
    cpu.write_memory16(0x49AD, cpu.m_d);

    // 87B2: LDD $49AF
    cpu.m_d = cpu.read_memory16(0x49AF);

    // 87B5: STD $49B9
    cpu.write_memory16(0x49B9, cpu.m_d);

    // 87B8: LDD $49B1
    cpu.m_d = cpu.read_memory16(0x49B1);

    // 87BB: STD $49BB
    cpu.write_memory16(0x49BB, cpu.m_d);

    // 87BE: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // 87C1: LDD #$0400
    cpu.m_d = 0x0400;

    // 87C4: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // 87C7: JSR $87CB
    cpu.call_function(0x87CB);

    // 87CA: RTS 
    return;

    // 87CB: LDD $49BB
    cpu.m_d = cpu.read_memory16(0x49BB);

    // 87CE: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // 87D1: SUBD $5040
    cpu.m_d -= 0x5040;

    // 87D4: LBMI $8866
    // TODO: Convert LBMI $8866

    // 87D8: CMPD #$0800
    cpu.execute_cmpd_immediate(0x0800);

    // 87DC: BGE $87F5
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x87F5;

    // 87DE: ASLB 
    cpu.m_b <<= 1;

    // 87DF: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 87E0: COMA 
    cpu.m_a = ~cpu.m_a;

    // 87E1: NEGB 
    cpu.m_b = -cpu.m_b;

    // 87E2: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 87E4: ADDD $5044
    cpu.m_d += 0x5044;

    // 87E7: CMPD #$F000
    cpu.execute_cmpd_immediate(0xF000);

    // 87EB: BGE $87F0
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x87F0;

    // 87ED: LDD #$F000
    cpu.m_d = 0xF000;

    // 87F0: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // 87F3: BRA $8801
    goto label_8801;

    label_87F5:
    // 87F5: LDD $49BB
    cpu.m_d = cpu.read_memory16(0x49BB);

    // 87F8: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // 87FB: LDD #$F000
    cpu.m_d = 0xF000;

    // 87FE: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    label_8801:
    // 8801: LDA <$92
    cpu.m_a = cpu.read_memory(0x92);

    // 8803: BEQ $880E
    if (cpu.zero_flag()) cpu.m_pc = 0x880E;

    // 8805: LDD $5078
    cpu.m_d = cpu.read_memory16(0x5078);

    // 8808: SUBD <$93
    cpu.m_d -= 0x93;

    // 880A: LBPL $889E
    // TODO: Convert LBPL $889E

    // 880E: LDD $5078
    cpu.m_d = cpu.read_memory16(0x5078);

    // 8811: SUBD $5098
    cpu.m_d -= 0x5098;

    // 8814: SUBD #$7000
    cpu.m_d -= 0x7000;

    // 8817: LBPL $889E
    // TODO: Convert LBPL $889E

    // 881B: LDD #$000F
    cpu.m_d = 0x000F;

    // 881E: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 8821: LDA #$67
    cpu.m_a = 0x67;

    // 8823: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 8826: LDD $5002
    cpu.m_d = cpu.read_memory16(0x5002);

    // 8829: BPL $882F
    if (!cpu.negative_flag()) cpu.m_pc = 0x882F;

    // 882B: COMA 
    cpu.m_a = ~cpu.m_a;

    // 882C: NEGB 
    cpu.m_b = -cpu.m_b;

    // 882D: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 882F: SUBD $5000
    cpu.m_d -= 0x5000;

    // 8832: BGT $8866
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x8866;

    // 8834: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // 8837: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // 883A: LDD #$0000
    cpu.m_d = 0x0000;

    // 883D: STD <$D6
    cpu.write_memory16(0xD6, cpu.m_d);

    // 883F: LDD #$0068
    cpu.m_d = 0x0068;

    // 8842: STD <$D8
    cpu.write_memory16(0xD8, cpu.m_d);

    // 8844: JSR $CD08
    cpu.call_function(0xCD08);

    // 8847: LDD #$0000
    cpu.m_d = 0x0000;

    // 884A: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // 884D: LDD #$000F
    cpu.m_d = 0x000F;

    // 8850: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 8853: LDA #$67
    cpu.m_a = 0x67;

    // 8855: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 8858: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // 885B: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // 885E: JSR $CCFC
    cpu.call_function(0xCCFC);

    // 8861: LDD #$8040
    cpu.m_d = 0x8040;

    // 8864: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 8866: LDU $49B9
    cpu.m_u = cpu.read_memory16(0x49B9);

    // 8869: LDB ,U
    // TODO: Complex indexed addressing: ,U

    // 886B: CMPB #$01
    cpu.compare_b(0x01);

    // 886D: BNE $8874
    if (!cpu.zero_flag()) cpu.m_pc = 0x8874;

    // 886F: LDD #$0800
    cpu.m_d = 0x0800;

    // 8872: BRA $8877
    goto label_8877;

    // 8874: LDD #$1000
    cpu.m_d = 0x1000;

    label_8877:
    // 8877: ADDD $49BB
    cpu.m_d += 0x49BB;

    // 887A: STD $49BB
    cpu.write_memory16(0x49BB, cpu.m_d);

    // 887D: SUBD $5040
    cpu.m_d -= 0x5040;

    // 8880: BMI $889E
    if (cpu.negative_flag()) cpu.m_pc = 0x889E;

    // 8882: LEAU $3,U
    // TODO: Fix comma operator: LEAU $3,U

    // 8884: LDB ,U
    // TODO: Complex indexed addressing: ,U

    // 8886: CMPB #$03
    cpu.compare_b(0x03);

    // 8888: BEQ $889E
    if (cpu.zero_flag()) cpu.m_pc = 0x889E;

    // 888A: CMPB #$05
    cpu.compare_b(0x05);

    // 888C: BNE $8898
    if (!cpu.zero_flag()) cpu.m_pc = 0x8898;

    // 888E: LDU $49AD
    cpu.m_u = cpu.read_memory16(0x49AD);

    // 8891: LEAU $2,U
    // TODO: Fix comma operator: LEAU $2,U

    // 8893: STU $49AD
    cpu.write_memory16(0x49AD, cpu.m_u);

    // 8896: LDU ,U
    // TODO: Complex indexed addressing: ,U

    // 8898: STU $49B9
    cpu.write_memory16(0x49B9, cpu.m_u);

    // 889B: JMP $87F5
    goto label_87F5;

    // 889E: RTS 
    return;

    // 889F: LDB #$10
    cpu.m_b = 0x10;

    // 88A1: STB <$DC
    cpu.write_memory(0xDC, cpu.m_b);

    // 88A3: JSR $CD38
    cpu.call_function(0xCD38);

    // 88A6: LDD #$F000
    cpu.m_d = 0xF000;

    // 88A9: STD $5E04
    cpu.write_memory16(0x5E04, cpu.m_d);

    // 88AC: LDD #$0000
    cpu.m_d = 0x0000;

    // 88AF: STD $5E02
    cpu.write_memory16(0x5E02, cpu.m_d);

    // 88B2: LDD <$96
    cpu.m_d = cpu.read_memory16(0x96);

    // 88B4: STD $5E00
    cpu.write_memory16(0x5E00, cpu.m_d);

    // 88B7: LDD #$01C0
    cpu.m_d = 0x01C0;

    // 88BA: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 88BD: LDA #$67
    cpu.m_a = 0x67;

    // 88BF: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 88C2: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // 88C5: CMPD #$FE00
    cpu.execute_cmpd_immediate(0xFE00);

    // 88C9: BGT $88D0
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x88D0;

    // 88CB: LDA #$00
    cpu.m_a = 0x00;

    // 88CD: STA <$95
    cpu.write_memory(0x95, cpu.m_a);

    // 88CF: RTS 
    return;

    // 88D0: SUBD #$7000
    cpu.m_d -= 0x7000;

    // 88D3: BGT $88F4
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x88F4;

    // 88D5: LDD #$A018
    cpu.m_d = 0xA018;

    // 88D8: STD $5E00
    cpu.write_memory16(0x5E00, cpu.m_d);

    // 88DB: LDD #$7200
    cpu.m_d = 0x7200;

    // 88DE: STD $5E04
    cpu.write_memory16(0x5E04, cpu.m_d);

    // 88E1: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // 88E4: SUBD #$1000
    cpu.m_d -= 0x1000;

    // 88E7: BGE $88EE
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x88EE;

    // 88E9: JSR $CD5C
    cpu.call_function(0xCD5C);

    // 88EC: BRA $88F1
    goto label_88F1;

    // 88EE: JSR $CD50
    cpu.call_function(0xCD50);

    label_88F1:
    // 88F1: JSR $CD74
    cpu.call_function(0xCD74);

    // 88F4: RTS 
    return;

    // 88F5: LDD #$6280
    cpu.m_d = 0x6280;

    // 88F8: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 88FA: LDA <$92
    cpu.m_a = cpu.read_memory(0x92);

    // 88FC: BEQ $8950
    if (cpu.zero_flag()) cpu.m_pc = 0x8950;

    // 88FE: LDD <$93
    cpu.m_d = cpu.read_memory16(0x93);

    // 8900: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // 8903: SUBD $5098
    cpu.m_d -= 0x5098;

    // 8906: SUBD #$7000
    cpu.m_d -= 0x7000;

    // 8909: BMI $8911
    if (cpu.negative_flag()) cpu.m_pc = 0x8911;

    // 890B: COMA 
    cpu.m_a = ~cpu.m_a;

    // 890C: NEGB 
    cpu.m_b = -cpu.m_b;

    // 890D: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // 890F: BRA $8914
    goto label_8914;

    // 8911: LDD #$0000
    cpu.m_d = 0x0000;

    label_8914:
    // 8914: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // 8917: LDD #$FC00
    cpu.m_d = 0xFC00;

    // 891A: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // 891D: LDD #$000F
    cpu.m_d = 0x000F;

    // 8920: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 8923: LDA #$67
    cpu.m_a = 0x67;

    // 8925: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 8928: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // 892B: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // 892E: JSR $CCE4
    cpu.call_function(0xCCE4);

    // 8931: LDD #$0400
    cpu.m_d = 0x0400;

    // 8934: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // 8937: LDD #$000F
    cpu.m_d = 0x000F;

    // 893A: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 893D: LDA #$67
    cpu.m_a = 0x67;

    // 893F: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 8942: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // 8945: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // 8948: JSR $CCFC
    cpu.call_function(0xCCFC);

    // 894B: LDD #$8040
    cpu.m_d = 0x8040;

    // 894E: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 8950: RTS 
    return;

    // 8951: JSR $8981
    cpu.call_function(0x8981);

    // 8954: INC <$4D
    cpu.increment_memory(0x4D);

    // 8956: JMP $89D3
    goto label_89D3;

    // 8959: JSR $8993
    cpu.call_function(0x8993);

    // 895C: DEC <$4D
    cpu.decrement_memory(0x4D);

    // 895E: JMP $89D3
    goto label_89D3;

    // 8961: JSR $8993
    cpu.call_function(0x8993);

    // 8964: DEC <$4E
    cpu.decrement_memory(0x4E);

    // 8966: JMP $89C8
    // TODO: External jump to 0x89C8 - not implemented

    // 8969: JSR $8981
    cpu.call_function(0x8981);

    // 896C: INC <$4E
    cpu.increment_memory(0x4E);

    // 896E: JMP $89C8
    // TODO: External jump to 0x89C8 - not implemented

    // 8971: JSR $8981
    cpu.call_function(0x8981);

    // 8974: DEC <$4F
    cpu.decrement_memory(0x4F);

    // 8976: JMP $89DE
    goto label_89DE;

    // 8979: JSR $8993
    cpu.call_function(0x8993);

    // 897C: INC <$4F
    cpu.increment_memory(0x4F);

    // 897E: JMP $89DE
    goto label_89DE;

    // 8981: LDA #$14
    cpu.m_a = 0x14;

    // 8983: LDU #$89A8
    cpu.m_u = 0x89A8;

    // 8986: LEAU A,U
    // TODO: Fix comma operator: LEAU A,U

    // 8988: LDD ,U
    // TODO: Complex indexed addressing: ,U

    // 898A: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 898D: LDD $2,U
    // TODO: Fix comma operator: LDD $2,U

    // 898F: STD $5024
    cpu.write_memory16(0x5024, cpu.m_d);

    // 8992: RTS 
    return;

    // 8993: LDA #$14
    cpu.m_a = 0x14;

    // 8995: LDU #$89A8
    cpu.m_u = 0x89A8;

    // 8998: LEAU A,U
    // TODO: Fix comma operator: LEAU A,U

    // 899A: LDD #$0000
    cpu.m_d = 0x0000;

    // 899D: SUBD ,U
    // TODO: Complex indexed addressing: ,U

    // 899F: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 89A2: LDD $2,U
    // TODO: Fix comma operator: LDD $2,U

    // 89A4: STD $5024
    cpu.write_memory16(0x5024, cpu.m_d);

    // 89A7: RTS 
    return;

    // 89A8: NEG <$B5
    // TODO: Convert NEG <$B5

    // 89AA: SWI 
    // TODO: Convert SWI 

    // 89AB: STU $0100
    cpu.write_memory16(0x0100, cpu.m_u);

    // 89AE: SWI 
    // TODO: Convert SWI 

    // 89AF: LDU $016A
    cpu.m_u = cpu.read_memory16(0x016A);

    // 89B2: SWI 
    // TODO: Convert SWI 

    // 89B3: LDD $021F
    cpu.m_d = cpu.read_memory16(0x021F);

    // 89B6: SWI 
    // TODO: Convert SWI 

    // 89B7: STB $03DF
    cpu.write_memory(0x03DF, cpu.m_b);

    // 89BA: SWI 
    // TODO: Convert SWI 

    // 89BB: SBCB $4,X
    // TODO: Fix comma operator: SBCB $4,X

    // 89BD: STU $3FCE
    cpu.write_memory16(0x3FCE, cpu.m_u);

    // 89C0: LSR <$90
    // TODO: Convert LSR <$90

    // 89C2: SWI 
    // TODO: Convert SWI 

    // 89C3: SBCB #$05
    cpu.sub_b_with_carry(0x05);

    // 89C5: SUBA <$3F
    cpu.m_a -= 0x3F;

    // 89C7: SBCB #$4F
    cpu.sub_b_with_carry(0x4F);

    // 89C9: LDB $2,X
    // TODO: Fix comma operator: LDB $2,X

    // 89CB: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 89CE: LDA #$00
    cpu.m_a = 0x00;

    // 89D0: JMP $CDBA
    goto label_CDBA;

    label_89D3:
    // 89D3: CLRA 
    cpu.m_a = 0;

    // 89D4: LDB $2,X
    // TODO: Fix comma operator: LDB $2,X

    // 89D6: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 89D9: LDA #$0E
    cpu.m_a = 0x0E;

    // 89DB: JMP $CDBA
    goto label_CDBA;

    label_89DE:
    // 89DE: CLRA 
    cpu.m_a = 0;

    // 89DF: LDB $2,X
    // TODO: Fix comma operator: LDB $2,X

    // 89E1: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 89E4: LDA #$1C
    cpu.m_a = 0x1C;

    // 89E6: JMP $CDBA
    goto label_CDBA;

    // 89E9: LDD -$10,U
    // TODO: Fix comma operator: LDD -$10,U

    // 89EB: JSR $CD9E
    cpu.call_function(0xCD9E);

    // 89EE: ADDD -$A,U
    // TODO: Fix comma operator: ADDD -$A,U

    // 89F0: STD -$A,U
    cpu.write_memory16(cpu.m_u - 0x0A, cpu.m_d);

    // 89F2: LDD -$8,U
    // TODO: Fix comma operator: LDD -$8,U

    // 89F4: JSR $CD9E
    cpu.call_function(0xCD9E);

    // 89F7: ADDD -$2,U
    // TODO: Fix comma operator: ADDD -$2,U

    // 89F9: STD -$2,U
    cpu.write_memory16(cpu.m_u - 0x02, cpu.m_d);

    // 89FB: LDD ,U
    // TODO: Complex indexed addressing: ,U

    // 89FD: JSR $CD9E
    cpu.call_function(0xCD9E);

    // 8A00: ADDD $6,U
    // TODO: Fix comma operator: ADDD $6,U

    // 8A02: STD $6,U
    cpu.write_memory16(cpu.m_u + 0x06, cpu.m_d);

    // 8A04: RTS 
    return;

    // 8A05: LDD -$10,U
    // TODO: Fix comma operator: LDD -$10,U

    // 8A07: JSR $CD9C
    cpu.call_function(0xCD9C);

    // 8A0A: ADDD -$A,U
    // TODO: Fix comma operator: ADDD -$A,U

    // 8A0C: STD -$A,U
    cpu.write_memory16(cpu.m_u - 0x0A, cpu.m_d);

    // 8A0E: LDD -$8,U
    // TODO: Fix comma operator: LDD -$8,U

    // 8A10: JSR $CD9C
    cpu.call_function(0xCD9C);

    // 8A13: ADDD -$2,U
    // TODO: Fix comma operator: ADDD -$2,U

    // 8A15: STD -$2,U
    cpu.write_memory16(cpu.m_u - 0x02, cpu.m_d);

    // 8A17: LDD ,U
    // TODO: Complex indexed addressing: ,U

    // 8A19: JSR $CD9C
    cpu.call_function(0xCD9C);

    // 8A1C: ADDD $6,U
    // TODO: Fix comma operator: ADDD $6,U

    // 8A1E: STD $6,U
    cpu.write_memory16(cpu.m_u + 0x06, cpu.m_d);

    // 8A20: RTS 
    return;

    // 8A21: LDD -$C,U
    // TODO: Fix comma operator: LDD -$C,U

    // 8A23: JSR $CD9C
    cpu.call_function(0xCD9C);

    // 8A26: ADDD -$A,U
    // TODO: Fix comma operator: ADDD -$A,U

    // 8A28: STD -$A,U
    cpu.write_memory16(cpu.m_u - 0x0A, cpu.m_d);

    // 8A2A: LDD -$4,U
    // TODO: Fix comma operator: LDD -$4,U

    // 8A2C: JSR $CD9C
    cpu.call_function(0xCD9C);

    // 8A2F: ADDD -$2,U
    // TODO: Fix comma operator: ADDD -$2,U

    // 8A31: STD -$2,U
    cpu.write_memory16(cpu.m_u - 0x02, cpu.m_d);

    // 8A33: LDD $4,U
    // TODO: Fix comma operator: LDD $4,U

    // 8A35: JSR $CD9C
    cpu.call_function(0xCD9C);

    // 8A38: ADDD $6,U
    // TODO: Fix comma operator: ADDD $6,U

    // 8A3A: STD $6,U
    cpu.write_memory16(cpu.m_u + 0x06, cpu.m_d);

    // 8A3C: RTS 
    return;

    // 8A3D: LDD -$C,U
    // TODO: Fix comma operator: LDD -$C,U

    // 8A3F: JSR $CD9E
    cpu.call_function(0xCD9E);

    // 8A42: ADDD -$A,U
    // TODO: Fix comma operator: ADDD -$A,U

    // 8A44: STD -$A,U
    cpu.write_memory16(cpu.m_u - 0x0A, cpu.m_d);

    // 8A46: LDD -$4,U
    // TODO: Fix comma operator: LDD -$4,U

    // 8A48: JSR $CD9E
    cpu.call_function(0xCD9E);

    // 8A4B: ADDD -$2,U
    // TODO: Fix comma operator: ADDD -$2,U

    // 8A4D: STD -$2,U
    cpu.write_memory16(cpu.m_u - 0x02, cpu.m_d);

    // 8A4F: LDD $4,U
    // TODO: Fix comma operator: LDD $4,U

    // 8A51: JSR $CD9E
    cpu.call_function(0xCD9E);

    // 8A54: ADDD $6,U
    // TODO: Fix comma operator: ADDD $6,U

    // 8A56: STD $6,U
    cpu.write_memory16(cpu.m_u + 0x06, cpu.m_d);

    // 8A58: RTS 
    return;

    // 8A59: LDD #$0000
    cpu.m_d = 0x0000;

    // 8A5C: SUBD -$C,U
    // TODO: Fix comma operator: SUBD -$C,U

    // 8A5E: JSR $CD9C
    cpu.call_function(0xCD9C);

    // 8A61: ADDD -$A,U
    // TODO: Fix comma operator: ADDD -$A,U

    // 8A63: STD -$A,U
    cpu.write_memory16(cpu.m_u - 0x0A, cpu.m_d);

    // 8A65: LDD #$0000
    cpu.m_d = 0x0000;

    // 8A68: SUBD -$4,U
    // TODO: Fix comma operator: SUBD -$4,U

    // 8A6A: JSR $CD9C
    cpu.call_function(0xCD9C);

    // 8A6D: ADDD -$2,U
    // TODO: Fix comma operator: ADDD -$2,U

    // 8A6F: STD -$2,U
    cpu.write_memory16(cpu.m_u - 0x02, cpu.m_d);

    // 8A71: LDD #$0000
    cpu.m_d = 0x0000;

    // 8A74: SUBD $4,U
    // TODO: Fix comma operator: SUBD $4,U

    // 8A76: JSR $CD9C
    cpu.call_function(0xCD9C);

    // 8A79: ADDD $6,U
    // TODO: Fix comma operator: ADDD $6,U

    // 8A7B: STD $6,U
    cpu.write_memory16(cpu.m_u + 0x06, cpu.m_d);

    // 8A7D: RTS 
    return;

    // 8A7E: LDD #$0000
    cpu.m_d = 0x0000;

    // 8A81: SUBD -$C,U
    // TODO: Fix comma operator: SUBD -$C,U

    // 8A83: JSR $CD9E
    cpu.call_function(0xCD9E);

    // 8A86: ADDD -$A,U
    // TODO: Fix comma operator: ADDD -$A,U

    // 8A88: STD -$A,U
    cpu.write_memory16(cpu.m_u - 0x0A, cpu.m_d);

    // 8A8A: LDD #$0000
    cpu.m_d = 0x0000;

    // 8A8D: SUBD -$4,U
    // TODO: Fix comma operator: SUBD -$4,U

    // 8A8F: JSR $CD9E
    cpu.call_function(0xCD9E);

    // 8A92: ADDD -$2,U
    // TODO: Fix comma operator: ADDD -$2,U

    // 8A94: STD -$2,U
    cpu.write_memory16(cpu.m_u - 0x02, cpu.m_d);

    // 8A96: LDD #$0000
    cpu.m_d = 0x0000;

    // 8A99: SUBD $4,U
    // TODO: Fix comma operator: SUBD $4,U

    // 8A9B: JSR $CD9E
    cpu.call_function(0xCD9E);

    // 8A9E: ADDD $6,U
    // TODO: Fix comma operator: ADDD $6,U

    // 8AA0: STD $6,U
    cpu.write_memory16(cpu.m_u + 0x06, cpu.m_d);

    // 8AA2: RTS 
    return;

    // 8AA3: LSRB 
    cpu.m_b >>= 1;

    // 8AA4: XHCF 
    // TODO: Convert XHCF 

    // 8AA5: BITB $D,Y
    // TODO: Convert BITB $D,Y

    // 8AA7: SWI 
    // TODO: Convert SWI 

    // 8AA8: XHCF 
    // TODO: Convert XHCF 

    // 8AA9: NOP 
    // NOP;

    // 8AAA: XHCF 
    // TODO: Convert XHCF 

    // 8AAB: ROL [A,S]
    // TODO: Complex indexed addressing: [A,S]

    // 8AAD: JSR -$D,Y
    // TODO: Fix comma operator: JSR -$D,Y

    // 8AAF: ORA $8,Y
    // TODO: Fix comma operator: ORA $8,Y

    // 8AB1: LDA $B,X
    // TODO: Fix comma operator: LDA $B,X

    // 8AB3: STB $58D1
    cpu.write_memory(0x58D1, cpu.m_b);

    // 8AB6: LDD -$A,U
    // TODO: Fix comma operator: LDD -$A,U

    // 8AB8: ADDD $8,U
    // TODO: Fix comma operator: ADDD $8,U

    // 8ABA: BVS $8ABE
    // TODO: Convert BVS $8ABE

    // 8ABC: STD $8,U
    cpu.write_memory16(cpu.m_u + 0x08, cpu.m_d);

    // 8ABE: LDD -$2,U
    // TODO: Fix comma operator: LDD -$2,U

    // 8AC0: ADDD $A,U
    // TODO: Fix comma operator: ADDD $A,U

    // 8AC2: BVS $8AC6
    // TODO: Convert BVS $8AC6

    // 8AC4: STD $A,U
    cpu.write_memory16(cpu.m_u + 0x0A, cpu.m_d);

    // 8AC6: LDD $C,U
    // TODO: Fix comma operator: LDD $C,U

    // 8AC8: ADDD $6,U
    // TODO: Fix comma operator: ADDD $6,U

    // 8ACA: BVS $8ACE
    // TODO: Convert BVS $8ACE

    // 8ACC: STD $C,U
    cpu.write_memory16(cpu.m_u + 0x0C, cpu.m_d);

    // 8ACE: RTS 
    return;

    label_8ACF:
    // 8ACF: LDX <$C2
    cpu.m_x = cpu.read_memory16(0xC2);

    // 8AD1: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // 8AD3: CMPA #$01
    cpu.compare_a(0x01);

    // 8AD5: BNE $8ADB
    if (!cpu.zero_flag()) cpu.m_pc = 0x8ADB;

    // 8AD7: LDA $6,X
    // TODO: Fix comma operator: LDA $6,X

    // 8AD9: BEQ $8ADC
    if (cpu.zero_flag()) cpu.m_pc = 0x8ADC;

    // 8ADB: RTS 
    return;

    // 8ADC: JSR $CE45
    cpu.call_function(0xCE45);

    // 8ADF: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // 8AE1: CMPA #$01
    cpu.compare_a(0x01);

    // 8AE3: BNE $8AED
    if (!cpu.zero_flag()) cpu.m_pc = 0x8AED;

    // 8AE5: LDD $15,X
    // TODO: Fix comma operator: LDD $15,X

    // 8AE8: ORB #$01
    cpu.m_b |= 0x01;

    // 8AEA: STD $15,X
    cpu.write_memory16(cpu.m_x + 0x15, cpu.m_d);

    // 8AED: LDX <$C2
    cpu.m_x = cpu.read_memory16(0xC2);

    // 8AEF: INC $8,X
    // TODO: Fix comma operator: INC $8,X

    // 8AF1: DEC $7,X
    // TODO: Fix comma operator: DEC $7,X

    // 8AF3: LBLE $8B57
    // TODO: Convert LBLE $8B57

    // 8AF7: LDA #$05
    cpu.m_a = 0x05;

    // 8AF9: STA $7,X
    cpu.write_memory(cpu.m_x + 0x07, cpu.m_a);

    // 8AFB: JSR $97ED
    cpu.call_function(0x97ED);

    // 8AFE: LDA #$1F
    cpu.m_a = 0x1F;

    // 8B00: STA $9,X
    cpu.write_memory(cpu.m_x + 0x09, cpu.m_a);

    // 8B02: STA $6,X
    cpu.write_memory(cpu.m_x + 0x06, cpu.m_a);

    // 8B04: LDX #$5090
    cpu.m_x = 0x5090;

    // 8B07: LDU <$C2
    cpu.m_u = cpu.read_memory16(0xC2);

    // 8B09: LDU ,U
    // TODO: Complex indexed addressing: ,U

    // 8B0B: LDD #$0000
    cpu.m_d = 0x0000;

    // 8B0E: STD -$A,U
    cpu.write_memory16(cpu.m_u - 0x0A, cpu.m_d);

    // 8B10: STD -$2,U
    cpu.write_memory16(cpu.m_u - 0x02, cpu.m_d);

    // 8B12: STD $6,U
    cpu.write_memory16(cpu.m_u + 0x06, cpu.m_d);

    // 8B14: LDA #$02
    cpu.m_a = 0x02;

    // 8B16: STA <$01
    cpu.write_memory(0x01, cpu.m_a);

    // 8B18: LDD #$4000
    cpu.m_d = 0x4000;

    // 8B1B: SUBD <$C4
    cpu.m_d -= 0xC4;

    // 8B1D: LDB -$10,X
    // TODO: Fix comma operator: LDB -$10,X

    // 8B1F: MUL 
    // TODO: Convert MUL 

    // 8B20: TFR A,B
    cpu.m_b = cpu.m_a;

    // 8B22: ASLB 
    cpu.m_b <<= 1;

    // 8B23: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 8B24: SEX 
    // TODO: Convert SEX 

    // 8B25: ADDD -$A,U
    // TODO: Fix comma operator: ADDD -$A,U

    // 8B27: STD -$A,U
    cpu.write_memory16(cpu.m_u - 0x0A, cpu.m_d);

    // 8B29: LDA <$53
    cpu.m_a = cpu.read_memory(0x53);

    // 8B2B: ORA #$80
    cpu.m_a |= 0x80;

    // 8B2D: LDB -$8,X
    // TODO: Fix comma operator: LDB -$8,X

    // 8B2F: MUL 
    // TODO: Convert MUL 

    // 8B30: BCS $8B33
    if (cpu.carry_flag()) cpu.m_pc = 0x8B33;

    // 8B32: NEGA 
    cpu.m_a = -cpu.m_a;

    // 8B33: TFR A,B
    cpu.m_b = cpu.m_a;

    // 8B35: NOP 
    // NOP;

    // 8B36: SEX 
    // TODO: Convert SEX 

    // 8B37: ADDD -$2,U
    // TODO: Fix comma operator: ADDD -$2,U

    // 8B39: STD -$2,U
    cpu.write_memory16(cpu.m_u - 0x02, cpu.m_d);

    // 8B3B: LDA <$54
    cpu.m_a = cpu.read_memory(0x54);

    // 8B3D: ORA #$80
    cpu.m_a |= 0x80;

    // 8B3F: LDB ,X
    // TODO: Complex indexed addressing: ,X

    // 8B41: MUL 
    // TODO: Convert MUL 

    // 8B42: BCS $8B45
    if (cpu.carry_flag()) cpu.m_pc = 0x8B45;

    // 8B44: NEGA 
    cpu.m_a = -cpu.m_a;

    // 8B45: TFR A,B
    cpu.m_b = cpu.m_a;

    // 8B47: NOP 
    // NOP;

    // 8B48: SEX 
    // TODO: Convert SEX 

    // 8B49: ADDD $6,U
    // TODO: Fix comma operator: ADDD $6,U

    // 8B4B: STD $6,U
    cpu.write_memory16(cpu.m_u + 0x06, cpu.m_d);

    // 8B4D: LEAX $2,X
    // TODO: Fix comma operator: LEAX $2,X

    // 8B4F: DEC <$01
    cpu.decrement_memory(0x01);

    // 8B51: BPL $8B18
    if (!cpu.negative_flag()) cpu.m_pc = 0x8B18;

    // 8B53: JSR $BDFD
    cpu.call_function(0xBDFD);

    // 8B56: RTS 
    return;

    // 8B57: LDX <$C2
    cpu.m_x = cpu.read_memory16(0xC2);

    // 8B59: JSR $BDFD
    cpu.call_function(0xBDFD);

    // 8B5C: LDA $2,X
    // TODO: Fix comma operator: LDA $2,X

    // 8B5E: CMPA $4B38
    cpu.compare_a(cpu.read_memory(cpu.read_memory(0x4B38)));

    // 8B61: BNE $8B66
    if (!cpu.zero_flag()) cpu.m_pc = 0x8B66;

    // 8B63: JSR $BDCB
    cpu.call_function(0xBDCB);

    // 8B66: JSR $B739
    cpu.call_function(0xB739);

    // 8B69: JSR $97E8
    cpu.call_function(0x97E8);

    // 8B6C: RTS 
    return;

    label_8B6D:
    // 8B6D: JMP $8b6d
    goto label_8B6D;

    // 8B70: STX <$5A
    cpu.write_memory16(0x5A, cpu.m_x);

    // 8B72: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // 8B74: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // 8B76: BEQ $8B7B
    if (cpu.zero_flag()) cpu.m_pc = 0x8B7B;

    // 8B78: JSR $8BE1
    cpu.call_function(0x8BE1);

    // 8B7B: LDX <$5A
    cpu.m_x = cpu.read_memory16(0x5A);

    // 8B7D: LEAX $19,X
    // TODO: Fix comma operator: LEAX $19,X

    // 8B80: CMPX #$494B
    cpu.compare_x(0x494B);

    // 8B83: BCS $8B70
    if (cpu.carry_flag()) cpu.m_pc = 0x8B70;

    // 8B85: RTS 
    return;

    // 8B86: LDX #$4900
    cpu.m_x = 0x4900;

    // 8B89: STX <$5A
    cpu.write_memory16(0x5A, cpu.m_x);

    // 8B8B: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // 8B8D: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // 8B8F: CMPA #$01
    cpu.compare_a(0x01);

    // 8B91: BNE $8BD6
    if (!cpu.zero_flag()) cpu.m_pc = 0x8BD6;

    // 8B93: LDA $A,U
    // TODO: Fix comma operator: LDA $A,U

    // 8B95: CMPA #$09
    cpu.compare_a(0x09);

    // 8B97: BLT $8B9B
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x8B9B;

    // 8B99: SUBA #$02
    cpu.m_a -= 0x02;

    // 8B9B: CMPA #$F7
    cpu.compare_a(0xF7);

    // 8B9D: BGT $8BA1
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x8BA1;

    // 8B9F: ADDA #$02
    cpu.m_a += 0x02;

    // 8BA1: STA $A,U
    cpu.write_memory(cpu.m_u + 0x0A, cpu.m_a);

    // 8BA3: LDA $C,U
    // TODO: Fix comma operator: LDA $C,U

    // 8BA5: CMPA #$09
    cpu.compare_a(0x09);

    // 8BA7: BLT $8BAB
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x8BAB;

    // 8BA9: SUBA #$03
    cpu.m_a -= 0x03;

    // 8BAB: CMPA #$F7
    cpu.compare_a(0xF7);

    // 8BAD: BGT $8BB1
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x8BB1;

    // 8BAF: ADDA #$03
    cpu.m_a += 0x03;

    // 8BB1: STA $C,U
    cpu.write_memory(cpu.m_u + 0x0C, cpu.m_a);

    // 8BB3: LDD $8,U
    // TODO: Fix comma operator: LDD $8,U

    // 8BB5: ADDD #$0400
    cpu.m_d += 0x0400;

    // 8BB8: BVS $8BBE
    // TODO: Convert BVS $8BBE

    // 8BBA: STD $8,U
    cpu.write_memory16(cpu.m_u + 0x08, cpu.m_d);

    // 8BBC: BRA $8BD6
    goto label_8BD6;

    // 8BBE: LDA $A,U
    // TODO: Fix comma operator: LDA $A,U

    // 8BC0: TSTA 
    cpu.test_a();

    // 8BC1: BPL $8BC4
    if (!cpu.negative_flag()) cpu.m_pc = 0x8BC4;

    // 8BC3: NEGA 
    cpu.m_a = -cpu.m_a;

    // 8BC4: CMPA #$08
    cpu.compare_a(0x08);

    // 8BC6: BGT $8BD6
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x8BD6;

    // 8BC8: LDA $C,U
    // TODO: Fix comma operator: LDA $C,U

    // 8BCA: TSTA 
    cpu.test_a();

    // 8BCB: BPL $8BCE
    if (!cpu.negative_flag()) cpu.m_pc = 0x8BCE;

    // 8BCD: NEGA 
    cpu.m_a = -cpu.m_a;

    // 8BCE: CMPA #$08
    cpu.compare_a(0x08);

    // 8BD0: BGT $8BD6
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x8BD6;

    // 8BD2: LDA #$00
    cpu.m_a = 0x00;

    // 8BD4: STA $3,X
    cpu.write_memory(cpu.m_x + 0x03, cpu.m_a);

    label_8BD6:
    // 8BD6: LDX <$5A
    cpu.m_x = cpu.read_memory16(0x5A);

    // 8BD8: LEAX $19,X
    // TODO: Fix comma operator: LEAX $19,X

    // 8BDB: CMPX #$494B
    cpu.compare_x(0x494B);

    // 8BDE: BCS $8B89
    if (cpu.carry_flag()) cpu.m_pc = 0x8B89;

    // 8BE0: RTS 
    return;

    // 8BE1: JSR $8E3A
    cpu.call_function(0x8E3A);

    // 8BE4: LDD #$0000
    cpu.m_d = 0x0000;

    // 8BE7: STA <$4C
    cpu.write_memory(0x4C, cpu.m_a);

    // 8BE9: STA <$4E
    cpu.write_memory(0x4E, cpu.m_a);

    // 8BEB: STA <$4D
    cpu.write_memory(0x4D, cpu.m_a);

    // 8BED: STA <$4F
    cpu.write_memory(0x4F, cpu.m_a);

    // 8BEF: LDA $15,X
    // TODO: Fix comma operator: LDA $15,X

    // 8BF2: ANDA #$10
    cpu.m_a &= 0x10;

    // 8BF4: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // 8BF7: ANDB #$30
    cpu.m_b &= 0x30;

    // 8BF9: STD $15,X
    cpu.write_memory16(cpu.m_x + 0x15, cpu.m_d);

    // 8BFC: LDA $9,X
    // TODO: Fix comma operator: LDA $9,X

    // 8BFE: DECA 
    cpu.m_a--;

    // 8BFF: BMI $8C15
    if (cpu.negative_flag()) cpu.m_pc = 0x8C15;

    // 8C01: STA $9,X
    cpu.write_memory(cpu.m_x + 0x09, cpu.m_a);

    // 8C03: LDD #$1640
    cpu.m_d = 0x1640;

    // 8C06: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // 8C09: LDD #$3C02
    cpu.m_d = 0x3C02;

    // 8C0C: STD $5024
    cpu.write_memory16(0x5024, cpu.m_d);

    // 8C0F: JSR $89C8
    cpu.call_function(0x89C8);

    // 8C12: JMP $8C44
    goto label_8C44;

    // 8C15: LDB $11,X
    // TODO: Fix comma operator: LDB $11,X

    // 8C18: STB <$50
    cpu.write_memory(0x50, cpu.m_b);

    // 8C1A: LSR <$50
    // TODO: Convert LSR <$50

    // 8C1C: BCC $8C21
    if (!cpu.carry_flag()) cpu.m_pc = 0x8C21;

    // 8C1E: JSR $8961
    cpu.call_function(0x8961);

    // 8C21: LSR <$50
    // TODO: Convert LSR <$50

    // 8C23: BCC $8C28
    if (!cpu.carry_flag()) cpu.m_pc = 0x8C28;

    // 8C25: JSR $8969
    cpu.call_function(0x8969);

    // 8C28: LSR <$50
    // TODO: Convert LSR <$50

    // 8C2A: BCC $8C2F
    if (!cpu.carry_flag()) cpu.m_pc = 0x8C2F;

    // 8C2C: JSR $8951
    cpu.call_function(0x8951);

    // 8C2F: LSR <$50
    // TODO: Convert LSR <$50

    // 8C31: BCC $8C36
    if (!cpu.carry_flag()) cpu.m_pc = 0x8C36;

    // 8C33: JSR $8959
    cpu.call_function(0x8959);

    // 8C36: LSR <$50
    // TODO: Convert LSR <$50

    // 8C38: BCC $8C3D
    if (!cpu.carry_flag()) cpu.m_pc = 0x8C3D;

    // 8C3A: JSR $8979
    cpu.call_function(0x8979);

    // 8C3D: LSR <$50
    // TODO: Convert LSR <$50

    // 8C3F: BCC $8C44
    if (!cpu.carry_flag()) cpu.m_pc = 0x8C44;

    // 8C41: JSR $8971
    cpu.call_function(0x8971);

    label_8C44:
    // 8C44: JSR $8D9D
    cpu.call_function(0x8D9D);

    // 8C47: JSR $8DE3
    cpu.call_function(0x8DE3);

    // 8C4A: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // 8C4C: CMPA #$01
    cpu.compare_a(0x01);

    // 8C4E: LBNE $8D66
    // TODO: Convert LBNE $8D66

    // 8C52: LDA $2,X
    // TODO: Fix comma operator: LDA $2,X

    // 8C54: JSR $CE0C
    cpu.call_function(0xCE0C);

    // 8C57: LDX <$5A
    cpu.m_x = cpu.read_memory16(0x5A);

    // 8C59: CLR $A,X
    // TODO: Fix comma operator: CLR $A,X

    // 8C5B: CLRA 
    cpu.m_a = 0;

    // 8C5C: LDB #$13
    cpu.m_b = 0x13;

    // 8C5E: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // 8C61: LDA $11,X
    // TODO: Fix comma operator: LDA $11,X

    // 8C64: BITA #$40
    // TODO: Convert BITA #$40

    // 8C66: BEQ $8C81
    if (cpu.zero_flag()) cpu.m_pc = 0x8C81;

    // 8C68: LDD $5098
    cpu.m_d = cpu.read_memory16(0x5098);

    // 8C6B: ADDD #$1000
    cpu.m_d += 0x1000;

    // 8C6E: STD $5098
    cpu.write_memory16(0x5098, cpu.m_d);

    // 8C71: LDA #$67
    cpu.m_a = 0x67;

    // 8C73: JSR $CDBA
    cpu.call_function(0xCDBA);

    // 8C76: LDD $5098
    cpu.m_d = cpu.read_memory16(0x5098);

    // 8C79: SUBD #$1000
    cpu.m_d -= 0x1000;

    // 8C7C: STD $5098
    cpu.write_memory16(0x5098, cpu.m_d);

    // 8C7F: BRA $8C86
    goto label_8C86;

    // 8C81: LDA #$67
    cpu.m_a = 0x67;

    // 8C83: JSR $CDBA
    cpu.call_function(0xCDBA);

    label_8C86:
    // 8C86: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // 8C89: BMI $8CAE
    if (cpu.negative_flag()) cpu.m_pc = 0x8CAE;

    // 8C8B: INC $A,X
    // TODO: Fix comma operator: INC $A,X

    // 8C8D: SUBD #$4000
    cpu.m_d -= 0x4000;

    // 8C90: BGE $8CAE
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x8CAE;

    // 8C92: LDD $15,X
    // TODO: Fix comma operator: LDD $15,X

    // 8C95: ORB #$08
    cpu.m_b |= 0x08;

    // 8C97: STD $15,X
    cpu.write_memory16(cpu.m_x + 0x15, cpu.m_d);

    // 8C9A: LDD $5072
    cpu.m_d = cpu.read_memory16(0x5072);

    // 8C9D: ADDD $5074
    cpu.m_d += 0x5074;

    // 8CA0: CMPD #$0020
    cpu.execute_cmpd_immediate(0x0020);

    // 8CA4: BHI $8CAE
    // TODO: Convert BHI $8CAE

    // 8CA6: LDD $15,X
    // TODO: Fix comma operator: LDD $15,X

    // 8CA9: ORB #$04
    cpu.m_b |= 0x04;

    // 8CAB: STD $15,X
    cpu.write_memory16(cpu.m_x + 0x15, cpu.m_d);

    // 8CAE: LDD $15,X
    // TODO: Fix comma operator: LDD $15,X

    // 8CB1: BITA #$10
    // TODO: Convert BITA #$10

    // 8CB3: BEQ $8D05
    if (cpu.zero_flag()) cpu.m_pc = 0x8D05;

    // 8CB5: LDD $11,X
    // TODO: Fix comma operator: LDD $11,X

    // 8CB8: BITA #$40
    // TODO: Convert BITA #$40

    // 8CBA: BNE $8D05
    if (!cpu.zero_flag()) cpu.m_pc = 0x8D05;

    // 8CBC: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // 8CBF: SUBD #$0800
    cpu.m_d -= 0x0800;

    // 8CC2: BLE $8D05
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x8D05;

    // 8CC4: LDA $6,X
    // TODO: Fix comma operator: LDA $6,X

    // 8CC6: BNE $8D05
    if (!cpu.zero_flag()) cpu.m_pc = 0x8D05;

    // 8CC8: LDB $4B19
    cpu.m_b = cpu.read_memory(0x4B19);

    // 8CCB: CMPB #$0B
    cpu.compare_b(0x0B);

    // 8CCD: BCS $8CD4
    if (cpu.carry_flag()) cpu.m_pc = 0x8CD4;

    // 8CCF: LDU #$8D99
    cpu.m_u = 0x8D99;

    // 8CD2: BRA $8CDB
    goto label_8CDB;

    // 8CD4: ASLB 
    cpu.m_b <<= 1;

    // 8CD5: ASLB 
    cpu.m_b <<= 1;

    // 8CD6: LDU #$8D71
    cpu.m_u = 0x8D71;

    // 8CD9: LEAU B,U
    // TODO: Fix comma operator: LEAU B,U

    label_8CDB:
    // 8CDB: LDA <$43
    cpu.m_a = cpu.read_memory(0x43);

    // 8CDD: ANDA ,U
    // TODO: Complex indexed addressing: ,U

    // 8CDF: BNE $8D05
    if (!cpu.zero_flag()) cpu.m_pc = 0x8D05;

    // 8CE1: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // 8CE4: CMPA $1,U
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_u + 0x01));

    // 8CE6: BLS $8D05
    // TODO: Convert BLS $8D05

    // 8CE8: LDU $2,U
    // TODO: Fix comma operator: LDU $2,U

    // 8CEA: LDA $3,U
    // TODO: Fix comma operator: LDA $3,U

    // 8CEC: BNE $8CFD
    if (!cpu.zero_flag()) cpu.m_pc = 0x8CFD;

    // 8CEE: LDX <$5A
    cpu.m_x = cpu.read_memory16(0x5A);

    // 8CF0: LDD $15,X
    // TODO: Fix comma operator: LDD $15,X

    // 8CF3: ORB #$40
    cpu.m_b |= 0x40;

    // 8CF5: STD $15,X
    cpu.write_memory16(cpu.m_x + 0x15, cpu.m_d);

    // 8CF8: JSR $A68B
    cpu.call_function(0xA68B);

    // 8CFB: BRA $8D05
    goto label_8D05;

    // 8CFD: LEAU $6,U
    // TODO: Fix comma operator: LEAU $6,U

    // 8CFF: CMPU #$496F
    cpu.execute_cmpu_immediate(0x496F);

    // 8D03: BCS $8CEA
    if (cpu.carry_flag()) cpu.m_pc = 0x8CEA;

    label_8D05:
    // 8D05: LDX <$5A
    cpu.m_x = cpu.read_memory16(0x5A);

    // 8D07: LDA $11,X
    // TODO: Fix comma operator: LDA $11,X

    // 8D0A: BITA #$80
    // TODO: Convert BITA #$80

    // 8D0C: BEQ $8D66
    if (cpu.zero_flag()) cpu.m_pc = 0x8D66;

    // 8D0E: LDA <$4F
    cpu.m_a = cpu.read_memory(0x4F);

    // 8D10: BNE $8D3A
    if (!cpu.zero_flag()) cpu.m_pc = 0x8D3A;

    // 8D12: LDA $5002
    cpu.m_a = cpu.read_memory(0x5002);

    // 8D15: BMI $8D1C
    if (cpu.negative_flag()) cpu.m_pc = 0x8D1C;

    // 8D17: JSR $8979
    cpu.call_function(0x8979);

    // 8D1A: BRA $8D1F
    goto label_8D1F;

    // 8D1C: JSR $8971
    cpu.call_function(0x8971);

    label_8D1F:
    // 8D1F: LDA <$4E
    cpu.m_a = cpu.read_memory(0x4E);

    // 8D21: BNE $8D3A
    if (!cpu.zero_flag()) cpu.m_pc = 0x8D3A;

    // 8D23: LDB $5004
    cpu.m_b = cpu.read_memory(0x5004);

    // 8D26: SEX 
    // TODO: Convert SEX 

    // 8D27: ADDB #$01
    cpu.m_b += 0x01;

    // 8D29: CMPB #$01
    cpu.compare_b(0x01);

    // 8D2B: BLS $8D3A
    // TODO: Convert BLS $8D3A

    // 8D2D: EORA $5002
    cpu.m_a ^= cpu.read_memory(0x5002);

    // 8D30: BMI $8D37
    if (cpu.negative_flag()) cpu.m_pc = 0x8D37;

    // 8D32: JSR $8961
    cpu.call_function(0x8961);

    // 8D35: BRA $8D3A
    goto label_8D3A;

    // 8D37: JSR $8969
    cpu.call_function(0x8969);

    label_8D3A:
    // 8D3A: LDA <$4D
    cpu.m_a = cpu.read_memory(0x4D);

    // 8D3C: BNE $8D66
    if (!cpu.zero_flag()) cpu.m_pc = 0x8D66;

    // 8D3E: LDA $5004
    cpu.m_a = cpu.read_memory(0x5004);

    // 8D41: BMI $8D48
    if (cpu.negative_flag()) cpu.m_pc = 0x8D48;

    // 8D43: JSR $8951
    cpu.call_function(0x8951);

    // 8D46: BRA $8D4B
    goto label_8D4B;

    // 8D48: JSR $8959
    cpu.call_function(0x8959);

    label_8D4B:
    // 8D4B: LDA <$4E
    cpu.m_a = cpu.read_memory(0x4E);

    // 8D4D: BNE $8D66
    if (!cpu.zero_flag()) cpu.m_pc = 0x8D66;

    // 8D4F: LDB $5002
    cpu.m_b = cpu.read_memory(0x5002);

    // 8D52: SEX 
    // TODO: Convert SEX 

    // 8D53: ADDB #$01
    cpu.m_b += 0x01;

    // 8D55: CMPB #$01
    cpu.compare_b(0x01);

    // 8D57: BLS $8D66
    // TODO: Convert BLS $8D66

    // 8D59: EORA $5004
    cpu.m_a ^= cpu.read_memory(0x5004);

    // 8D5C: BMI $8D63
    if (cpu.negative_flag()) cpu.m_pc = 0x8D63;

    // 8D5E: JSR $8969
    cpu.call_function(0x8969);

    // 8D61: BRA $8D66
    goto label_8D66;

    // 8D63: JSR $8961
    cpu.call_function(0x8961);

    label_8D66:
    // 8D66: LDX <$5A
    cpu.m_x = cpu.read_memory16(0x5A);

    // 8D68: LDD $15,X
    // TODO: Fix comma operator: LDD $15,X

    // 8D6B: ANDA #$EF
    cpu.m_a &= 0xEF;

    // 8D6D: STD $15,X
    cpu.write_memory16(cpu.m_x + 0x15, cpu.m_d);

    // 8D70: RTS 
    return;

    // 8D71: CLR <$80
    cpu.write_memory(0x80, 0);

    // 8D73: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 8D74: ROL $F,X
    // TODO: Fix comma operator: ROL $F,X

    // 8D76: SUBA #$49
    cpu.m_a -= 0x49;

    // 8D78: ROL $F,X
    // TODO: Fix comma operator: ROL $F,X

    // 8D7A: SUBA #$49
    cpu.m_a -= 0x49;

    // 8D7C: COM $F,X
    // TODO: Convert COM $F,X

    // 8D7E: NEGA 
    cpu.m_a = -cpu.m_a;

    // 8D7F: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 8D80: TSTB 
    cpu.test_b();

    // 8D81: ASR <$80
    // TODO: Convert ASR <$80

    // 8D83: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 8D84: ASRB 
    // TODO: Convert ASRB 

    // 8D85: ASR <$20
    // TODO: Convert ASR <$20

    // 8D87: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 8D88: NEGB 
    cpu.m_b = -cpu.m_b;

    // 8D89: ASR <$20
    // TODO: Convert ASR <$20

    // 8D8B: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 8D8C: XDECA 
    cpu.m_a--;

    // 8D8D: COM <$80
    // TODO: Convert COM <$80

    // 8D8F: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 8D90: XDECA 
    cpu.m_a--;

    // 8D91: COM <$60
    // TODO: Convert COM <$60

    // 8D93: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 8D94: XDECA 
    cpu.m_a--;

    // 8D95: COM <$40
    // TODO: Convert COM <$40

    // 8D97: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 8D98: XDECA 
    cpu.m_a--;

    // 8D99: COM <$30
    // TODO: Convert COM <$30

    // 8D9B: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 8D9C: XDECA 
    cpu.m_a--;

    // 8D9D: LDX <$5A
    cpu.m_x = cpu.read_memory16(0x5A);

    // 8D9F: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // 8DA1: LDA $6,X
    // TODO: Fix comma operator: LDA $6,X

    // 8DA3: BNE $8DDF
    if (!cpu.zero_flag()) cpu.m_pc = 0x8DDF;

    // 8DA5: LDB $12,X
    // TODO: Fix comma operator: LDB $12,X

    // 8DA8: STB <$50
    cpu.write_memory(0x50, cpu.m_b);

    // 8DAA: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // 8DAC: LDD #$0000
    cpu.m_d = 0x0000;

    // 8DAF: STD -$A,U
    cpu.write_memory16(cpu.m_u - 0x0A, cpu.m_d);

    // 8DB1: STD -$2,U
    cpu.write_memory16(cpu.m_u - 0x02, cpu.m_d);

    // 8DB3: STD $6,U
    cpu.write_memory16(cpu.m_u + 0x06, cpu.m_d);

    // 8DB5: LSR <$50
    // TODO: Convert LSR <$50

    // 8DB7: BCC $8DBC
    if (!cpu.carry_flag()) cpu.m_pc = 0x8DBC;

    // 8DB9: JSR $8A59
    cpu.call_function(0x8A59);

    // 8DBC: LSR <$50
    // TODO: Convert LSR <$50

    // 8DBE: BCC $8DC3
    if (!cpu.carry_flag()) cpu.m_pc = 0x8DC3;

    // 8DC0: JSR $8A7E
    cpu.call_function(0x8A7E);

    // 8DC3: LSR <$50
    // TODO: Convert LSR <$50

    // 8DC5: BCC $8DCA
    if (!cpu.carry_flag()) cpu.m_pc = 0x8DCA;

    // 8DC7: JSR $8A21
    cpu.call_function(0x8A21);

    // 8DCA: LSR <$50
    // TODO: Convert LSR <$50

    // 8DCC: BCC $8DD1
    if (!cpu.carry_flag()) cpu.m_pc = 0x8DD1;

    // 8DCE: JSR $8A3D
    cpu.call_function(0x8A3D);

    // 8DD1: LSR <$50
    // TODO: Convert LSR <$50

    // 8DD3: BCC $8DD8
    if (!cpu.carry_flag()) cpu.m_pc = 0x8DD8;

    // 8DD5: JSR $8A05
    cpu.call_function(0x8A05);

    // 8DD8: LSR <$50
    // TODO: Convert LSR <$50

    // 8DDA: BCC $8DDF
    if (!cpu.carry_flag()) cpu.m_pc = 0x8DDF;

    // 8DDC: JSR $89E9
    cpu.call_function(0x89E9);

    // 8DDF: JSR $8AB6
    cpu.call_function(0x8AB6);

    // 8DE2: RTS 
    return;

    // 8DE3: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // 8DE5: LDD $8,U
    // TODO: Fix comma operator: LDD $8,U

    // 8DE7: CMPA #$7D
    cpu.compare_a(0x7D);

    // 8DE9: BLT $8DEE
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x8DEE;

    // 8DEB: LDD #$7CFF
    cpu.m_d = 0x7CFF;

    // 8DEE: CMPA #$82
    cpu.compare_a(0x82);

    // 8DF0: BGT $8DF5
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x8DF5;

    // 8DF2: LDD #$8300
    cpu.m_d = 0x8300;

    // 8DF5: STD $8,U
    cpu.write_memory16(cpu.m_u + 0x08, cpu.m_d);

    // 8DF7: LDD $A,U
    // TODO: Fix comma operator: LDD $A,U

    // 8DF9: CMPA #$7D
    cpu.compare_a(0x7D);

    // 8DFB: BLT $8E00
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x8E00;

    // 8DFD: LDD #$7CFF
    cpu.m_d = 0x7CFF;

    // 8E00: CMPA #$82
    cpu.compare_a(0x82);

    // 8E02: BGT $8E07
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x8E07;

    // 8E04: LDD #$8300
    cpu.m_d = 0x8300;

    // 8E07: STD $A,U
    cpu.write_memory16(cpu.m_u + 0x0A, cpu.m_d);

    // 8E09: LDD $C,U
    // TODO: Fix comma operator: LDD $C,U

    // 8E0B: CMPA #$7D
    cpu.compare_a(0x7D);

    // 8E0D: BLT $8E12
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x8E12;

    // 8E0F: LDD #$7CFF
    cpu.m_d = 0x7CFF;

    // 8E12: CMPA #$82
    cpu.compare_a(0x82);

    // 8E14: BGT $8E19
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x8E19;

    // 8E16: LDD #$8300
    cpu.m_d = 0x8300;

    // 8E19: STD $C,U
    cpu.write_memory16(cpu.m_u + 0x0C, cpu.m_d);

    // 8E1B: RTS 
    return;

    // 8E1C: DEC <$E6
    cpu.decrement_memory(0xE6);

    // 8E1E: BGT $8E22
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x8E22;

    // 8E20: CLR <$E6
    cpu.write_memory(0xE6, 0);

    // 8E22: RTS 
    return;

    // 8E23: LDD #$0000
    cpu.m_d = 0x0000;

    // 8E26: STD $11,X
    cpu.write_memory16(cpu.m_x + 0x11, cpu.m_d);

    // 8E29: STA $10,X
    cpu.write_memory(cpu.m_x + 0x10, cpu.m_a);

    // 8E2C: STD $13,X
    cpu.write_memory16(cpu.m_x + 0x13, cpu.m_d);

    // 8E2F: STD $15,X
    cpu.write_memory16(cpu.m_x + 0x15, cpu.m_d);

    label_8E32:
    // 8E32: LDU $D,X
    // TODO: Fix comma operator: LDU $D,X

    // 8E34: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // 8E36: STA $F,X
    cpu.write_memory(cpu.m_x + 0x0F, cpu.m_a);

    // 8E38: BEQ $8E51
    if (cpu.zero_flag()) cpu.m_pc = 0x8E51;

    // 8E3A: LDD $15,X
    // TODO: Fix comma operator: LDD $15,X

    // 8E3D: ANDA $13,X
    // TODO: Fix comma operator: ANDA $13,X

    // 8E40: BNE $8E5C
    if (!cpu.zero_flag()) cpu.m_pc = 0x8E5C;

    // 8E42: ANDB $14,X
    // TODO: Fix comma operator: ANDB $14,X

    // 8E45: BNE $8E5C
    if (!cpu.zero_flag()) cpu.m_pc = 0x8E5C;

    // 8E47: LDA $F,X
    // TODO: Fix comma operator: LDA $F,X

    // 8E49: ANDA #$07
    cpu.m_a &= 0x07;

    // 8E4B: ASLA 
    cpu.m_a <<= 1;

    // 8E4C: LDU #$8E68
    cpu.m_u = 0x8E68;

    // 8E4F: JMP [A,U]
    // TODO: Invalid branch offset: [A,U]

    // 8E51: LDD $1,U
    // TODO: Fix comma operator: LDD $1,U

    // 8E53: STD $13,X
    cpu.write_memory16(cpu.m_x + 0x13, cpu.m_d);

    // 8E56: LEAU $3,U
    // TODO: Fix comma operator: LEAU $3,U

    // 8E58: STU $D,X
    cpu.write_memory16(cpu.m_x + 0x0D, cpu.m_u);

    // 8E5A: BRA $8E32
    goto label_8E32;

    // 8E5C: LDU $D,X
    // TODO: Fix comma operator: LDU $D,X

    label_8E5E:
    // 8E5E: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // 8E60: BEQ $8E32
    if (cpu.zero_flag()) cpu.m_pc = 0x8E32;

    // 8E62: LEAU $3,U
    // TODO: Fix comma operator: LEAU $3,U

    // 8E64: STU $D,X
    cpu.write_memory16(cpu.m_x + 0x0D, cpu.m_u);

    // 8E66: BRA $8E5E
    goto label_8E5E;

    // 8E68: LDX #$798E
    cpu.m_x = 0x798E;

    // 8E6B: ADDA <$8E
    cpu.m_a += 0x8E;

    // 8E6D: ANDA W,X
    // TODO: Complex indexed addressing: W,X

    // 8E6F: SBCA $8EBA
    cpu.sub_a_with_carry(cpu.read_memory(0x8EBA));

    // 8E72: LDX #$CE8E
    cpu.m_x = 0xCE8E;

    // 8E75: ASL $8E78
    cpu.arithmetic_shift_left(0x8E78);

    // 8E78: SWI 
    // TODO: Convert SWI 

    // 8E79: LDU $D,X
    // TODO: Fix comma operator: LDU $D,X

    label_8E7B:
    // 8E7B: LDD $1,U
    // TODO: Fix comma operator: LDD $1,U

    // 8E7D: BEQ $8E94
    if (cpu.zero_flag()) cpu.m_pc = 0x8E94;

    // 8E7F: ANDA $15,X
    // TODO: Fix comma operator: ANDA $15,X

    // 8E82: BNE $8E94
    if (!cpu.zero_flag()) cpu.m_pc = 0x8E94;

    // 8E84: ANDB $16,X
    // TODO: Fix comma operator: ANDB $16,X

    // 8E87: BNE $8E94
    if (!cpu.zero_flag()) cpu.m_pc = 0x8E94;

    // 8E89: LEAU $3,U
    // TODO: Fix comma operator: LEAU $3,U

    // 8E8B: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // 8E8D: ASLA 
    cpu.m_a <<= 1;

    // 8E8E: BNE $8E89
    if (!cpu.zero_flag()) cpu.m_pc = 0x8E89;

    // 8E90: BCC $8E89
    if (!cpu.carry_flag()) cpu.m_pc = 0x8E89;

    // 8E92: BRA $8E7B
    goto label_8E7B;

    // 8E94: LEAU $3,U
    // TODO: Fix comma operator: LEAU $3,U

    // 8E96: STU $D,X
    cpu.write_memory16(cpu.m_x + 0x0D, cpu.m_u);

    // 8E98: JMP $8E32
    goto label_8E32;

    // 8E9B: LDU $D,X
    // TODO: Fix comma operator: LDU $D,X

    // 8E9D: LDU $1,U
    // TODO: Fix comma operator: LDU $1,U

    // 8E9F: STU $D,X
    cpu.write_memory16(cpu.m_x + 0x0D, cpu.m_u);

    // 8EA1: JMP $8E32
    goto label_8E32;

    // 8EA4: LDU $D,X
    // TODO: Fix comma operator: LDU $D,X

    // 8EA6: LEAU $3,U
    // TODO: Fix comma operator: LEAU $3,U

    // 8EA8: STU $17,X
    cpu.write_memory16(cpu.m_x + 0x17, cpu.m_u);

    // 8EAB: LDU -$2,U
    // TODO: Fix comma operator: LDU -$2,U

    // 8EAD: STU $D,X
    cpu.write_memory16(cpu.m_x + 0x0D, cpu.m_u);

    // 8EAF: JMP $8E32
    goto label_8E32;

    // 8EB2: LDU $17,X
    // TODO: Fix comma operator: LDU $17,X

    // 8EB5: STU $D,X
    cpu.write_memory16(cpu.m_x + 0x0D, cpu.m_u);

    // 8EB7: JMP $8E32
    goto label_8E32;

    // 8EBA: LDU $D,X
    // TODO: Fix comma operator: LDU $D,X

    // 8EBC: LDB ,U
    // TODO: Complex indexed addressing: ,U

    // 8EBE: LSRB 
    cpu.m_b >>= 1;

    // 8EBF: STB $10,X
    cpu.write_memory(cpu.m_x + 0x10, cpu.m_b);

    // 8EC2: LDD $1,U
    // TODO: Fix comma operator: LDD $1,U

    // 8EC4: STD $11,X
    cpu.write_memory16(cpu.m_x + 0x11, cpu.m_d);

    // 8EC7: LEAU $3,U
    // TODO: Fix comma operator: LEAU $3,U

    // 8EC9: STU $D,X
    cpu.write_memory16(cpu.m_x + 0x0D, cpu.m_u);

    // 8ECB: INC $F,X
    // TODO: Fix comma operator: INC $F,X

    // 8ECD: RTS 
    return;

    // 8ECE: DEC $10,X
    // TODO: Fix comma operator: DEC $10,X

    // 8ED1: LBMI $8E32
    // TODO: Convert LBMI $8E32

    // 8ED5: RTS 
    return;

    label_8ED6:
    // 8ED6: JMP $8ed6
    goto label_8ED6;

    // 8ED9: LDB $4B14
    cpu.m_b = cpu.read_memory(0x4B14);

    // 8EDC: ASLB 
    cpu.m_b <<= 1;

    // 8EDD: LDX #$9070
    cpu.m_x = 0x9070;

    // 8EE0: ABX 
    // TODO: Convert ABX 

    // 8EE1: CMPX #$907C
    cpu.compare_x(0x907C);

    // 8EE4: BCS $8EF4
    if (cpu.carry_flag()) cpu.m_pc = 0x8EF4;

    // 8EE6: LDA $4B14
    cpu.m_a = cpu.read_memory(0x4B14);

    // 8EE9: LSRA 
    cpu.m_a >>= 1;

    // 8EEA: BCS $8EF1
    if (cpu.carry_flag()) cpu.m_pc = 0x8EF1;

    // 8EEC: LDX #$9078
    cpu.m_x = 0x9078;

    // 8EEF: BRA $8EF4
    goto label_8EF4;

    // 8EF1: LDX #$907A
    cpu.m_x = 0x907A;

    label_8EF4:
    // 8EF4: LDX ,X
    // TODO: Complex indexed addressing: ,X

    // 8EF6: LDB <$DD
    cpu.m_b = cpu.read_memory(0xDD);

    // 8EF8: CMPB ,X+
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_x));

    // 8EFA: BLS $8EFE
    // TODO: Convert BLS $8EFE

    // 8EFC: LDB -$1,X
    // TODO: Fix comma operator: LDB -$1,X

    // 8EFE: ASLB 
    cpu.m_b <<= 1;

    // 8EFF: LDD B,X
    // TODO: Fix comma operator: LDD B,X

    // 8F01: STD <$E4
    cpu.write_memory16(0xE4, cpu.m_d);

    // 8F03: CLR <$E6
    cpu.write_memory(0xE6, 0);

    // 8F05: LDX #$4900
    cpu.m_x = 0x4900;

    // 8F08: STX <$5A
    cpu.write_memory16(0x5A, cpu.m_x);

    // 8F0A: CLR $3,X
    // TODO: Fix comma operator: CLR $3,X

    // 8F0C: LDU <$E4
    cpu.m_u = cpu.read_memory16(0xE4);

    // 8F0E: BEQ $8F29
    if (cpu.zero_flag()) cpu.m_pc = 0x8F29;

    // 8F10: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // 8F12: BEQ $8F29
    if (cpu.zero_flag()) cpu.m_pc = 0x8F29;

    // 8F14: INC <$E6
    cpu.increment_memory(0xE6);

    // 8F16: LDD ,U
    // TODO: Complex indexed addressing: ,U

    // 8F18: STD <$E0
    cpu.write_memory16(0xE0, cpu.m_d);

    // 8F1A: LDD $2,U
    // TODO: Fix comma operator: LDD $2,U

    // 8F1C: STD <$DE
    cpu.write_memory16(0xDE, cpu.m_d);

    // 8F1E: LDD $4,U
    // TODO: Fix comma operator: LDD $4,U

    // 8F20: STD <$E2
    cpu.write_memory16(0xE2, cpu.m_d);

    // 8F22: LEAU $6,U
    // TODO: Fix comma operator: LEAU $6,U

    // 8F24: STU <$E4
    cpu.write_memory16(0xE4, cpu.m_u);

    // 8F26: JSR $8F34
    cpu.call_function(0x8F34);

    // 8F29: LDX <$5A
    cpu.m_x = cpu.read_memory16(0x5A);

    // 8F2B: LEAX $19,X
    // TODO: Fix comma operator: LEAX $19,X

    // 8F2E: CMPX #$494B
    cpu.compare_x(0x494B);

    // 8F31: BCS $8F08
    if (cpu.carry_flag()) cpu.m_pc = 0x8F08;

    // 8F33: RTS 
    return;

    // 8F34: LDA #$01
    cpu.m_a = 0x01;

    // 8F36: STA $3,X
    cpu.write_memory(cpu.m_x + 0x03, cpu.m_a);

    // 8F38: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // 8F3A: JSR $CDC3
    cpu.call_function(0xCDC3);

    // 8F3D: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // 8F3F: LDA #$C0
    cpu.m_a = 0xC0;

    // 8F41: STA -$10,U
    cpu.write_memory(cpu.m_u - 0x10, cpu.m_a);

    // 8F43: STA -$6,U
    cpu.write_memory(cpu.m_u - 0x06, cpu.m_a);

    // 8F45: CLRA 
    cpu.m_a = 0;

    // 8F46: STA $9,X
    cpu.write_memory(cpu.m_x + 0x09, cpu.m_a);

    // 8F48: STA $8,X
    cpu.write_memory(cpu.m_x + 0x08, cpu.m_a);

    // 8F4A: STA $6,X
    cpu.write_memory(cpu.m_x + 0x06, cpu.m_a);

    // 8F4C: STA $5,X
    cpu.write_memory(cpu.m_x + 0x05, cpu.m_a);

    // 8F4E: STA $B,X
    cpu.write_memory(cpu.m_x + 0x0B, cpu.m_a);

    // 8F50: LDU <$E0
    cpu.m_u = cpu.read_memory16(0xE0);

    // 8F52: LDA $1,U
    // TODO: Fix comma operator: LDA $1,U

    // 8F54: STA $7,X
    cpu.write_memory(cpu.m_x + 0x07, cpu.m_a);

    // 8F56: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // 8F58: LDX <$E2
    cpu.m_x = cpu.read_memory16(0xE2);

    // 8F5A: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // 8F5C: STD $8,U
    cpu.write_memory16(cpu.m_u + 0x08, cpu.m_d);

    // 8F5E: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // 8F60: STD $A,U
    cpu.write_memory16(cpu.m_u + 0x0A, cpu.m_d);

    // 8F62: LDD $4,X
    // TODO: Fix comma operator: LDD $4,X

    // 8F64: STD $C,U
    cpu.write_memory16(cpu.m_u + 0x0C, cpu.m_d);

    // 8F66: LDX <$5A
    cpu.m_x = cpu.read_memory16(0x5A);

    // 8F68: LDD <$DE
    cpu.m_d = cpu.read_memory16(0xDE);

    // 8F6A: STD $D,X
    cpu.write_memory16(cpu.m_x + 0x0D, cpu.m_d);

    // 8F6C: JSR $8E23
    cpu.call_function(0x8E23);

    // 8F6F: LDX <$5A
    cpu.m_x = cpu.read_memory16(0x5A);

    // 8F71: LDB [$48E0]
    // TODO: Unrecognized operand: [$48E0]

    // 8F75: STB $4,X
    cpu.write_memory(cpu.m_x + 0x04, cpu.m_b);

    // 8F77: JSR $CCCC
    cpu.call_function(0xCCCC);

    // 8F7A: RTS 
    return;

    label_8F7B:
    // 8F7B: JMP $8f7b
    goto label_8F7B;

    // 8F7D: BEQ $8F83
    if (cpu.zero_flag()) cpu.m_pc = 0x8F83;

    // 8F7F: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // 8F81: BNE $8FB1
    if (!cpu.zero_flag()) cpu.m_pc = 0x8FB1;

    // 8F83: INC <$DD
    cpu.increment_memory(0xDD);

    // 8F85: LDB $4B14
    cpu.m_b = cpu.read_memory(0x4B14);

    // 8F88: ASLB 
    cpu.m_b <<= 1;

    // 8F89: LDX #$9070
    cpu.m_x = 0x9070;

    // 8F8C: ABX 
    // TODO: Convert ABX 

    // 8F8D: CMPX #$907C
    cpu.compare_x(0x907C);

    // 8F90: BCS $8FA0
    if (cpu.carry_flag()) cpu.m_pc = 0x8FA0;

    // 8F92: LDA $4B14
    cpu.m_a = cpu.read_memory(0x4B14);

    // 8F95: LSRA 
    cpu.m_a >>= 1;

    // 8F96: BCS $8F9D
    if (cpu.carry_flag()) cpu.m_pc = 0x8F9D;

    // 8F98: LDX #$9078
    cpu.m_x = 0x9078;

    // 8F9B: BRA $8FA0
    goto label_8FA0;

    // 8F9D: LDX #$907A
    cpu.m_x = 0x907A;

    label_8FA0:
    // 8FA0: LDX ,X
    // TODO: Complex indexed addressing: ,X

    // 8FA2: LDB <$DD
    cpu.m_b = cpu.read_memory(0xDD);

    // 8FA4: CMPB ,X+
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_x));

    // 8FA6: BLS $8FAA
    // TODO: Convert BLS $8FAA

    // 8FA8: LDB -$1,X
    // TODO: Fix comma operator: LDB -$1,X

    // 8FAA: STB <$DD
    cpu.write_memory(0xDD, cpu.m_b);

    // 8FAC: ASLB 
    cpu.m_b <<= 1;

    // 8FAD: LDD B,X
    // TODO: Fix comma operator: LDD B,X

    // 8FAF: STD <$E4
    cpu.write_memory16(0xE4, cpu.m_d);

    // 8FB1: LDX #$4900
    cpu.m_x = 0x4900;

    // 8FB4: STX <$5A
    cpu.write_memory16(0x5A, cpu.m_x);

    // 8FB6: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // 8FB8: BEQ $8FC6
    if (cpu.zero_flag()) cpu.m_pc = 0x8FC6;

    // 8FBA: LDX <$5A
    cpu.m_x = cpu.read_memory16(0x5A);

    // 8FBC: LEAX $19,X
    // TODO: Fix comma operator: LEAX $19,X

    // 8FBF: CMPX #$494B
    cpu.compare_x(0x494B);

    // 8FC2: BCS $8FB4
    if (cpu.carry_flag()) cpu.m_pc = 0x8FB4;

    // 8FC4: BRA $9023
    goto label_9023;

    // 8FC6: LDU <$E4
    cpu.m_u = cpu.read_memory16(0xE4);

    // 8FC8: BEQ $9023
    if (cpu.zero_flag()) cpu.m_pc = 0x9023;

    // 8FCA: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // 8FCC: BEQ $9023
    if (cpu.zero_flag()) cpu.m_pc = 0x9023;

    // 8FCE: INC <$E6
    cpu.increment_memory(0xE6);

    // 8FD0: LDD ,U
    // TODO: Complex indexed addressing: ,U

    // 8FD2: STD <$E0
    cpu.write_memory16(0xE0, cpu.m_d);

    // 8FD4: LDD $2,U
    // TODO: Fix comma operator: LDD $2,U

    // 8FD6: STD <$DE
    cpu.write_memory16(0xDE, cpu.m_d);

    // 8FD8: LDD $4,U
    // TODO: Fix comma operator: LDD $4,U

    // 8FDA: STD <$E2
    cpu.write_memory16(0xE2, cpu.m_d);

    // 8FDC: LEAU $6,U
    // TODO: Fix comma operator: LEAU $6,U

    // 8FDE: STU <$E4
    cpu.write_memory16(0xE4, cpu.m_u);

    // 8FE0: LDA #$01
    cpu.m_a = 0x01;

    // 8FE2: STA $3,X
    cpu.write_memory(cpu.m_x + 0x03, cpu.m_a);

    // 8FE4: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // 8FE6: JSR $CDC3
    cpu.call_function(0xCDC3);

    // 8FE9: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // 8FEB: LDA #$C0
    cpu.m_a = 0xC0;

    // 8FED: STA -$10,U
    cpu.write_memory(cpu.m_u - 0x10, cpu.m_a);

    // 8FEF: STA -$6,U
    cpu.write_memory(cpu.m_u - 0x06, cpu.m_a);

    // 8FF1: CLRA 
    cpu.m_a = 0;

    // 8FF2: STA $9,X
    cpu.write_memory(cpu.m_x + 0x09, cpu.m_a);

    // 8FF4: STA $8,X
    cpu.write_memory(cpu.m_x + 0x08, cpu.m_a);

    // 8FF6: STA $6,X
    cpu.write_memory(cpu.m_x + 0x06, cpu.m_a);

    // 8FF8: STA $5,X
    cpu.write_memory(cpu.m_x + 0x05, cpu.m_a);

    // 8FFA: STA $B,X
    cpu.write_memory(cpu.m_x + 0x0B, cpu.m_a);

    // 8FFC: LDU <$E0
    cpu.m_u = cpu.read_memory16(0xE0);

    // 8FFE: LDA $1,U
    // TODO: Fix comma operator: LDA $1,U

    // 9000: STA $7,X
    cpu.write_memory(cpu.m_x + 0x07, cpu.m_a);

    // 9002: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // 9004: LDX <$E2
    cpu.m_x = cpu.read_memory16(0xE2);

    // 9006: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // 9008: STD $8,U
    cpu.write_memory16(cpu.m_u + 0x08, cpu.m_d);

    // 900A: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // 900C: STD $A,U
    cpu.write_memory16(cpu.m_u + 0x0A, cpu.m_d);

    // 900E: LDD $4,X
    // TODO: Fix comma operator: LDD $4,X

    // 9010: STD $C,U
    cpu.write_memory16(cpu.m_u + 0x0C, cpu.m_d);

    // 9012: LDX <$5A
    cpu.m_x = cpu.read_memory16(0x5A);

    // 9014: LDD <$DE
    cpu.m_d = cpu.read_memory16(0xDE);

    // 9016: STD $D,X
    cpu.write_memory16(cpu.m_x + 0x0D, cpu.m_d);

    // 9018: JSR $8E23
    cpu.call_function(0x8E23);

    // 901B: LDX <$5A
    cpu.m_x = cpu.read_memory16(0x5A);

    // 901D: LDB [$48E0]
    // TODO: Unrecognized operand: [$48E0]

    // 9021: STB $4,X
    cpu.write_memory(cpu.m_x + 0x04, cpu.m_b);

    label_9023:
    // 9023: RTS 
    return;

    // 9024: NEG <$01
    // TODO: Convert NEG <$01

    // 9026: LSR <$04
    // TODO: Convert LSR <$04

    // 9028: INC >$0000
    cpu.increment_memory(0x0000);

    // 902B: NEG <$04
    // TODO: Convert NEG <$04

    // 902D: NEG <$7C
    // TODO: Convert NEG <$7C

    // 902F: NEG <$FC
    // TODO: Convert NEG <$FC

    // 9031: NEG <$00
    // TODO: Convert NEG <$00

    // 9033: NEG <$7C
    // TODO: Convert NEG <$7C

    // 9035: NEG <$04
    // TODO: Convert NEG <$04

    // 9037: NEG <$00
    // TODO: Convert NEG <$00

    // 9039: NEG <$7C
    // TODO: Convert NEG <$7C

    // 903B: NEG <$00
    // TODO: Convert NEG <$00

    // 903D: NEG <$04
    // TODO: Convert NEG <$04

    // 903F: NEG <$7C
    // TODO: Convert NEG <$7C

    // 9041: NEG <$FC
    // TODO: Convert NEG <$FC

    // 9043: NEG <$00
    // TODO: Convert NEG <$00

    // 9045: NEG <$7C
    // TODO: Convert NEG <$7C

    // 9047: NEG <$04
    // TODO: Convert NEG <$04

    // 9049: NEG <$00
    // TODO: Convert NEG <$00

    // 904B: NEG <$7C
    // TODO: Convert NEG <$7C

    // 904D: NEG <$00
    // TODO: Convert NEG <$00

    // 904F: NEG <$04
    // TODO: Convert NEG <$04

    // 9051: NEG <$7C
    // TODO: Convert NEG <$7C

    // 9053: NEG <$FC
    // TODO: Convert NEG <$FC

    // 9055: NEG <$00
    // TODO: Convert NEG <$00

    // 9057: NEG <$7C
    // TODO: Convert NEG <$7C

    // 9059: NEG <$04
    // TODO: Convert NEG <$04

    // 905B: NEG <$00
    // TODO: Convert NEG <$00

    // 905D: NEG <$7C
    // TODO: Convert NEG <$7C

    // 905F: NEG <$F8
    // TODO: Convert NEG <$F8

    // 9061: NEG <$00
    // TODO: Convert NEG <$00

    // 9063: NEG <$7C
    // TODO: Convert NEG <$7C

    // 9065: NEG <$08
    // TODO: Convert NEG <$08

    // 9067: NEG <$00
    // TODO: Convert NEG <$00

    // 9069: NEG <$7C
    // TODO: Convert NEG <$7C

    // 906B: NEG <$00
    // TODO: Convert NEG <$00

    // 906D: NEG <$08
    // TODO: Convert NEG <$08

    // 906F: NEG <$90
    // TODO: Convert NEG <$90

    // 9071: INC $9085
    cpu.increment_memory(0x9085);

    // 9074: SUBA <$90
    cpu.m_a -= 0x90;

    // 9076: SUBA <$9F
    cpu.m_a -= 0x9F;

    // 9078: SUBA <$AC
    cpu.m_a -= 0xAC;

    // 907A: SUBA <$B9
    cpu.m_a -= 0xB9;

    // 907C: COM <$90
    // TODO: Convert COM <$90

    // 907E: LDB #$91
    cpu.m_b = 0x91;

    // 9080: XANDCC #$91
    // TODO: Convert XANDCC #$91

    // 9082: XDECA 
    cpu.m_a--;

    // 9083: CMPA <$71
    cpu.compare_a(cpu.read_memory(0x71));

    // 9085: LSR <$90
    // TODO: Convert LSR <$90

    // 9087: ADCB <$91
    cpu.add_b_with_carry(0x91);

    // 9089: NOP 
    // NOP;

    // 908A: CMPA <$5E
    cpu.compare_a(cpu.read_memory(0x5E));

    // 908C: CMPA <$4B
    cpu.compare_a(cpu.read_memory(0x4B));

    // 908E: CMPA <$71
    cpu.compare_a(cpu.read_memory(0x71));

    // 9090: ROR <$90
    // TODO: Convert ROR <$90

    // 9092: LDD [,X++]
    // TODO: Complex indexed addressing: [,X++]

    // 9094: NOP 
    // NOP;

    // 9095: CMPA <$5E
    cpu.compare_a(cpu.read_memory(0x5E));

    // 9097: CMPA <$25
    cpu.compare_a(cpu.read_memory(0x25));

    // 9099: CMPA <$38
    cpu.compare_a(cpu.read_memory(0x38));

    // 909B: CMPA <$4B
    cpu.compare_a(cpu.read_memory(0x4B));

    // 909D: CMPA <$71
    cpu.compare_a(cpu.read_memory(0x71));

    // 909F: LSR <$91
    // TODO: Convert LSR <$91

    // 90A1: NOP 
    // NOP;

    // 90A2: CMPA <$5E
    cpu.compare_a(cpu.read_memory(0x5E));

    // 90A4: CMPA <$25
    cpu.compare_a(cpu.read_memory(0x25));

    // 90A6: CMPA <$38
    cpu.compare_a(cpu.read_memory(0x38));

    // 90A8: CMPA <$4B
    cpu.compare_a(cpu.read_memory(0x4B));

    // 90AA: CMPA <$71
    cpu.compare_a(cpu.read_memory(0x71));

    // 90AC: LSR <$90
    // TODO: Convert LSR <$90

    // 90AE: STU $9112
    cpu.write_memory16(0x9112, cpu.m_u);

    // 90B1: CMPA <$4B
    cpu.compare_a(cpu.read_memory(0x4B));

    // 90B3: CMPA <$5E
    cpu.compare_a(cpu.read_memory(0x5E));

    // 90B5: CMPA <$38
    cpu.compare_a(cpu.read_memory(0x38));

    // 90B7: CMPA <$71
    cpu.compare_a(cpu.read_memory(0x71));

    // 90B9: LSR <$91
    // TODO: Convert LSR <$91

    // 90BB: NOP 
    // NOP;

    // 90BC: CMPA <$5E
    cpu.compare_a(cpu.read_memory(0x5E));

    // 90BE: CMPA <$38
    cpu.compare_a(cpu.read_memory(0x38));

    // 90C0: CMPA <$5E
    cpu.compare_a(cpu.read_memory(0x5E));

    // 90C2: CMPA <$4B
    cpu.compare_a(cpu.read_memory(0x4B));

    // 90C4: CMPA <$71
    cpu.compare_a(cpu.read_memory(0x71));

    // 90C6: SUBA <$24
    cpu.m_a -= 0x24;

    // 90C8: CMPA <$E1
    cpu.compare_a(cpu.read_memory(0xE1));

    // 90CA: SUBA <$28
    cpu.m_a -= 0x28;

    // 90CC: SUBA <$24
    cpu.m_a -= 0x24;

    // 90CE: SBCA <$05
    cpu.sub_a_with_carry(0x05);

    // 90D0: SUBA <$2E
    cpu.m_a -= 0x2E;

    // 90D2: SUBA <$24
    cpu.m_a -= 0x24;

    // 90D4: SBCA <$32
    cpu.sub_a_with_carry(0x32);

    // 90D6: SUBA <$34
    cpu.m_a -= 0x34;

    // 90D8: NEG <$90
    // TODO: Convert NEG <$90

    // 90DA: BCC $906E
    // TODO: External jump to 0x906E - not implemented

    // 90DC: ASR $903A
    // TODO: Convert ASR $903A

    // 90DF: SUBA <$24
    cpu.m_a -= 0x24;

    // 90E1: SBCA <$AD
    cpu.sub_a_with_carry(0xAD);

    // 90E3: SUBA <$40
    cpu.m_a -= 0x40;

    // 90E5: SUBA <$24
    cpu.m_a -= 0x24;

    // 90E7: SBCA <$D1
    cpu.sub_a_with_carry(0xD1);

    // 90E9: SUBA <$46
    cpu.m_a -= 0x46;

    // 90EB: NEG <$90
    // TODO: Convert NEG <$90

    // 90ED: BCC $9082
    if (!cpu.carry_flag()) cpu.m_pc = 0x9082;

    // 90EF: DAA 
    // TODO: Convert DAA 

    // 90F0: SUBA <$4C
    cpu.m_a -= 0x4C;

    // 90F2: SUBA <$24
    cpu.m_a -= 0x24;

    // 90F4: SUBD <$3D
    cpu.m_d -= 0x3D;

    // 90F6: SUBA <$52
    cpu.m_a -= 0x52;

    // 90F8: SUBA <$24
    cpu.m_a -= 0x24;

    // 90FA: SUBD <$55
    cpu.m_d -= 0x55;

    // 90FC: SUBA <$58
    cpu.m_a -= 0x58;

    // 90FE: NEG <$90
    // TODO: Convert NEG <$90

    // 9100: BCC $9095
    if (!cpu.carry_flag()) cpu.m_pc = 0x9095;

    // 9102: BITA #$90
    // TODO: Convert BITA #$90

    // 9104: XCLRB 
    // TODO: Convert XCLRB 

    // 9105: SUBA <$24
    cpu.m_a -= 0x24;

    // 9107: SUBD <$A9
    cpu.m_d -= 0xA9;

    // 9109: SUBA <$64
    cpu.m_a -= 0x64;

    // 910B: SUBA <$24
    cpu.m_a -= 0x24;

    // 910D: SUBD <$DC
    cpu.m_d -= 0xDC;

    // 910F: SUBA <$6A
    cpu.m_a -= 0x6A;

    // 9111: NEG <$90
    // TODO: Convert NEG <$90

    // 9113: BCC $90A8
    if (!cpu.carry_flag()) cpu.m_pc = 0x90A8;

    // 9115: BITA #$90
    // TODO: Convert BITA #$90

    // 9117: XCLRB 
    // TODO: Convert XCLRB 

    // 9118: SUBA <$24
    cpu.m_a -= 0x24;

    // 911A: SUBD <$A9
    cpu.m_d -= 0xA9;

    // 911C: SUBA <$64
    cpu.m_a -= 0x64;

    // 911E: SUBA <$26
    cpu.m_a -= 0x26;

    // 9120: SUBD <$DC
    cpu.m_d -= 0xDC;

    // 9122: SUBA <$6A
    cpu.m_a -= 0x6A;

    // 9124: NEG <$90
    // TODO: Convert NEG <$90

    // 9126: BCC $90B9
    if (!cpu.carry_flag()) cpu.m_pc = 0x90B9;

    // 9128: LDU <$90
    cpu.m_u = cpu.read_memory16(0x90);

    // 912A: BVC $90BC
    // TODO: Convert BVC $90BC

    // 912C: BCC $90C0
    if (!cpu.carry_flag()) cpu.m_pc = 0x90C0;

    // 912E: XNC <$90
    // TODO: Convert XNC <$90

    // 9130: BGT $90C2
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x90C2;

    // 9132: BCC $90C6
    if (!cpu.carry_flag()) cpu.m_pc = 0x90C6;

    // 9134: BLE $90C6
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x90C6;

    // 9136: PSHS 
    // TODO: Convert PSHS 

    // 9138: SUBA <$24
    cpu.m_a -= 0x24;

    // 913A: SBCA <$74
    cpu.sub_a_with_carry(0x74);

    // 913C: SUBA <$3A
    cpu.m_a -= 0x3A;

    // 913E: SUBA <$24
    cpu.m_a -= 0x24;

    // 9140: SBCA <$AA
    cpu.sub_a_with_carry(0xAA);

    // 9142: SUBA <$40
    cpu.m_a -= 0x40;

    // 9144: SUBA <$24
    cpu.m_a -= 0x24;

    // 9146: SBCA <$CE
    cpu.sub_a_with_carry(0xCE);

    // 9148: SUBA <$46
    cpu.m_a -= 0x46;

    // 914A: NEG <$90
    // TODO: Convert NEG <$90

    // 914C: BCC $90E1
    if (!cpu.carry_flag()) cpu.m_pc = 0x90E1;

    // 914E: LBRA $219D
    // TODO: Convert LBRA $219D

    // 9151: SUBA <$24
    cpu.m_a -= 0x24;

    // 9153: SUBD <$3A
    cpu.m_d -= 0x3A;

    // 9155: SUBA <$52
    cpu.m_a -= 0x52;

    // 9157: SUBA <$24
    cpu.m_a -= 0x24;

    // 9159: SUBD <$52
    cpu.m_d -= 0x52;

    // 915B: SUBA <$58
    cpu.m_a -= 0x58;

    // 915D: NEG <$90
    // TODO: Convert NEG <$90

    // 915F: BCC $90F4
    if (!cpu.carry_flag()) cpu.m_pc = 0x90F4;

    // 9161: SBCA #$90
    cpu.sub_a_with_carry(0x90);

    // 9163: XCLRB 
    // TODO: Convert XCLRB 

    // 9164: SUBA <$24
    cpu.m_a -= 0x24;

    // 9166: SUBD <$A6
    cpu.m_d -= 0xA6;

    // 9168: SUBA <$64
    cpu.m_a -= 0x64;

    // 916A: SUBA <$24
    cpu.m_a -= 0x24;

    // 916C: SUBD <$D9
    cpu.m_d -= 0xD9;

    // 916E: SUBA <$6A
    cpu.m_a -= 0x6A;

    // 9170: NEG <$90
    // TODO: Convert NEG <$90

    // 9172: BCC $9105
    if (!cpu.carry_flag()) cpu.m_pc = 0x9105;

    // 9174: LDU <$90
    cpu.m_u = cpu.read_memory16(0x90);

    // 9176: BVC $9108
    // TODO: Convert BVC $9108

    // 9178: BCC $910C
    // TODO: External jump to 0x910C - not implemented

    // 917A: XNC <$90
    // TODO: Convert XNC <$90

    // 917C: BGT $910E
    // TODO: External jump to 0x910E - not implemented

    // 917E: BCC $9112
    // TODO: External jump to 0x9112 - not implemented

    // 9180: BLE $9112
    // TODO: External jump to 0x9112 - not implemented

    // 9182: PSHS PC,X
    // TODO: Convert PSHS PC,X

    // 9184: BCC $9119
    // TODO: External jump to 0x9119 - not implemented

    // 9186: SBCA #$90
    cpu.sub_a_with_carry(0x90);

    // 9188: XCLRB 
    // TODO: Convert XCLRB 

    // 9189: SUBA <$24
    cpu.m_a -= 0x24;

    // 918B: SUBD <$A6
    cpu.m_d -= 0xA6;

    // 918D: SUBA <$64
    cpu.m_a -= 0x64;

    // 918F: SUBA <$24
    cpu.m_a -= 0x24;

    // 9191: SUBD <$D9
    cpu.m_d -= 0xD9;

    // 9193: SUBA <$6A
    cpu.m_a -= 0x6A;

    // 9195: SUBA <$24
    cpu.m_a -= 0x24;

    // 9197: SBCA <$74
    cpu.sub_a_with_carry(0x74);

    // 9199: SUBA <$3A
    cpu.m_a -= 0x3A;

    // 919B: SUBA <$24
    cpu.m_a -= 0x24;

    // 919D: SBCA <$AA
    cpu.sub_a_with_carry(0xAA);

    // 919F: SUBA <$40
    cpu.m_a -= 0x40;

    // 91A1: SUBA <$24
    cpu.m_a -= 0x24;

    // 91A3: SBCA <$CE
    cpu.sub_a_with_carry(0xCE);

    // 91A5: SUBA <$46
    cpu.m_a -= 0x46;

    // 91A7: SUBA <$24
    cpu.m_a -= 0x24;

    // 91A9: SUBD <$82
    cpu.m_d -= 0x82;

    // 91AB: SUBA <$5E
    cpu.m_a -= 0x5E;

    // 91AD: SUBA <$24
    cpu.m_a -= 0x24;

    // 91AF: SUBD <$A6
    cpu.m_d -= 0xA6;

    // 91B1: SUBA <$64
    cpu.m_a -= 0x64;

    // 91B3: SUBA <$24
    cpu.m_a -= 0x24;

    // 91B5: SUBD <$D9
    cpu.m_d -= 0xD9;

    // 91B7: SUBA <$6A
    cpu.m_a -= 0x6A;

    // 91B9: SUBA <$24
    cpu.m_a -= 0x24;

    // 91BB: SUBD <$16
    cpu.m_d -= 0x16;

    // 91BD: SUBA <$4C
    cpu.m_a -= 0x4C;

    // 91BF: SUBA <$24
    cpu.m_a -= 0x24;

    // 91C1: SUBD <$3A
    cpu.m_d -= 0x3A;

    // 91C3: SUBA <$52
    cpu.m_a -= 0x52;

    // 91C5: SUBA <$24
    cpu.m_a -= 0x24;

    // 91C7: SUBD <$52
    cpu.m_d -= 0x52;

    // 91C9: SUBA <$58
    cpu.m_a -= 0x58;

    // 91CB: SUBA <$24
    cpu.m_a -= 0x24;

    // 91CD: SUBD <$82
    cpu.m_d -= 0x82;

    // 91CF: SUBA <$5E
    cpu.m_a -= 0x5E;

    // 91D1: SUBA <$24
    cpu.m_a -= 0x24;

    // 91D3: SUBD <$A6
    cpu.m_d -= 0xA6;

    // 91D5: SUBA <$64
    cpu.m_a -= 0x64;

    // 91D7: SUBA <$24
    cpu.m_a -= 0x24;

    // 91D9: SUBD <$D9
    cpu.m_d -= 0xD9;

    // 91DB: SUBA <$6A
    cpu.m_a -= 0x6A;

    // 91DD: NEG <$02
    // TODO: Convert NEG <$02

    // 91DF: ANDA <$21
    cpu.m_a &= 0x21;

    // 91E1: ANDA #$00
    cpu.m_a &= 0x00;

    // 91E3: ANDA #$00
    cpu.m_a &= 0x00;

    // 91E6: BRA $922C
    // TODO: External jump to 0x922C - not implemented

    // 91E8: LSR <$10
    // TODO: Convert LSR <$10

    // 91EA: NEG <$00
    // TODO: Convert NEG <$00

    // 91EC: LSR <$44
    // TODO: Convert LSR <$44

    // 91EE: SUBA #$00
    cpu.m_a -= 0x00;

    // 91F0: NEG <$04
    // TODO: Convert NEG <$04

    // 91F2: NEG <$84
    // TODO: Convert NEG <$84

    // 91F4: CMPA #$10
    cpu.compare_a(0x10);

    // 91F6: NEG <$00
    // TODO: Convert NEG <$00

    // 91F8: LSR <$44
    // TODO: Convert LSR <$44

    // 91FA: SUBA #$00
    cpu.m_a -= 0x00;

    // 91FC: NEG <$00
    // TODO: Convert NEG <$00

    // 91FE: NEG <$01
    // TODO: Convert NEG <$01

    // 9200: SBCA <$5C
    cpu.sub_a_with_carry(0x5C);

    // 9202: XNC <$94
    // TODO: Convert XNC <$94

    // 9204: BRN $918A
    // TODO: Convert BRN $918A

    // 9206: XNC <$20
    // TODO: Convert XNC <$20

    // 9208: LSRA 
    cpu.m_a >>= 1;

    // 9209: FCB $10
    // TODO: Convert FCB $10

    // 920A: NEG <$00
    // TODO: Convert NEG <$00

    // 920D: LSR <$44
    // TODO: Convert LSR <$44

    // 920F: SUBA <$10
    cpu.m_a -= 0x10;

    // 9211: NEG <$00
    // TODO: Convert NEG <$00

    // 9213: NEG <$84
    // TODO: Convert NEG <$84

    // 9215: XNC <$10
    // TODO: Convert XNC <$10

    // 9217: NEG <$00
    // TODO: Convert NEG <$00

    // 9219: LSR <$44
    // TODO: Convert LSR <$44

    // 921B: SUBA <$10
    cpu.m_a -= 0x10;

    // 921D: NEG <$00
    // TODO: Convert NEG <$00

    // 921F: NEG <$44
    // TODO: Convert NEG <$44

    // 9221: XNC <$20
    // TODO: Convert XNC <$20

    // 9223: NEG <$00
    // TODO: Convert NEG <$00

    // 9225: LSR <$44
    // TODO: Convert LSR <$44

    // 9227: SUBA <$10
    cpu.m_a -= 0x10;

    // 9229: NEG <$00
    // TODO: Convert NEG <$00

    // 922B: NEG <$01
    // TODO: Convert NEG <$01

    // 922D: SBCA <$5C
    cpu.sub_a_with_carry(0x5C);

    // 922F: XNC <$94
    // TODO: Convert XNC <$94

    // 9231: BRN $91B7
    // TODO: Convert BRN $91B7

    // 9233: NEG <$20
    // TODO: Convert NEG <$20

    // 9235: LSRA 
    cpu.m_a >>= 1;

    // 9236: BRA $9248
    goto label_9248;

    // 9238: NEG <$00
    // TODO: Convert NEG <$00

    // 923A: LSR <$44
    // TODO: Convert LSR <$44

    // 923C: SUBA -$10,X
    // TODO: Fix comma operator: SUBA -$10,X

    // 923E: NEG <$00
    // TODO: Convert NEG <$00

    // 9240: NEG <$84
    // TODO: Convert NEG <$84

    // 9242: NEG <$10
    // TODO: Convert NEG <$10

    // 9244: NEG <$00
    // TODO: Convert NEG <$00

    // 9246: LSR <$44
    // TODO: Convert LSR <$44

    label_9248:
    // 9248: SUBA -$10,X
    // TODO: Fix comma operator: SUBA -$10,X

    // 924A: NEG <$00
    // TODO: Convert NEG <$00

    // 924C: NEG <$44
    // TODO: Convert NEG <$44

    // 924E: NEG <$20
    // TODO: Convert NEG <$20

    // 9250: NEG <$00
    // TODO: Convert NEG <$00

    // 9252: LSR <$44
    // TODO: Convert LSR <$44

    // 9254: SUBA -$10,X
    // TODO: Fix comma operator: SUBA -$10,X

    // 9256: NEG <$00
    // TODO: Convert NEG <$00

    // 9258: NEG <$01
    // TODO: Convert NEG <$01

    // 925A: SBCA <$5C
    cpu.sub_a_with_carry(0x5C);

    // 925C: NEG <$00
    // TODO: Convert NEG <$00

    // 925E: LSRA 
    cpu.m_a >>= 1;

    // 925F: LSRA 
    cpu.m_a >>= 1;

    // 9260: SBCA #$20
    cpu.sub_a_with_carry(0x20);

    // 9262: NEG <$00
    // TODO: Convert NEG <$00

    // 9264: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9265: LSRA 
    cpu.m_a >>= 1;

    // 9266: NEG <$20
    // TODO: Convert NEG <$20

    // 9268: NEG <$92
    // TODO: Convert NEG <$92

    // 926A: INCB 
    cpu.m_b++;

    // 926B: NEG <$00
    // TODO: Convert NEG <$00

    // 926D: NEG <$24
    // TODO: Convert NEG <$24

    // 926F: NEG <$08
    // TODO: Convert NEG <$08

    // 9271: NEG <$92
    // TODO: Convert NEG <$92

    // 9273: INCB 
    cpu.m_b++;

    // 9274: XNC <$94
    // TODO: Convert XNC <$94

    // 9276: BRN $92BC
    // TODO: Convert BRN $92BC

    // 9278: NEG <$14
    // TODO: Convert NEG <$14

    // 927A: LSRA 
    cpu.m_a >>= 1;

    // 927B: NEG <$11
    // TODO: Convert NEG <$11

    // 927D: LSRA 
    cpu.m_a >>= 1;

    // 927E: NEG <$14
    // TODO: Convert NEG <$14

    // 9280: LSRA 
    cpu.m_a >>= 1;

    // 9281: NEG <$11
    // TODO: Convert NEG <$11

    // 9283: LSRA 
    cpu.m_a >>= 1;

    // 9284: LSR <$10
    // TODO: Convert LSR <$10

    // 9286: NEG <$00
    // TODO: Convert NEG <$00

    // 9288: LSR <$44
    // TODO: Convert LSR <$44

    // 928A: SUBA #$00
    cpu.m_a -= 0x00;

    // 928C: NEG <$00
    // TODO: Convert NEG <$00

    // 928E: NEG <$44
    // TODO: Convert NEG <$44

    // 9290: NEG <$14
    // TODO: Convert NEG <$14

    // 9292: LSRA 
    cpu.m_a >>= 1;

    // 9293: NEG <$11
    // TODO: Convert NEG <$11

    // 9295: ANDA #$80
    cpu.m_a &= 0x80;

    // 9297: XHCF 
    // TODO: Convert XHCF 

    // 9298: LSRA 
    cpu.m_a >>= 1;

    // 9299: NEG <$14
    // TODO: Convert NEG <$14

    // 929B: LSRA 
    cpu.m_a >>= 1;

    // 929C: NEG <$11
    // TODO: Convert NEG <$11

    // 929E: NEG <$00
    // TODO: Convert NEG <$00

    // 92A0: LSR <$44
    // TODO: Convert LSR <$44

    // 92A2: SUBA #$04
    cpu.m_a -= 0x04;

    // 92A4: NEG <$00
    // TODO: Convert NEG <$00

    // 92A6: NEG <$01
    // TODO: Convert NEG <$01

    // 92A8: SBCA <$E9
    cpu.sub_a_with_carry(0xE9);

    // 92AA: XNC <$94
    // TODO: Convert XNC <$94

    // 92AC: BRN $92D2
    // TODO: Convert BRN $92D2

    // 92AE: NEG <$18
    // TODO: Convert NEG <$18

    // 92B0: BCC $92B2
    if (!cpu.carry_flag()) cpu.m_pc = 0x92B2;

    // 92B2: NOP 
    // NOP;

    // 92B3: BCC $92B5
    if (!cpu.carry_flag()) cpu.m_pc = 0x92B5;

    // 92B5: BVC $92DB
    // TODO: Convert BVC $92DB

    // 92B7: NEG <$22
    // TODO: Convert NEG <$22

    // 92B9: NEG <$00
    // TODO: Convert NEG <$00

    // 92BB: LSR <$44
    // TODO: Convert LSR <$44

    // 92BD: SUBA #$11
    cpu.m_a -= 0x11;

    // 92BF: NEG <$00
    // TODO: Convert NEG <$00

    // 92C1: NEG <$00
    // TODO: Convert NEG <$00

    // 92C3: NEG <$04
    // TODO: Convert NEG <$04

    // 92C5: LSRA 
    cpu.m_a >>= 1;

    // 92C6: SUBA #$14
    cpu.m_a -= 0x14;

    // 92C8: NEG <$00
    // TODO: Convert NEG <$00

    // 92CA: NEG <$01
    // TODO: Convert NEG <$01

    // 92CC: SBCA <$E9
    cpu.sub_a_with_carry(0xE9);

    // 92CE: XNC <$94
    // TODO: Convert XNC <$94

    // 92D0: BRN $92F6
    // TODO: Convert BRN $92F6

    // 92D2: NEG <$18
    // TODO: Convert NEG <$18

    // 92D4: BCC $92D6
    if (!cpu.carry_flag()) cpu.m_pc = 0x92D6;

    // 92D6: NOP 
    // NOP;

    // 92D7: BCC $92D9
    if (!cpu.carry_flag()) cpu.m_pc = 0x92D9;

    // 92D9: BVC $92FF
    // TODO: Convert BVC $92FF

    // 92DB: NEG <$22
    // TODO: Convert NEG <$22

    // 92DD: NEG <$00
    // TODO: Convert NEG <$00

    // 92DF: LSR <$44
    // TODO: Convert LSR <$44

    // 92E1: SUBA #$11
    cpu.m_a -= 0x11;

    // 92E3: NEG <$00
    // TODO: Convert NEG <$00

    // 92E5: NEG <$01
    // TODO: Convert NEG <$01

    // 92E7: SBCA <$E9
    cpu.sub_a_with_carry(0xE9);

    // 92E9: NEG <$00
    // TODO: Convert NEG <$00

    // 92EB: LSRA 
    cpu.m_a >>= 1;

    // 92EC: LSRA 
    cpu.m_a >>= 1;

    // 92ED: SBCA #$20
    cpu.sub_a_with_carry(0x20);

    // 92EF: NEG <$00
    // TODO: Convert NEG <$00

    // 92F1: NEGA 
    cpu.m_a = -cpu.m_a;

    // 92F2: LSRA 
    cpu.m_a >>= 1;

    // 92F3: XNC <$20
    // TODO: Convert XNC <$20

    // 92F5: NEG <$92
    // TODO: Convert NEG <$92

    // 92F7: ADCB $0,X
    // TODO: Fix comma operator: ADCB $0,X

    // 92F9: NEG <$00
    // TODO: Convert NEG <$00

    // 92FB: BCC $92FD
    if (!cpu.carry_flag()) cpu.m_pc = 0x92FD;

    // 92FD: ASL <$00
    cpu.arithmetic_shift_left(0x00);

    // 92FF: LSR <$00
    // TODO: Convert LSR <$00

    // 9301: LDD $8210
    cpu.m_d = cpu.read_memory16(0x8210);

    // 9304: NEG <$00
    // TODO: Convert NEG <$00

    // 9306: NEG <$44
    // TODO: Convert NEG <$44

    // 9308: SBCA #$08
    cpu.sub_a_with_carry(0x08);

    // 930A: LSRA 
    cpu.m_a >>= 1;

    // 930B: CMPA #$02
    cpu.compare_a(0x02);

    // 930D: LSRA 
    cpu.m_a >>= 1;

    // 930E: CMPA #$08
    cpu.compare_a(0x08);

    // 9310: LSRA 
    cpu.m_a >>= 1;

    // 9311: SBCA #$02
    cpu.sub_a_with_carry(0x02);

    // 9313: NEG <$92
    // TODO: Convert NEG <$92

    // 9315: ADCB $2,X
    // TODO: Fix comma operator: ADCB $2,X

    // 9317: ANDA <$21
    cpu.m_a &= 0x21;

    // 9319: BCC $931B
    if (!cpu.carry_flag()) cpu.m_pc = 0x931B;

    // 931B: XHCF 
    // TODO: Convert XHCF 

    // 931C: BCC $931E
    if (!cpu.carry_flag()) cpu.m_pc = 0x931E;

    // 931E: BCC $9321
    if (!cpu.carry_flag()) cpu.m_pc = 0x9321;

    // 9321: XHCF 
    // TODO: Convert XHCF 

    // 9322: BCC $9324
    if (!cpu.carry_flag()) cpu.m_pc = 0x9324;

    // 9324: LSRA 
    cpu.m_a >>= 1;

    // 9326: LSR <$10
    // TODO: Convert LSR <$10

    // 9328: NEG <$00
    // TODO: Convert NEG <$00

    // 932A: LSR <$44
    // TODO: Convert LSR <$44

    // 932C: SUBA #$00
    cpu.m_a -= 0x00;

    // 932E: NEG <$00
    // TODO: Convert NEG <$00

    // 9330: NEG <$00
    // TODO: Convert NEG <$00

    // 9332: NEG <$04
    // TODO: Convert NEG <$04

    // 9334: LSRA 
    cpu.m_a >>= 1;

    // 9335: SUBA #$04
    cpu.m_a -= 0x04;

    // 9337: NEG <$00
    // TODO: Convert NEG <$00

    // 9339: NEG <$02
    // TODO: Convert NEG <$02

    // 933B: ANDA <$21
    cpu.m_a &= 0x21;

    // 933D: LSRA 
    cpu.m_a >>= 1;

    // 933E: SBCA #$14
    cpu.sub_a_with_carry(0x14);

    // 9340: LSRA 
    cpu.m_a >>= 1;

    // 9341: SBCA #$24
    cpu.sub_a_with_carry(0x24);

    // 9343: LSRA 
    cpu.m_a >>= 1;

    // 9344: XHCF 
    // TODO: Convert XHCF 

    // 9346: NEG <$00
    // TODO: Convert NEG <$00

    // 9348: LSR <$44
    // TODO: Convert LSR <$44

    // 934A: SUBA <$14
    cpu.m_a -= 0x14;

    // 934C: NEG <$00
    // TODO: Convert NEG <$00

    // 934E: NEG <$01
    // TODO: Convert NEG <$01

    // 9350: SUBD <$6A
    cpu.m_d -= 0x6A;

    // 9352: XNC <$94
    // TODO: Convert XNC <$94

    // 9354: BRN $939A
    // TODO: Convert BRN $939A

    // 9356: CMPA #$14
    cpu.compare_a(0x14);

    // 9358: LSRA 
    cpu.m_a >>= 1;

    // 9359: CMPA #$24
    cpu.compare_a(0x24);

    // 935B: LSRA 
    cpu.m_a >>= 1;

    // 935C: BRA $9372
    goto label_9372;

    // 935E: NEG <$00
    // TODO: Convert NEG <$00

    // 9360: LSR <$44
    // TODO: Convert LSR <$44

    // 9362: SUBA -$C,X
    // TODO: Fix comma operator: SUBA -$C,X

    // 9364: NEG <$00
    // TODO: Convert NEG <$00

    // 9366: NEG <$01
    // TODO: Convert NEG <$01

    // 9368: SUBD <$6A
    cpu.m_d -= 0x6A;

    // 936A: NEG <$00
    // TODO: Convert NEG <$00

    // 936C: LSRA 
    cpu.m_a >>= 1;

    // 936D: LSRA 
    cpu.m_a >>= 1;

    // 936E: SBCA #$24
    cpu.sub_a_with_carry(0x24);

    // 9370: NEG <$00
    // TODO: Convert NEG <$00

    label_9372:
    // 9372: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9373: LSRA 
    cpu.m_a >>= 1;

    // 9374: NEG <$20
    // TODO: Convert NEG <$20

    // 9376: NEG <$93
    // TODO: Convert NEG <$93

    // 9378: DEC $0,X
    // TODO: Fix comma operator: DEC $0,X

    // 937A: NEG <$00
    // TODO: Convert NEG <$00

    // 937C: BCC $937E
    if (!cpu.carry_flag()) cpu.m_pc = 0x937E;

    // 937E: XNC <$01
    // TODO: Convert XNC <$01

    // 9380: SUBD <$6A
    cpu.m_d -= 0x6A;

    // 9382: XNC <$94
    // TODO: Convert XNC <$94

    // 9384: BRN $9386
    // TODO: Convert BRN $9386

    // 9386: LSR <$00
    // TODO: Convert LSR <$00

    // 9388: LDD $8218
    cpu.m_d = cpu.read_memory16(0x8218);

    // 938B: NEG <$00
    // TODO: Convert NEG <$00

    // 938D: NEG <$FC
    // TODO: Convert NEG <$FC

    // 938F: SBCA #$08
    cpu.sub_a_with_carry(0x08);

    // 9391: LDD $8208
    cpu.m_d = cpu.read_memory16(0x8208);

    // 9394: LDD $8208
    cpu.m_d = cpu.read_memory16(0x8208);

    // 9397: LDD $8208
    cpu.m_d = cpu.read_memory16(0x8208);

    // 939A: NEG <$00
    // TODO: Convert NEG <$00

    // 939C: LSR <$44
    // TODO: Convert LSR <$44

    // 939E: CMPA #$08
    cpu.compare_a(0x08);

    // 93A0: NEG <$00
    // TODO: Convert NEG <$00

    // 93A2: NEG <$01
    // TODO: Convert NEG <$01

    // 93A4: ANDA <$5A
    cpu.m_a &= 0x5A;

    // 93A6: XNC <$94
    // TODO: Convert XNC <$94

    // 93A8: BRN $93AA
    // TODO: Convert BRN $93AA

    // 93AA: LSR <$00
    // TODO: Convert LSR <$00

    // 93AC: LDD $8218
    cpu.m_d = cpu.read_memory16(0x8218);

    // 93AF: NEG <$00
    // TODO: Convert NEG <$00

    // 93B1: NEG <$84
    // TODO: Convert NEG <$84

    // 93B3: CMPA #$08
    cpu.compare_a(0x08);

    // 93B5: SUBA #$00
    cpu.m_a -= 0x00;

    // 93B7: LSRA 
    cpu.m_a >>= 1;

    // 93B9: SBCA #$08
    cpu.sub_a_with_carry(0x08);

    // 93BB: SUBA #$00
    cpu.m_a -= 0x00;

    // 93BD: NEG <$84
    // TODO: Convert NEG <$84

    // 93BF: CMPA #$08
    cpu.compare_a(0x08);

    // 93C1: SUBA #$00
    cpu.m_a -= 0x00;

    // 93C3: LSRA 
    cpu.m_a >>= 1;

    // 93C5: CMPA #$08
    cpu.compare_a(0x08);

    // 93C7: SUBA #$00
    cpu.m_a -= 0x00;

    // 93C9: NEG <$84
    // TODO: Convert NEG <$84

    // 93CB: CMPA #$08
    cpu.compare_a(0x08);

    // 93CD: NEG <$00
    // TODO: Convert NEG <$00

    // 93CF: LSR <$44
    // TODO: Convert LSR <$44

    // 93D1: SBCA #$08
    cpu.sub_a_with_carry(0x08);

    // 93D3: NEG <$00
    // TODO: Convert NEG <$00

    label_93D5:
    // 93D5: NEG <$01
    // TODO: Convert NEG <$01

    // 93D7: ANDA <$5A
    cpu.m_a &= 0x5A;

    // 93D9: XNC <$94
    // TODO: Convert XNC <$94

    // 93DB: BRN $93DD
    // TODO: Convert BRN $93DD

    // 93DD: LSR <$00
    // TODO: Convert LSR <$00

    // 93DF: XHCF 
    // TODO: Convert XHCF 

    // 93E0: SUBA #$18
    cpu.m_a -= 0x18;

    // 93E2: XHCF 
    // TODO: Convert XHCF 

    // 93E3: SUBA #$12
    cpu.m_a -= 0x12;

    // 93E5: XHCF 
    // TODO: Convert XHCF 

    // 93E6: SUBA #$18
    cpu.m_a -= 0x18;

    // 93E8: XHCF 
    // TODO: Convert XHCF 

    // 93E9: SUBA #$12
    cpu.m_a -= 0x12;

    // 93EB: XHCF 
    // TODO: Convert XHCF 

    // 93EC: SUBA #$18
    cpu.m_a -= 0x18;

    // 93EE: XHCF 
    // TODO: Convert XHCF 

    // 93EF: SUBA #$12
    cpu.m_a -= 0x12;

    // 93F1: XHCF 
    // TODO: Convert XHCF 

    // 93F2: SUBA #$18
    cpu.m_a -= 0x18;

    // 93F4: XHCF 
    // TODO: Convert XHCF 

    // 93F5: SUBA #$12
    cpu.m_a -= 0x12;

    // 93F7: NEG <$00
    // TODO: Convert NEG <$00

    // 93F9: NEG <$00
    // TODO: Convert NEG <$00

    // 93FB: NEG <$01
    // TODO: Convert NEG <$01

    // 93FD: LSRA 
    cpu.m_a >>= 1;

    // 93FE: SUBA $0844
    cpu.m_a -= cpu.read_memory(0x0844);

    // 9401: CMPX #$0844
    cpu.compare_x(0x0844);

    // 9404: SUBA $0244
    cpu.m_a -= cpu.read_memory(0x0244);

    // 9407: CMPX #$0244
    cpu.compare_x(0x0244);

    // 940A: SUBA $0844
    cpu.m_a -= cpu.read_memory(0x0844);

    // 940D: CMPX #$0844
    cpu.compare_x(0x0844);

    // 9410: SUBA $0244
    cpu.m_a -= cpu.read_memory(0x0244);

    // 9413: CMPX #$0200
    cpu.compare_x(0x0200);

    // 9416: NEG <$04
    // TODO: Convert NEG <$04

    // 9418: LSRA 
    cpu.m_a >>= 1;

    // 9419: CMPA #$10
    cpu.compare_a(0x10);

    // 941B: NEG <$00
    // TODO: Convert NEG <$00

    // 941D: NEG <$01
    // TODO: Convert NEG <$01

    // 941F: ANDA <$5A
    cpu.m_a &= 0x5A;

    // 9421: INC <$80
    cpu.increment_memory(0x80);

    // 9423: SUBA #$00
    cpu.m_a -= 0x00;

    // 9426: NEG <$94
    // TODO: Convert NEG <$94

    // 9429: CWAI #$80
    // TODO: Convert CWAI #$80

    // 942B: NEG <$20
    // TODO: Convert NEG <$20

    // 942D: LSRA 
    cpu.m_a >>= 1;

    // 942E: SUBA #$3C
    cpu.m_a -= 0x3C;

    // 9430: NEG <$94
    // TODO: Convert NEG <$94

    // 9432: XCLRA 
    // TODO: Convert XCLRA 

    // 9433: SUBA #$00
    cpu.m_a -= 0x00;

    // 9435: NEG <$44
    // TODO: Convert NEG <$44

    label_9437:
    // 9437: SUBA #$33
    cpu.m_a -= 0x33;

    // 9439: NEG <$94
    // TODO: Convert NEG <$94

    // 943B: XCLRA 
    // TODO: Convert XCLRA 

    // 943C: SUBA #$00
    cpu.m_a -= 0x00;

    // 943E: BRA $9484
    goto label_9484;

    // 9440: SBCA #$3C
    cpu.sub_a_with_carry(0x3C);

    // 9442: NEG <$94
    // TODO: Convert NEG <$94

    // 9444: XCLRA 
    // TODO: Convert XCLRA 

    // 9445: SUBA #$00
    cpu.m_a -= 0x00;

    // 9447: NEG <$44
    // TODO: Convert NEG <$44

    // 9449: SBCA #$33
    cpu.sub_a_with_carry(0x33);

    // 944B: NEG <$94
    // TODO: Convert NEG <$94

    // 944D: XCLRA 
    // TODO: Convert XCLRA 

    // 944E: SUBA #$00
    cpu.m_a -= 0x00;

    // 9450: BRA $9496
    // TODO: External jump to 0x9496 - not implemented

    // 9452: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9453: BRA $93D5
    goto label_93D5;

    // 9455: NEG <$00
    // TODO: Convert NEG <$00

    // 9457: COM <$00
    // TODO: Convert COM <$00

    // 9459: NEG <$24
    // TODO: Convert NEG <$24

    // 945B: NEG <$08
    // TODO: Convert NEG <$08

    // 945D: NEG <$04
    // TODO: Convert NEG <$04

    // 945F: NEG <$84
    // TODO: Convert NEG <$84

    // 9461: CMPA #$20
    cpu.compare_a(0x20);

    // 9463: NEG <$00
    // TODO: Convert NEG <$00

    // 9465: LSRA 
    cpu.m_a >>= 1;

    // 9466: LSRA 
    cpu.m_a >>= 1;

    // 9467: SBCA #$20
    cpu.sub_a_with_carry(0x20);

    // 9469: NEG <$00
    // TODO: Convert NEG <$00

    // 946B: NEGA 
    cpu.m_a = -cpu.m_a;

    // 946C: LSRA 
    cpu.m_a >>= 1;

    // 946D: NEG <$10
    // TODO: Convert NEG <$10

    // 946F: NEG <$00
    // TODO: Convert NEG <$00

    // 9471: NEG <$00
    // TODO: Convert NEG <$00

    // 9473: INC <$00
    cpu.increment_memory(0x00);

    // 9475: ANDA #$81
    cpu.m_a &= 0x81;

    // 9477: BRA $9479
    goto label_9479;

    label_9479:
    // 9479: ASL <$44
    cpu.arithmetic_shift_left(0x44);

    // 947B: LSRA 
    cpu.m_a >>= 1;

    // 947C: SBCA #$20
    cpu.sub_a_with_carry(0x20);

    // 947E: NEG <$08
    // TODO: Convert NEG <$08

    // 9480: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9481: LSRA 
    cpu.m_a >>= 1;

    // 9482: NEG <$10
    // TODO: Convert NEG <$10

    label_9484:
    // 9484: NEG <$00
    // TODO: Convert NEG <$00

    // 9486: NEG <$80
    // TODO: Convert NEG <$80

    // 9488: ASL <$00
    cpu.arithmetic_shift_left(0x00);

    // 948A: NEG <$94
    // TODO: Convert NEG <$94

    // 948C: SUBD <$80
    cpu.m_d -= 0x80;

    // 948E: NEG <$00
    // TODO: Convert NEG <$00

    // 9490: NEG <$94
    // TODO: Convert NEG <$94

    // 9492: DECB 
    cpu.m_b--;

    // 9493: SUBA #$00
    cpu.m_a -= 0x00;

    // 9495: LSRA 
    cpu.m_a >>= 1;

    // 9497: XNC <$08
    // TODO: Convert XNC <$08

    // 9499: NEG <$94
    // TODO: Convert NEG <$94

    // 949B: DECB 
    cpu.m_b--;

    // 949C: SUBA #$00
    cpu.m_a -= 0x00;

    // 949E: NEG <$44
    // TODO: Convert NEG <$44

    // 94A0: NEG <$20
    // TODO: Convert NEG <$20

    // 94A2: NEG <$94
    // TODO: Convert NEG <$94

    // 94A4: DECB 
    cpu.m_b--;

    // 94A5: EORA $5D78
    cpu.m_a ^= cpu.read_memory(0x5D78);

    // 94A8: BVC $94EA
    // TODO: Convert BVC $94EA

    // 94AA: LDD [,U]
    // TODO: Complex indexed addressing: [,U]

    // 94AC: STA $2A89
    cpu.write_memory(0x2A89, cpu.m_a);

    // 94AF: NEG A,U
    // TODO: Convert NEG A,U

    // 94B1: BRA $9437
    goto label_9437;

    // 94B3: MUL 
    // TODO: Convert MUL 

    // 94B4: NEG >$0078
    // TODO: Convert NEG >$0078

    // 94B7: STD [$68EF,W]
    // TODO: Handle indexed addressing: STD [$68EF,W]

    // 94BB: SBCA <$5C
    cpu.sub_a_with_carry(0x5C);

    // 94BD: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94C0: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94C3: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94C6: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94C9: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94CC: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94CF: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94D2: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94D5: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94D8: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94DB: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94DE: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94E1: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94E4: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94E7: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94EA: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94ED: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94F0: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94F3: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94F6: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94F9: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94FC: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 94FF: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 9502: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 9505: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 9508: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 950B: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 950E: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 9511: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 9514: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 9517: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 951A: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 951D: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 9520: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 9523: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // 9526: STU $434F
    cpu.write_memory16(0x434F, cpu.m_u);

    // 9529: NEGB 
    cpu.m_b = -cpu.m_b;

    // 952A: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // 952B: XNCB 
    // TODO: Convert XNCB 

    // 952C: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 952D: ASRA 
    // TODO: Convert ASRA 

    // 952E: ASLA 
    cpu.m_a <<= 1;

    // 952F: LSRB 
    cpu.m_b >>= 1;

    // 9530: BRA $9563
    // TODO: External jump to 0x9563 - not implemented

    // 9532: RTS 
    return;

    // 9533: XANDCC #$33
    // TODO: Convert XANDCC #$33

    // 9535: BRA $9578
    goto label_9578;

    // 9537: LSRB 
    cpu.m_b >>= 1;

    // 9538: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9539: XNCB 
    // TODO: Convert XNCB 

    // 953A: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // 953B: LDA $4592
    cpu.m_a = cpu.read_memory(0x4592);

    // 953E: ANDA #$03
    cpu.m_a &= 0x03;

    // 9540: BEQ $9557
    if (cpu.zero_flag()) cpu.m_pc = 0x9557;

    // 9542: ADDA <$60
    cpu.m_a += 0x60;

    // 9544: STA <$60
    cpu.write_memory(0x60, cpu.m_a);

    // 9546: LDA $4593
    cpu.m_a = cpu.read_memory(0x4593);

    // 9549: ANDA #$03
    cpu.m_a &= 0x03;

    // 954B: ADDA #$06
    cpu.m_a += 0x06;

    // 954D: CMPA <$60
    cpu.compare_a(cpu.read_memory(0x60));

    // 954F: BCC $9553
    if (!cpu.carry_flag()) cpu.m_pc = 0x9553;

    // 9551: STA <$60
    cpu.write_memory(0x60, cpu.m_a);

    // 9553: LDA #$14
    cpu.m_a = 0x14;

    // 9555: STA <$61
    cpu.write_memory(0x61, cpu.m_a);

    // 9557: RTS 
    return;

    label_9558:
    // 9558: JMP $9558
    goto label_9558;

    // 955A: BLE $95A0
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x95A0;

    // 955C: LDA <$8C
    cpu.m_a = cpu.read_memory(0x8C);

    // 955E: BGT $95A0
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x95A0;

    // 9560: LDA #$01
    cpu.m_a = 0x01;

    // 9562: STA <$8C
    cpu.write_memory(0x8C, cpu.m_a);

    // 9564: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // 9566: STA <$8E
    cpu.write_memory(0x8E, cpu.m_a);

    // 9568: LDA #$F6
    cpu.m_a = 0xF6;

    // 956A: ADDA <$60
    cpu.m_a += 0x60;

    // 956C: STA <$8D
    cpu.write_memory(0x8D, cpu.m_a);

    // 956E: DEC <$60
    cpu.decrement_memory(0x60);

    // 9570: BGE $9578
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x9578;

    // 9572: LDA #$FF
    cpu.m_a = 0xFF;

    // 9574: STA <$60
    cpu.write_memory(0x60, cpu.m_a);

    // 9576: CLR <$8C
    cpu.write_memory(0x8C, 0);

    label_9578:
    // 9578: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // 957A: CMPA #$00
    cpu.compare_a(0x00);

    // 957C: BNE $9586
    if (!cpu.zero_flag()) cpu.m_pc = 0x9586;

    // 957E: JSR $BD35
    cpu.call_function(0xBD35);

    // 9581: JSR $BDBC
    cpu.call_function(0xBDBC);

    // 9584: BRA $9599
    goto label_9599;

    // 9586: CMPA #$01
    cpu.compare_a(0x01);

    // 9588: BNE $958F
    if (!cpu.zero_flag()) cpu.m_pc = 0x958F;

    // 958A: JSR $BDDF
    cpu.call_function(0xBDDF);

    // 958D: BRA $9599
    goto label_9599;

    // 958F: CMPA #$02
    cpu.compare_a(0x02);

    // 9591: BNE $9599
    if (!cpu.zero_flag()) cpu.m_pc = 0x9599;

    // 9593: JSR $BD3F
    cpu.call_function(0xBD3F);

    // 9596: JSR $BDE4
    cpu.call_function(0xBDE4);

    label_9599:
    // 9599: CLRB 
    cpu.m_b = 0;

    // 959A: STB <$91
    cpu.write_memory(0x91, cpu.m_b);

    // 959C: STB <$90
    cpu.write_memory(0x90, cpu.m_b);

    // 959E: STB <$8F
    cpu.write_memory(0x8F, cpu.m_b);

    // 95A0: LDA <$61
    cpu.m_a = cpu.read_memory(0x61);

    // 95A2: BEQ $95A6
    if (cpu.zero_flag()) cpu.m_pc = 0x95A6;

    // 95A4: DEC <$61
    cpu.decrement_memory(0x61);

    // 95A6: RTS 
    return;

    // 95A7: LDA <$8C
    cpu.m_a = cpu.read_memory(0x8C);

    // 95A9: BNE $95B2
    if (!cpu.zero_flag()) cpu.m_pc = 0x95B2;

    // 95AB: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // 95AD: BGT $95B2
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x95B2;

    // 95AF: JMP $9604
    goto label_9604;

    // 95B2: LDB <$60
    cpu.m_b = cpu.read_memory(0x60);

    // 95B4: ASLB 
    cpu.m_b <<= 1;

    // 95B5: LDX #$96B6
    cpu.m_x = 0x96B6;

    // 95B8: LDU B,X
    // TODO: Fix comma operator: LDU B,X

    // 95BA: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // 95BC: LDD #$BA03
    cpu.m_d = 0xBA03;

    // 95BF: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 95C1: LDD #$0228
    cpu.m_d = 0x0228;

    // 95C4: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 95C6: LDD #$0000
    cpu.m_d = 0x0000;

    // 95C9: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 95CB: LDA <$8C
    cpu.m_a = cpu.read_memory(0x8C);

    // 95CD: BEQ $95D4
    if (cpu.zero_flag()) cpu.m_pc = 0x95D4;

    // 95CF: JSR $962A
    cpu.call_function(0x962A);

    // 95D2: BRA $95D7
    goto label_95D7;

    // 95D4: JSR $960F
    cpu.call_function(0x960F);

    label_95D7:
    // 95D7: LDD #$1FD0
    cpu.m_d = 0x1FD0;

    // 95DA: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 95DC: LDD #$1FF4
    cpu.m_d = 0x1FF4;

    // 95DF: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 95E1: LDA <$8C
    cpu.m_a = cpu.read_memory(0x8C);

    // 95E3: BLE $95EA
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x95EA;

    // 95E5: LDU #$A018
    cpu.m_u = 0xA018;

    // 95E8: BRA $95F2
    goto label_95F2;

    // 95EA: LDB <$60
    cpu.m_b = cpu.read_memory(0x60);

    // 95EC: ASLB 
    cpu.m_b <<= 1;

    // 95ED: LDX #$96B6
    cpu.m_x = 0x96B6;

    // 95F0: LDU B,X
    // TODO: Fix comma operator: LDU B,X

    label_95F2:
    // 95F2: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // 95F4: CLR <$AD
    cpu.write_memory(0xAD, 0);

    // 95F6: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // 95F8: BGE $95FB
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x95FB;

    // 95FA: CLRA 
    cpu.m_a = 0;

    // 95FB: JSR $E7AD
    cpu.call_function(0xE7AD);

    // 95FE: LDD #$8040
    cpu.m_d = 0x8040;

    // 9601: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 9603: RTS 
    return;

    label_9604:
    // 9604: LDD #$7100
    cpu.m_d = 0x7100;

    // 9607: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 9609: LDB #$0E
    cpu.m_b = 0x0E;

    // 960B: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 960E: RTS 
    return;

    // 960F: LDB <$60
    cpu.m_b = cpu.read_memory(0x60);

    // 9611: ASLB 
    cpu.m_b <<= 1;

    // 9612: LDX #$96B6
    cpu.m_x = 0x96B6;

    // 9615: LDD B,X
    // TODO: Fix comma operator: LDD B,X

    // 9617: TST <$61
    // TODO: Convert TST <$61

    // 9619: BEQ $961D
    if (cpu.zero_flag()) cpu.m_pc = 0x961D;

    // 961B: ORB #$FF
    cpu.m_b |= 0xFF;

    // 961D: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 961F: LDB <$60
    cpu.m_b = cpu.read_memory(0x60);

    // 9621: ASLB 
    cpu.m_b <<= 1;

    // 9622: LDX #$96CA
    cpu.m_x = 0x96CA;

    // 9625: LDU B,X
    // TODO: Fix comma operator: LDU B,X

    // 9627: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // 9629: RTS 
    return;

    // 962A: LDA <$91
    cpu.m_a = cpu.read_memory(0x91);

    // 962C: BNE $964B
    if (!cpu.zero_flag()) cpu.m_pc = 0x964B;

    // 962E: LDU #$A018
    cpu.m_u = 0xA018;

    // 9631: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // 9633: LDB <$8E
    cpu.m_b = cpu.read_memory(0x8E);

    // 9635: ASLB 
    cpu.m_b <<= 1;

    // 9636: LDX #$96CA
    cpu.m_x = 0x96CA;

    // 9639: LDU B,X
    // TODO: Fix comma operator: LDU B,X

    // 963B: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // 963D: LDA <$43
    cpu.m_a = cpu.read_memory(0x43);

    // 963F: ANDA #$00
    cpu.m_a &= 0x00;

    // 9641: BNE $9649
    if (!cpu.zero_flag()) cpu.m_pc = 0x9649;

    // 9643: INC <$8D
    cpu.increment_memory(0x8D);

    // 9645: BLT $9649
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0x9649;

    // 9647: INC <$91
    cpu.increment_memory(0x91);

    // 9649: BRA $96A0
    goto label_96A0;

    // 964B: JSR $96A1
    cpu.call_function(0x96A1);

    // 964E: LDU #$A018
    cpu.m_u = 0xA018;

    // 9651: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // 9653: LDA <$90
    cpu.m_a = cpu.read_memory(0x90);

    // 9655: BNE $9674
    if (!cpu.zero_flag()) cpu.m_pc = 0x9674;

    // 9657: LDB <$8E
    cpu.m_b = cpu.read_memory(0x8E);

    // 9659: ASLB 
    cpu.m_b <<= 1;

    // 965A: LDX #$96DE
    cpu.m_x = 0x96DE;

    // 965D: LDU B,X
    // TODO: Fix comma operator: LDU B,X

    // 965F: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // 9661: LDA <$43
    cpu.m_a = cpu.read_memory(0x43);

    // 9663: ANDA #$00
    cpu.m_a &= 0x00;

    // 9665: BNE $9672
    if (!cpu.zero_flag()) cpu.m_pc = 0x9672;

    // 9667: INC <$90
    cpu.increment_memory(0x90);

    // 9669: LDB <$60
    cpu.m_b = cpu.read_memory(0x60);

    // 966B: LDX #$9718
    cpu.m_x = 0x9718;

    // 966E: LDA B,X
    // TODO: Fix comma operator: LDA B,X

    // 9670: STA <$8D
    cpu.write_memory(0x8D, cpu.m_a);

    // 9672: BRA $96A0
    goto label_96A0;

    // 9674: LDA <$8F
    cpu.m_a = cpu.read_memory(0x8F);

    // 9676: BNE $9690
    if (!cpu.zero_flag()) cpu.m_pc = 0x9690;

    // 9678: LDB <$8D
    cpu.m_b = cpu.read_memory(0x8D);

    // 967A: ASLB 
    cpu.m_b <<= 1;

    // 967B: LDX #$96F2
    cpu.m_x = 0x96F2;

    // 967E: LDU B,X
    // TODO: Fix comma operator: LDU B,X

    // 9680: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // 9682: LDA <$43
    cpu.m_a = cpu.read_memory(0x43);

    // 9684: ANDA #$00
    cpu.m_a &= 0x00;

    // 9686: BNE $968E
    if (!cpu.zero_flag()) cpu.m_pc = 0x968E;

    // 9688: DEC <$8D
    cpu.decrement_memory(0x8D);

    // 968A: BGT $968E
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x968E;

    // 968C: INC <$8F
    cpu.increment_memory(0x8F);

    // 968E: BRA $96A0
    goto label_96A0;

    // 9690: LDA <$43
    cpu.m_a = cpu.read_memory(0x43);

    // 9692: ANDA #$00
    cpu.m_a &= 0x00;

    // 9694: BNE $96A0
    if (!cpu.zero_flag()) cpu.m_pc = 0x96A0;

    // 9696: LDA #$00
    cpu.m_a = 0x00;

    // 9698: STA <$8C
    cpu.write_memory(0x8C, cpu.m_a);

    // 969A: STA <$8B
    cpu.write_memory(0x8B, cpu.m_a);

    // 969C: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // 969E: STA <$8E
    cpu.write_memory(0x8E, cpu.m_a);

    label_96A0:
    // 96A0: RTS 
    return;

    // 96A1: LDB <$60
    cpu.m_b = cpu.read_memory(0x60);

    // 96A3: ASLB 
    cpu.m_b <<= 1;

    // 96A4: LDX #$96B6
    cpu.m_x = 0x96B6;

    // 96A7: LDD B,X
    // TODO: Fix comma operator: LDD B,X

    // 96A9: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 96AB: LDB <$60
    cpu.m_b = cpu.read_memory(0x60);

    // 96AD: ASLB 
    cpu.m_b <<= 1;

    // 96AE: LDX #$96CA
    cpu.m_x = 0x96CA;

    // 96B1: LDU B,X
    // TODO: Fix comma operator: LDU B,X

    // 96B3: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // 96B5: RTS 
    return;

    // 96B6: NEG ,X+
    // TODO: Convert NEG ,X+

    // 96B8: LSR ,X+
    // TODO: Convert LSR ,X+

    // 96BA: LSR ,X+
    // TODO: Convert LSR ,X+

    // 96BC: ROR ,X+
    // TODO: Convert ROR ,X+

    // 96BE: ROR ,X+
    // TODO: Convert ROR ,X+

    // 96C0: XNC ,X+
    // TODO: Convert XNC ,X+

    // 96C2: XNC ,X+
    // TODO: Convert XNC ,X+

    // 96C4: XNC ,X+
    // TODO: Convert XNC ,X+

    // 96C6: XNC ,X+
    // TODO: Convert XNC ,X+

    // 96C8: XNC ,X+
    // TODO: Convert XNC ,X+

    // 96CA: ADDA $E4BB
    cpu.m_a += cpu.read_memory(0xE4BB);

    // 96CD: EORB [D,Y]
    // TODO: Complex indexed addressing: [D,Y]

    // 96CF: LDD [D,Y]
    // TODO: Complex indexed addressing: [D,Y]

    // 96D1: SUBB $BBF4
    cpu.m_b -= cpu.read_memory(0xBBF4);

    // 96D4: ADDA $F8BB
    cpu.m_a += cpu.read_memory(0xF8BB);

    // 96D7: LDD $BC00
    cpu.m_d = cpu.read_memory16(0xBC00);

    // 96DA: CMPX $04BC
    cpu.compare_x(cpu.read_memory16(0x04BC));

    // 96DD: ASL <$BB
    cpu.arithmetic_shift_left(0xBB);

    // 96DF: LDB [D,Y]
    // TODO: Complex indexed addressing: [D,Y]

    // 96E1: ORB [D,Y]
    // TODO: Complex indexed addressing: [D,Y]

    // 96E3: LDU [D,Y]
    // TODO: Complex indexed addressing: [D,Y]

    // 96E5: SBCB $BBF6
    cpu.sub_b_with_carry(cpu.read_memory(0xBBF6));

    // 96E8: ADDA $FABB
    cpu.m_a += cpu.read_memory(0xFABB);

    // 96EB: LDU $BC02
    cpu.m_u = cpu.read_memory16(0xBC02);

    // 96EE: CMPX $06BC
    cpu.compare_x(cpu.read_memory16(0x06BC));

    // 96F1: DEC <$BB
    cpu.decrement_memory(0xBB);

    // 96F3: LDX $BBC0
    cpu.m_x = cpu.read_memory16(0xBBC0);

    // 96F6: ADDA $C2BB
    cpu.m_a += cpu.read_memory(0xC2BB);

    // 96F9: ANDB #$BB
    cpu.m_b &= 0xBB;

    // 96FB: LDB #$BB
    cpu.m_b = 0xBB;

    // 96FD: EORB #$BB
    cpu.m_b ^= 0xBB;

    // 96FF: ORB #$BB
    cpu.m_b |= 0xBB;

    // 9701: LDD #$BBCE
    cpu.m_d = 0xBBCE;

    // 9704: ADDA $D0BB
    cpu.m_a += cpu.read_memory(0xD0BB);

    // 9707: SBCB <$BB
    cpu.sub_b_with_carry(0xBB);

    // 9709: ANDB <$BB
    cpu.m_b &= 0xBB;

    // 970B: LDB <$BB
    cpu.m_b = cpu.read_memory(0xBB);

    // 970D: EORB <$BB
    cpu.m_b ^= 0xBB;

    // 970F: ORB <$BB
    cpu.m_b |= 0xBB;

    // 9711: LDD <$BB
    cpu.m_d = cpu.read_memory16(0xBB);

    // 9713: LDU <$BB
    cpu.m_u = cpu.read_memory16(0xBB);

    // 9715: SUBB [D,Y]
    // TODO: Complex indexed addressing: [D,Y]

    // 9717: SBCB $0,X
    // TODO: Fix comma operator: SBCB $0,X

    // 9719: XNC <$04
    // TODO: Convert XNC <$04

    // 971B: ROR <$08
    // TODO: Convert ROR <$08

    // 971D: DEC <$0C
    cpu.decrement_memory(0x0C);

    // 971F: JMP <$10
    // TODO: Invalid branch offset: <$10

    // 9721: NOP 
    // NOP;

    // 9722: LDA $4B2D
    cpu.m_a = cpu.read_memory(0x4B2D);

    // 9725: BNE $9739
    if (!cpu.zero_flag()) cpu.m_pc = 0x9739;

    // 9727: LDB $4B15
    cpu.m_b = cpu.read_memory(0x4B15);

    // 972A: BEQ $9739
    if (cpu.zero_flag()) cpu.m_pc = 0x9739;

    // 972C: ASLB 
    cpu.m_b <<= 1;

    // 972D: ADDB $4B15
    cpu.m_b += cpu.read_memory(0x4B15);

    // 9730: LDX #$9865
    cpu.m_x = 0x9865;

    // 9733: ABX 
    // TODO: Convert ABX 

    // 9734: TFR X,U
    cpu.m_u = cpu.m_x;

    // 9736: JSR $9810
    cpu.call_function(0x9810);

    // 9739: RTS 
    return;

    // 973A: LDU #$4B2E
    cpu.m_u = 0x4B2E;

    // 973D: JSR $9810
    cpu.call_function(0x9810);

    // 9740: LDX #$9856
    cpu.m_x = 0x9856;

    // 9743: LDA $4B30
    cpu.m_a = cpu.read_memory(0x4B30);

    // 9746: ADDA $2,X
    // TODO: Fix comma operator: ADDA $2,X

    // 9748: DAA 
    // TODO: Convert DAA 

    // 9749: STA $4B30
    cpu.write_memory(0x4B30, cpu.m_a);

    // 974C: LDA $4B2F
    cpu.m_a = cpu.read_memory(0x4B2F);

    // 974F: ADCA $1,X
    // TODO: Fix comma operator: ADCA $1,X

    // 9751: DAA 
    // TODO: Convert DAA 

    // 9752: STA $4B2F
    cpu.write_memory(0x4B2F, cpu.m_a);

    // 9755: LDA $4B2E
    cpu.m_a = cpu.read_memory(0x4B2E);

    // 9758: ADCA ,X
    // TODO: Complex indexed addressing: ,X

    // 975A: DAA 
    // TODO: Convert DAA 

    // 975B: STA $4B2E
    cpu.write_memory(0x4B2E, cpu.m_a);

    // 975E: LDA $4B1A
    cpu.m_a = cpu.read_memory(0x4B1A);

    // 9761: BEQ $9774
    if (cpu.zero_flag()) cpu.m_pc = 0x9774;

    // 9763: ADDA #$99
    cpu.m_a += 0x99;

    // 9765: DAA 
    // TODO: Convert DAA 

    // 9766: STA $4B1A
    cpu.write_memory(0x4B1A, cpu.m_a);

    // 9769: BNE $9774
    if (!cpu.zero_flag()) cpu.m_pc = 0x9774;

    // 976B: LDU #$9862
    cpu.m_u = 0x9862;

    // 976E: JSR $9810
    cpu.call_function(0x9810);

    // 9771: INC $4B35
    cpu.increment_memory(0x4B35);

    // 9774: RTS 
    return;

    // 9775: LDB <$60
    cpu.m_b = cpu.read_memory(0x60);

    // 9777: BEQ $97AB
    if (cpu.zero_flag()) cpu.m_pc = 0x97AB;

    // 9779: LDU #$9865
    cpu.m_u = 0x9865;

    // 977C: LDA #$00
    cpu.m_a = 0x00;

    // 977E: STA $4B29
    cpu.write_memory(0x4B29, cpu.m_a);

    // 9781: STA $4B2A
    cpu.write_memory(0x4B2A, cpu.m_a);

    // 9784: STA $4B2B
    cpu.write_memory(0x4B2B, cpu.m_a);

    // 9787: LDA $2,U
    // TODO: Fix comma operator: LDA $2,U

    // 9789: ADDA $4B2B
    cpu.m_a += cpu.read_memory(0x4B2B);

    // 978C: DAA 
    // TODO: Convert DAA 

    // 978D: STA $4B2B
    cpu.write_memory(0x4B2B, cpu.m_a);

    // 9790: LDA $1,U
    // TODO: Fix comma operator: LDA $1,U

    // 9792: ADCA $4B2A
    cpu.add_a_with_carry(cpu.read_memory(0x4B2A));

    // 9795: DAA 
    // TODO: Convert DAA 

    // 9796: STA $4B2A
    cpu.write_memory(0x4B2A, cpu.m_a);

    // 9799: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // 979B: ADCA $4B29
    cpu.add_a_with_carry(cpu.read_memory(0x4B29));

    // 979E: DAA 
    // TODO: Convert DAA 

    // 979F: STA $4B29
    cpu.write_memory(0x4B29, cpu.m_a);

    // 97A2: DECB 
    cpu.m_b--;

    // 97A3: BNE $9787
    if (!cpu.zero_flag()) cpu.m_pc = 0x9787;

    // 97A5: LDU #$4B29
    cpu.m_u = 0x4B29;

    // 97A8: JSR $9810
    cpu.call_function(0x9810);

    // 97AB: RTS 
    return;

    // 97AC: LDB $4B15
    cpu.m_b = cpu.read_memory(0x4B15);

    // 97AF: CMPB #$05
    cpu.compare_b(0x05);

    // 97B1: BCS $97B8
    if (cpu.carry_flag()) cpu.m_pc = 0x97B8;

    // 97B3: LDU #$9847
    cpu.m_u = 0x9847;

    // 97B6: BRA $97C1
    goto label_97C1;

    // 97B8: ASLB 
    cpu.m_b <<= 1;

    // 97B9: ADDB $4B15
    cpu.m_b += cpu.read_memory(0x4B15);

    // 97BC: LDU #$983B
    cpu.m_u = 0x983B;

    // 97BF: LEAU B,U
    // TODO: Fix comma operator: LEAU B,U

    label_97C1:
    // 97C1: RTS 
    return;

    // 97C2: LDD #$A01A
    cpu.m_d = 0xA01A;

    // 97C5: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 97C7: LDD #$0180
    cpu.m_d = 0x0180;

    // 97CA: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 97CC: LDD #$1EC0
    cpu.m_d = 0x1EC0;

    // 97CF: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 97D1: LDA #$04
    cpu.m_a = 0x04;

    // 97D3: STA <$AD
    cpu.write_memory(0xAD, cpu.m_a);

    // 97D5: JSR $97AC
    cpu.call_function(0x97AC);

    // 97D8: LEAX -$1,U
    // TODO: Fix comma operator: LEAX -$1,U

    // 97DA: JSR $E772
    cpu.call_function(0xE772);

    // 97DD: LDB #$50
    cpu.m_b = 0x50;

    // 97DF: JSR $E7C7
    cpu.call_function(0xE7C7);

    // 97E2: RTS 
    return;

    // 97E3: JSR $97AC
    cpu.call_function(0x97AC);

    // 97E6: BRA $9810
    goto label_9810;

    // 97E8: LDU #$984A
    cpu.m_u = 0x984A;

    // 97EB: BRA $9810
    goto label_9810;

    // 97ED: LDU #$984D
    cpu.m_u = 0x984D;

    // 97F0: BRA $9810
    goto label_9810;

    // 97F2: LDU #$9850
    cpu.m_u = 0x9850;

    // 97F5: BRA $9810
    goto label_9810;

    // 97F7: LDU #$9859
    cpu.m_u = 0x9859;

    // 97FA: BRA $9810
    goto label_9810;

    // 97FC: LDU #$9853
    cpu.m_u = 0x9853;

    // 97FF: BRA $9810
    goto label_9810;

    // 9801: LDU #$985C
    cpu.m_u = 0x985C;

    // 9804: BRA $9810
    goto label_9810;

    // 9806: LDU #$985F
    cpu.m_u = 0x985F;

    // 9809: BRA $9810
    goto label_9810;

    // 980B: LDU #$9862
    cpu.m_u = 0x9862;

    // 980E: BRA $9810
    goto label_9810;

    label_9810:
    // 9810: LDA $2,U
    // TODO: Fix comma operator: LDA $2,U

    // 9812: STA $4B2B
    cpu.write_memory(0x4B2B, cpu.m_a);

    // 9815: ADDA <$5F
    cpu.m_a += 0x5F;

    // 9817: DAA 
    // TODO: Convert DAA 

    // 9818: STA <$5F
    cpu.write_memory(0x5F, cpu.m_a);

    // 981A: LDA $1,U
    // TODO: Fix comma operator: LDA $1,U

    // 981C: STA $4B2A
    cpu.write_memory(0x4B2A, cpu.m_a);

    // 981F: ADCA <$5E
    cpu.add_a_with_carry(0x5E);

    // 9821: DAA 
    // TODO: Convert DAA 

    // 9822: STA <$5E
    cpu.write_memory(0x5E, cpu.m_a);

    // 9824: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // 9826: STA $4B29
    cpu.write_memory(0x4B29, cpu.m_a);

    // 9829: ADCA <$5D
    cpu.add_a_with_carry(0x5D);

    // 982B: DAA 
    // TODO: Convert DAA 

    // 982C: STA <$5D
    cpu.write_memory(0x5D, cpu.m_a);

    // 982E: LDA <$5C
    cpu.m_a = cpu.read_memory(0x5C);

    // 9830: ADCA #$00
    cpu.add_a_with_carry(0x00);

    // 9832: DAA 
    // TODO: Convert DAA 

    // 9833: STA <$5C
    cpu.write_memory(0x5C, cpu.m_a);

    // 9835: LDA #$FF
    cpu.m_a = 0xFF;

    // 9837: STA $4B2C
    cpu.write_memory(0x4B2C, cpu.m_a);

    // 983A: RTS 
    return;

    // 983B: NEG <$50
    // TODO: Convert NEG <$50

    // 983D: NEG <$01
    // TODO: Convert NEG <$01

    // 983F: NEG <$00
    // TODO: Convert NEG <$00

    // 9841: XNC <$50
    // TODO: Convert XNC <$50

    // 9843: NEG <$05
    // TODO: Convert NEG <$05

    // 9845: NEG <$00
    // TODO: Convert NEG <$00

    // 9847: NEG <$00
    // TODO: Convert NEG <$00

    // 984A: NEG <$10
    // TODO: Convert NEG <$10

    // 984C: NEG <$00
    // TODO: Convert NEG <$00

    // 984E: BRA $9850
    goto label_9850;

    label_9850:
    // 9850: NEG <$00
    // TODO: Convert NEG <$00

    // 9852: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9853: NEG <$01
    // TODO: Convert NEG <$01

    // 9855: NEG <$00
    // TODO: Convert NEG <$00

    // 9857: XNC <$00
    // TODO: Convert XNC <$00

    // 9859: NEG <$02
    // TODO: Convert NEG <$02

    // 985B: NEG <$00
    // TODO: Convert NEG <$00

    // 985D: NEG <$33
    // TODO: Convert NEG <$33

    // 985F: XNC <$50
    // TODO: Convert XNC <$50

    // 9861: NEG <$05
    // TODO: Convert NEG <$05

    // 9863: NEG <$00
    // TODO: Convert NEG <$00

    // 9865: NEG <$50
    // TODO: Convert NEG <$50

    // 9867: NEG <$20
    // TODO: Convert NEG <$20

    // 9869: NEG <$00
    // TODO: Convert NEG <$00

    // 986B: NEGA 
    cpu.m_a = -cpu.m_a;

    // 986C: NEG <$00
    // TODO: Convert NEG <$00

    // 986E: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9870: NEG <$80
    // TODO: Convert NEG <$80

    // 9872: NEG <$00
    // TODO: Convert NEG <$00

    // 9874: LDA <$8B
    cpu.m_a = cpu.read_memory(0x8B);

    // 9876: BNE $987E
    if (!cpu.zero_flag()) cpu.m_pc = 0x987E;

    // 9878: LDA #$10
    cpu.m_a = 0x10;

    // 987A: STA <$62
    cpu.write_memory(0x62, cpu.m_a);

    // 987C: INC <$8B
    cpu.increment_memory(0x8B);

    // 987E: RTS 
    return;

    // 987F: LDA <$43
    cpu.m_a = cpu.read_memory(0x43);

    // 9881: ANDA #$03
    cpu.m_a &= 0x03;

    // 9883: STA <$62
    cpu.write_memory(0x62, cpu.m_a);

    // 9885: RTS 
    return;

    // 9886: LDB <$62
    cpu.m_b = cpu.read_memory(0x62);

    // 9888: CMPB #$08
    cpu.compare_b(0x08);

    // 988A: BLS $9890
    // TODO: Convert BLS $9890

    // 988C: LDB #$08
    cpu.m_b = 0x08;

    // 988E: STB <$62
    cpu.write_memory(0x62, cpu.m_b);

    label_9890:
    // 9890: JMP $9890
    goto label_9890;

    // 9892: BEQ $9897
    if (cpu.zero_flag()) cpu.m_pc = 0x9897;

    // 9894: DECB 
    cpu.m_b--;

    // 9895: STB <$62
    cpu.write_memory(0x62, cpu.m_b);

    // 9897: RTS 
    return;

    label_9898:
    // 9898: JMP $9898
    goto label_9898;

    // 989A: ANDA #$00
    cpu.m_a &= 0x00;

    // 989C: BNE $98AF
    if (!cpu.zero_flag()) cpu.m_pc = 0x98AF;

    // 989E: LDX #$4900
    cpu.m_x = 0x4900;

    // 98A1: DEC $6,X
    // TODO: Fix comma operator: DEC $6,X

    // 98A3: BPL $98A7
    if (!cpu.negative_flag()) cpu.m_pc = 0x98A7;

    // 98A5: CLR $6,X
    // TODO: Fix comma operator: CLR $6,X

    // 98A7: LEAX $19,X
    // TODO: Fix comma operator: LEAX $19,X

    // 98AA: CMPX #$494B
    cpu.compare_x(0x494B);

    // 98AD: BCS $98A1
    if (cpu.carry_flag()) cpu.m_pc = 0x98A1;

    // 98AF: RTS 
    return;

    // 98B0: LDB <$62
    cpu.m_b = cpu.read_memory(0x62);

    // 98B2: ANDB #$03
    cpu.m_b &= 0x03;

    // 98B4: BEQ $98CA
    if (cpu.zero_flag()) cpu.m_pc = 0x98CA;

    // 98B6: LDD #$7100
    cpu.m_d = 0x7100;

    // 98B9: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 98BB: LDD #$67FF
    cpu.m_d = 0x67FF;

    // 98BE: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 98C0: LDD #$B9B3
    cpu.m_d = 0xB9B3;

    // 98C3: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 98C5: LDD #$7200
    cpu.m_d = 0x7200;

    // 98C8: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // 98CA: RTS 
    return;

    // 98F3: NEG <$50
    // TODO: Convert NEG <$50

    // 98F6: NEG <$03
    // TODO: Convert NEG <$03

    // 98F8: NEG <$03
    // TODO: Convert NEG <$03

    // 98FA: X18 
    // TODO: Convert X18 

    // 98FB: NEG <$A0
    // TODO: Convert NEG <$A0

    label_98FC:
    // 98FC: SUBA $0,X
    // TODO: Fix comma operator: SUBA $0,X

    // 98FD: JMP $98fc
    goto label_98FC;

    // 98FE: NEG <$03
    // TODO: Convert NEG <$03

    // 9900: LSR <$18
    // TODO: Convert LSR <$18

    // 9902: NEG <$60
    // TODO: Convert NEG <$60

    // 9904: NEG <$01
    // TODO: Convert NEG <$01

    // 9906: XNC <$05
    // TODO: Convert XNC <$05

    // 9908: BRA $990A
    goto label_990A;

    label_990A:
    // 990A: EORA >$0001
    cpu.m_a ^= 0x0001;

    // 990D: XNC <$06
    // TODO: Convert XNC <$06

    // 990F: BRA $9911
    goto label_9911;

    label_9911:
    // 9911: ASLA 
    cpu.m_a <<= 1;

    // 9912: NEG <$01
    // TODO: Convert NEG <$01

    // 9914: XNC <$07
    // TODO: Convert XNC <$07

    // 9916: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9918: SUBB #$00
    cpu.m_b -= 0x00;

    // 991A: COM <$02
    // TODO: Convert COM <$02

    // 991C: ASL <$30
    cpu.arithmetic_shift_left(0x30);

    // 991E: NEG <$00
    // TODO: Convert NEG <$00

    // 9920: NEG <$01
    // TODO: Convert NEG <$01

    // 9922: NEG <$09
    // TODO: Convert NEG <$09

    // 9924: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9926: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9927: NEG <$03
    // TODO: Convert NEG <$03

    // 9929: XNC <$0A
    // TODO: Convert XNC <$0A

    // 992B: XANDCC #$00
    // TODO: Convert XANDCC #$00

    // 992D: EORA <$00
    cpu.m_a ^= 0x00;

    // 992F: NEG <$03
    // TODO: Convert NEG <$03

    // 9931: XDEC <$38
    // TODO: Convert XDEC <$38

    // 9933: NEG <$F0
    // TODO: Convert NEG <$F0

    // 9935: NEG <$01
    // TODO: Convert NEG <$01

    // 9937: NEG <$0C
    // TODO: Convert NEG <$0C

    // 9939: XANDCC #$00
    // TODO: Convert XANDCC #$00

    // 993B: NEG <$01
    // TODO: Convert NEG <$01

    // 993E: NEG <$0D
    // TODO: Convert NEG <$0D

    // 9940: XANDCC #$00
    // TODO: Convert XANDCC #$00

    // 9942: ASL $0,X
    // TODO: Fix comma operator: ASL $0,X

    // 9944: NEG <$03
    // TODO: Convert NEG <$03

    // 9946: JMP <$40
    // TODO: Invalid branch offset: <$40

    // 9948: NEG <$90
    // TODO: Convert NEG <$90

    // 994A: NEG <$03
    // TODO: Convert NEG <$03

    // 994C: COM <$0F
    // TODO: Convert COM <$0F

    // 994E: NEGA 
    cpu.m_a = -cpu.m_a;

    // 994F: NEG <$70
    // TODO: Convert NEG <$70

    // 9951: NEG <$03
    // TODO: Convert NEG <$03

    // 9953: COM <$10
    // TODO: Convert COM <$10

    // 9955: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9956: NEG <$90
    // TODO: Convert NEG <$90

    // 9958: NEG <$01
    // TODO: Convert NEG <$01

    // 995A: NEG <$11
    // TODO: Convert NEG <$11

    // 995C: NEGB 
    cpu.m_b = -cpu.m_b;

    // 995D: NEG <$00
    // TODO: Convert NEG <$00

    // 995F: NEG <$02
    // TODO: Convert NEG <$02

    // 9961: NEG <$12
    // TODO: Convert NEG <$12

    // 9963: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9964: NEG <$70
    // TODO: Convert NEG <$70

    // 9966: NEG <$01
    // TODO: Convert NEG <$01

    // 9968: NEG <$13
    // TODO: Convert NEG <$13

    // 996A: LSRB 
    cpu.m_b >>= 1;

    // 996B: NEG <$E4
    // TODO: Convert NEG <$E4

    // 996D: NEG <$01
    // TODO: Convert NEG <$01

    // 996F: NEG <$14
    // TODO: Convert NEG <$14

    // 9971: LSRB 
    cpu.m_b >>= 1;

    // 9972: NEG <$1C
    // TODO: Convert NEG <$1C

    // 9974: NEG <$01
    // TODO: Convert NEG <$01

    // 9976: NEG <$15
    // TODO: Convert NEG <$15

    // 9978: ASLB 
    cpu.m_b <<= 1;

    // 9979: NEG <$C0
    // TODO: Convert NEG <$C0

    // 997B: NEG <$01
    // TODO: Convert NEG <$01

    // 997D: NEG <$16
    // TODO: Convert NEG <$16

    // 997F: ASLB 
    cpu.m_b <<= 1;

    // 9980: NEG <$40
    // TODO: Convert NEG <$40

    // 9982: NEG <$01
    // TODO: Convert NEG <$01

    // 9984: NEG <$17
    // TODO: Convert NEG <$17

    // 9986: ASL $0,X
    // TODO: Fix comma operator: ASL $0,X

    // 9988: EORB <$00
    cpu.m_b ^= 0x00;

    // 998A: NEG <$00
    // TODO: Convert NEG <$00

    // 998C: X18 
    // TODO: Convert X18 

    // 998D: ASL $0,X
    // TODO: Fix comma operator: ASL $0,X

    // 998F: BVC $9991
    // TODO: Convert BVC $9991

    // 9991: NEG <$00
    // TODO: Convert NEG <$00

    // 9993: DAA 
    // TODO: Convert DAA 

    // 9994: NEG >$00F0
    // TODO: Convert NEG >$00F0

    // 9997: NEG <$02
    // TODO: Convert NEG <$02

    // 9999: XNC <$1A
    // TODO: Convert XNC <$1A

    // 999B: NEG >$0010
    // TODO: Convert NEG >$0010

    // 999E: NEG <$02
    // TODO: Convert NEG <$02

    // 99A0: XNC <$1B
    // TODO: Convert XNC <$1B

    // 99A2: SUBA #$00
    cpu.m_a -= 0x00;

    // 99A4: SUBA <$00
    cpu.m_a -= 0x00;

    // 99A6: NEG <$03
    // TODO: Convert NEG <$03

    // 99A8: ANDCC #$80
    // TODO: Convert ANDCC #$80

    // 99AA: NEG <$D8
    // TODO: Convert NEG <$D8

    // 99AC: NEG <$01
    // TODO: Convert NEG <$01

    // 99AE: NEG <$1D
    // TODO: Convert NEG <$1D

    // 99B0: SUBA #$00
    cpu.m_a -= 0x00;

    // 99B2: BVC $99B4
    // TODO: Convert BVC $99B4

    // 99B4: NEG <$00
    // TODO: Convert NEG <$00

    // 99B6: EXG A,D
    // TODO: Convert EXG A,D

    // 99B8: NEG <$70
    // TODO: Convert NEG <$70

    // 99BA: NEG <$01
    // TODO: Convert NEG <$01

    // 99BC: XNC <$1F
    // TODO: Convert XNC <$1F

    // 99BE: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 99C0: EORA #$00
    cpu.m_a ^= 0x00;

    // 99C2: NEG <$02
    // TODO: Convert NEG <$02

    // 99C4: NEG <$30
    // TODO: Convert NEG <$30

    // 99C6: NEG <$98
    // TODO: Convert NEG <$98

    // 99C8: NEG <$03
    // TODO: Convert NEG <$03

    // 99CA: XNC <$01
    // TODO: Convert XNC <$01

    // 99CC: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 99CE: EORA $0,X
    // TODO: Fix comma operator: EORA $0,X

    // 99D0: COM <$02
    // TODO: Convert COM <$02

    // 99D2: XNC <$30
    // TODO: Convert XNC <$30

    // 99D4: NEG <$B8
    // TODO: Convert NEG <$B8

    // 99D6: NEG <$01
    // TODO: Convert NEG <$01

    // 99D8: XNC <$03
    // TODO: Convert XNC <$03

    // 99DA: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 99DC: EORB $0,X
    // TODO: Fix comma operator: EORB $0,X

    // 99DE: NEG <$00
    // TODO: Convert NEG <$00

    // 99E0: LSR <$30
    // TODO: Convert LSR <$30

    // 99E2: NEG <$F8
    // TODO: Convert NEG <$F8

    // 99E4: NEG <$03
    // TODO: Convert NEG <$03

    // 99E6: NEG <$05
    // TODO: Convert NEG <$05

    // 99E8: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 99EA: ASL <$00
    cpu.arithmetic_shift_left(0x00);

    // 99EC: COM <$00
    // TODO: Convert COM <$00

    // 99EE: ROR <$30
    // TODO: Convert ROR <$30

    // 99F0: NEG <$18
    // TODO: Convert NEG <$18

    // 99F2: NEG <$01
    // TODO: Convert NEG <$01

    // 99F4: NEG <$07
    // TODO: Convert NEG <$07

    // 99F6: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 99F8: ASLA 
    cpu.m_a <<= 1;

    // 99F9: NEG <$01
    // TODO: Convert NEG <$01

    // 99FB: COM <$08
    // TODO: Convert COM <$08

    // 99FD: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 99FF: ASLB 
    cpu.m_b <<= 1;

    // 9A00: NEG <$03
    // TODO: Convert NEG <$03

    // 9A02: COM <$09
    // TODO: Convert COM <$09

    // 9A04: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9A06: ASL $0,X
    // TODO: Fix comma operator: ASL $0,X

    // 9A08: COM <$03
    // TODO: Convert COM <$03

    // 9A0A: DEC <$30
    cpu.decrement_memory(0x30);

    // 9A0C: NEG <$78
    // TODO: Convert NEG <$78

    // 9A0E: NEG <$01
    // TODO: Convert NEG <$01

    // 9A10: COM <$0B
    // TODO: Convert COM <$0B

    // 9A12: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9A13: NEG <$90
    // TODO: Convert NEG <$90

    // 9A15: NEG <$01
    // TODO: Convert NEG <$01

    // 9A17: XNC <$0C
    // TODO: Convert XNC <$0C

    // 9A19: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9A1A: NEG <$A0
    // TODO: Convert NEG <$A0

    // 9A1C: NEG <$03
    // TODO: Convert NEG <$03

    // 9A1E: XNC <$0D
    // TODO: Convert XNC <$0D

    // 9A20: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9A21: NEG <$B0
    // TODO: Convert NEG <$B0

    // 9A23: NEG <$01
    // TODO: Convert NEG <$01

    // 9A25: XNC <$0E
    // TODO: Convert XNC <$0E

    // 9A27: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9A28: NEG <$F0
    // TODO: Convert NEG <$F0

    // 9A2A: NEG <$01
    // TODO: Convert NEG <$01

    // 9A2C: NEG <$0F
    // TODO: Convert NEG <$0F

    // 9A2E: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9A2F: NEG <$10
    // TODO: Convert NEG <$10

    // 9A31: NEG <$01
    // TODO: Convert NEG <$01

    // 9A33: NEG <$10
    // TODO: Convert NEG <$10

    // 9A35: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9A36: NEG <$50
    // TODO: Convert NEG <$50

    // 9A38: NEG <$01
    // TODO: Convert NEG <$01

    // 9A3A: COM <$11
    // TODO: Convert COM <$11

    // 9A3C: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9A3D: NEG <$60
    // TODO: Convert NEG <$60

    // 9A3F: NEG <$03
    // TODO: Convert NEG <$03

    // 9A41: COM <$12
    // TODO: Convert COM <$12

    // 9A43: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9A44: NEG <$70
    // TODO: Convert NEG <$70

    // 9A46: NEG <$01
    // TODO: Convert NEG <$01

    // 9A48: COM <$13
    // TODO: Convert COM <$13

    // 9A4A: LSRB 
    cpu.m_b >>= 1;

    // 9A4B: NEG <$CC
    // TODO: Convert NEG <$CC

    // 9A4D: NEG <$03
    // TODO: Convert NEG <$03

    // 9A4F: NEG <$14
    // TODO: Convert NEG <$14

    // 9A51: LSRB 
    cpu.m_b >>= 1;

    // 9A52: NEG <$34
    // TODO: Convert NEG <$34

    // 9A54: NEG <$03
    // TODO: Convert NEG <$03

    // 9A56: NEG <$15
    // TODO: Convert NEG <$15

    // 9A58: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9A5A: SUBA $0,X
    // TODO: Fix comma operator: SUBA $0,X

    // 9A5C: NEG <$01
    // TODO: Convert NEG <$01

    // 9A5E: LBRA $FA61
    // TODO: Convert LBRA $FA61

    // 9A61: SUBB $0,X
    // TODO: Fix comma operator: SUBB $0,X

    // 9A63: COM <$00
    // TODO: Convert COM <$00

    // 9A65: LBSR $FA68
    // TODO: Convert LBSR $FA68

    // 9A68: BRA $9A6A
    goto label_9A6A;

    label_9A6A:
    // 9A6A: COM <$00
    // TODO: Convert COM <$00

    // 9A6C: X18 
    // TODO: Convert X18 

    // 9A6D: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9A6F: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9A71: NEG <$01
    // TODO: Convert NEG <$01

    // 9A73: DAA 
    // TODO: Convert DAA 

    // 9A74: LSR >$00E0
    // TODO: Convert LSR >$00E0

    // 9A77: NEG <$01
    // TODO: Convert NEG <$01

    // 9A79: NEG <$1A
    // TODO: Convert NEG <$1A

    // 9A7B: LSR >$0020
    // TODO: Convert LSR >$0020

    // 9A7E: NEG <$01
    // TODO: Convert NEG <$01

    // 9A80: NEG <$1B
    // TODO: Convert NEG <$1B

    // 9A82: SUBA #$00
    cpu.m_a -= 0x00;

    // 9A84: EORA <$00
    cpu.m_a ^= 0x00;

    // 9A86: NEG <$02
    // TODO: Convert NEG <$02

    // 9A88: ANDCC #$80
    // TODO: Convert ANDCC #$80

    // 9A8A: NEG <$B8
    // TODO: Convert NEG <$B8

    // 9A8C: NEG <$01
    // TODO: Convert NEG <$01

    // 9A8E: XNC <$1D
    // TODO: Convert XNC <$1D

    // 9A90: SUBA #$00
    cpu.m_a -= 0x00;

    // 9A92: ASLA 
    cpu.m_a <<= 1;

    // 9A93: NEG <$01
    // TODO: Convert NEG <$01

    // 9A95: COM <$1E
    // TODO: Convert COM <$1E

    // 9A97: SUBA #$00
    cpu.m_a -= 0x00;

    // 9A99: ASL $0,X
    // TODO: Fix comma operator: ASL $0,X

    // 9A9B: NEG <$03
    // TODO: Convert NEG <$03

    // 9A9D: TFR D,S
    cpu.m_sp = cpu.m_d;

    // 9A9F: NEG <$30
    // TODO: Convert NEG <$30

    // 9AA1: NEG <$03
    // TODO: Convert NEG <$03

    // 9AA3: NEG <$00
    // TODO: Convert NEG <$00

    // 9AA5: INC <$00
    cpu.increment_memory(0x00);

    // 9AA7: BRA $9AA9
    goto label_9AA9;

    label_9AA9:
    // 9AA9: COM <$00
    // TODO: Convert COM <$00

    // 9AAB: NEG <$10
    // TODO: Convert NEG <$10

    // 9AAD: NEG <$98
    // TODO: Convert NEG <$98

    // 9AAF: NEG <$03
    // TODO: Convert NEG <$03

    // 9AB1: NEG <$02
    // TODO: Convert NEG <$02

    // 9AB3: XHCF 
    // TODO: Convert XHCF 

    // 9AB4: NEG <$48
    // TODO: Convert NEG <$48

    // 9AB6: NEG <$03
    // TODO: Convert NEG <$03

    // 9AB8: NEG <$03
    // TODO: Convert NEG <$03

    // 9ABA: X18 
    // TODO: Convert X18 

    // 9ABB: NEG <$B0
    // TODO: Convert NEG <$B0

    // 9ABD: NEG <$03
    // TODO: Convert NEG <$03

    // 9ABF: COM <$04
    // TODO: Convert COM <$04

    // 9AC1: X18 
    // TODO: Convert X18 

    // 9AC2: NEG <$D0
    // TODO: Convert NEG <$D0

    // 9AC4: NEG <$03
    // TODO: Convert NEG <$03

    // 9AC6: NEG <$05
    // TODO: Convert NEG <$05

    // 9AC8: BRA $9ACA
    goto label_9ACA;

    label_9ACA:
    // 9ACA: SUBB #$00
    cpu.m_b -= 0x00;

    // 9ACC: COM <$01
    // TODO: Convert COM <$01

    // 9ACE: ROR <$24
    // TODO: Convert ROR <$24

    // 9AD0: NEG <$38
    // TODO: Convert NEG <$38

    // 9AD2: NEG <$03
    // TODO: Convert NEG <$03

    // 9AD4: XNC <$07
    // TODO: Convert XNC <$07

    // 9AD6: BCC $9AD8
    if (!cpu.carry_flag()) cpu.m_pc = 0x9AD8;

    // 9AD8: NEG >$0003
    // TODO: Convert NEG >$0003

    // 9ADB: XNC <$08
    // TODO: Convert XNC <$08

    // 9ADD: BVC $9ADF
    // TODO: Convert BVC $9ADF

    // 9ADF: NEG <$00
    // TODO: Convert NEG <$00

    // 9AE1: COM <$00
    // TODO: Convert COM <$00

    // 9AE3: ROL <$30
    cpu.rotate_left(0x30);

    // 9AE5: NEG <$88
    // TODO: Convert NEG <$88

    // 9AE7: NEG <$03
    // TODO: Convert NEG <$03

    // 9AE9: NEG <$0A
    // TODO: Convert NEG <$0A

    // 9AEB: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9AEC: NEG <$80
    // TODO: Convert NEG <$80

    // 9AEE: NEG <$03
    // TODO: Convert NEG <$03

    // 9AF0: NEG <$0B
    // TODO: Convert NEG <$0B

    // 9AF2: LSRA 
    cpu.m_a >>= 1;

    // 9AF3: NEG <$60
    // TODO: Convert NEG <$60

    // 9AF5: NEG <$03
    // TODO: Convert NEG <$03

    // 9AF7: XNC <$0C
    // TODO: Convert XNC <$0C

    // 9AF9: ASLA 
    cpu.m_a <<= 1;

    // 9AFA: NEG <$90
    // TODO: Convert NEG <$90

    // 9AFC: NEG <$03
    // TODO: Convert NEG <$03

    // 9AFE: NEG <$0D
    // TODO: Convert NEG <$0D

    // 9B00: ASLA 
    cpu.m_a <<= 1;

    // 9B01: NEG <$A8
    // TODO: Convert NEG <$A8

    // 9B03: NEG <$03
    // TODO: Convert NEG <$03

    // 9B05: COM <$0E
    // TODO: Convert COM <$0E

    // 9B07: INCA 
    cpu.m_a++;

    // 9B08: NEG <$50
    // TODO: Convert NEG <$50

    // 9B0A: NEG <$03
    // TODO: Convert NEG <$03

    // 9B0C: XNC <$0F
    // TODO: Convert XNC <$0F

    // 9B0E: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9B0F: NEG <$E0
    // TODO: Convert NEG <$E0

    // 9B11: NEG <$03
    // TODO: Convert NEG <$03

    // 9B13: COM <$10
    // TODO: Convert COM <$10

    // 9B15: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9B16: NEG <$00
    // TODO: Convert NEG <$00

    // 9B18: NEG <$03
    // TODO: Convert NEG <$03

    // 9B1A: XNC <$11
    // TODO: Convert XNC <$11

    // 9B1C: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9B1D: NEG <$28
    // TODO: Convert NEG <$28

    // 9B1F: NEG <$03
    // TODO: Convert NEG <$03

    // 9B21: NEG <$12
    // TODO: Convert NEG <$12

    // 9B23: ASL $0,X
    // TODO: Fix comma operator: ASL $0,X

    // 9B25: EORA >$0003
    cpu.m_a ^= 0x0003;

    // 9B28: COM <$13
    // TODO: Convert COM <$13

    // 9B2A: ASL $0,X
    // TODO: Fix comma operator: ASL $0,X

    // 9B2C: EORB <$00
    cpu.m_b ^= 0x00;

    // 9B2E: COM <$00
    // TODO: Convert COM <$00

    // 9B30: XHCF 
    // TODO: Convert XHCF 

    // 9B31: NEG >$00A0
    // TODO: Convert NEG >$00A0

    // 9B34: NEG <$03
    // TODO: Convert NEG <$03

    // 9B36: COM <$15
    // TODO: Convert COM <$15

    // 9B38: NEG >$00E8
    // TODO: Convert NEG >$00E8

    // 9B3B: NEG <$03
    // TODO: Convert NEG <$03

    // 9B3D: NEG <$16
    // TODO: Convert NEG <$16

    // 9B3F: NEG >$0018
    // TODO: Convert NEG >$0018

    // 9B42: NEG <$03
    // TODO: Convert NEG <$03

    // 9B44: COM <$17
    // TODO: Convert COM <$17

    // 9B46: NEG >$0058
    // TODO: Convert NEG >$0058

    // 9B49: NEG <$03
    // TODO: Convert NEG <$03

    // 9B4B: COM <$18
    // TODO: Convert COM <$18

    // 9B4D: ASL >$00F8
    cpu.arithmetic_shift_left(0x00F8);

    // 9B50: NEG <$03
    // TODO: Convert NEG <$03

    // 9B52: NEG <$19
    // TODO: Convert NEG <$19

    // 9B54: ASL >$0040
    cpu.arithmetic_shift_left(0x0040);

    // 9B57: NEG <$03
    // TODO: Convert NEG <$03

    // 9B59: XNC <$1A
    // TODO: Convert XNC <$1A

    // 9B5B: ASL >$0068
    cpu.arithmetic_shift_left(0x0068);

    // 9B5E: NEG <$03
    // TODO: Convert NEG <$03

    // 9B60: XNC <$1B
    // TODO: Convert XNC <$1B

    // 9B62: NEG <$00
    // TODO: Convert NEG <$00

    // 9B64: SUBA <$00
    cpu.m_a -= 0x00;

    // 9B66: NEG <$00
    // TODO: Convert NEG <$00

    // 9B68: NEG <$00
    // TODO: Convert NEG <$00

    // 9B6A: NEG <$B0
    // TODO: Convert NEG <$B0

    // 9B6C: NEG <$01
    // TODO: Convert NEG <$01

    // 9B6E: NEG <$01
    // TODO: Convert NEG <$01

    // 9B70: NEG <$00
    // TODO: Convert NEG <$00

    // 9B72: SUBB <$00
    cpu.m_b -= 0x00;

    // 9B74: NEG <$00
    // TODO: Convert NEG <$00

    // 9B76: XNC <$00
    // TODO: Convert XNC <$00

    // 9B78: NEG <$F0
    // TODO: Convert NEG <$F0

    // 9B7A: NEG <$01
    // TODO: Convert NEG <$01

    // 9B7C: NEG <$03
    // TODO: Convert NEG <$03

    // 9B7E: NEG <$00
    // TODO: Convert NEG <$00

    // 9B80: NEG <$01
    // TODO: Convert NEG <$01

    // 9B83: NEG <$04
    // TODO: Convert NEG <$04

    // 9B85: NEG <$00
    // TODO: Convert NEG <$00

    // 9B87: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9B89: NEG <$00
    // TODO: Convert NEG <$00

    // 9B8B: LSR <$00
    // TODO: Convert LSR <$00

    // 9B8D: NEG <$50
    // TODO: Convert NEG <$50

    // 9B8F: NEG <$01
    // TODO: Convert NEG <$01

    // 9B91: NEG <$06
    // TODO: Convert NEG <$06

    // 9B93: NEG <$00
    // TODO: Convert NEG <$00

    // 9B95: NEG >$0001
    // TODO: Convert NEG >$0001

    // 9B98: NEG <$07
    // TODO: Convert NEG <$07

    // 9B9A: NEG <$C8
    // TODO: Convert NEG <$C8

    // 9B9D: NEG <$01
    // TODO: Convert NEG <$01

    // 9B9F: XNC <$08
    // TODO: Convert XNC <$08

    // 9BA1: BVC $9BA3
    // TODO: Convert BVC $9BA3

    // 9BA3: SUBB #$00
    cpu.m_b -= 0x00;

    // 9BA5: NEG <$02
    // TODO: Convert NEG <$02

    // 9BA7: ROL <$30
    cpu.rotate_left(0x30);

    // 9BA9: NEG <$88
    // TODO: Convert NEG <$88

    // 9BAB: NEG <$01
    // TODO: Convert NEG <$01

    // 9BAD: XNC <$0A
    // TODO: Convert XNC <$0A

    // 9BAF: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9BB1: EORA $0,X
    // TODO: Fix comma operator: EORA $0,X

    // 9BB3: NEG <$02
    // TODO: Convert NEG <$02

    // 9BB5: XDEC <$30
    // TODO: Convert XDEC <$30

    // 9BB7: NEG <$48
    // TODO: Convert NEG <$48

    // 9BB9: NEG <$01
    // TODO: Convert NEG <$01

    // 9BBB: XNC <$0C
    // TODO: Convert XNC <$0C

    // 9BBD: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9BBF: ASL $0,X
    // TODO: Fix comma operator: ASL $0,X

    // 9BC1: NEG <$02
    // TODO: Convert NEG <$02

    // 9BC3: TST <$40
    // TODO: Convert TST <$40

    // 9BC5: NEG <$A0
    // TODO: Convert NEG <$A0

    // 9BC7: NEG <$01
    // TODO: Convert NEG <$01

    // 9BC9: COM <$0E
    // TODO: Convert COM <$0E

    // 9BCB: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9BCC: NEG <$40
    // TODO: Convert NEG <$40

    // 9BCE: NEG <$01
    // TODO: Convert NEG <$01

    // 9BD0: XNC <$0F
    // TODO: Convert XNC <$0F

    // 9BD2: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9BD3: NEG <$60
    // TODO: Convert NEG <$60

    // 9BD5: NEG <$01
    // TODO: Convert NEG <$01

    // 9BD7: COM <$10
    // TODO: Convert COM <$10

    // 9BD9: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9BDA: NEG <$80
    // TODO: Convert NEG <$80

    // 9BDC: NEG <$01
    // TODO: Convert NEG <$01

    // 9BDE: COM <$11
    // TODO: Convert COM <$11

    // 9BE0: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9BE2: NEG <$00
    // TODO: Convert NEG <$00

    // 9BE4: NEG <$03
    // TODO: Convert NEG <$03

    // 9BE6: NOP 
    // NOP;

    // 9BE7: ASL $0,X
    // TODO: Fix comma operator: ASL $0,X

    // 9BE9: ANDA #$00
    cpu.m_a &= 0x00;

    // 9BEB: NEG <$03
    // TODO: Convert NEG <$03

    // 9BED: SYNC 
    // TODO: Convert SYNC 

    // 9BEE: NEG >$0098
    // TODO: Convert NEG >$0098

    // 9BF1: NEG <$01
    // TODO: Convert NEG <$01

    // 9BF3: NEG <$14
    // TODO: Convert NEG <$14

    // 9BF5: NEG >$00B8
    // TODO: Convert NEG >$00B8

    // 9BF8: NEG <$01
    // TODO: Convert NEG <$01

    // 9BFA: NEG <$15
    // TODO: Convert NEG <$15

    // 9BFC: NEG >$00D8
    // TODO: Convert NEG >$00D8

    // 9BFF: NEG <$01
    // TODO: Convert NEG <$01

    // 9C01: NEG <$16
    // TODO: Convert NEG <$16

    // 9C03: NEG >$00F8
    // TODO: Convert NEG >$00F8

    // 9C06: NEG <$01
    // TODO: Convert NEG <$01

    // 9C08: NEG <$17
    // TODO: Convert NEG <$17

    // 9C0A: NEG >$0018
    // TODO: Convert NEG >$0018

    // 9C0D: NEG <$01
    // TODO: Convert NEG <$01

    // 9C0F: NEG <$18
    // TODO: Convert NEG <$18

    // 9C11: NEG >$0038
    // TODO: Convert NEG >$0038

    // 9C14: NEG <$01
    // TODO: Convert NEG <$01

    // 9C16: NEG <$19
    // TODO: Convert NEG <$19

    // 9C18: NEG >$0058
    // TODO: Convert NEG >$0058

    // 9C1B: NEG <$01
    // TODO: Convert NEG <$01

    // 9C1D: NEG <$1A
    // TODO: Convert NEG <$1A

    // 9C1F: NEG >$0078
    // TODO: Convert NEG >$0078

    // 9C22: NEG <$01
    // TODO: Convert NEG <$01

    // 9C24: NEG <$1B
    // TODO: Convert NEG <$1B

    // 9C26: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9C28: EORB $0,X
    // TODO: Fix comma operator: EORB $0,X

    // 9C2A: NEG <$02
    // TODO: Convert NEG <$02

    // 9C2C: ANDCC #$30
    // TODO: Convert ANDCC #$30

    // 9C2E: NEG <$08
    // TODO: Convert NEG <$08

    // 9C30: NEG <$01
    // TODO: Convert NEG <$01

    // 9C32: XNC <$1D
    // TODO: Convert XNC <$1D

    // 9C34: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9C35: NEG <$F8
    // TODO: Convert NEG <$F8

    // 9C37: NEG <$01
    // TODO: Convert NEG <$01

    // 9C39: COM <$1E
    // TODO: Convert COM <$1E

    // 9C3B: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9C3C: NEG <$18
    // TODO: Convert NEG <$18

    // 9C3E: NEG <$01
    // TODO: Convert NEG <$01

    // 9C40: COM <$1F
    // TODO: Convert COM <$1F

    // 9C42: ASL <$00
    cpu.arithmetic_shift_left(0x00);

    // 9C44: EORA $0,X
    // TODO: Fix comma operator: EORA $0,X

    // 9C46: COM <$02
    // TODO: Convert COM <$02

    // 9C48: NEG <$08
    // TODO: Convert NEG <$08

    // 9C4A: NEG <$58
    // TODO: Convert NEG <$58

    // 9C4C: NEG <$03
    // TODO: Convert NEG <$03

    // 9C4E: XNC <$01
    // TODO: Convert XNC <$01

    // 9C50: INC <$00
    cpu.increment_memory(0x00);

    // 9C52: EORB $0,X
    // TODO: Fix comma operator: EORB $0,X

    // 9C54: NEG <$00
    // TODO: Convert NEG <$00

    // 9C56: XNC <$0C
    // TODO: Convert XNC <$0C

    // 9C58: NEG <$18
    // TODO: Convert NEG <$18

    // 9C5A: NEG <$01
    // TODO: Convert NEG <$01

    // 9C5C: NEG <$03
    // TODO: Convert NEG <$03

    // 9C5E: XHCF 
    // TODO: Convert XHCF 

    // 9C5F: NEG <$C4
    // TODO: Convert NEG <$C4

    // 9C61: NEG <$01
    // TODO: Convert NEG <$01

    // 9C63: NEG <$04
    // TODO: Convert NEG <$04

    // 9C65: XHCF 
    // TODO: Convert XHCF 

    // 9C66: NEG <$3C
    // TODO: Convert NEG <$3C

    // 9C68: NEG <$01
    // TODO: Convert NEG <$01

    // 9C6A: NEG <$05
    // TODO: Convert NEG <$05

    // 9C6C: BVC $9C6E
    // TODO: Convert BVC $9C6E

    // 9C6E: EORA $0,X
    // TODO: Fix comma operator: EORA $0,X

    // 9C70: NEG <$02
    // TODO: Convert NEG <$02

    // 9C72: ROR <$28
    // TODO: Convert ROR <$28

    // 9C74: NEG <$58
    // TODO: Convert NEG <$58

    // 9C76: NEG <$01
    // TODO: Convert NEG <$01

    // 9C78: XNC <$07
    // TODO: Convert XNC <$07

    // 9C7A: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9C7C: NEG <$00
    // TODO: Convert NEG <$00

    // 9C7E: COM <$00
    // TODO: Convert COM <$00

    // 9C80: ASL <$38
    cpu.arithmetic_shift_left(0x38);

    // 9C82: NEG <$E0
    // TODO: Convert NEG <$E0

    // 9C84: NEG <$01
    // TODO: Convert NEG <$01

    // 9C86: NEG <$09
    // TODO: Convert NEG <$09

    // 9C88: XANDCC #$00
    // TODO: Convert XANDCC #$00

    // 9C8A: BRA $9C8C
    goto label_9C8C;

    label_9C8C:
    // 9C8C: NEG <$00
    // TODO: Convert NEG <$00

    // 9C8E: DEC <$48
    cpu.decrement_memory(0x48);

    // 9C90: NEG <$C0
    // TODO: Convert NEG <$C0

    // 9C92: NEG <$01
    // TODO: Convert NEG <$01

    // 9C94: COM <$0B
    // TODO: Convert COM <$0B

    // 9C96: ASLA 
    cpu.m_a <<= 1;

    // 9C97: NEG <$40
    // TODO: Convert NEG <$40

    // 9C99: NEG <$01
    // TODO: Convert NEG <$01

    // 9C9B: COM <$0C
    // TODO: Convert COM <$0C

    // 9C9D: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9C9E: NEG <$90
    // TODO: Convert NEG <$90

    // 9CA0: NEG <$01
    // TODO: Convert NEG <$01

    // 9CA2: COM <$0D
    // TODO: Convert COM <$0D

    // 9CA4: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9CA5: NEG <$D8
    // TODO: Convert NEG <$D8

    // 9CA7: NEG <$03
    // TODO: Convert NEG <$03

    // 9CA9: NEG <$0E
    // TODO: Convert NEG <$0E

    // 9CAB: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9CAC: NEG <$28
    // TODO: Convert NEG <$28

    // 9CAE: NEG <$03
    // TODO: Convert NEG <$03

    // 9CB0: NEG <$0F
    // TODO: Convert NEG <$0F

    // 9CB2: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9CB3: NEG <$70
    // TODO: Convert NEG <$70

    // 9CB5: NEG <$01
    // TODO: Convert NEG <$01

    // 9CB7: XNC <$10
    // TODO: Convert XNC <$10

    // 9CB9: ASLB 
    cpu.m_b <<= 1;

    // 9CBA: NEG <$F0
    // TODO: Convert NEG <$F0

    // 9CBC: NEG <$03
    // TODO: Convert NEG <$03

    // 9CBE: XNC <$11
    // TODO: Convert XNC <$11

    // 9CC0: ASLB 
    cpu.m_b <<= 1;

    // 9CC1: NEG <$10
    // TODO: Convert NEG <$10

    // 9CC3: NEG <$03
    // TODO: Convert NEG <$03

    // 9CC5: XNC <$12
    // TODO: Convert XNC <$12

    // 9CC7: ASL $0,X
    // TODO: Fix comma operator: ASL $0,X

    // 9CC9: EORA >$0001
    cpu.m_a ^= 0x0001;

    // 9CCC: NEG <$13
    // TODO: Convert NEG <$13

    // 9CCE: ASL $0,X
    // TODO: Fix comma operator: ASL $0,X

    // 9CD0: ASLA 
    cpu.m_a <<= 1;

    // 9CD1: NEG <$01
    // TODO: Convert NEG <$01

    // 9CD3: NEG <$14
    // TODO: Convert NEG <$14

    // 9CD5: NEG >$0088
    // TODO: Convert NEG >$0088

    // 9CD8: NEG <$01
    // TODO: Convert NEG <$01

    // 9CDA: COM <$15
    // TODO: Convert COM <$15

    // 9CDC: NEG >$00A0
    // TODO: Convert NEG >$00A0

    // 9CDF: NEG <$01
    // TODO: Convert NEG <$01

    // 9CE1: NEG <$16
    // TODO: Convert NEG <$16

    // 9CE3: NEG >$00D0
    // TODO: Convert NEG >$00D0

    // 9CE6: NEG <$01
    // TODO: Convert NEG <$01

    // 9CE8: COM <$17
    // TODO: Convert COM <$17

    // 9CEA: NEG >$0000
    // TODO: Convert NEG >$0000

    // 9CED: NEG <$01
    // TODO: Convert NEG <$01

    // 9CEF: NEG <$18
    // TODO: Convert NEG <$18

    // 9CF1: NEG >$0030
    // TODO: Convert NEG >$0030

    // 9CF4: NEG <$01
    // TODO: Convert NEG <$01

    // 9CF6: COM <$19
    // TODO: Convert COM <$19

    // 9CF8: NEG >$0060
    // TODO: Convert NEG >$0060

    // 9CFB: NEG <$01
    // TODO: Convert NEG <$01

    // 9CFD: NEG <$1A
    // TODO: Convert NEG <$1A

    // 9CFF: NEG >$0078
    // TODO: Convert NEG >$0078

    // 9D02: NEG <$01
    // TODO: Convert NEG <$01

    // 9D04: COM <$1B
    // TODO: Convert COM <$1B

    // 9D06: SUBA #$00
    cpu.m_a -= 0x00;

    // 9D08: SUBA >$0001
    cpu.m_a -= 0x0001;

    // 9D0B: NEG <$1C
    // TODO: Convert NEG <$1C

    // 9D0D: SUBA #$00
    cpu.m_a -= 0x00;

    // 9D0F: EORB $0,X
    // TODO: Fix comma operator: EORB $0,X

    // 9D11: NEG <$01
    // TODO: Convert NEG <$01

    // 9D13: SEX 
    // TODO: Convert SEX 

    // 9D14: SUBA #$00
    cpu.m_a -= 0x00;

    // 9D16: X18 
    // TODO: Convert X18 

    // 9D17: NEG <$01
    // TODO: Convert NEG <$01

    // 9D19: NEG <$1E
    // TODO: Convert NEG <$1E

    // 9D1B: SUBA #$00
    cpu.m_a -= 0x00;

    // 9D1D: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9D1E: NEG <$01
    // TODO: Convert NEG <$01

    // 9D20: NEG <$1F
    // TODO: Convert NEG <$1F

    // 9D22: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9D24: EORA <$00
    cpu.m_a ^= 0x00;

    // 9D26: NEG <$02
    // TODO: Convert NEG <$02

    // 9D28: NEG <$10
    // TODO: Convert NEG <$10

    // 9D2A: NEG <$68
    // TODO: Convert NEG <$68

    // 9D2C: NEG <$01
    // TODO: Convert NEG <$01

    // 9D2E: XNC <$01
    // TODO: Convert XNC <$01

    // 9D30: BRA $9D32
    goto label_9D32;

    label_9D32:
    // 9D32: JMP $9d32
    goto label_9D32;

    // 9D34: COM <$01
    // TODO: Convert COM <$01

    // 9D36: XNC <$30
    // TODO: Convert XNC <$30

    // 9D38: NEG <$90
    // TODO: Convert NEG <$90

    // 9D3A: NEG <$03
    // TODO: Convert NEG <$03

    // 9D3C: XNC <$03
    // TODO: Convert XNC <$03

    // 9D3E: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9D40: SUBB $0,X
    // TODO: Fix comma operator: SUBB $0,X

    // 9D42: NEG <$00
    // TODO: Convert NEG <$00

    // 9D44: LSR <$30
    // TODO: Convert LSR <$30

    // 9D46: NEG <$20
    // TODO: Convert NEG <$20

    // 9D48: NEG <$01
    // TODO: Convert NEG <$01

    // 9D4A: NEG <$05
    // TODO: Convert NEG <$05

    // 9D4C: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9D4E: NEG >$0003
    // TODO: Convert NEG >$0003

    // 9D51: XNC <$06
    // TODO: Convert XNC <$06

    // 9D53: XANDCC #$00
    // TODO: Convert XANDCC #$00

    // 9D55: EORA >$0001
    cpu.m_a ^= 0x0001;

    // 9D58: NEG <$07
    // TODO: Convert NEG <$07

    // 9D5A: XANDCC #$00
    // TODO: Convert XANDCC #$00

    // 9D5C: ASLA 
    cpu.m_a <<= 1;

    // 9D5D: NEG <$01
    // TODO: Convert NEG <$01

    // 9D5F: NEG <$08
    // TODO: Convert NEG <$08

    // 9D61: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9D62: NEG <$90
    // TODO: Convert NEG <$90

    // 9D64: NEG <$01
    // TODO: Convert NEG <$01

    // 9D66: COM <$09
    // TODO: Convert COM <$09

    // 9D68: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9D69: NEG <$E8
    // TODO: Convert NEG <$E8

    // 9D6B: NEG <$03
    // TODO: Convert NEG <$03

    // 9D6D: NEG <$0A
    // TODO: Convert NEG <$0A

    // 9D6F: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9D70: NEG <$18
    // TODO: Convert NEG <$18

    // 9D72: NEG <$03
    // TODO: Convert NEG <$03

    // 9D74: NEG <$0B
    // TODO: Convert NEG <$0B

    // 9D76: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9D77: NEG <$48
    // TODO: Convert NEG <$48

    // 9D79: NEG <$01
    // TODO: Convert NEG <$01

    // 9D7B: NEG <$0C
    // TODO: Convert NEG <$0C

    // 9D7D: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9D7E: NEG <$E0
    // TODO: Convert NEG <$E0

    // 9D80: NEG <$03
    // TODO: Convert NEG <$03

    // 9D82: NEG <$0D
    // TODO: Convert NEG <$0D

    // 9D84: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9D85: NEG <$F0
    // TODO: Convert NEG <$F0

    // 9D87: NEG <$01
    // TODO: Convert NEG <$01

    // 9D89: NEG <$0E
    // TODO: Convert NEG <$0E

    // 9D8B: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9D8C: NEG <$10
    // TODO: Convert NEG <$10

    // 9D8E: NEG <$01
    // TODO: Convert NEG <$01

    // 9D90: NEG <$0F
    // TODO: Convert NEG <$0F

    // 9D92: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9D93: NEG <$20
    // TODO: Convert NEG <$20

    // 9D95: NEG <$03
    // TODO: Convert NEG <$03

    // 9D97: NEG <$10
    // TODO: Convert NEG <$10

    // 9D99: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9D9B: EORA #$00
    cpu.m_a ^= 0x00;

    // 9D9D: NEG <$03
    // TODO: Convert NEG <$03

    // 9D9F: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9DA2: SUBA $0,X
    // TODO: Fix comma operator: SUBA $0,X

    // 9DA4: NEG <$02
    // TODO: Convert NEG <$02

    // 9DA6: NOP 
    // NOP;

    // 9DA7: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9DA9: SUBB #$00
    cpu.m_b -= 0x00;

    // 9DAB: NEG <$01
    // TODO: Convert NEG <$01

    // 9DAD: SYNC 
    // TODO: Convert SYNC 

    // 9DAE: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9DB0: SUBB <$00
    cpu.m_b -= 0x00;

    // 9DB2: NEG <$01
    // TODO: Convert NEG <$01

    // 9DB4: XHCF 
    // TODO: Convert XHCF 

    // 9DB5: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9DB7: EORB >$0001
    cpu.m_b ^= 0x0001;

    // 9DBA: NEG <$15
    // TODO: Convert NEG <$15

    // 9DBC: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9DBE: ASL <$00
    cpu.arithmetic_shift_left(0x00);

    // 9DC0: NEG <$00
    // TODO: Convert NEG <$00

    // 9DC2: LBRA $FDC5
    // TODO: Convert LBRA $FDC5

    // 9DC5: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9DC7: NEG <$01
    // TODO: Convert NEG <$01

    // 9DC9: LBSR $FDCC
    // TODO: Convert LBSR $FDCC

    // 9DCC: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9DCD: NEG <$01
    // TODO: Convert NEG <$01

    // 9DCF: NEG <$18
    // TODO: Convert NEG <$18

    // 9DD1: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9DD3: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9DD5: NEG <$02
    // TODO: Convert NEG <$02

    // 9DD7: DAA 
    // TODO: Convert DAA 

    // 9DD8: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9DDA: SUBA #$00
    cpu.m_a -= 0x00;

    // 9DDC: NEG <$02
    // TODO: Convert NEG <$02

    // 9DDE: ORCC #$70
    cpu.m_cc |= 0x70;

    // 9DE0: NEG <$00
    // TODO: Convert NEG <$00

    // 9DE2: NEG <$01
    // TODO: Convert NEG <$01

    // 9DE4: NEG <$1B
    // TODO: Convert NEG <$1B

    // 9DE6: SUBA #$00
    cpu.m_a -= 0x00;

    // 9DE8: EORA $0,X
    // TODO: Fix comma operator: EORA $0,X

    // 9DEA: NEG <$03
    // TODO: Convert NEG <$03

    // 9DEC: ANDCC #$80
    // TODO: Convert ANDCC #$80

    // 9DEE: NEG <$E0
    // TODO: Convert NEG <$E0

    // 9DF0: NEG <$01
    // TODO: Convert NEG <$01

    // 9DF2: COM <$1D
    // TODO: Convert COM <$1D

    // 9DF4: SUBA #$00
    cpu.m_a -= 0x00;

    // 9DF6: BRA $9DF8
    goto label_9DF8;

    label_9DF8:
    // 9DF8: NEG <$03
    // TODO: Convert NEG <$03

    // 9DFA: EXG A,D
    // TODO: Convert EXG A,D

    // 9DFC: NEG <$58
    // TODO: Convert NEG <$58

    // 9DFE: NEG <$01
    // TODO: Convert NEG <$01

    // 9E00: COM <$1F
    // TODO: Convert COM <$1F

    // 9E02: NEG <$00
    // TODO: Convert NEG <$00

    // 9E04: EORA >$0001
    cpu.m_a ^= 0x0001;

    // 9E07: XNC <$00
    // TODO: Convert XNC <$00

    // 9E09: NEG <$00
    // TODO: Convert NEG <$00

    // 9E0B: ASLA 
    cpu.m_a <<= 1;

    // 9E0C: NEG <$01
    // TODO: Convert NEG <$01

    // 9E0E: XNC <$01
    // TODO: Convert XNC <$01

    // 9E10: NEG <$A0
    // TODO: Convert NEG <$A0

    // 9E13: NEG <$01
    // TODO: Convert NEG <$01

    // 9E15: COM <$02
    // TODO: Convert COM <$02

    // 9E17: NEG <$E0
    // TODO: Convert NEG <$E0

    // 9E1A: NEG <$01
    // TODO: Convert NEG <$01

    // 9E1C: NEG <$03
    // TODO: Convert NEG <$03

    // 9E1E: NEG <$F8
    // TODO: Convert NEG <$F8

    // 9E21: NEG <$01
    // TODO: Convert NEG <$01

    // 9E23: NEG <$04
    // TODO: Convert NEG <$04

    // 9E25: NEG <$08
    // TODO: Convert NEG <$08

    // 9E28: NEG <$01
    // TODO: Convert NEG <$01

    // 9E2A: NEG <$05
    // TODO: Convert NEG <$05

    // 9E2C: NEG <$20
    // TODO: Convert NEG <$20

    // 9E2F: NEG <$01
    // TODO: Convert NEG <$01

    // 9E31: NEG <$06
    // TODO: Convert NEG <$06

    // 9E33: BRA $9E35
    goto label_9E35;

    label_9E35:
    // 9E35: EORB #$00
    cpu.m_b ^= 0x00;

    // 9E37: NEG <$01
    // TODO: Convert NEG <$01

    // 9E39: ASR <$20
    // TODO: Convert ASR <$20

    // 9E3B: NEG <$38
    // TODO: Convert NEG <$38

    // 9E3D: NEG <$01
    // TODO: Convert NEG <$01

    // 9E3F: NEG <$08
    // TODO: Convert NEG <$08

    // 9E41: BGE $9E43
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0x9E43;

    // 9E43: ANDB $0,X
    // TODO: Fix comma operator: ANDB $0,X

    // 9E45: NEG <$00
    // TODO: Convert NEG <$00

    // 9E47: ROL <$2C
    cpu.rotate_left(0x2C);

    // 9E49: NEG <$1C
    // TODO: Convert NEG <$1C

    // 9E4B: NEG <$01
    // TODO: Convert NEG <$01

    // 9E4D: NEG <$0A
    // TODO: Convert NEG <$0A

    // 9E4F: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9E51: SUBA <$00
    cpu.m_a -= 0x00;

    // 9E53: NEG <$03
    // TODO: Convert NEG <$03

    // 9E55: XDEC <$40
    // TODO: Convert XDEC <$40

    // 9E57: NEG <$00
    // TODO: Convert NEG <$00

    // 9E59: NEG <$03
    // TODO: Convert NEG <$03

    // 9E5B: NEG <$0C
    // TODO: Convert NEG <$0C

    // 9E5D: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9E5E: NEG <$00
    // TODO: Convert NEG <$00

    // 9E60: NEG <$01
    // TODO: Convert NEG <$01

    // 9E62: NEG <$0D
    // TODO: Convert NEG <$0D

    // 9E64: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9E65: NEG <$80
    // TODO: Convert NEG <$80

    // 9E67: NEG <$03
    // TODO: Convert NEG <$03

    // 9E69: COM <$0E
    // TODO: Convert COM <$0E

    // 9E6B: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9E6D: EORB $0,X
    // TODO: Fix comma operator: EORB $0,X

    // 9E6F: COM <$01
    // TODO: Convert COM <$01

    // 9E71: CLR <$60
    cpu.write_memory(0x60, 0);

    // 9E73: NEG <$18
    // TODO: Convert NEG <$18

    // 9E75: NEG <$03
    // TODO: Convert NEG <$03

    // 9E77: NEG <$10
    // TODO: Convert NEG <$10

    // 9E79: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9E7B: SUBA #$00
    cpu.m_a -= 0x00;

    // 9E7D: NEG <$03
    // TODO: Convert NEG <$03

    // 9E7F: NEG >$0088
    // TODO: Convert NEG >$0088

    // 9E83: NEG <$03
    // TODO: Convert NEG <$03

    // 9E85: XNC <$12
    // TODO: Convert XNC <$12

    // 9E87: NEG >$00A0
    // TODO: Convert NEG >$00A0

    // 9E8A: NEG <$01
    // TODO: Convert NEG <$01

    // 9E8C: NEG <$13
    // TODO: Convert NEG <$13

    // 9E8E: NEG >$00B0
    // TODO: Convert NEG >$00B0

    // 9E91: NEG <$01
    // TODO: Convert NEG <$01

    // 9E93: NEG <$14
    // TODO: Convert NEG <$14

    // 9E95: NEG >$00F0
    // TODO: Convert NEG >$00F0

    // 9E98: NEG <$01
    // TODO: Convert NEG <$01

    // 9E9A: COM <$15
    // TODO: Convert COM <$15

    // 9E9C: NEG >$0010
    // TODO: Convert NEG >$0010

    // 9E9F: NEG <$01
    // TODO: Convert NEG <$01

    // 9EA1: COM <$16
    // TODO: Convert COM <$16

    // 9EA3: NEG >$0050
    // TODO: Convert NEG >$0050

    // 9EA6: NEG <$01
    // TODO: Convert NEG <$01

    // 9EA8: NEG <$17
    // TODO: Convert NEG <$17

    // 9EAA: NEG >$0060
    // TODO: Convert NEG >$0060

    // 9EAD: NEG <$01
    // TODO: Convert NEG <$01

    // 9EAF: NEG <$18
    // TODO: Convert NEG <$18

    // 9EB1: NEG >$0078
    // TODO: Convert NEG >$0078

    // 9EB4: NEG <$03
    // TODO: Convert NEG <$03

    // 9EB6: XNC <$19
    // TODO: Convert XNC <$19

    // 9EB8: ASL >$00E0
    cpu.arithmetic_shift_left(0x00E0);

    // 9EBB: NEG <$03
    // TODO: Convert NEG <$03

    // 9EBD: COM <$1A
    // TODO: Convert COM <$1A

    // 9EBF: ASL >$0020
    cpu.arithmetic_shift_left(0x0020);

    // 9EC2: NEG <$03
    // TODO: Convert NEG <$03

    // 9EC4: COM <$1B
    // TODO: Convert COM <$1B

    // 9EC6: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9EC7: NEG <$B0
    // TODO: Convert NEG <$B0

    // 9EC9: NEG <$01
    // TODO: Convert NEG <$01

    // 9ECB: XNC <$1C
    // TODO: Convert XNC <$1C

    // 9ECD: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9ECE: NEG <$C0
    // TODO: Convert NEG <$C0

    // 9ED0: NEG <$01
    // TODO: Convert NEG <$01

    // 9ED2: XNC <$1D
    // TODO: Convert XNC <$1D

    // 9ED4: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9ED5: NEG <$30
    // TODO: Convert NEG <$30

    // 9ED7: NEG <$01
    // TODO: Convert NEG <$01

    // 9ED9: XNC <$1E
    // TODO: Convert XNC <$1E

    // 9EDB: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9EDC: NEG <$40
    // TODO: Convert NEG <$40

    // 9EDE: NEG <$01
    // TODO: Convert NEG <$01

    // 9EE0: XNC <$1F
    // TODO: Convert XNC <$1F

    // 9EE2: BRA $9EE4
    goto label_9EE4;

    label_9EE4:
    // 9EE4: SUBA #$00
    cpu.m_a -= 0x00;

    // 9EE6: COM <$02
    // TODO: Convert COM <$02

    // 9EE8: NEG <$20
    // TODO: Convert NEG <$20

    // 9EEA: NEG <$A0
    // TODO: Convert NEG <$A0

    // 9EEC: NEG <$03
    // TODO: Convert NEG <$03

    // 9EEE: NEG <$01
    // TODO: Convert NEG <$01

    // 9EF0: BRA $9EF2
    goto label_9EF2;

    label_9EF2:
    // 9EF2: SUBA >$0003
    cpu.m_a -= 0x0003;

    // 9EF5: NEG <$02
    // TODO: Convert NEG <$02

    // 9EF7: BRA $9EF9
    goto label_9EF9;

    label_9EF9:
    // 9EF9: NEGB 
    cpu.m_b = -cpu.m_b;

    // 9EFA: NEG <$03
    // TODO: Convert NEG <$03

    // 9EFC: NEG <$03
    // TODO: Convert NEG <$03

    // 9EFE: BRA $9F00
    goto label_9F00;

    label_9F00:
    // 9F00: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9F02: COM <$01
    // TODO: Convert COM <$01

    // 9F04: LSR <$30
    // TODO: Convert LSR <$30

    // 9F06: NEG <$80
    // TODO: Convert NEG <$80

    // 9F08: NEG <$01
    // TODO: Convert NEG <$01

    // 9F0A: XNC <$05
    // TODO: Convert XNC <$05

    // 9F0C: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9F0E: SUBA $0,X
    // TODO: Fix comma operator: SUBA $0,X

    // 9F10: NEG <$01
    // TODO: Convert NEG <$01

    // 9F12: ROR <$30
    // TODO: Convert ROR <$30

    // 9F14: NEG <$B0
    // TODO: Convert NEG <$B0

    // 9F16: NEG <$01
    // TODO: Convert NEG <$01

    // 9F18: NEG <$07
    // TODO: Convert NEG <$07

    // 9F1A: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9F1C: SUBB <$00
    cpu.m_b -= 0x00;

    // 9F1E: COM <$01
    // TODO: Convert COM <$01

    // 9F20: ASL <$30
    cpu.arithmetic_shift_left(0x30);

    // 9F22: NEG <$E0
    // TODO: Convert NEG <$E0

    // 9F24: NEG <$03
    // TODO: Convert NEG <$03

    // 9F26: NEG <$09
    // TODO: Convert NEG <$09

    // 9F28: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9F2A: NEG <$00
    // TODO: Convert NEG <$00

    // 9F2C: COM <$00
    // TODO: Convert COM <$00

    // 9F2E: DEC <$30
    cpu.decrement_memory(0x30);

    // 9F30: NEG <$20
    // TODO: Convert NEG <$20

    // 9F32: NEG <$03
    // TODO: Convert NEG <$03

    // 9F34: NEG <$0B
    // TODO: Convert NEG <$0B

    // 9F36: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9F38: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9F3A: COM <$01
    // TODO: Convert COM <$01

    // 9F3C: INC <$30
    cpu.increment_memory(0x30);

    // 9F3E: NEG <$50
    // TODO: Convert NEG <$50

    // 9F40: NEG <$01
    // TODO: Convert NEG <$01

    // 9F42: NEG <$0D
    // TODO: Convert NEG <$0D

    // 9F44: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9F46: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9F48: NEG <$01
    // TODO: Convert NEG <$01

    // 9F4A: JMP <$40
    // TODO: Invalid branch offset: <$40

    // 9F4C: NEG <$D0
    // TODO: Convert NEG <$D0

    // 9F4E: NEG <$01
    // TODO: Convert NEG <$01

    // 9F50: XNC <$0F
    // TODO: Convert XNC <$0F

    // 9F52: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9F53: NEG <$E0
    // TODO: Convert NEG <$E0

    // 9F55: NEG <$01
    // TODO: Convert NEG <$01

    // 9F57: NEG <$10
    // TODO: Convert NEG <$10

    // 9F59: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9F5A: NEG <$00
    // TODO: Convert NEG <$00

    // 9F5C: NEG <$01
    // TODO: Convert NEG <$01

    // 9F5E: NEG <$11
    // TODO: Convert NEG <$11

    // 9F60: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9F61: NEG <$20
    // TODO: Convert NEG <$20

    // 9F63: NEG <$01
    // TODO: Convert NEG <$01

    // 9F65: NEG <$12
    // TODO: Convert NEG <$12

    // 9F67: NEGA 
    cpu.m_a = -cpu.m_a;

    // 9F68: NEG <$30
    // TODO: Convert NEG <$30

    // 9F6A: NEG <$01
    // TODO: Convert NEG <$01

    // 9F6C: XNC <$13
    // TODO: Convert XNC <$13

    // 9F6E: ASLA 
    cpu.m_a <<= 1;

    // 9F6F: NEG <$58
    // TODO: Convert NEG <$58

    // 9F71: NEG <$03
    // TODO: Convert NEG <$03

    // 9F73: XNC <$14
    // TODO: Convert XNC <$14

    // 9F75: LSRB 
    cpu.m_b >>= 1;

    // 9F76: NEG <$70
    // TODO: Convert NEG <$70

    // 9F78: NEG <$03
    // TODO: Convert NEG <$03

    // 9F7A: XNC <$15
    // TODO: Convert XNC <$15

    // 9F7C: NEG $0,X
    // TODO: Convert NEG $0,X

    // 9F7E: SUBA <$00
    cpu.m_a -= 0x00;

    // 9F80: NEG <$03
    // TODO: Convert NEG <$03

    // 9F82: LBRA $FF85
    // TODO: Convert LBRA $FF85

    // 9F85: NEG >$0001
    // TODO: Convert NEG >$0001

    // 9F88: COM <$17
    // TODO: Convert COM <$17

    // 9F8A: ASL $0,X
    // TODO: Fix comma operator: ASL $0,X

    // 9F8C: SUBB >$0001
    cpu.m_b -= 0x0001;

    // 9F8F: NEG <$18
    // TODO: Convert NEG <$18

    // 9F91: ASL $0,X
    // TODO: Fix comma operator: ASL $0,X

    // 9F93: NEG <$01
    // TODO: Convert NEG <$01

    // 9F96: NEG <$19
    // TODO: Convert NEG <$19

    // 9F98: NEG >$00C0
    // TODO: Convert NEG >$00C0

    // 9F9B: NEG <$01
    // TODO: Convert NEG <$01

    // 9F9D: NEG <$1A
    // TODO: Convert NEG <$1A

    // 9F9F: NEG >$0040
    // TODO: Convert NEG >$0040

    // 9FA2: NEG <$01
    // TODO: Convert NEG <$01

    // 9FA4: NEG <$1B
    // TODO: Convert NEG <$1B

    // 9FA6: SUBA #$00
    cpu.m_a -= 0x00;

    // 9FA8: SUBA $0,X
    // TODO: Fix comma operator: SUBA $0,X

    // 9FAA: NEG <$03
    // TODO: Convert NEG <$03

    // 9FAC: ANDCC #$80
    // TODO: Convert ANDCC #$80

    // 9FAE: NEG <$E0
    // TODO: Convert NEG <$E0

    // 9FB0: NEG <$01
    // TODO: Convert NEG <$01

    // 9FB2: COM <$1D
    // TODO: Convert COM <$1D

    // 9FB4: SUBA #$00
    cpu.m_a -= 0x00;

    // 9FB6: BRA $9FB8
    goto label_9FB8;

    label_9FB8:
    // 9FB8: NEG <$03
    // TODO: Convert NEG <$03

    // 9FBA: EXG A,D
    // TODO: Convert EXG A,D

    // 9FBC: NEG <$60
    // TODO: Convert NEG <$60

    // 9FBE: NEG <$01
    // TODO: Convert NEG <$01

    // 9FC0: COM <$1F
    // TODO: Convert COM <$1F

    // 9FC2: NEG <$00
    // TODO: Convert NEG <$00

    // 9FC4: NEG <$00
    // TODO: Convert NEG <$00

    // 9FC6: NEG <$01
    // TODO: Convert NEG <$01

    // 9FC8: NEG <$18
    // TODO: Convert NEG <$18

    // 9FCA: NEG <$80
    // TODO: Convert NEG <$80

    // 9FCC: NEG <$01
    // TODO: Convert NEG <$01

    // 9FCE: COM <$01
    // TODO: Convert COM <$01

    // 9FD0: BRA $9FD2
    goto label_9FD2;

    label_9FD2:
    // 9FD2: EORB <$00
    cpu.m_b ^= 0x00;

    // 9FD4: NEG <$01
    // TODO: Convert NEG <$01

    // 9FD6: XNC <$20
    // TODO: Convert XNC <$20

    // 9FD8: NEG <$28
    // TODO: Convert NEG <$28

    // 9FDA: NEG <$01
    // TODO: Convert NEG <$01

    // 9FDC: NEG <$03
    // TODO: Convert NEG <$03

    // 9FDE: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9FE0: SUBA <$00
    cpu.m_a -= 0x00;

    // 9FE2: NEG <$02
    // TODO: Convert NEG <$02

    // 9FE4: LSR <$30
    // TODO: Convert LSR <$30

    // 9FE6: NEG <$60
    // TODO: Convert NEG <$60

    // 9FE8: NEG <$03
    // TODO: Convert NEG <$03

    // 9FEA: XNC <$05
    // TODO: Convert XNC <$05

    // 9FEC: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // 9FEE: NEG >$0001
    // TODO: Convert NEG >$0001

    // 9FF1: XNC <$06
    // TODO: Convert XNC <$06

    // 9FF3: XANDCC #$00
    // TODO: Convert XANDCC #$00

    // 9FF5: SUBA >$0001
    cpu.m_a -= 0x0001;

    // 9FF8: COM <$07
    // TODO: Convert COM <$07

    // 9FFA: XANDCC #$00
    // TODO: Convert XANDCC #$00

    // 9FFC: SUBB $0,X
    // TODO: Fix comma operator: SUBB $0,X

    // 9FFE: NEG <$00
    // TODO: Convert NEG <$00

    // A000: ASL <$38
    cpu.arithmetic_shift_left(0x38);

    // A002: NEG <$20
    // TODO: Convert NEG <$20

    // A004: NEG <$01
    // TODO: Convert NEG <$01

    // A006: NEG <$09
    // TODO: Convert NEG <$09

    // A008: XANDCC #$00
    // TODO: Convert XANDCC #$00

    // A00A: NEGB 
    cpu.m_b = -cpu.m_b;

    // A00B: NEG <$01
    // TODO: Convert NEG <$01

    // A00D: COM <$0A
    // TODO: Convert COM <$0A

    // A00F: ASLA 
    cpu.m_a <<= 1;

    // A010: NEG <$E8
    // TODO: Convert NEG <$E8

    // A012: NEG <$01
    // TODO: Convert NEG <$01

    // A014: NEG <$0B
    // TODO: Convert NEG <$0B

    // A016: ASLA 
    cpu.m_a <<= 1;

    // A017: NEG <$18
    // TODO: Convert NEG <$18

    // A019: NEG <$01
    // TODO: Convert NEG <$01

    // A01B: NEG <$0C
    // TODO: Convert NEG <$0C

    // A01D: NEGB 
    cpu.m_b = -cpu.m_b;

    // A01E: NEG <$88
    // TODO: Convert NEG <$88

    // A020: NEG <$01
    // TODO: Convert NEG <$01

    // A022: XNC <$0D
    // TODO: Convert XNC <$0D

    // A024: NEGB 
    cpu.m_b = -cpu.m_b;

    // A025: NEG <$A0
    // TODO: Convert NEG <$A0

    // A027: NEG <$01
    // TODO: Convert NEG <$01

    // A029: COM <$0E
    // TODO: Convert COM <$0E

    // A02B: NEGB 
    cpu.m_b = -cpu.m_b;

    // A02C: NEG <$C0
    // TODO: Convert NEG <$C0

    // A02E: NEG <$01
    // TODO: Convert NEG <$01

    // A030: NEG <$0F
    // TODO: Convert NEG <$0F

    // A032: NEGB 
    cpu.m_b = -cpu.m_b;

    // A033: NEG <$40
    // TODO: Convert NEG <$40

    // A035: NEG <$01
    // TODO: Convert NEG <$01

    // A037: NEG <$10
    // TODO: Convert NEG <$10

    // A039: NEGB 
    cpu.m_b = -cpu.m_b;

    // A03A: NEG <$60
    // TODO: Convert NEG <$60

    // A03C: NEG <$01
    // TODO: Convert NEG <$01

    // A03E: COM <$11
    // TODO: Convert COM <$11

    // A040: NEGB 
    cpu.m_b = -cpu.m_b;

    // A041: NEG <$78
    // TODO: Convert NEG <$78

    // A043: NEG <$01
    // TODO: Convert NEG <$01

    // A045: XNC <$12
    // TODO: Convert XNC <$12

    // A047: INCB 
    cpu.m_b++;

    // A048: NEG <$E4
    // TODO: Convert NEG <$E4

    // A04A: NEG <$01
    // TODO: Convert NEG <$01

    // A04C: NEG <$13
    // TODO: Convert NEG <$13

    // A04E: INCB 
    cpu.m_b++;

    // A04F: NEG <$1C
    // TODO: Convert NEG <$1C

    // A051: NEG <$01
    // TODO: Convert NEG <$01

    // A053: NEG <$14
    // TODO: Convert NEG <$14

    // A055: NEG $0,X
    // TODO: Convert NEG $0,X

    // A057: SUBB >$0001
    cpu.m_b -= 0x0001;

    // A05A: NEG <$15
    // TODO: Convert NEG <$15

    // A05C: NEG $0,X
    // TODO: Convert NEG $0,X

    // A05E: NEG <$01
    // TODO: Convert NEG <$01

    // A061: NEG <$16
    // TODO: Convert NEG <$16

    // A063: NEG $0,X
    // TODO: Convert NEG $0,X

    // A065: INC >$0001
    cpu.increment_memory(0x0001);

    // A068: COM <$17
    // TODO: Convert COM <$17

    // A06A: NEG >$00C8
    // TODO: Convert NEG >$00C8

    // A06D: NEG <$01
    // TODO: Convert NEG <$01

    // A06F: NEG <$18
    // TODO: Convert NEG <$18

    // A071: NEG >$00F8
    // TODO: Convert NEG >$00F8

    // A074: NEG <$01
    // TODO: Convert NEG <$01

    // A076: NEG <$19
    // TODO: Convert NEG <$19

    // A078: NEG >$0008
    // TODO: Convert NEG >$0008

    // A07B: NEG <$01
    // TODO: Convert NEG <$01

    // A07D: NEG <$1A
    // TODO: Convert NEG <$1A

    // A07F: NEG >$0038
    // TODO: Convert NEG >$0038

    // A082: NEG <$01
    // TODO: Convert NEG <$01

    // A084: NEG <$1B
    // TODO: Convert NEG <$1B

    // A086: NEG <$00
    // TODO: Convert NEG <$00

    // A088: SUBA $0,X
    // TODO: Fix comma operator: SUBA $0,X

    // A08A: NEG <$03
    // TODO: Convert NEG <$03

    // A08C: ANDCC #$00
    // TODO: Convert ANDCC #$00

    // A08E: NEG <$C0
    // TODO: Convert NEG <$C0

    // A090: NEG <$01
    // TODO: Convert NEG <$01

    // A092: XNC <$1D
    // TODO: Convert XNC <$1D

    // A094: NEG <$00
    // TODO: Convert NEG <$00

    // A096: NEGA 
    cpu.m_a = -cpu.m_a;

    // A097: NEG <$01
    // TODO: Convert NEG <$01

    // A099: XNC <$1E
    // TODO: Convert XNC <$1E

    // A09B: NEG <$00
    // TODO: Convert NEG <$00

    // A09D: NEG $0,X
    // TODO: Convert NEG $0,X

    // A09F: NEG <$03
    // TODO: Convert NEG <$03

    // A0A1: TFR X,D
    cpu.m_d = cpu.m_x;

    // A0A3: NEG <$E0
    // TODO: Convert NEG <$E0

    // A0A5: NEG <$01
    // TODO: Convert NEG <$01

    // A0A7: NEG <$00
    // TODO: Convert NEG <$00

    // A0A9: NEG <$20
    // TODO: Convert NEG <$20

    // A0AC: NEG <$01
    // TODO: Convert NEG <$01

    // A0AE: NEG <$01
    // TODO: Convert NEG <$01

    // A0B0: BRA $A0B2
    goto label_A0B2;

    label_A0B2:
    // A0B2: SUBB #$00
    cpu.m_b -= 0x00;

    // A0B4: COM <$01
    // TODO: Convert COM <$01

    // A0B6: XNC <$20
    // TODO: Convert XNC <$20

    // A0B8: NEG <$40
    // TODO: Convert NEG <$40

    // A0BA: NEG <$03
    // TODO: Convert NEG <$03

    // A0BC: NEG <$03
    // TODO: Convert NEG <$03

    // A0BE: BVC $A0C0
    // TODO: Convert BVC $A0C0

    // A0C0: SUBB $0,X
    // TODO: Fix comma operator: SUBB $0,X

    // A0C2: NEG <$00
    // TODO: Convert NEG <$00

    // A0C4: LSR <$28
    // TODO: Convert LSR <$28

    // A0C6: NEG <$20
    // TODO: Convert NEG <$20

    // A0C8: NEG <$01
    // TODO: Convert NEG <$01

    // A0CA: NEG <$05
    // TODO: Convert NEG <$05

    // A0CC: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // A0CE: SUBA <$00
    cpu.m_a -= 0x00;

    // A0D0: COM <$02
    // TODO: Convert COM <$02

    // A0D2: ROR <$30
    // TODO: Convert ROR <$30

    // A0D4: NEG <$A0
    // TODO: Convert NEG <$A0

    // A0D6: NEG <$03
    // TODO: Convert NEG <$03

    // A0D8: XNC <$07
    // TODO: Convert XNC <$07

    // A0DA: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // A0DC: NEG $0,X
    // TODO: Convert NEG $0,X

    // A0DE: COM <$02
    // TODO: Convert COM <$02

    // A0E0: ASL <$38
    cpu.arithmetic_shift_left(0x38);

    // A0E2: NEG <$B0
    // TODO: Convert NEG <$B0

    // A0E4: NEG <$01
    // TODO: Convert NEG <$01

    // A0E6: NEG <$09
    // TODO: Convert NEG <$09

    // A0E8: XANDCC #$00
    // TODO: Convert XANDCC #$00

    // A0EA: NEGB 
    cpu.m_b = -cpu.m_b;

    // A0EB: NEG <$01
    // TODO: Convert NEG <$01

    // A0ED: NEG <$0A
    // TODO: Convert NEG <$0A

    // A0EF: NEGA 
    cpu.m_a = -cpu.m_a;

    // A0F0: NEG <$D0
    // TODO: Convert NEG <$D0

    // A0F2: NEG <$03
    // TODO: Convert NEG <$03

    // A0F4: NEG <$0B
    // TODO: Convert NEG <$0B

    // A0F6: NEGA 
    cpu.m_a = -cpu.m_a;

    // A0F7: NEG <$00
    // TODO: Convert NEG <$00

    // A0F9: NEG <$03
    // TODO: Convert NEG <$03

    // A0FB: NEG <$0C
    // TODO: Convert NEG <$0C

    // A0FD: NEGA 
    cpu.m_a = -cpu.m_a;

    // A0FE: NEG <$30
    // TODO: Convert NEG <$30

    // A100: NEG <$03
    // TODO: Convert NEG <$03

    // A102: NEG <$0D
    // TODO: Convert NEG <$0D

    // A104: NEGA 
    cpu.m_a = -cpu.m_a;

    // A105: NEG <$80
    // TODO: Convert NEG <$80

    // A107: NEG <$01
    // TODO: Convert NEG <$01

    // A109: NEG <$0E
    // TODO: Convert NEG <$0E

    // A10B: NEGB 
    cpu.m_b = -cpu.m_b;

    // A10C: NEG <$88
    // TODO: Convert NEG <$88

    // A10E: NEG <$01
    // TODO: Convert NEG <$01

    // A110: XNC <$0F
    // TODO: Convert XNC <$0F

    // A112: NEGB 
    cpu.m_b = -cpu.m_b;

    // A113: NEG <$00
    // TODO: Convert NEG <$00

    // A115: NEG <$01
    // TODO: Convert NEG <$01

    // A117: NEG <$10
    // TODO: Convert NEG <$10

    // A119: NEGB 
    cpu.m_b = -cpu.m_b;

    // A11A: NEG <$78
    // TODO: Convert NEG <$78

    // A11C: NEG <$01
    // TODO: Convert NEG <$01

    // A11E: XNC <$11
    // TODO: Convert XNC <$11

    // A120: NEG $0,X
    // TODO: Convert NEG $0,X

    // A122: SUBB #$00
    cpu.m_b -= 0x00;

    // A124: NEG <$00
    // TODO: Convert NEG <$00

    // A126: NOP 
    // NOP;

    // A127: NEG $0,X
    // TODO: Convert NEG $0,X

    // A129: NEGA 
    cpu.m_a = -cpu.m_a;

    // A12A: NEG <$01
    // TODO: Convert NEG <$01

    // A12C: NEG <$13
    // TODO: Convert NEG <$13

    // A12E: ASL $0,X
    // TODO: Fix comma operator: ASL $0,X

    // A130: SUBB <$00
    cpu.m_b -= 0x00;

    // A132: NEG <$00
    // TODO: Convert NEG <$00

    // A134: XHCF 
    // TODO: Convert XHCF 

    // A135: ASL $0,X
    // TODO: Fix comma operator: ASL $0,X

    // A137: LEAX $0,X
    // TODO: Fix comma operator: LEAX $0,X

    // A139: NEG <$00
    // TODO: Convert NEG <$00

    // A13B: XHCF 
    // TODO: Convert XHCF 

    // A13C: NEG >$0090
    // TODO: Convert NEG >$0090

    // A13F: NEG <$01
    // TODO: Convert NEG <$01

    // A141: NEG <$16
    // TODO: Convert NEG <$16

    // A143: NEG >$00A0
    // TODO: Convert NEG >$00A0

    // A146: NEG <$01
    // TODO: Convert NEG <$01

    // A148: NEG <$17
    // TODO: Convert NEG <$17

    // A14A: NEG >$00F0
    // TODO: Convert NEG >$00F0

    // A14D: NEG <$01
    // TODO: Convert NEG <$01

    // A14F: NEG <$18
    // TODO: Convert NEG <$18

    // A151: NEG >$0010
    // TODO: Convert NEG >$0010

    // A154: NEG <$01
    // TODO: Convert NEG <$01

    // A156: NEG <$19
    // TODO: Convert NEG <$19

    // A158: NEG >$0060
    // TODO: Convert NEG >$0060

    // A15B: NEG <$01
    // TODO: Convert NEG <$01

    // A15D: NEG <$1A
    // TODO: Convert NEG <$1A

    // A15F: NEG >$0070
    // TODO: Convert NEG >$0070

    // A162: NEG <$01
    // TODO: Convert NEG <$01

    // A164: NEG <$1B
    // TODO: Convert NEG <$1B

    // A166: NEG <$B8
    // TODO: Convert NEG <$B8

    // A169: NEG <$01
    // TODO: Convert NEG <$01

    // A16B: XNC <$1C
    // TODO: Convert XNC <$1C

    // A16D: NEG <$58
    // TODO: Convert NEG <$58

    // A170: NEG <$01
    // TODO: Convert NEG <$01

    // A172: XNC <$1D
    // TODO: Convert XNC <$1D

    // A174: BRA $A176
    goto label_A176;

    label_A176:
    // A176: EORA <$00
    cpu.m_a ^= 0x00;

    // A178: NEG <$02
    // TODO: Convert NEG <$02

    // A17A: EXG Y,D
    // TODO: Convert EXG Y,D

    // A17C: NEG <$70
    // TODO: Convert NEG <$70

    // A17E: NEG <$01
    // TODO: Convert NEG <$01

    // A180: XNC <$1F
    // TODO: Convert XNC <$1F

    // A182: ORA <$9E
    cpu.m_a |= 0x9E;

    // A184: ADDA <$62
    cpu.m_a += 0x62;

    // A186: LDX <$E2
    cpu.m_x = cpu.read_memory16(0xE2);

    // A188: STX <$A6
    cpu.write_memory16(0xA6, cpu.m_x);

    // A18A: ADCA <$BE
    cpu.add_a_with_carry(0xBE);

    // A18C: ORA <$82
    cpu.m_a |= 0x82;

    // A18E: SUBA ,-Y
    // TODO: Complex indexed addressing: ,-Y

    // A190: CMPA $6,S
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_sp + 0x06));

    // A192: LDX <$02
    cpu.m_x = cpu.read_memory16(0x02);

    // A194: LDX <$C6
    cpu.m_x = cpu.read_memory16(0xC6);

    // A196: EORA <$DE
    cpu.m_a ^= 0xDE;

    // A198: ADCA <$A2
    cpu.add_a_with_carry(0xA2);

    // A19A: JSR <$22
    cpu.call_function(0x22);

    // A19C: JSR <$E6
    cpu.call_function(0xE6);

    // A19E: CMPX <$42
    cpu.compare_x(cpu.read_memory16(0x42));

    // A1A0: JSR <$06
    cpu.call_function(0x06);

    // A1A2: STX <$C2
    cpu.write_memory16(0xC2, cpu.m_x);

    // A1A4: SUBA A,X
    // TODO: Fix comma operator: SUBA A,X

    // A1A6: ADDA <$62
    cpu.m_a += 0x62;

    // A1A8: CMPX <$26
    cpu.compare_x(cpu.read_memory16(0x26));

    // A1AA: LDX <$E2
    cpu.m_x = cpu.read_memory16(0xE2);

    // A1AC: STX <$C2
    cpu.write_memory16(0xC2, cpu.m_x);

    // A1AE: ADCA <$BE
    cpu.add_a_with_carry(0xBE);

    // A1B0: ORA <$9E
    cpu.m_a |= 0x9E;

    // A1B2: SUBA ,-Y
    // TODO: Complex indexed addressing: ,-Y

    // A1B4: CMPA ,-X
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_x));

    // A1B6: LDX <$02
    cpu.m_x = cpu.read_memory16(0x02);

    // A1B8: LDX <$E2
    cpu.m_x = cpu.read_memory16(0xE2);

    // A1BA: EORA <$DE
    cpu.m_a ^= 0xDE;

    // A1BC: ADCA <$BE
    cpu.add_a_with_carry(0xBE);

    // A1BE: JSR <$22
    cpu.call_function(0x22);

    // A1C0: LDX <$02
    cpu.m_x = cpu.read_memory16(0x02);

    // A1C2: CMPX <$42
    cpu.compare_x(cpu.read_memory16(0x42));

    // A1C4: JSR <$22
    cpu.call_function(0x22);

    // A1C6: STX <$C2
    cpu.write_memory16(0xC2, cpu.m_x);

    // A1C8: SUBA ,-Y
    // TODO: Complex indexed addressing: ,-Y

    // A1CA: ADDA <$62
    cpu.m_a += 0x62;

    // A1CC: CMPX <$42
    cpu.compare_x(cpu.read_memory16(0x42));

    label_A1CE:
    // A1CE: JMP $a1ce
    goto label_A1CE;

    // A1D1: LDA #$00
    cpu.m_a = 0x00;

    // A1D3: STA ,U
    cpu.write_memory(cpu.m_u, cpu.m_a);

    // A1D5: LEAU $1,U
    // TODO: Fix comma operator: LEAU $1,U

    // A1D7: CMPU #$49E2
    cpu.execute_cmpu_immediate(0x49E2);

    // A1DB: BCS $A1D1
    if (cpu.carry_flag()) cpu.m_pc = 0xA1D1;

    // A1DD: LDA $4B13
    cpu.m_a = cpu.read_memory(0x4B13);

    // A1E0: CMPA #$13
    cpu.compare_a(0x13);

    // A1E2: BCS $A1EF
    if (cpu.carry_flag()) cpu.m_pc = 0xA1EF;

    // A1E4: LDB #$06
    cpu.m_b = 0x06;

    // A1E6: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // A1E9: MUL 
    // TODO: Convert MUL 

    // A1EA: ADDA #$0D
    cpu.m_a += 0x0D;

    // A1EC: STA $4B13
    cpu.write_memory(0x4B13, cpu.m_a);

    // A1EF: LDB $4B13
    cpu.m_b = cpu.read_memory(0x4B13);

    // A1F2: LDX #$98CB
    cpu.m_x = 0x98CB;

    // A1F5: ABX 
    // TODO: Convert ABX 

    // A1F6: CMPX #$98DE
    cpu.compare_x(0x98DE);

    // A1F9: BCS $A1FE
    if (cpu.carry_flag()) cpu.m_pc = 0xA1FE;

    // A1FB: LDX #$98DD
    cpu.m_x = 0x98DD;

    // A1FE: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // A200: STA $4B1A
    cpu.write_memory(0x4B1A, cpu.m_a);

    // A203: LDD $9856
    cpu.m_d = cpu.read_memory16(0x9856);

    // A206: STD $4B2E
    cpu.write_memory16(0x4B2E, cpu.m_d);

    // A209: LDA $9858
    cpu.m_a = cpu.read_memory(0x9858);

    // A20C: STA $4B30
    cpu.write_memory(0x4B30, cpu.m_a);

    // A20F: LDA #$00
    cpu.m_a = 0x00;

    // A211: STA <$A7
    cpu.write_memory(0xA7, cpu.m_a);

    // A213: RTS 
    return;

    // A214: LDB #$07
    cpu.m_b = 0x07;

    // A216: STB <$DC
    cpu.write_memory(0xDC, cpu.m_b);

    // A218: JSR $CD38
    cpu.call_function(0xCD38);

    // A21B: LDD #$0000
    cpu.m_d = 0x0000;

    // A21E: STD $5040
    cpu.write_memory16(0x5040, cpu.m_d);

    // A221: STD $5042
    cpu.write_memory16(0x5042, cpu.m_d);

    // A224: STD $5044
    cpu.write_memory16(0x5044, cpu.m_d);

    // A227: JSR $A40A
    cpu.call_function(0xA40A);

    // A22A: LDD $5098
    cpu.m_d = cpu.read_memory16(0x5098);

    // A22D: STD $5040
    cpu.write_memory16(0x5040, cpu.m_d);

    // A230: LDD $509A
    cpu.m_d = cpu.read_memory16(0x509A);

    // A233: STD $5042
    cpu.write_memory16(0x5042, cpu.m_d);

    // A236: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // A239: STD $5044
    cpu.write_memory16(0x5044, cpu.m_d);

    // A23C: LDB $4B13
    cpu.m_b = cpu.read_memory(0x4B13);

    // A23F: ASLB 
    cpu.m_b <<= 1;

    // A240: ASLB 
    cpu.m_b <<= 1;

    // A241: LDX #$A182
    cpu.m_x = 0xA182;

    // A244: ABX 
    // TODO: Convert ABX 

    // A245: CMPX #$A1CE
    cpu.compare_x(0xA1CE);

    // A248: BCS $A24D
    if (cpu.carry_flag()) cpu.m_pc = 0xA24D;

    // A24A: LDX #$A1CA
    cpu.m_x = 0xA1CA;

    // A24D: LDX ,X
    // TODO: Complex indexed addressing: ,X

    // A24F: STX <$64
    cpu.write_memory16(0x64, cpu.m_x);

    // A251: LDA <$A7
    cpu.m_a = cpu.read_memory(0xA7);

    // A253: CMPA $5,X
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_x + 0x05));

    // A255: LBLT $A2DA
    // TODO: Convert LBLT $A2DA

    // A259: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // A25B: STD $5E00
    cpu.write_memory16(0x5E00, cpu.m_d);

    // A25E: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // A260: STD $5E02
    cpu.write_memory16(0x5E02, cpu.m_d);

    // A261: XCLRB 
    // TODO: Convert XCLRB 

    // A262: XNC <$CC
    // TODO: Convert XNC <$CC

    // A263: LDD #$1E00
    cpu.m_d = 0x1E00;

    // A264: EXG D,D
    // TODO: Convert EXG D,D

    // A266: STD $5E04
    cpu.write_memory16(0x5E04, cpu.m_d);

    // A269: LDD #$01C0
    cpu.m_d = 0x01C0;

    // A26C: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // A26F: LDA #$67
    cpu.m_a = 0x67;

    // A271: JSR $CDBA
    cpu.call_function(0xCDBA);

    // A274: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // A277: BPL $A27E
    if (!cpu.negative_flag()) cpu.m_pc = 0xA27E;

    // A279: ANDA #$3F
    cpu.m_a &= 0x3F;

    // A27B: STD $5000
    cpu.write_memory16(0x5000, cpu.m_d);

    // A27E: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // A281: CMPD #$0100
    cpu.execute_cmpd_immediate(0x0100);

    // A285: BLT $A2B0
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xA2B0;

    // A287: CMPD #$3C00
    cpu.execute_cmpd_immediate(0x3C00);

    // A28B: BCC $A2B0
    if (!cpu.carry_flag()) cpu.m_pc = 0xA2B0;

    // A28D: LDD $5002
    cpu.m_d = cpu.read_memory16(0x5002);

    // A290: BPL $A296
    if (!cpu.negative_flag()) cpu.m_pc = 0xA296;

    // A292: COMA 
    cpu.m_a = ~cpu.m_a;

    // A293: NEGB 
    cpu.m_b = -cpu.m_b;

    // A294: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // A296: SUBD $5000
    cpu.m_d -= 0x5000;

    // A299: BCC $A2B0
    if (!cpu.carry_flag()) cpu.m_pc = 0xA2B0;

    // A29B: LDU #$49C2
    cpu.m_u = 0x49C2;

    // A29E: LDB $6,X
    // TODO: Fix comma operator: LDB $6,X

    // A2A0: LEAU B,U
    // TODO: Fix comma operator: LEAU B,U

    // A2A2: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // A2A4: BITA #$02
    // TODO: Convert BITA #$02

    // A2A6: BEQ $A2AE
    if (cpu.zero_flag()) cpu.m_pc = 0xA2AE;

    // A2A8: JSR $A2F8
    cpu.call_function(0xA2F8);

    // A2AB: JSR $A591
    cpu.call_function(0xA591);

    // A2AE: BRA $A2DA
    goto label_A2DA;

    // A2B0: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // A2B2: LDU #$49C2
    cpu.m_u = 0x49C2;

    // A2B5: LDB $6,X
    // TODO: Fix comma operator: LDB $6,X

    // A2B7: LEAU B,U
    // TODO: Fix comma operator: LEAU B,U

    // A2B9: LDA $4B3D
    cpu.m_a = cpu.read_memory(0x4B3D);

    // A2BC: BEQ $A2C2
    if (cpu.zero_flag()) cpu.m_pc = 0xA2C2;

    // A2BE: CLR ,U
    // TODO: Complex indexed addressing: ,U

    // A2C0: BRA $A2DA
    goto label_A2DA;

    // A2C2: LDA #$0B
    cpu.m_a = 0x0B;

    // A2C4: LDB ,U
    // TODO: Complex indexed addressing: ,U

    // A2C6: BITB #$04
    // TODO: Convert BITB #$04

    // A2C8: BEQ $A2D6
    if (cpu.zero_flag()) cpu.m_pc = 0xA2D6;

    // A2CA: ORA #$04
    cpu.m_a |= 0x04;

    // A2CC: LDB $4,X
    // TODO: Fix comma operator: LDB $4,X

    // A2CE: CMPB #$03
    cpu.compare_b(0x03);

    // A2D0: BNE $A2D4
    if (!cpu.zero_flag()) cpu.m_pc = 0xA2D4;

    // A2D2: ANDA #$FD
    cpu.m_a &= 0xFD;

    // A2D4: BRA $A2D8
    goto label_A2D8;

    // A2D6: ORA #$10
    cpu.m_a |= 0x10;

    label_A2D8:
    // A2D8: STA ,U
    cpu.write_memory(cpu.m_u, cpu.m_a);

    label_A2DA:
    // A2DA: LDB $4B13
    cpu.m_b = cpu.read_memory(0x4B13);

    // A2DD: ASLB 
    cpu.m_b <<= 1;

    // A2DE: ASLB 
    cpu.m_b <<= 1;

    // A2DF: LDX #$A182
    cpu.m_x = 0xA182;

    // A2E2: ABX 
    // TODO: Convert ABX 

    // A2E3: CMPX #$A1CE
    cpu.compare_x(0xA1CE);

    // A2E6: BCS $A2EB
    if (cpu.carry_flag()) cpu.m_pc = 0xA2EB;

    // A2E8: LDX #$A1CA
    cpu.m_x = 0xA1CA;

    // A2EB: TFR X,U
    cpu.m_u = cpu.m_x;

    // A2ED: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // A2EF: LEAX $7,X
    // TODO: Fix comma operator: LEAX $7,X

    // A2F1: CMPX $2,U
    cpu.execute_cmpx_immediate(cpu.read_memory16(cpu.m_u + 0x02));

    // A2F3: LBCS $A24F
    // TODO: Convert LBCS $A24F

    // A2F7: RTS 
    return;

    // A2F8: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // A2FA: LDB $4,X
    // TODO: Fix comma operator: LDB $4,X

    // A2FC: CMPB #$03
    cpu.compare_b(0x03);

    // A2FE: BNE $A304
    if (!cpu.zero_flag()) cpu.m_pc = 0xA304;

    // A300: LDB #$09
    cpu.m_b = 0x09;

    // A302: BRA $A306
    goto label_A306;

    // A304: LDB #$08
    cpu.m_b = 0x08;

    label_A306:
    // A306: STB <$DC
    cpu.write_memory(0xDC, cpu.m_b);

    // A308: LDD #$6680
    cpu.m_d = 0x6680;

    // A30B: STD $5E02
    cpu.write_memory16(0x5E02, cpu.m_d);

    // A30E: LDU #$49C2
    cpu.m_u = 0x49C2;

    // A311: LDB $6,X
    // TODO: Fix comma operator: LDB $6,X

    // A313: LEAU B,U
    // TODO: Fix comma operator: LEAU B,U

    // A315: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // A317: LDB $4,X
    // TODO: Fix comma operator: LDB $4,X

    // A319: CMPB #$03
    cpu.compare_b(0x03);

    // A31B: BEQ $A333
    if (cpu.zero_flag()) cpu.m_pc = 0xA333;

    // A31D: BITA #$04
    // TODO: Convert BITA #$04

    // A31F: BNE $A325
    if (!cpu.zero_flag()) cpu.m_pc = 0xA325;

    // A321: BITA #$10
    // TODO: Convert BITA #$10

    // A323: BNE $A32E
    if (!cpu.zero_flag()) cpu.m_pc = 0xA32E;

    // A325: LDB #$0A
    cpu.m_b = 0x0A;

    // A327: STB <$DC
    cpu.write_memory(0xDC, cpu.m_b);

    // A329: LDD #$6080
    cpu.m_d = 0x6080;

    // A32C: BRA $A331
    goto label_A331;

    // A32E: LDD #$6780
    cpu.m_d = 0x6780;

    label_A331:
    // A331: BRA $A33F
    goto label_A33F;

    // A333: BITA #$04
    // TODO: Convert BITA #$04

    // A335: BNE $A33C
    if (!cpu.zero_flag()) cpu.m_pc = 0xA33C;

    // A337: LDD #$6460
    cpu.m_d = 0x6460;

    // A33A: BRA $A33F
    goto label_A33F;

    // A33C: LDD #$6080
    cpu.m_d = 0x6080;

    label_A33F:
    // A33F: STD $5E00
    cpu.write_memory16(0x5E00, cpu.m_d);

    // A342: LDA #$72
    cpu.m_a = 0x72;

    // A344: STA $5E04
    cpu.write_memory(0x5E04, cpu.m_a);

    // A347: LDA $5000
    cpu.m_a = cpu.read_memory(0x5000);

    // A34A: ASLA 
    cpu.m_a <<= 1;

    // A34B: ASLA 
    cpu.m_a <<= 1;

    // A34C: STA $5E05
    cpu.write_memory(0x5E05, cpu.m_a);

    // A34F: LDB #$40
    cpu.m_b = 0x40;

    // A351: COMA 
    cpu.m_a = ~cpu.m_a;

    // A352: MUL 
    // TODO: Convert MUL 

    // A353: ADDA #$40
    cpu.m_a += 0x40;

    // A355: STA $5E03
    cpu.write_memory(0x5E03, cpu.m_a);

    // A358: LDD $5086
    cpu.m_d = cpu.read_memory16(0x5086);

    // A35B: ASLB 
    cpu.m_b <<= 1;

    // A35C: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A35D: ADDD #$0400
    cpu.m_d += 0x0400;

    // A360: SUBD $5000
    cpu.m_d -= 0x5000;

    // A363: LBLT $A3F4
    // TODO: Convert LBLT $A3F4

    // A367: LDA $4,X
    // TODO: Fix comma operator: LDA $4,X

    // A369: CMPA #$03
    cpu.compare_a(0x03);

    // A36B: BEQ $A3A7
    if (cpu.zero_flag()) cpu.m_pc = 0xA3A7;

    // A36D: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // A36F: BLT $A374
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xA374;

    // A371: JSR $BDD0
    cpu.call_function(0xBDD0);

    // A374: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // A377: SUBD #$0200
    cpu.m_d -= 0x0200;

    // A37A: SUBD $5086
    cpu.m_d -= 0x5086;

    // A37D: BGT $A3A5
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xA3A5;

    // A37F: LDD #$A018
    cpu.m_d = 0xA018;

    // A382: STD $5E02
    cpu.write_memory16(0x5E02, cpu.m_d);

    // A385: LDD #$6080
    cpu.m_d = 0x6080;

    // A388: STD $5E00
    cpu.write_memory16(0x5E00, cpu.m_d);

    // A38B: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // A38D: BLT $A395
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xA395;

    // A38F: JSR $9874
    cpu.call_function(0x9874);

    // A392: JSR $BDB2
    cpu.call_function(0xBDB2);

    // A395: LDA <$63
    cpu.m_a = cpu.read_memory(0x63);

    // A397: BNE $A39D
    if (!cpu.zero_flag()) cpu.m_pc = 0xA39D;

    // A399: LDA $5002
    cpu.m_a = cpu.read_memory(0x5002);

    // A39C: NEGA 
    cpu.m_a = -cpu.m_a;

    // A39D: LDB #$20
    cpu.m_b = 0x20;

    // A39F: TSTA 
    cpu.test_a();

    // A3A0: BPL $A3A3
    if (!cpu.negative_flag()) cpu.m_pc = 0xA3A3;

    // A3A2: NEGB 
    cpu.m_b = -cpu.m_b;

    // A3A3: STB <$63
    cpu.write_memory(0x63, cpu.m_b);

    // A3A5: BRA $A3F4
    goto label_A3F4;

    // A3A7: LDD $5044
    cpu.m_d = cpu.read_memory16(0x5044);

    // A3AA: SUBD #$07A0
    cpu.m_d -= 0x07A0;

    // A3AD: BGT $A3F4
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xA3F4;

    // A3AF: JSR $BDD0
    cpu.call_function(0xBDD0);

    // A3B2: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // A3B4: LDU #$49C2
    cpu.m_u = 0x49C2;

    // A3B7: LDB $6,X
    // TODO: Fix comma operator: LDB $6,X

    // A3B9: LEAU B,U
    // TODO: Fix comma operator: LEAU B,U

    // A3BB: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // A3BD: BITA #$04
    // TODO: Convert BITA #$04

    // A3BF: BNE $A3F4
    if (!cpu.zero_flag()) cpu.m_pc = 0xA3F4;

    // A3C1: LDD $5044
    cpu.m_d = cpu.read_memory16(0x5044);

    // A3C4: SUBD #$05A0
    cpu.m_d -= 0x05A0;

    // A3C7: BGE $A3F4
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xA3F4;

    // A3C9: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // A3CC: SUBD #$0400
    cpu.m_d -= 0x0400;

    // A3CF: SUBD $5086
    cpu.m_d -= 0x5086;

    // A3D2: BGT $A3F4
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xA3F4;

    // A3D4: LDD #$A018
    cpu.m_d = 0xA018;

    // A3D7: STD $5E00
    cpu.write_memory16(0x5E00, cpu.m_d);

    // A3DA: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // A3DC: BLT $A3E4
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xA3E4;

    // A3DE: JSR $9874
    cpu.call_function(0x9874);

    // A3E1: JSR $BDB2
    cpu.call_function(0xBDB2);

    // A3E4: LDA <$63
    cpu.m_a = cpu.read_memory(0x63);

    // A3E6: BNE $A3F4
    if (!cpu.zero_flag()) cpu.m_pc = 0xA3F4;

    // A3E8: LDA #$13
    cpu.m_a = 0x13;

    // A3EA: LDB $5002
    cpu.m_b = cpu.read_memory(0x5002);

    // A3ED: BMI $A3F0
    if (cpu.negative_flag()) cpu.m_pc = 0xA3F0;

    // A3EF: NEGA 
    cpu.m_a = -cpu.m_a;

    // A3F0: ADDA <$63
    cpu.m_a += 0x63;

    // A3F2: STA <$63
    cpu.write_memory(0x63, cpu.m_a);

    label_A3F4:
    // A3F4: LDA $5000
    cpu.m_a = cpu.read_memory(0x5000);

    // A3F7: SUBA #$08
    cpu.m_a -= 0x08;

    // A3F9: BGT $A400
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xA400;

    // A3FB: JSR $CD68
    cpu.call_function(0xCD68);

    // A3FE: BRA $A403
    goto label_A403;

    // A400: JSR $CD50
    cpu.call_function(0xCD50);

    label_A403:
    // A403: JSR $CD74
    cpu.call_function(0xCD74);

    // A406: JSR $A459
    cpu.call_function(0xA459);

    // A409: RTS 
    return;

    // A40A: JSR $CDE7
    cpu.call_function(0xCDE7);

    // A40D: LDD #$0000
    cpu.m_d = 0x0000;

    // A410: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // A413: LDD <$B3
    cpu.m_d = cpu.read_memory16(0xB3);

    // A415: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // A418: LDD <$B5
    cpu.m_d = cpu.read_memory16(0xB5);

    // A41A: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // A41D: LDD #$000F
    cpu.m_d = 0x000F;

    // A420: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // A423: LDA #$2A
    cpu.m_a = 0x2A;

    // A425: JSR $CDBA
    cpu.call_function(0xCDBA);

    // A428: LDD $5002
    cpu.m_d = cpu.read_memory16(0x5002);

    // A42B: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // A42E: LDD $5004
    cpu.m_d = cpu.read_memory16(0x5004);

    // A431: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // A434: BPL $A455
    if (!cpu.negative_flag()) cpu.m_pc = 0xA455;

    // A436: LDA <$BC
    cpu.m_a = cpu.read_memory(0xBC);

    // A438: BEQ $A455
    if (cpu.zero_flag()) cpu.m_pc = 0xA455;

    // A43A: LDA #$FF
    cpu.m_a = 0xFF;

    // A43C: STA <$BD
    cpu.write_memory(0xBD, cpu.m_a);

    // A43E: LDA #$03
    cpu.m_a = 0x03;

    // A440: STA $4B23
    cpu.write_memory(0x4B23, cpu.m_a);

    // A443: LDD #$6280
    cpu.m_d = 0x6280;

    // A446: STD $4B20
    cpu.write_memory16(0x4B20, cpu.m_d);

    // A449: LDD $5004
    cpu.m_d = cpu.read_memory16(0x5004);

    // A44C: LSRA 
    cpu.m_a >>= 1;

    // A44D: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // A44E: LSRA 
    cpu.m_a >>= 1;

    // A44F: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // A450: ADDB #$C0
    cpu.m_b += 0xC0;

    // A452: STB $4B22
    cpu.write_memory(0x4B22, cpu.m_b);

    // A455: JSR $CDE7
    cpu.call_function(0xCDE7);

    // A458: RTS 
    return;

    // A459: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // A45B: LDD $507C
    cpu.m_d = cpu.read_memory16(0x507C);

    // A45E: ASLB 
    cpu.m_b <<= 1;

    // A45F: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A460: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // A463: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // A465: SUBD $5042
    cpu.m_d -= 0x5042;

    // A468: STD $5002
    cpu.write_memory16(0x5002, cpu.m_d);

    // A46B: LDD #$0000
    cpu.m_d = 0x0000;

    // A46E: SUBD $5044
    cpu.m_d -= 0x5044;

    // A471: STD $5004
    cpu.write_memory16(0x5004, cpu.m_d);

    // A474: LDD $4700
    cpu.m_d = cpu.read_memory16(0x4700);

    // A477: STD $5000
    cpu.write_memory16(0x5000, cpu.m_d);

    // A47A: LDA #$86
    cpu.m_a = 0x86;

    // A47C: JSR $CDBA
    cpu.call_function(0xCDBA);

    // A47F: LDD $5002
    cpu.m_d = cpu.read_memory16(0x5002);

    // A482: STD $501A
    cpu.write_memory16(0x501A, cpu.m_d);

    // A485: LDD $5004
    cpu.m_d = cpu.read_memory16(0x5004);

    // A488: STD $501C
    cpu.write_memory16(0x501C, cpu.m_d);

    // A48B: LDA $4,X
    // TODO: Fix comma operator: LDA $4,X

    // A48D: CMPA #$03
    cpu.compare_a(0x03);

    // A48F: BEQ $A49F
    if (cpu.zero_flag()) cpu.m_pc = 0xA49F;

    // A491: LDD #$03C0
    cpu.m_d = 0x03C0;

    // A494: STD $5002
    cpu.write_memory16(0x5002, cpu.m_d);

    // A497: LDD #$5280
    cpu.m_d = 0x5280;

    // A49A: STD $5004
    cpu.write_memory16(0x5004, cpu.m_d);

    // A49D: BRA $A4BA
    goto label_A4BA;

    // A49F: LDU #$49C2
    cpu.m_u = 0x49C2;

    // A4A2: LDB $6,X
    // TODO: Fix comma operator: LDB $6,X

    // A4A4: LEAU B,U
    // TODO: Fix comma operator: LEAU B,U

    // A4A6: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // A4A8: BITA #$04
    // TODO: Convert BITA #$04

    // A4AA: LBNE $A54A
    // TODO: Convert LBNE $A54A

    // A4AE: LDD #$0690
    cpu.m_d = 0x0690;

    // A4B1: STD $5002
    cpu.write_memory16(0x5002, cpu.m_d);

    // A4B4: LDD #$05A0
    cpu.m_d = 0x05A0;

    // A4B7: STD $5004
    cpu.write_memory16(0x5004, cpu.m_d);

    label_A4BA:
    // A4BA: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // A4BD: SUBD #$0100
    cpu.m_d -= 0x0100;

    // A4C0: BPL $A4C5
    if (!cpu.negative_flag()) cpu.m_pc = 0xA4C5;

    // A4C2: LDD #$0000
    cpu.m_d = 0x0000;

    // A4C5: STD $5000
    cpu.write_memory16(0x5000, cpu.m_d);

    // A4C8: LDA #$86
    cpu.m_a = 0x86;

    // A4CA: JSR $CDBA
    cpu.call_function(0xCDBA);

    // A4CD: LDD $501A
    cpu.m_d = cpu.read_memory16(0x501A);

    // A4D0: ADDD $5002
    cpu.m_d += 0x5002;

    // A4D3: ADDD #$000A
    cpu.m_d += 0x000A;

    // A4D6: SUBD $5078
    cpu.m_d -= 0x5078;

    // A4D9: LBLT $A54A
    // TODO: Convert LBLT $A54A

    // A4DD: ASRA 
    // TODO: Convert ASRA 

    // A4DE: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // A4DF: SUBD #$000A
    cpu.m_d -= 0x000A;

    // A4E2: SUBD $5002
    cpu.m_d -= 0x5002;

    // A4E5: LBGT $A54A
    // TODO: Convert LBGT $A54A

    // A4E9: LDD $507A
    cpu.m_d = cpu.read_memory16(0x507A);

    // A4EC: SUBD $501C
    cpu.m_d -= 0x501C;

    // A4EF: BMI $A54A
    if (cpu.negative_flag()) cpu.m_pc = 0xA54A;

    // A4F1: SUBD $5004
    cpu.m_d -= 0x5004;

    // A4F4: BGT $A54A
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xA54A;

    // A4F6: LDA $4,X
    // TODO: Fix comma operator: LDA $4,X

    // A4F8: CMPA #$03
    cpu.compare_a(0x03);

    // A4FA: BNE $A50A
    if (!cpu.zero_flag()) cpu.m_pc = 0xA50A;

    // A4FC: LDD $507C
    cpu.m_d = cpu.read_memory16(0x507C);

    // A4FF: CMPD <$C8
    cpu.execute_cmpd_immediate(0xC8);

    // A502: BCC $A508
    if (!cpu.carry_flag()) cpu.m_pc = 0xA508;

    // A504: STD <$C8
    cpu.write_memory16(0xC8, cpu.m_d);

    // A506: STX <$C6
    cpu.write_memory16(0xC6, cpu.m_x);

    // A508: BRA $A54A
    goto label_A54A;

    // A50A: LDD #$4CE0
    cpu.m_d = 0x4CE0;

    // A50D: STD $5002
    cpu.write_memory16(0x5002, cpu.m_d);

    // A510: LDA #$86
    cpu.m_a = 0x86;

    // A512: JSR $CDBA
    cpu.call_function(0xCDBA);

    // A515: LDD $507A
    cpu.m_d = cpu.read_memory16(0x507A);

    // A518: ADDD #$000A
    cpu.m_d += 0x000A;

    // A51B: SUBD $501C
    cpu.m_d -= 0x501C;

    // A51E: SUBD $5002
    cpu.m_d -= 0x5002;

    // A521: BLT $A53E
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xA53E;

    // A523: LDU #$49C2
    cpu.m_u = 0x49C2;

    // A526: LDB $6,X
    // TODO: Fix comma operator: LDB $6,X

    // A528: LEAU B,U
    // TODO: Fix comma operator: LEAU B,U

    // A52A: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // A52C: BITA #$04
    // TODO: Convert BITA #$04

    // A52E: BNE $A54A
    if (!cpu.zero_flag()) cpu.m_pc = 0xA54A;

    // A530: LDD $507C
    cpu.m_d = cpu.read_memory16(0x507C);

    // A533: CMPD <$C8
    cpu.execute_cmpd_immediate(0xC8);

    // A536: BCC $A53C
    if (!cpu.carry_flag()) cpu.m_pc = 0xA53C;

    // A538: STD <$C8
    cpu.write_memory16(0xC8, cpu.m_d);

    // A53A: STX <$C6
    cpu.write_memory16(0xC6, cpu.m_x);

    // A53C: BRA $A54A
    goto label_A54A;

    // A53E: LDD $507C
    cpu.m_d = cpu.read_memory16(0x507C);

    // A541: CMPD <$D0
    cpu.execute_cmpd_immediate(0xD0);

    // A544: BCC $A54A
    if (!cpu.carry_flag()) cpu.m_pc = 0xA54A;

    // A546: STD <$D0
    cpu.write_memory16(0xD0, cpu.m_d);

    // A548: STX <$CE
    cpu.write_memory16(0xCE, cpu.m_x);

    label_A54A:
    // A54A: RTS 
    return;

    label_A54B:
    // A54B: LDX <$C6
    cpu.m_x = cpu.read_memory16(0xC6);

    // A54D: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // A54F: SUBD $5098
    cpu.m_d -= 0x5098;

    // A552: ANDA #$7F
    cpu.m_a &= 0x7F;

    // A554: ADDD $5098
    cpu.m_d += 0x5098;

    // A557: STD $5018
    cpu.write_memory16(0x5018, cpu.m_d);

    // A55A: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // A55C: STD $501A
    cpu.write_memory16(0x501A, cpu.m_d);

    // A55F: LDU #$49C2
    cpu.m_u = 0x49C2;

    // A562: LDB $6,X
    // TODO: Fix comma operator: LDB $6,X

    // A564: LEAU B,U
    // TODO: Fix comma operator: LEAU B,U

    // A566: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // A568: ORA #$04
    cpu.m_a |= 0x04;

    // A56A: STA ,U
    cpu.write_memory(cpu.m_u, cpu.m_a);

    // A56C: LDA $4,X
    // TODO: Fix comma operator: LDA $4,X

    // A56E: CMPA #$03
    cpu.compare_a(0x03);

    // A570: BNE $A580
    if (!cpu.zero_flag()) cpu.m_pc = 0xA580;

    // A572: LDD #$02D0
    cpu.m_d = 0x02D0;

    // A575: STD $501C
    cpu.write_memory16(0x501C, cpu.m_d);

    // A578: JSR $B852
    cpu.call_function(0xB852);

    // A57B: JSR $97F7
    cpu.call_function(0x97F7);

    // A57E: BRA $A58C
    goto label_A58C;

    // A580: LDD #$5460
    cpu.m_d = 0x5460;

    // A583: STD $501C
    cpu.write_memory16(0x501C, cpu.m_d);

    // A586: JSR $B85E
    cpu.call_function(0xB85E);

    // A589: JSR $973A
    cpu.call_function(0x973A);

    label_A58C:
    // A58C: JSR $BDFD
    cpu.call_function(0xBDFD);

    // A58F: RTS 
    return;

    // A590: RTS 
    return;

    // A591: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // A593: BLT $A5B2
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xA5B2;

    // A595: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // A597: LDU #$49C2
    cpu.m_u = 0x49C2;

    // A59A: LDB $6,X
    // TODO: Fix comma operator: LDB $6,X

    // A59C: LEAU B,U
    // TODO: Fix comma operator: LEAU B,U

    // A59E: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // A5A0: BITA #$04
    // TODO: Convert BITA #$04

    // A5A2: BNE $A5B2
    if (!cpu.zero_flag()) cpu.m_pc = 0xA5B2;

    // A5A4: LDA $4,X
    // TODO: Fix comma operator: LDA $4,X

    // A5A6: CMPA #$02
    cpu.compare_a(0x02);

    // A5A8: LBEQ $A608
    // TODO: Convert LBEQ $A608

    // A5AC: LBHI $A655
    // TODO: Convert LBHI $A655

    // A5B0: BRA $A5B3
    goto label_A5B3;

    // A5B2: RTS 
    return;

    label_A5B3:
    // A5B3: LDD #$4000
    cpu.m_d = 0x4000;

    // A5B6: SUBD $507C
    cpu.m_d -= 0x507C;

    // A5B9: ASLB 
    cpu.m_b <<= 1;

    // A5BA: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A5BB: STD $5000
    cpu.write_memory16(0x5000, cpu.m_d);

    // A5BE: LDD #$2940
    cpu.m_d = 0x2940;

    // A5C1: STD $5004
    cpu.write_memory16(0x5004, cpu.m_d);

    // A5C4: LDD #$02D0
    cpu.m_d = 0x02D0;

    // A5C7: STD $5002
    cpu.write_memory16(0x5002, cpu.m_d);

    // A5CA: LDA #$86
    cpu.m_a = 0x86;

    // A5CC: JSR $CDBA
    cpu.call_function(0xCDBA);

    // A5CF: LDD $5004
    cpu.m_d = cpu.read_memory16(0x5004);

    // A5D2: SUBD $5044
    cpu.m_d -= 0x5044;

    // A5D5: BGE $A5DE
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xA5DE;

    // A5D7: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // A5D9: ORA #$08
    cpu.m_a |= 0x08;

    // A5DB: STA ,U
    cpu.write_memory(cpu.m_u, cpu.m_a);

    // A5DD: RTS 
    return;

    // A5DE: SUBD $5002
    cpu.m_d -= 0x5002;

    // A5E1: BLE $A5E9
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xA5E9;

    // A5E3: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // A5E5: BITA #$08
    // TODO: Convert BITA #$08

    // A5E7: BEQ $A607
    if (cpu.zero_flag()) cpu.m_pc = 0xA607;

    // A5E9: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // A5EB: ANDA #$F7
    cpu.m_a &= 0xF7;

    // A5ED: STA ,U
    cpu.write_memory(cpu.m_u, cpu.m_a);

    // A5EF: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // A5F2: BPL $A5F7
    if (!cpu.negative_flag()) cpu.m_pc = 0xA5F7;

    // A5F4: JSR $A7B6
    cpu.call_function(0xA7B6);

    // A5F7: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // A5FA: BPL $A5FF
    if (!cpu.negative_flag()) cpu.m_pc = 0xA5FF;

    // A5FC: JSR $A7C8
    cpu.call_function(0xA7C8);

    // A5FF: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // A602: BPL $A607
    if (!cpu.negative_flag()) cpu.m_pc = 0xA607;

    // A604: JSR $A7BF
    cpu.call_function(0xA7BF);

    // A607: RTS 
    return;

    // A608: LDD #$4000
    cpu.m_d = 0x4000;

    // A60B: SUBD $507C
    cpu.m_d -= 0x507C;

    // A60E: ASLB 
    cpu.m_b <<= 1;

    // A60F: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A610: STD $5000
    cpu.write_memory16(0x5000, cpu.m_d);

    // A613: LDD #$2940
    cpu.m_d = 0x2940;

    // A616: STD $5004
    cpu.write_memory16(0x5004, cpu.m_d);

    // A619: LDD #$02D0
    cpu.m_d = 0x02D0;

    // A61C: STD $5002
    cpu.write_memory16(0x5002, cpu.m_d);

    // A61F: LDA #$86
    cpu.m_a = 0x86;

    // A621: JSR $CDBA
    cpu.call_function(0xCDBA);

    // A624: LDD $5004
    cpu.m_d = cpu.read_memory16(0x5004);

    // A627: SUBD $5044
    cpu.m_d -= 0x5044;

    // A62A: BGE $A633
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xA633;

    // A62C: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // A62E: ORA #$08
    cpu.m_a |= 0x08;

    // A630: STA ,U
    cpu.write_memory(cpu.m_u, cpu.m_a);

    // A632: RTS 
    return;

    // A633: SUBD $5002
    cpu.m_d -= 0x5002;

    // A636: BLE $A63E
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xA63E;

    // A638: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // A63A: BITA #$08
    // TODO: Convert BITA #$08

    // A63C: BEQ $A654
    if (cpu.zero_flag()) cpu.m_pc = 0xA654;

    // A63E: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // A640: ANDA #$F7
    cpu.m_a &= 0xF7;

    // A642: STA ,U
    cpu.write_memory(cpu.m_u, cpu.m_a);

    // A644: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // A647: BPL $A64C
    if (!cpu.negative_flag()) cpu.m_pc = 0xA64C;

    // A649: JSR $A7C8
    cpu.call_function(0xA7C8);

    // A64C: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // A64F: BPL $A654
    if (!cpu.negative_flag()) cpu.m_pc = 0xA654;

    // A651: JSR $A7BF
    cpu.call_function(0xA7BF);

    // A654: RTS 
    return;

    // A655: LDA #$40
    cpu.m_a = 0x40;

    // A657: SUBA $507C
    cpu.m_a -= cpu.read_memory(0x507C);

    // A65A: CMPA $4703
    cpu.compare_a(cpu.read_memory(cpu.read_memory(0x4703)));

    // A65D: BCS $A674
    if (cpu.carry_flag()) cpu.m_pc = 0xA674;

    // A65F: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // A662: CMPA #$50
    cpu.compare_a(0x50);

    // A664: BCC $A669
    if (!cpu.carry_flag()) cpu.m_pc = 0xA669;

    // A666: JMP $A728
    goto label_A728;

    // A669: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // A66C: BPL $A671
    if (!cpu.negative_flag()) cpu.m_pc = 0xA671;

    // A66E: JMP $A728
    goto label_A728;

    // A671: JMP $A728
    goto label_A728;

    // A674: RTS 
    return;

    // A675: EORA $B,S
    // TODO: Fix comma operator: EORA $B,S

    // A677: EORA -$B,S
    // TODO: Fix comma operator: EORA -$B,S

    // A679: EORA E,Y
    // TODO: Complex indexed addressing: E,Y

    // A67B: EORA [F,U]
    // TODO: Complex indexed addressing: [F,U]

    // A67D: EORA A,S
    // TODO: Fix comma operator: EORA A,S

    // A67F: EORA [-$5600,S]
    // TODO: Complex indexed addressing: [-$5600,S]

    // A683: ADCA $6,U
    // TODO: Fix comma operator: ADCA $6,U

    // A685: ADCA ,--Y
    // TODO: Complex indexed addressing: ,--Y

    // A687: ORA A,X
    // TODO: Fix comma operator: ORA A,X

    // A689: ORA [B,Y]
    // TODO: Complex indexed addressing: [B,Y]

    // A68B: STU <$A8
    cpu.write_memory16(0xA8, cpu.m_u);

    // A68D: LDB #$40
    cpu.m_b = 0x40;

    // A68F: STB $5,U
    cpu.write_memory(cpu.m_u + 0x05, cpu.m_b);

    // A691: LDB #$01
    cpu.m_b = 0x01;

    // A693: STB $3,U
    cpu.write_memory(cpu.m_u + 0x03, cpu.m_b);

    // A695: LDB #$01
    cpu.m_b = 0x01;

    // A697: STB $4,U
    cpu.write_memory(cpu.m_u + 0x04, cpu.m_b);

    // A699: LDA $4B3C
    cpu.m_a = cpu.read_memory(0x4B3C);

    // A69C: BLE $A6AB
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xA6AB;

    // A69E: CMPX $4B32
    cpu.compare_x(cpu.read_memory16(0x4B32));

    // A6A1: BNE $A6AB
    if (!cpu.zero_flag()) cpu.m_pc = 0xA6AB;

    // A6A3: DEC $4B3C
    cpu.decrement_memory(0x4B3C);

    // A6A6: BNE $A6AB
    if (!cpu.zero_flag()) cpu.m_pc = 0xA6AB;

    // A6A8: JSR $BD4E
    cpu.call_function(0xBD4E);

    // A6AB: LDU ,U
    // TODO: Complex indexed addressing: ,U

    // A6AD: LDX ,X
    // TODO: Complex indexed addressing: ,X

    // A6AF: LDD $8,X
    // TODO: Fix comma operator: LDD $8,X

    // A6B1: SUBD $5098
    cpu.m_d -= 0x5098;

    // A6B4: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // A6B6: LDD $A,X
    // TODO: Fix comma operator: LDD $A,X

    // A6B8: SUBD $509A
    cpu.m_d -= 0x509A;

    // A6BB: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // A6BD: LDD $C,X
    // TODO: Fix comma operator: LDD $C,X

    // A6BF: SUBD $509C
    cpu.m_d -= 0x509C;

    // A6C2: STD $4,U
    cpu.write_memory16(cpu.m_u + 0x04, cpu.m_d);

    // A6C4: JSR $BE02
    cpu.call_function(0xBE02);

    // A6C7: RTS 
    return;

    // A6C8: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A6C9: ROL $9,U
    // TODO: Fix comma operator: ROL $9,U

    // A6CB: ROL $9,U
    // TODO: Fix comma operator: ROL $9,U

    // A6CD: COM $9,U
    // TODO: Convert COM $9,U

    // A6CF: COM $9,U
    // TODO: Convert COM $9,U

    // A6D1: TSTB 
    cpu.test_b();

    // A6D2: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A6D3: TSTB 
    cpu.test_b();

    // A6D4: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A6D5: ASRB 
    // TODO: Convert ASRB 

    // A6D6: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A6D7: ASRB 
    // TODO: Convert ASRB 

    // A6D8: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A6D9: NEGB 
    cpu.m_b = -cpu.m_b;

    // A6DA: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A6DB: NEGB 
    cpu.m_b = -cpu.m_b;

    // A6DC: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A6DD: XDECA 
    cpu.m_a--;

    // A6DE: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A6DF: XDECA 
    cpu.m_a--;

    // A6E0: LDB $4B19
    cpu.m_b = cpu.read_memory(0x4B19);

    // A6E3: CMPB #$0C
    cpu.compare_b(0x0C);

    // A6E5: BCS $A6EC
    if (cpu.carry_flag()) cpu.m_pc = 0xA6EC;

    // A6E7: LDX #$A6DE
    cpu.m_x = 0xA6DE;

    // A6EA: BRA $A6F2
    goto label_A6F2;

    // A6EC: ASLB 
    cpu.m_b <<= 1;

    // A6ED: LDX #$A6C8
    cpu.m_x = 0xA6C8;

    // A6F0: LDX B,X
    // TODO: Fix comma operator: LDX B,X

    label_A6F2:
    // A6F2: BRA $A708
    goto label_A708;

    // A6F4: LDB $4B19
    cpu.m_b = cpu.read_memory(0x4B19);

    // A6F7: CMPB #$07
    cpu.compare_b(0x07);

    // A6F9: BLS $A6FD
    // TODO: Convert BLS $A6FD

    // A6FB: LDB #$07
    cpu.m_b = 0x07;

    // A6FD: ASLB 
    cpu.m_b <<= 1;

    // A6FE: LDX #$A718
    cpu.m_x = 0xA718;

    // A701: LDX B,X
    // TODO: Fix comma operator: LDX B,X

    // A703: BRA $A708
    goto label_A708;

    // A705: LDX #$494B
    cpu.m_x = 0x494B;

    label_A708:
    // A708: STX <$A8
    cpu.write_memory16(0xA8, cpu.m_x);

    // A70A: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // A70C: BEQ $A717
    if (cpu.zero_flag()) cpu.m_pc = 0xA717;

    // A70E: LEAX $6,X
    // TODO: Fix comma operator: LEAX $6,X

    // A710: CMPX #$496F
    cpu.compare_x(0x496F);

    // A713: BCS $A708
    if (cpu.carry_flag()) cpu.m_pc = 0xA708;

    // A715: LEAS $2,S
    // TODO: Fix comma operator: LEAS $2,S

    // A717: RTS 
    return;

    // A718: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A719: ROL $9,U
    // TODO: Fix comma operator: ROL $9,U

    // A71B: ROL $9,U
    // TODO: Fix comma operator: ROL $9,U

    // A71D: COM $9,U
    // TODO: Convert COM $9,U

    // A71F: COM $9,U
    // TODO: Convert COM $9,U

    // A721: TSTB 
    cpu.test_b();

    // A722: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A723: TSTB 
    cpu.test_b();

    // A724: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A725: TSTB 
    cpu.test_b();

    // A726: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // A727: ASRB 
    // TODO: Convert ASRB 

    label_A728:
    // A728: JSR $A6E0
    cpu.call_function(0xA6E0);

    // A72B: LDA #$70
    cpu.m_a = 0x70;

    // A72D: STA $5,X
    cpu.write_memory(cpu.m_x + 0x05, cpu.m_a);

    // A72F: LDA #$05
    cpu.m_a = 0x05;

    // A731: STA $3,X
    cpu.write_memory(cpu.m_x + 0x03, cpu.m_a);

    // A733: LDU <$64
    cpu.m_u = cpu.read_memory16(0x64);

    // A735: STX <$01
    cpu.write_memory16(0x01, cpu.m_x);

    // A737: LDD $2,U
    // TODO: Fix comma operator: LDD $2,U

    // A739: SUBD $509A
    cpu.m_d -= 0x509A;

    // A73C: BMI $A742
    if (cpu.negative_flag()) cpu.m_pc = 0xA742;

    // A73E: LDA #$08
    cpu.m_a = 0x08;

    // A740: BRA $A744
    goto label_A744;

    // A742: LDA #$07
    cpu.m_a = 0x07;

    label_A744:
    // A744: STA $4,X
    cpu.write_memory(cpu.m_x + 0x04, cpu.m_a);

    // A746: LDX ,X
    // TODO: Complex indexed addressing: ,X

    // A748: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // A74A: SUBA $5098
    cpu.m_a -= cpu.read_memory(0x5098);

    // A74D: ANDA #$80
    cpu.m_a &= 0x80;

    // A74F: EORA ,U
    // TODO: Complex indexed addressing: ,U

    // A751: LDB $1,U
    // TODO: Fix comma operator: LDB $1,U

    // A753: STD ,X
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // A755: LDD $2,U
    // TODO: Fix comma operator: LDD $2,U

    // A757: STD $2,X
    cpu.write_memory16(cpu.m_x + 0x02, cpu.m_d);

    // A759: LDD #$0200
    cpu.m_d = 0x0200;

    // A75C: STD $4,X
    cpu.write_memory16(cpu.m_x + 0x04, cpu.m_d);

    // A75E: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // A760: SUBD $509A
    cpu.m_d -= 0x509A;

    // A763: STA $6,X
    cpu.write_memory(cpu.m_x + 0x06, cpu.m_a);

    // A765: BPL $A76B
    if (!cpu.negative_flag()) cpu.m_pc = 0xA76B;

    // A767: COMA 
    cpu.m_a = ~cpu.m_a;

    // A768: NEGB 
    cpu.m_b = -cpu.m_b;

    // A769: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // A76B: STD $4706
    cpu.write_memory16(0x4706, cpu.m_d);

    // A76E: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // A770: SUBD $5098
    cpu.m_d -= 0x5098;

    // A773: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // A776: LDD #$0200
    cpu.m_d = 0x0200;

    // A779: STD $4706
    cpu.write_memory16(0x4706, cpu.m_d);

    // A77C: LDA $4700
    cpu.m_a = cpu.read_memory(0x4700);

    // A77F: ASLA 
    cpu.m_a <<= 1;

    // A780: ASLA 
    cpu.m_a <<= 1;

    // A781: BCC $A784
    if (!cpu.carry_flag()) cpu.m_pc = 0xA784;

    // A783: CLRA 
    cpu.m_a = 0;

    // A784: STA $7,X
    cpu.write_memory(cpu.m_x + 0x07, cpu.m_a);

    // A786: LDA <$7D
    cpu.m_a = cpu.read_memory(0x7D);

    // A788: EORA $6,X
    // TODO: Fix comma operator: EORA $6,X

    // A78A: BPL $A790
    if (!cpu.negative_flag()) cpu.m_pc = 0xA790;

    // A78C: CLR $6,X
    // TODO: Fix comma operator: CLR $6,X

    // A78E: BRA $A7B2
    goto label_A7B2;

    // A790: LDA <$7D
    cpu.m_a = cpu.read_memory(0x7D);

    // A792: BPL $A795
    if (!cpu.negative_flag()) cpu.m_pc = 0xA795;

    // A794: NEGA 
    cpu.m_a = -cpu.m_a;

    // A795: ASLA 
    cpu.m_a <<= 1;

    // A796: CMPA $7,X
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_x + 0x07));

    // A798: BHI $A79E
    // TODO: Convert BHI $A79E

    // A79A: CLR $6,X
    // TODO: Fix comma operator: CLR $6,X

    // A79C: BRA $A7B2
    goto label_A7B2;

    // A79E: LDA #$FF
    cpu.m_a = 0xFF;

    // A7A0: STA $6,X
    cpu.write_memory(cpu.m_x + 0x06, cpu.m_a);

    // A7A2: LDX <$01
    cpu.m_x = cpu.read_memory16(0x01);

    // A7A4: LDA $4,X
    // TODO: Fix comma operator: LDA $4,X

    // A7A6: CMPA #$08
    cpu.compare_a(0x08);

    // A7A8: BNE $A7AE
    if (!cpu.zero_flag()) cpu.m_pc = 0xA7AE;

    // A7AA: LDA #$07
    cpu.m_a = 0x07;

    // A7AC: BRA $A7B0
    goto label_A7B0;

    // A7AE: LDA #$08
    cpu.m_a = 0x08;

    label_A7B0:
    // A7B0: STA $4,X
    cpu.write_memory(cpu.m_x + 0x04, cpu.m_a);

    label_A7B2:
    // A7B2: JSR $BE11
    cpu.call_function(0xBE11);

    // A7B5: RTS 
    return;

    // A7B6: JSR $A705
    cpu.call_function(0xA705);

    // A7B9: LDA #$03
    cpu.m_a = 0x03;

    // A7BB: STA $4,X
    cpu.write_memory(cpu.m_x + 0x04, cpu.m_a);

    // A7BD: BRA $A7D1
    goto label_A7D1;

    // A7BF: JSR $A705
    cpu.call_function(0xA705);

    // A7C2: LDA #$04
    cpu.m_a = 0x04;

    // A7C4: STA $4,X
    cpu.write_memory(cpu.m_x + 0x04, cpu.m_a);

    // A7C6: BRA $A7D1
    goto label_A7D1;

    // A7C8: JSR $A705
    cpu.call_function(0xA705);

    // A7CB: LDA #$05
    cpu.m_a = 0x05;

    // A7CD: STA $4,X
    cpu.write_memory(cpu.m_x + 0x04, cpu.m_a);

    // A7CF: BRA $A7D1
    goto label_A7D1;

    label_A7D1:
    // A7D1: LDA #$70
    cpu.m_a = 0x70;

    // A7D3: STA $5,X
    cpu.write_memory(cpu.m_x + 0x05, cpu.m_a);

    // A7D5: LDA #$05
    cpu.m_a = 0x05;

    // A7D7: STA $3,X
    cpu.write_memory(cpu.m_x + 0x03, cpu.m_a);

    // A7D9: LDU <$64
    cpu.m_u = cpu.read_memory16(0x64);

    // A7DB: LDX ,X
    // TODO: Complex indexed addressing: ,X

    // A7DD: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // A7DF: SUBA $5098
    cpu.m_a -= cpu.read_memory(0x5098);

    // A7E2: ANDA #$80
    cpu.m_a &= 0x80;

    // A7E4: EORA ,U
    // TODO: Complex indexed addressing: ,U

    // A7E6: LDB $1,U
    // TODO: Fix comma operator: LDB $1,U

    // A7E8: STD ,X
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // A7EA: LDD $2,U
    // TODO: Fix comma operator: LDD $2,U

    // A7EC: STD $2,X
    cpu.write_memory16(cpu.m_x + 0x02, cpu.m_d);

    // A7EE: LDD $5044
    cpu.m_d = cpu.read_memory16(0x5044);

    // A7F1: STD $4,X
    cpu.write_memory16(cpu.m_x + 0x04, cpu.m_d);

    // A7F3: JSR $BE11
    cpu.call_function(0xBE11);

    // A7F6: RTS 
    return;

    // A7F7: LDA <$95
    cpu.m_a = cpu.read_memory(0x95);

    // A7F9: BEQ $A800
    if (cpu.zero_flag()) cpu.m_pc = 0xA800;

    // A7FB: JSR $A705
    cpu.call_function(0xA705);

    // A7FE: BRA $A803
    goto label_A803;

    // A800: JSR $A6F4
    cpu.call_function(0xA6F4);

    label_A803:
    // A803: LDA #$09
    cpu.m_a = 0x09;

    // A805: STA $4,X
    cpu.write_memory(cpu.m_x + 0x04, cpu.m_a);

    // A807: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // A809: BRA $A81F
    goto label_A81F;

    // A80B: LDA <$95
    cpu.m_a = cpu.read_memory(0x95);

    // A80D: BEQ $A814
    if (cpu.zero_flag()) cpu.m_pc = 0xA814;

    // A80F: JSR $A705
    cpu.call_function(0xA705);

    // A812: BRA $A817
    goto label_A817;

    // A814: JSR $A6F4
    cpu.call_function(0xA6F4);

    label_A817:
    // A817: LDA #$0A
    cpu.m_a = 0x0A;

    // A819: STA $4,X
    cpu.write_memory(cpu.m_x + 0x04, cpu.m_a);

    // A81B: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // A81D: BRA $A81F
    goto label_A81F;

    label_A81F:
    // A81F: LDD $5078
    cpu.m_d = cpu.read_memory16(0x5078);

    // A822: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // A824: LDD $507A
    cpu.m_d = cpu.read_memory16(0x507A);

    // A827: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // A829: LDD $507C
    cpu.m_d = cpu.read_memory16(0x507C);

    // A82C: STD $4,U
    cpu.write_memory16(cpu.m_u + 0x04, cpu.m_d);

    // A82E: LDA #$40
    cpu.m_a = 0x40;

    // A830: STA $5,X
    cpu.write_memory(cpu.m_x + 0x05, cpu.m_a);

    // A832: LDA #$05
    cpu.m_a = 0x05;

    // A834: STA $3,X
    cpu.write_memory(cpu.m_x + 0x03, cpu.m_a);

    // A836: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // A839: LSRA 
    cpu.m_a >>= 1;

    // A83A: LDB $507C
    cpu.m_b = cpu.read_memory(0x507C);

    // A83D: CMPB #$FC
    cpu.compare_b(0xFC);

    // A83F: BLT $A843
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xA843;

    // A841: LDA #$00
    cpu.m_a = 0x00;

    // A843: STA $6,U
    cpu.write_memory(cpu.m_u + 0x06, cpu.m_a);

    // A845: JSR $BE11
    cpu.call_function(0xBE11);

    // A848: RTS 
    return;

    label_A849:
    // A849: JMP $a849
    goto label_A849;

    // A84C: STX <$A8
    cpu.write_memory16(0xA8, cpu.m_x);

    // A84E: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // A850: BEQ $A861
    if (cpu.zero_flag()) cpu.m_pc = 0xA861;

    // A852: LDB $4,X
    // TODO: Fix comma operator: LDB $4,X

    // A854: ASLB 
    cpu.m_b <<= 1;

    // A855: CMPB #$16
    cpu.compare_b(0x16);

    // A857: BCC $A860
    if (!cpu.carry_flag()) cpu.m_pc = 0xA860;

    // A859: LDU #$A675
    cpu.m_u = 0xA675;

    // A85C: JSR [B,U]
    // TODO: Complex indexed addressing: [B,U]

    // A85E: BRA $A861
    goto label_A861;

    // A860: SWI 
    // TODO: Convert SWI 

    label_A861:
    // A861: LDX <$A8
    cpu.m_x = cpu.read_memory16(0xA8);

    // A863: LEAX $6,X
    // TODO: Fix comma operator: LEAX $6,X

    // A865: CMPX #$496F
    cpu.compare_x(0x496F);

    // A868: BCS $A84C
    if (cpu.carry_flag()) cpu.m_pc = 0xA84C;

    // A86A: RTS 
    return;

    // A86B: DEC $5,X
    // TODO: Fix comma operator: DEC $5,X

    // A86D: BGT $A874
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xA874;

    // A86F: CLRB 
    cpu.m_b = 0;

    // A870: STB $3,X
    cpu.write_memory(cpu.m_x + 0x03, cpu.m_b);

    // A872: STB $5,X
    cpu.write_memory(cpu.m_x + 0x05, cpu.m_b);

    // A874: RTS 
    return;

    // A875: DEC $5,X
    // TODO: Fix comma operator: DEC $5,X

    // A877: BGT $A880
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xA880;

    // A879: CLRB 
    cpu.m_b = 0;

    // A87A: STB $3,X
    cpu.write_memory(cpu.m_x + 0x03, cpu.m_b);

    // A87C: STB $5,X
    cpu.write_memory(cpu.m_x + 0x05, cpu.m_b);

    // A87E: BRA $A8A6
    goto label_A8A6;

    // A880: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // A882: LDD #$0000
    cpu.m_d = 0x0000;

    // A885: SUBD ,U
    // TODO: Complex indexed addressing: ,U

    // A887: JSR $CDA2
    cpu.call_function(0xCDA2);

    // A88A: ADDD ,U
    // TODO: Complex indexed addressing: ,U

    // A88C: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // A88E: LDD #$0000
    cpu.m_d = 0x0000;

    // A891: SUBD $2,U
    // TODO: Fix comma operator: SUBD $2,U

    // A893: JSR $CDA2
    cpu.call_function(0xCDA2);

    // A896: ADDD $2,U
    // TODO: Fix comma operator: ADDD $2,U

    // A898: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // A89A: LDD #$0000
    cpu.m_d = 0x0000;

    // A89D: SUBD $4,U
    // TODO: Fix comma operator: SUBD $4,U

    // A89F: JSR $CDA2
    cpu.call_function(0xCDA2);

    // A8A2: ADDD $4,U
    // TODO: Fix comma operator: ADDD $4,U

    // A8A4: STD $4,U
    cpu.write_memory16(cpu.m_u + 0x04, cpu.m_d);

    label_A8A6:
    // A8A6: RTS 
    return;

    // A8A7: DEC $5,X
    // TODO: Fix comma operator: DEC $5,X

    // A8A9: BGT $A8B2
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xA8B2;

    // A8AB: CLRB 
    cpu.m_b = 0;

    // A8AC: STB $3,X
    cpu.write_memory(cpu.m_x + 0x03, cpu.m_b);

    // A8AE: STB $5,X
    cpu.write_memory(cpu.m_x + 0x05, cpu.m_b);

    // A8B0: BRA $A8D5
    goto label_A8D5;

    // A8B2: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // A8B4: LDD ,U
    // TODO: Complex indexed addressing: ,U

    // A8B6: JSR $CDA2
    cpu.call_function(0xCDA2);

    // A8B9: ADDD ,U
    // TODO: Complex indexed addressing: ,U

    // A8BB: BVS $A8D6
    // TODO: Convert BVS $A8D6

    // A8BD: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // A8BF: LDD $2,U
    // TODO: Fix comma operator: LDD $2,U

    // A8C1: JSR $CDA2
    cpu.call_function(0xCDA2);

    // A8C4: ADDD $2,U
    // TODO: Fix comma operator: ADDD $2,U

    // A8C6: BVS $A8D6
    // TODO: Convert BVS $A8D6

    // A8C8: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // A8CA: LDD $4,U
    // TODO: Fix comma operator: LDD $4,U

    // A8CC: JSR $CDA2
    cpu.call_function(0xCDA2);

    // A8CF: ADDD $4,U
    // TODO: Fix comma operator: ADDD $4,U

    // A8D1: BVS $A8D6
    // TODO: Convert BVS $A8D6

    // A8D3: STD $4,U
    cpu.write_memory16(cpu.m_u + 0x04, cpu.m_d);

    label_A8D5:
    // A8D5: RTS 
    return;

    // A8D6: CLRB 
    cpu.m_b = 0;

    // A8D7: STB $3,X
    cpu.write_memory(cpu.m_x + 0x03, cpu.m_b);

    // A8D9: RTS 
    return;

    // A8DA: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // A8DC: LDD #$FF00
    cpu.m_d = 0xFF00;

    // A8DF: ADDD ,U
    // TODO: Complex indexed addressing: ,U

    // A8E1: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // A8E3: JMP $AA7D
    goto label_AA7D;

    // A8E6: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // A8E8: LDD #$FF00
    cpu.m_d = 0xFF00;

    // A8EB: ADDD ,U
    // TODO: Complex indexed addressing: ,U

    // A8ED: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // A8EF: LDD #$FF00
    cpu.m_d = 0xFF00;

    // A8F2: ADDD $2,U
    // TODO: Fix comma operator: ADDD $2,U

    // A8F4: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // A8F6: JMP $AA7D
    goto label_AA7D;

    // A8F9: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // A8FB: LDD #$FF00
    cpu.m_d = 0xFF00;

    // A8FE: ADDD ,U
    // TODO: Complex indexed addressing: ,U

    // A900: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // A902: LDD #$0100
    cpu.m_d = 0x0100;

    // A905: ADDD $2,U
    // TODO: Fix comma operator: ADDD $2,U

    // A907: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // A909: JMP $AA7D
    goto label_AA7D;

    // A90C: LDB ,U
    // TODO: Complex indexed addressing: ,U

    // A90E: SUBB $5098
    cpu.m_b -= cpu.read_memory(0x5098);

    // A911: BMI $A91F
    if (cpu.negative_flag()) cpu.m_pc = 0xA91F;

    // A913: CLRA 
    cpu.m_a = 0;

    // A914: JSR $CDB5
    cpu.call_function(0xCDB5);

    // A917: COMA 
    cpu.m_a = ~cpu.m_a;

    // A918: NEGB 
    cpu.m_b = -cpu.m_b;

    // A919: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // A91B: ADDD ,U
    // TODO: Complex indexed addressing: ,U

    // A91D: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // A91F: RTS 
    return;

    // A920: LDD #$0000
    cpu.m_d = 0x0000;

    // A923: SUBD $508E
    cpu.m_d -= 0x508E;

    // A926: JSR $CDA2
    cpu.call_function(0xCDA2);

    // A929: ADDD $508E
    cpu.m_d += 0x508E;

    // A92C: BPL $A932
    if (!cpu.negative_flag()) cpu.m_pc = 0xA932;

    // A92E: ADDD $2,U
    // TODO: Fix comma operator: ADDD $2,U

    // A930: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // A932: RTS 
    return;

    // A933: LDD #$0000
    cpu.m_d = 0x0000;

    // A936: SUBD $508E
    cpu.m_d -= 0x508E;

    // A939: JSR $CDA2
    cpu.call_function(0xCDA2);

    // A93C: ADDD $508E
    cpu.m_d += 0x508E;

    // A93F: BMI $A945
    if (cpu.negative_flag()) cpu.m_pc = 0xA945;

    // A941: ADDD $2,U
    // TODO: Fix comma operator: ADDD $2,U

    // A943: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // A945: RTS 
    return;

    // A946: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // A948: JSR $A933
    cpu.call_function(0xA933);

    // A94B: JSR $A90C
    cpu.call_function(0xA90C);

    // A94E: LDD ,U
    // TODO: Complex indexed addressing: ,U

    // A950: SUBD $5098
    cpu.m_d -= 0x5098;

    // A953: LDB $7,U
    // TODO: Fix comma operator: LDB $7,U

    // A955: MUL 
    // TODO: Convert MUL 

    // A956: TST $6,U
    // TODO: Convert TST $6,U

    // A958: BNE $A95E
    if (!cpu.zero_flag()) cpu.m_pc = 0xA95E;

    // A95A: COMA 
    cpu.m_a = ~cpu.m_a;

    // A95B: NEGB 
    cpu.m_b = -cpu.m_b;

    // A95C: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // A95E: ADDD $509A
    cpu.m_d += 0x509A;

    // A961: SUBD $2,U
    // TODO: Fix comma operator: SUBD $2,U

    // A963: ADDD #$0100
    cpu.m_d += 0x0100;

    // A966: BMI $A978
    if (cpu.negative_flag()) cpu.m_pc = 0xA978;

    // A968: JSR $CDA2
    cpu.call_function(0xCDA2);

    // A96B: CMPD #$0180
    cpu.execute_cmpd_immediate(0x0180);

    // A96F: BLE $A974
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xA974;

    // A971: LDD #$0180
    cpu.m_d = 0x0180;

    // A974: ADDD $2,U
    // TODO: Fix comma operator: ADDD $2,U

    // A976: BRA $A986
    goto label_A986;

    // A978: JSR $CD9E
    cpu.call_function(0xCD9E);

    // A97B: CMPD #$FE80
    cpu.execute_cmpd_immediate(0xFE80);

    // A97F: BGE $A984
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xA984;

    // A981: LDD #$FE80
    cpu.m_d = 0xFE80;

    // A984: ADDD $2,U
    // TODO: Fix comma operator: ADDD $2,U

    label_A986:
    // A986: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // A988: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // A98B: ADDD #$0100
    cpu.m_d += 0x0100;

    // A98E: SUBD $4,U
    // TODO: Fix comma operator: SUBD $4,U

    // A990: BMI $A9A2
    if (cpu.negative_flag()) cpu.m_pc = 0xA9A2;

    // A992: JSR $CDA2
    cpu.call_function(0xCDA2);

    // A995: CMPD #$0200
    cpu.execute_cmpd_immediate(0x0200);

    // A999: BLE $A99E
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xA99E;

    // A99B: LDD #$0200
    cpu.m_d = 0x0200;

    // A99E: ADDD $4,U
    // TODO: Fix comma operator: ADDD $4,U

    // A9A0: STD $4,U
    cpu.write_memory16(cpu.m_u + 0x04, cpu.m_d);

    // A9A2: RTS 
    return;

    // A9A3: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // A9A5: JSR $A920
    cpu.call_function(0xA920);

    // A9A8: JSR $A90C
    cpu.call_function(0xA90C);

    // A9AB: LDD ,U
    // TODO: Complex indexed addressing: ,U

    // A9AD: SUBD $5098
    cpu.m_d -= 0x5098;

    // A9B0: LDB $7,U
    // TODO: Fix comma operator: LDB $7,U

    // A9B2: MUL 
    // TODO: Convert MUL 

    // A9B3: TST $6,U
    // TODO: Convert TST $6,U

    // A9B5: BEQ $A9BB
    if (cpu.zero_flag()) cpu.m_pc = 0xA9BB;

    // A9B7: COMA 
    cpu.m_a = ~cpu.m_a;

    // A9B8: NEGB 
    cpu.m_b = -cpu.m_b;

    // A9B9: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // A9BB: ADDD $509A
    cpu.m_d += 0x509A;

    // A9BE: ADDD #$FF00
    cpu.m_d += 0xFF00;

    // A9C1: SUBD $2,U
    // TODO: Fix comma operator: SUBD $2,U

    // A9C3: BMI $A9D5
    if (cpu.negative_flag()) cpu.m_pc = 0xA9D5;

    // A9C5: JSR $CD9E
    cpu.call_function(0xCD9E);

    // A9C8: CMPD #$0180
    cpu.execute_cmpd_immediate(0x0180);

    // A9CC: BLE $A9D1
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xA9D1;

    // A9CE: LDD #$0180
    cpu.m_d = 0x0180;

    // A9D1: ADDD $2,U
    // TODO: Fix comma operator: ADDD $2,U

    // A9D3: BRA $A9E3
    goto label_A9E3;

    // A9D5: JSR $CDA2
    cpu.call_function(0xCDA2);

    // A9D8: CMPD #$FE80
    cpu.execute_cmpd_immediate(0xFE80);

    // A9DC: BGE $A9E1
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xA9E1;

    // A9DE: LDD #$FE80
    cpu.m_d = 0xFE80;

    // A9E1: ADDD $2,U
    // TODO: Fix comma operator: ADDD $2,U

    label_A9E3:
    // A9E3: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // A9E5: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // A9E8: ADDD #$0100
    cpu.m_d += 0x0100;

    // A9EB: SUBD $4,U
    // TODO: Fix comma operator: SUBD $4,U

    // A9ED: BMI $A9FF
    if (cpu.negative_flag()) cpu.m_pc = 0xA9FF;

    // A9EF: JSR $CDA2
    cpu.call_function(0xCDA2);

    // A9F2: CMPD #$0200
    cpu.execute_cmpd_immediate(0x0200);

    // A9F6: BLE $A9FB
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xA9FB;

    // A9F8: LDD #$0200
    cpu.m_d = 0x0200;

    // A9FB: ADDD $4,U
    // TODO: Fix comma operator: ADDD $4,U

    // A9FD: STD $4,U
    cpu.write_memory16(cpu.m_u + 0x04, cpu.m_d);

    // A9FF: RTS 
    return;

    // AA00: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // AA02: LDD #$FF00
    cpu.m_d = 0xFF00;

    // AA05: ADDD ,U
    // TODO: Complex indexed addressing: ,U

    // AA07: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // AA09: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // AA0C: ADDD #$0080
    cpu.m_d += 0x0080;

    // AA0F: SUBD $4,U
    // TODO: Fix comma operator: SUBD $4,U

    // AA11: BMI $AA23
    if (cpu.negative_flag()) cpu.m_pc = 0xAA23;

    // AA13: JSR $CDA2
    cpu.call_function(0xCDA2);

    // AA16: CMPD #$0180
    cpu.execute_cmpd_immediate(0x0180);

    // AA1A: BLE $AA1F
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xAA1F;

    // AA1C: LDD #$0180
    cpu.m_d = 0x0180;

    // AA1F: ADDD $4,U
    // TODO: Fix comma operator: ADDD $4,U

    // AA21: STD $4,U
    cpu.write_memory16(cpu.m_u + 0x04, cpu.m_d);

    // AA23: BRA $AA7D
    goto label_AA7D;

    // AA25: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // AA27: LDD #$FF00
    cpu.m_d = 0xFF00;

    // AA2A: ADDD ,U
    // TODO: Complex indexed addressing: ,U

    // AA2C: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // AA2E: LDD #$FF00
    cpu.m_d = 0xFF00;

    // AA31: ADDD $2,U
    // TODO: Fix comma operator: ADDD $2,U

    // AA33: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // AA35: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // AA38: ADDD #$0080
    cpu.m_d += 0x0080;

    // AA3B: SUBD $4,U
    // TODO: Fix comma operator: SUBD $4,U

    // AA3D: BMI $AA4F
    if (cpu.negative_flag()) cpu.m_pc = 0xAA4F;

    // AA3F: JSR $CDA2
    cpu.call_function(0xCDA2);

    // AA42: CMPD #$0180
    cpu.execute_cmpd_immediate(0x0180);

    // AA46: BLE $AA4B
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xAA4B;

    // AA48: LDD #$0180
    cpu.m_d = 0x0180;

    // AA4B: ADDD $4,U
    // TODO: Fix comma operator: ADDD $4,U

    // AA4D: STD $4,U
    cpu.write_memory16(cpu.m_u + 0x04, cpu.m_d);

    // AA4F: BRA $AA7D
    goto label_AA7D;

    // AA51: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // AA53: LDD #$FF00
    cpu.m_d = 0xFF00;

    // AA56: ADDD ,U
    // TODO: Complex indexed addressing: ,U

    // AA58: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // AA5A: LDD #$0100
    cpu.m_d = 0x0100;

    // AA5D: ADDD $2,U
    // TODO: Fix comma operator: ADDD $2,U

    // AA5F: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // AA61: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // AA64: ADDD #$0080
    cpu.m_d += 0x0080;

    // AA67: SUBD $4,U
    // TODO: Fix comma operator: SUBD $4,U

    // AA69: BMI $AA7B
    if (cpu.negative_flag()) cpu.m_pc = 0xAA7B;

    // AA6B: JSR $CDA2
    cpu.call_function(0xCDA2);

    // AA6E: CMPD #$0180
    cpu.execute_cmpd_immediate(0x0180);

    // AA72: BLE $AA77
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xAA77;

    // AA74: LDD #$0180
    cpu.m_d = 0x0180;

    // AA77: ADDD $4,U
    // TODO: Fix comma operator: ADDD $4,U

    // AA79: STD $4,U
    cpu.write_memory16(cpu.m_u + 0x04, cpu.m_d);

    // AA7B: BRA $AA7D
    goto label_AA7D;

    label_AA7D:
    // AA7D: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // AA7F: BITA #$02
    // TODO: Convert BITA #$02

    // AA81: BEQ $AA85
    if (cpu.zero_flag()) cpu.m_pc = 0xAA85;

    // AA83: CLR $3,X
    // TODO: Fix comma operator: CLR $3,X

    // AA85: RTS 
    return;

    // AA86: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // AA88: JSR $A90C
    cpu.call_function(0xA90C);

    // AA8B: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // AA8E: SUBD $4,U
    // TODO: Fix comma operator: SUBD $4,U

    // AA90: BMI $AA99
    if (cpu.negative_flag()) cpu.m_pc = 0xAA99;

    // AA92: JSR $CDA0
    cpu.call_function(0xCDA0);

    // AA95: ADDD $4,U
    // TODO: Fix comma operator: ADDD $4,U

    // AA97: STD $4,U
    cpu.write_memory16(cpu.m_u + 0x04, cpu.m_d);

    // AA99: LDA $4B19
    cpu.m_a = cpu.read_memory(0x4B19);

    // AA9C: CMPA #$01
    cpu.compare_a(0x01);

    // AA9E: BCS $AAA5
    if (cpu.carry_flag()) cpu.m_pc = 0xAAA5;

    // AAA0: LDD $509A
    cpu.m_d = cpu.read_memory16(0x509A);

    // AAA3: BRA $AAA8
    goto label_AAA8;

    // AAA5: LDD #$FE80
    cpu.m_d = 0xFE80;

    label_AAA8:
    // AAA8: SUBD $2,U
    // TODO: Fix comma operator: SUBD $2,U

    // AAAA: BMI $AAB3
    if (cpu.negative_flag()) cpu.m_pc = 0xAAB3;

    // AAAC: JSR $CDA0
    cpu.call_function(0xCDA0);

    // AAAF: ADDD $2,U
    // TODO: Fix comma operator: ADDD $2,U

    // AAB1: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // AAB3: BRA $AA7D
    goto label_AA7D;

    // AAB5: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // AAB7: JSR $A90C
    cpu.call_function(0xA90C);

    // AABA: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // AABD: SUBD $4,U
    // TODO: Fix comma operator: SUBD $4,U

    // AABF: BMI $AAC8
    if (cpu.negative_flag()) cpu.m_pc = 0xAAC8;

    // AAC1: JSR $CDA0
    cpu.call_function(0xCDA0);

    // AAC4: ADDD $4,U
    // TODO: Fix comma operator: ADDD $4,U

    // AAC6: STD $4,U
    cpu.write_memory16(cpu.m_u + 0x04, cpu.m_d);

    // AAC8: LDA $4B19
    cpu.m_a = cpu.read_memory(0x4B19);

    // AACB: CMPA #$01
    cpu.compare_a(0x01);

    // AACD: BCS $AAD4
    if (cpu.carry_flag()) cpu.m_pc = 0xAAD4;

    // AACF: LDD $509A
    cpu.m_d = cpu.read_memory16(0x509A);

    // AAD2: BRA $AAD7
    goto label_AAD7;

    // AAD4: LDD #$0180
    cpu.m_d = 0x0180;

    label_AAD7:
    // AAD7: SUBD $2,U
    // TODO: Fix comma operator: SUBD $2,U

    // AAD9: BPL $AAE2
    if (!cpu.negative_flag()) cpu.m_pc = 0xAAE2;

    // AADB: JSR $CDA0
    cpu.call_function(0xCDA0);

    // AADE: ADDD $2,U
    // TODO: Fix comma operator: ADDD $2,U

    // AAE0: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // AAE2: BRA $AA7D
    goto label_AA7D;

    // AAE4: LDX #$494B
    cpu.m_x = 0x494B;

    // AAE7: STX <$A8
    cpu.write_memory16(0xA8, cpu.m_x);

    // AAE9: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // AAEB: LBEQ $AC34
    // TODO: Convert LBEQ $AC34

    // AAEF: BITA #$10
    // TODO: Convert BITA #$10

    // AAF1: BEQ $AAF9
    if (cpu.zero_flag()) cpu.m_pc = 0xAAF9;

    // AAF3: JSR $ACB1
    cpu.call_function(0xACB1);

    // AAF6: JMP $AC34
    goto label_AC34;

    // AAF9: BITA #$04
    // TODO: Convert BITA #$04

    // AAFB: BEQ $AB11
    if (cpu.zero_flag()) cpu.m_pc = 0xAB11;

    // AAFD: LDD $5098
    cpu.m_d = cpu.read_memory16(0x5098);

    // AB00: STD $5040
    cpu.write_memory16(0x5040, cpu.m_d);

    // AB03: LDD $509A
    cpu.m_d = cpu.read_memory16(0x509A);

    // AB06: STD $5042
    cpu.write_memory16(0x5042, cpu.m_d);

    // AB09: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // AB0C: STD $5044
    cpu.write_memory16(0x5044, cpu.m_d);

    // AB0F: BRA $AB1D
    goto label_AB1D;

    // AB11: LDD #$0000
    cpu.m_d = 0x0000;

    // AB14: STD $5040
    cpu.write_memory16(0x5040, cpu.m_d);

    // AB17: STD $5042
    cpu.write_memory16(0x5042, cpu.m_d);

    // AB1A: STD $5044
    cpu.write_memory16(0x5044, cpu.m_d);

    label_AB1D:
    // AB1D: CLRA 
    cpu.m_a = 0;

    // AB1E: LDB $2,X
    // TODO: Fix comma operator: LDB $2,X

    // AB20: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // AB23: LDA #$67
    cpu.m_a = 0x67;

    // AB25: JSR $CDBA
    cpu.call_function(0xCDBA);

    // AB28: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // AB2B: CMPD #$0001
    cpu.execute_cmpd_immediate(0x0001);

    // AB2F: LBLE $AC27
    // TODO: Convert LBLE $AC27

    // AB33: CMPD #$7F00
    cpu.execute_cmpd_immediate(0x7F00);

    // AB37: LBHI $AC27
    // TODO: Convert LBHI $AC27

    // AB3B: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // AB3E: STD $5018
    cpu.write_memory16(0x5018, cpu.m_d);

    // AB41: LDD $5002
    cpu.m_d = cpu.read_memory16(0x5002);

    // AB44: STD $501A
    cpu.write_memory16(0x501A, cpu.m_d);

    // AB47: BPL $AB4D
    if (!cpu.negative_flag()) cpu.m_pc = 0xAB4D;

    // AB49: COMA 
    cpu.m_a = ~cpu.m_a;

    // AB4A: NEGB 
    cpu.m_b = -cpu.m_b;

    // AB4B: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // AB4D: SUBD $5000
    cpu.m_d -= 0x5000;

    // AB50: LBCC $AC27
    // TODO: Convert LBCC $AC27

    // AB54: LDD $5004
    cpu.m_d = cpu.read_memory16(0x5004);

    // AB57: STD $501C
    cpu.write_memory16(0x501C, cpu.m_d);

    // AB5A: BPL $AB60
    if (!cpu.negative_flag()) cpu.m_pc = 0xAB60;

    // AB5C: COMA 
    cpu.m_a = ~cpu.m_a;

    // AB5D: NEGB 
    cpu.m_b = -cpu.m_b;

    // AB5E: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // AB60: SUBD $5000
    cpu.m_d -= 0x5000;

    // AB63: LBCC $AC27
    // TODO: Convert LBCC $AC27

    // AB67: JSR $CCF0
    cpu.call_function(0xCCF0);

    // AB6A: LDX <$A8
    cpu.m_x = cpu.read_memory16(0xA8);

    // AB6C: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // AB6E: BITA #$03
    // TODO: Convert BITA #$03

    // AB70: BEQ $ABC0
    if (cpu.zero_flag()) cpu.m_pc = 0xABC0;

    // AB72: LDD #$0080
    cpu.m_d = 0x0080;

    // AB75: STD $5002
    cpu.write_memory16(0x5002, cpu.m_d);

    // AB78: LDA #$86
    cpu.m_a = 0x86;

    // AB7A: JSR $CDBA
    cpu.call_function(0xCDBA);

    // AB7D: LDD $5002
    cpu.m_d = cpu.read_memory16(0x5002);

    // AB80: ADDD #$000A
    cpu.m_d += 0x000A;

    // AB83: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    // AB85: LDD <$D6
    cpu.m_d = cpu.read_memory16(0xD6);

    // AB87: SUBD <$B3
    cpu.m_d -= 0xB3;

    // AB89: BPL $AB8F
    if (!cpu.negative_flag()) cpu.m_pc = 0xAB8F;

    // AB8B: COMA 
    cpu.m_a = ~cpu.m_a;

    // AB8C: NEGB 
    cpu.m_b = -cpu.m_b;

    // AB8D: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // AB8F: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // AB91: SUBD <$03
    cpu.m_d -= 0x03;

    // AB93: BGT $ABC0
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xABC0;

    // AB95: LDD <$D8
    cpu.m_d = cpu.read_memory16(0xD8);

    // AB97: SUBD <$B5
    cpu.m_d -= 0xB5;

    // AB99: BPL $AB9F
    if (!cpu.negative_flag()) cpu.m_pc = 0xAB9F;

    // AB9B: COMA 
    cpu.m_a = ~cpu.m_a;

    // AB9C: NEGB 
    cpu.m_b = -cpu.m_b;

    // AB9D: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // AB9F: CMPD <$03
    cpu.execute_cmpd_immediate(0x03);

    // ABA2: BGT $ABC0
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xABC0;

    // ABA4: ADDD <$01
    cpu.m_d += 0x01;

    // ABA6: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // ABA8: LDD <$03
    cpu.m_d = cpu.read_memory16(0x03);

    // ABAA: LSRA 
    cpu.m_a >>= 1;

    // ABAB: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // ABAC: ADDD <$03
    cpu.m_d += 0x03;

    // ABAE: SUBD <$01
    cpu.m_d -= 0x01;

    // ABB0: BLT $ABC0
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xABC0;

    // ABB2: LDD $5018
    cpu.m_d = cpu.read_memory16(0x5018);

    // ABB5: CMPD <$CC
    cpu.execute_cmpd_immediate(0xCC);

    // ABB8: BCC $ABC0
    if (!cpu.carry_flag()) cpu.m_pc = 0xABC0;

    // ABBA: STD <$CC
    cpu.write_memory16(0xCC, cpu.m_d);

    // ABBC: LDX <$A8
    cpu.m_x = cpu.read_memory16(0xA8);

    // ABBE: STX <$CA
    cpu.write_memory16(0xCA, cpu.m_x);

    // ABC0: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // ABC2: BITA #$01
    // TODO: Convert BITA #$01

    // ABC4: BEQ $AC22
    if (cpu.zero_flag()) cpu.m_pc = 0xAC22;

    // ABC6: LDD $5018
    cpu.m_d = cpu.read_memory16(0x5018);

    // ABC9: ASLB 
    cpu.m_b <<= 1;

    // ABCA: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // ABCB: BMI $AC22
    if (cpu.negative_flag()) cpu.m_pc = 0xAC22;

    // ABCD: LDU $5086
    cpu.m_u = cpu.read_memory16(0x5086);

    // ABD0: CMPU #$0200
    cpu.execute_cmpu_immediate(0x0200);

    // ABD4: BLT $ABDB
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xABDB;

    // ABD6: SUBD $5086
    cpu.m_d -= 0x5086;

    // ABD9: BRA $ABDE
    goto label_ABDE;

    // ABDB: SUBD #$0200
    cpu.m_d -= 0x0200;

    label_ABDE:
    // ABDE: BLE $ABE5
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xABE5;

    // ABE0: SUBD #$0110
    cpu.m_d -= 0x0110;

    // ABE3: BGT $AC22
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xAC22;

    // ABE5: LDD <$D6
    cpu.m_d = cpu.read_memory16(0xD6);

    // ABE7: BMI $ABF0
    if (cpu.negative_flag()) cpu.m_pc = 0xABF0;

    // ABE9: SUBD #$01C0
    cpu.m_d -= 0x01C0;

    // ABEC: BGE $AC22
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xAC22;

    // ABEE: BRA $ABF5
    goto label_ABF5;

    // ABF0: SUBD #$FE40
    cpu.m_d -= 0xFE40;

    // ABF3: BLE $AC22
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xAC22;

    label_ABF5:
    // ABF5: LDD <$D8
    cpu.m_d = cpu.read_memory16(0xD8);

    // ABF7: BMI $AC00
    if (cpu.negative_flag()) cpu.m_pc = 0xAC00;

    // ABF9: SUBD #$01E0
    cpu.m_d -= 0x01E0;

    // ABFC: BGE $AC22
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xAC22;

    // ABFE: BRA $AC05
    goto label_AC05;

    // AC00: SUBD #$FE60
    cpu.m_d -= 0xFE60;

    // AC03: BLE $AC22
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xAC22;

    label_AC05:
    // AC05: CMPX <$CA
    cpu.compare_x(cpu.read_memory16(0xCA));

    // AC07: BNE $AC14
    if (!cpu.zero_flag()) cpu.m_pc = 0xAC14;

    // AC09: LDA <$BC
    cpu.m_a = cpu.read_memory(0xBC);

    // AC0B: BEQ $AC14
    if (cpu.zero_flag()) cpu.m_pc = 0xAC14;

    // AC0D: JSR $AD20
    cpu.call_function(0xAD20);

    // AC10: LDX <$A8
    cpu.m_x = cpu.read_memory16(0xA8);

    // AC12: BRA $AC22
    goto label_AC22;

    // AC14: JSR $ACE0
    cpu.call_function(0xACE0);

    // AC17: LDD #$8040
    cpu.m_d = 0x8040;

    // AC1A: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AC1C: JSR $ACB1
    cpu.call_function(0xACB1);

    // AC1F: JMP $AC34
    goto label_AC34;

    label_AC22:
    // AC22: JSR $AC52
    cpu.call_function(0xAC52);

    // AC25: BRA $AC34
    goto label_AC34;

    // AC27: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // AC29: BITA #$01
    // TODO: Convert BITA #$01

    // AC2B: BEQ $AC31
    if (cpu.zero_flag()) cpu.m_pc = 0xAC31;

    // AC2D: LDA #$00
    cpu.m_a = 0x00;

    // AC2F: BRA $AC32
    goto label_AC32;

    // AC31: CLRA 
    cpu.m_a = 0;

    label_AC32:
    // AC32: STA $3,X
    cpu.write_memory(cpu.m_x + 0x03, cpu.m_a);

    label_AC34:
    // AC34: LDX <$A8
    cpu.m_x = cpu.read_memory16(0xA8);

    // AC36: LEAX $6,X
    // TODO: Fix comma operator: LEAX $6,X

    // AC38: CMPX #$496F
    cpu.compare_x(0x496F);

    // AC3B: LBCS $AAE7
    // TODO: Convert LBCS $AAE7

    // AC3F: LDD $5098
    cpu.m_d = cpu.read_memory16(0x5098);

    // AC42: STD $5040
    cpu.write_memory16(0x5040, cpu.m_d);

    // AC45: LDD $509A
    cpu.m_d = cpu.read_memory16(0x509A);

    // AC48: STD $5042
    cpu.write_memory16(0x5042, cpu.m_d);

    // AC4B: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // AC4E: STD $5044
    cpu.write_memory16(0x5044, cpu.m_d);

    // AC51: RTS 
    return;

    // AC52: LDX <$A8
    cpu.m_x = cpu.read_memory16(0xA8);

    // AC54: LDA #$08
    cpu.m_a = 0x08;

    // AC56: STA <$01
    cpu.write_memory(0x01, cpu.m_a);

    // AC58: LDD $5018
    cpu.m_d = cpu.read_memory16(0x5018);

    // AC5B: DEC <$01
    cpu.decrement_memory(0x01);

    // AC5D: BEQ $AC65
    if (cpu.zero_flag()) cpu.m_pc = 0xAC65;

    // AC5F: ASLB 
    cpu.m_b <<= 1;

    // AC60: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // AC61: BPL $AC5B
    if (!cpu.negative_flag()) cpu.m_pc = 0xAC5B;

    // AC63: ANDA #$7F
    cpu.m_a &= 0x7F;

    // AC65: STA <$02
    cpu.write_memory(0x02, cpu.m_a);

    // AC67: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // AC69: ANDA #$20
    cpu.m_a &= 0x20;

    // AC6B: BNE $AC7C
    if (!cpu.zero_flag()) cpu.m_pc = 0xAC7C;

    // AC6D: LDA <$01
    cpu.m_a = cpu.read_memory(0x01);

    // AC6F: ORA #$70
    cpu.m_a |= 0x70;

    // AC71: LDB <$02
    cpu.m_b = cpu.read_memory(0x02);

    // AC73: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AC75: LDD #$A015
    cpu.m_d = 0xA015;

    // AC78: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AC7A: BRA $ACA6
    goto label_ACA6;

    // AC7C: LDB <$02
    cpu.m_b = cpu.read_memory(0x02);

    // AC7E: LDA <$01
    cpu.m_a = cpu.read_memory(0x01);

    // AC80: INCA 
    cpu.m_a++;

    // AC81: CMPA #$03
    cpu.compare_a(0x03);

    // AC83: BCC $AC8A
    if (!cpu.carry_flag()) cpu.m_pc = 0xAC8A;

    // AC85: LDA #$03
    cpu.m_a = 0x03;

    // AC87: CLRB 
    cpu.m_b = 0;

    // AC88: BRA $AC91
    goto label_AC91;

    // AC8A: CMPA #$06
    cpu.compare_a(0x06);

    // AC8C: BCS $AC91
    if (cpu.carry_flag()) cpu.m_pc = 0xAC91;

    // AC8E: LDA #$06
    cpu.m_a = 0x06;

    // AC90: CLRB 
    cpu.m_b = 0;

    label_AC91:
    // AC91: ORA #$70
    cpu.m_a |= 0x70;

    // AC93: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AC95: LDB $5,X
    // TODO: Fix comma operator: LDB $5,X

    // AC97: ASLB 
    cpu.m_b <<= 1;

    // AC98: ASLB 
    cpu.m_b <<= 1;

    // AC99: ASLB 
    cpu.m_b <<= 1;

    // AC9A: ASLB 
    cpu.m_b <<= 1;

    // AC9B: ORB #$0F
    cpu.m_b |= 0x0F;

    // AC9D: LDA #$65
    cpu.m_a = 0x65;

    // AC9F: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // ACA1: LDD #$A017
    cpu.m_d = 0xA017;

    // ACA4: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    label_ACA6:
    // ACA6: LDD #$7200
    cpu.m_d = 0x7200;

    // ACA9: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // ACAB: LDD #$8040
    cpu.m_d = 0x8040;

    // ACAE: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // ACB0: RTS 
    return;

    // ACB1: LDX <$A8
    cpu.m_x = cpu.read_memory16(0xA8);

    // ACB3: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // ACB5: LDD ,U
    // TODO: Complex indexed addressing: ,U

    // ACB7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // ACB9: LDD $2,U
    // TODO: Fix comma operator: LDD $2,U

    // ACBB: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // ACBD: LDA $5,X
    // TODO: Fix comma operator: LDA $5,X

    // ACBF: LDB #$10
    cpu.m_b = 0x10;

    // ACC1: MUL 
    // TODO: Convert MUL 

    // ACC2: LDA #$70
    cpu.m_a = 0x70;

    // ACC4: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // ACC6: LDB $5,X
    // TODO: Fix comma operator: LDB $5,X

    // ACC8: ASLB 
    cpu.m_b <<= 1;

    // ACC9: ASLB 
    cpu.m_b <<= 1;

    // ACCA: ASLB 
    cpu.m_b <<= 1;

    // ACCB: ASLB 
    cpu.m_b <<= 1;

    // ACCC: LDA #$67
    cpu.m_a = 0x67;

    // ACCE: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // ACD0: LDD #$A017
    cpu.m_d = 0xA017;

    // ACD3: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // ACD5: LDD #$7200
    cpu.m_d = 0x7200;

    // ACD8: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // ACDA: LDD #$8040
    cpu.m_d = 0x8040;

    // ACDD: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // ACDF: RTS 
    return;

    // ACE0: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // ACE2: LDD -$4,Y
    // TODO: Fix comma operator: LDD -$4,Y

    // ACE4: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // ACE6: LDD -$2,Y
    // TODO: Fix comma operator: LDD -$2,Y

    // ACE8: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // ACEA: LDA #$10
    cpu.m_a = 0x10;

    // ACEC: STA $3,X
    cpu.write_memory(cpu.m_x + 0x03, cpu.m_a);

    // ACEE: LDA #$0F
    cpu.m_a = 0x0F;

    // ACF0: STA $5,X
    cpu.write_memory(cpu.m_x + 0x05, cpu.m_a);

    // ACF2: LDA #$00
    cpu.m_a = 0x00;

    // ACF4: STA $4,X
    cpu.write_memory(cpu.m_x + 0x04, cpu.m_a);

    // ACF6: JSR $9874
    cpu.call_function(0x9874);

    // ACF9: LDA <$63
    cpu.m_a = cpu.read_memory(0x63);

    // ACFB: BNE $AD00
    if (!cpu.zero_flag()) cpu.m_pc = 0xAD00;

    // ACFD: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // AD00: LDB #$20
    cpu.m_b = 0x20;

    // AD02: TSTA 
    cpu.test_a();

    // AD03: BPL $AD06
    if (!cpu.negative_flag()) cpu.m_pc = 0xAD06;

    // AD05: NEGB 
    cpu.m_b = -cpu.m_b;

    // AD06: STB <$63
    cpu.write_memory(0x63, cpu.m_b);

    // AD08: JSR $BDF3
    cpu.call_function(0xBDF3);

    // AD0B: LDA $4B37
    cpu.m_a = cpu.read_memory(0x4B37);

    // AD0E: BNE $AD1F
    if (!cpu.zero_flag()) cpu.m_pc = 0xAD1F;

    // AD10: INC $4B37
    cpu.increment_memory(0x4B37);

    // AD13: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // AD15: CMPA #$03
    cpu.compare_a(0x03);

    // AD17: BLS $AD1F
    // TODO: Convert BLS $AD1F

    // AD19: JSR $BD21
    cpu.call_function(0xBD21);

    // AD1C: JSR $BDE9
    cpu.call_function(0xBDE9);

    // AD1F: RTS 
    return;

    label_AD20:
    // AD20: LDU <$CA
    cpu.m_u = cpu.read_memory16(0xCA);

    // AD22: LDA $3,U
    // TODO: Fix comma operator: LDA $3,U

    // AD24: BEQ $AD3D
    if (cpu.zero_flag()) cpu.m_pc = 0xAD3D;

    // AD26: ANDA #$04
    cpu.m_a &= 0x04;

    // AD28: ORA #$20
    cpu.m_a |= 0x20;

    // AD2A: STA $3,U
    cpu.write_memory(cpu.m_u + 0x03, cpu.m_a);

    // AD2C: LDA #$0F
    cpu.m_a = 0x0F;

    // AD2E: STA $5,U
    cpu.write_memory(cpu.m_u + 0x05, cpu.m_a);

    // AD30: LDA #$00
    cpu.m_a = 0x00;

    // AD32: STA $4,U
    cpu.write_memory(cpu.m_u + 0x04, cpu.m_a);

    // AD34: JSR $BE07
    cpu.call_function(0xBE07);

    // AD37: JSR $9801
    cpu.call_function(0x9801);

    // AD3A: JSR $BDF8
    cpu.call_function(0xBDF8);

    // AD3D: RTS 
    return;

    // AD3E: LDA #$01
    cpu.m_a = 0x01;

    // AD40: STA <$45
    cpu.write_memory(0x45, cpu.m_a);

    // AD42: LDD $5098
    cpu.m_d = cpu.read_memory16(0x5098);

    // AD45: ADDD #$0100
    cpu.m_d += 0x0100;

    // AD48: STD <$46
    cpu.write_memory16(0x46, cpu.m_d);

    // AD4A: LDD $509A
    cpu.m_d = cpu.read_memory16(0x509A);

    // AD4D: STD <$48
    cpu.write_memory16(0x48, cpu.m_d);

    // AD4F: LDD $509C
    cpu.m_d = cpu.read_memory16(0x509C);

    // AD52: STD <$4A
    cpu.write_memory16(0x4A, cpu.m_d);

    // AD54: LDX #$494B
    cpu.m_x = 0x494B;

    // AD57: STX <$CA
    cpu.write_memory16(0xCA, cpu.m_x);

    // AD59: JSR $AD20
    cpu.call_function(0xAD20);

    // AD5C: LDX <$CA
    cpu.m_x = cpu.read_memory16(0xCA);

    // AD5E: LEAX $6,X
    // TODO: Fix comma operator: LEAX $6,X

    // AD60: CMPX #$496F
    cpu.compare_x(0x496F);

    // AD63: BCS $AD57
    if (cpu.carry_flag()) cpu.m_pc = 0xAD57;

    // AD65: JSR $BDA3
    cpu.call_function(0xBDA3);

    // AD68: JSR $BDD5
    cpu.call_function(0xBDD5);

    // AD6B: RTS 
    return;

    // AD6C: LDA <$45
    cpu.m_a = cpu.read_memory(0x45);

    // AD6E: BEQ $ADAE
    if (cpu.zero_flag()) cpu.m_pc = 0xADAE;

    // AD70: LDD <$46
    cpu.m_d = cpu.read_memory16(0x46);

    // AD72: ADDD #$0300
    cpu.m_d += 0x0300;

    // AD75: ADDD $5086
    cpu.m_d += 0x5086;

    // AD78: CMPD <$96
    cpu.execute_cmpd_immediate(0x96);

    // AD7B: BMI $AD7F
    if (cpu.negative_flag()) cpu.m_pc = 0xAD7F;

    // AD7D: LDD <$96
    cpu.m_d = cpu.read_memory16(0x96);

    // AD7F: STD <$46
    cpu.write_memory16(0x46, cpu.m_d);

    // AD81: LDD <$96
    cpu.m_d = cpu.read_memory16(0x96);

    // AD83: SUBD <$46
    cpu.m_d -= 0x46;

    // AD85: SUBD #$1000
    cpu.m_d -= 0x1000;

    // AD88: CMPD <$4A
    cpu.execute_cmpd_immediate(0x4A);

    // AD8B: BGE $AD8F
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xAD8F;

    // AD8D: STD <$4A
    cpu.write_memory16(0x4A, cpu.m_d);

    // AD8F: LDD <$96
    cpu.m_d = cpu.read_memory16(0x96);

    // AD91: SUBD <$46
    cpu.m_d -= 0x46;

    // AD93: JSR $CDA0
    cpu.call_function(0xCDA0);

    // AD96: TST <$48
    // TODO: Convert TST <$48

    // AD98: BMI $ADA3
    if (cpu.negative_flag()) cpu.m_pc = 0xADA3;

    // AD9A: CMPD <$48
    cpu.execute_cmpd_immediate(0x48);

    // AD9D: BGE $ADA1
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xADA1;

    // AD9F: STD <$48
    cpu.write_memory16(0x48, cpu.m_d);

    // ADA1: BRA $ADAE
    goto label_ADAE;

    // ADA3: COMA 
    cpu.m_a = ~cpu.m_a;

    // ADA4: NEGB 
    cpu.m_b = -cpu.m_b;

    // ADA5: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // ADA7: CMPD <$48
    cpu.execute_cmpd_immediate(0x48);

    // ADAA: BLE $ADAE
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xADAE;

    // ADAC: STD <$48
    cpu.write_memory16(0x48, cpu.m_d);

    label_ADAE:
    // ADAE: RTS 
    return;

    // ADAF: LDA <$45
    cpu.m_a = cpu.read_memory(0x45);

    // ADB1: BEQ $ADD3
    if (cpu.zero_flag()) cpu.m_pc = 0xADD3;

    // ADB3: LDD <$46
    cpu.m_d = cpu.read_memory16(0x46);

    // ADB5: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // ADB8: LDD <$48
    cpu.m_d = cpu.read_memory16(0x48);

    // ADBA: ADDD #$0080
    cpu.m_d += 0x0080;

    label_ADBD:
    // ADBD: JMP $adbd
    goto label_ADBD;

    // ADC0: LDD <$4A
    cpu.m_d = cpu.read_memory16(0x4A);

    // ADC2: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // ADC5: JSR $ADD4
    cpu.call_function(0xADD4);

    // ADC8: LDD <$48
    cpu.m_d = cpu.read_memory16(0x48);

    // ADCA: SUBD #$0080
    cpu.m_d -= 0x0080;

    // ADCD: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // ADD0: JSR $ADD4
    cpu.call_function(0xADD4);

    // ADD3: RTS 
    return;

    // ADD4: LDD #$000F
    cpu.m_d = 0x000F;

    // ADD7: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // ADDA: LDA #$67
    cpu.m_a = 0x67;

    // ADDC: JSR $CDBA
    cpu.call_function(0xCDBA);

    // ADDF: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // ADE2: SUBD #$E000
    cpu.m_d -= 0xE000;

    // ADE5: BGT $ADEB
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xADEB;

    // ADE7: LDA #$00
    cpu.m_a = 0x00;

    // ADE9: STA <$45
    cpu.write_memory(0x45, cpu.m_a);

    label_ADEB:
    // ADEB: JMP $adeb
    goto label_ADEB;

    // ADEE: CMPD #$0001
    cpu.execute_cmpd_immediate(0x0001);

    // ADF2: BLT $AE5F
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xAE5F;

    // ADF4: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // ADF7: STD $5018
    cpu.write_memory16(0x5018, cpu.m_d);

    // ADFA: LDD $5002
    cpu.m_d = cpu.read_memory16(0x5002);

    // ADFD: BPL $AE03
    if (!cpu.negative_flag()) cpu.m_pc = 0xAE03;

    // ADFF: COMA 
    cpu.m_a = ~cpu.m_a;

    // AE00: NEGB 
    cpu.m_b = -cpu.m_b;

    // AE01: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    label_AE03:
    // AE03: JMP $ae03
    goto label_AE03;

    // AE06: BGE $AE5F
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xAE5F;

    // AE08: LDD $5004
    cpu.m_d = cpu.read_memory16(0x5004);

    // AE0B: BPL $AE11
    if (!cpu.negative_flag()) cpu.m_pc = 0xAE11;

    // AE0D: COMA 
    cpu.m_a = ~cpu.m_a;

    // AE0E: NEGB 
    cpu.m_b = -cpu.m_b;

    // AE0F: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // AE11: SUBD $5000
    cpu.m_d -= 0x5000;

    // AE14: BGE $AE5F
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xAE5F;

    // AE16: LDD $4700
    cpu.m_d = cpu.read_memory16(0x4700);

    // AE19: STD $5000
    cpu.write_memory16(0x5000, cpu.m_d);

    // AE1C: LDA #$86
    cpu.m_a = 0x86;

    // AE1E: JSR $CDBA
    cpu.call_function(0xCDBA);

    // AE21: LDD $5004
    cpu.m_d = cpu.read_memory16(0x5004);

    // AE24: ADDD #$FF98
    cpu.m_d += 0xFF98;

    // AE27: ANDA #$1F
    cpu.m_a &= 0x1F;

    // AE29: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AE2B: LDD $5002
    cpu.m_d = cpu.read_memory16(0x5002);

    // AE2E: ANDA #$1F
    cpu.m_a &= 0x1F;

    // AE30: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AE32: LDD #$63FF
    cpu.m_d = 0x63FF;

    // AE35: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AE37: LDA #$06
    cpu.m_a = 0x06;

    // AE39: STA <$01
    cpu.write_memory(0x01, cpu.m_a);

    // AE3B: LDD $5018
    cpu.m_d = cpu.read_memory16(0x5018);

    // AE3E: DEC <$01
    cpu.decrement_memory(0x01);

    // AE40: BEQ $AE48
    if (cpu.zero_flag()) cpu.m_pc = 0xAE48;

    // AE42: ASLB 
    cpu.m_b <<= 1;

    // AE43: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // AE44: BPL $AE3E
    if (!cpu.negative_flag()) cpu.m_pc = 0xAE3E;

    // AE46: ANDA #$7F
    cpu.m_a &= 0x7F;

    // AE48: LDB <$01
    cpu.m_b = cpu.read_memory(0x01);

    // AE4A: ORB #$70
    cpu.m_b |= 0x70;

    // AE4C: STB ,Y+
    cpu.write_memory(cpu.m_y, cpu.m_b);
    cpu.m_y++;

    // AE4E: STA ,Y+
    cpu.write_memory(cpu.m_y, cpu.m_a);
    cpu.m_y++;

    // AE50: LDD #$A016
    cpu.m_d = 0xA016;

    // AE53: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AE55: LDD #$7200
    cpu.m_d = 0x7200;

    // AE58: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AE5A: LDD #$8040
    cpu.m_d = 0x8040;

    // AE5D: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AE5F: RTS 
    return;

    // AE60: LDA <$BD
    cpu.m_a = cpu.read_memory(0xBD);

    // AE62: BLE $AE6E
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xAE6E;

    // AE64: DEC <$BD
    cpu.decrement_memory(0xBD);

    // AE66: LDA #$00
    cpu.m_a = 0x00;

    // AE68: STA <$B7
    cpu.write_memory(0xB7, cpu.m_a);

    // AE6A: STA <$BC
    cpu.write_memory(0xBC, cpu.m_a);

    // AE6C: BRA $AE72
    goto label_AE72;

    // AE6E: LDA #$00
    cpu.m_a = 0x00;

    // AE70: STA <$BD
    cpu.write_memory(0xBD, cpu.m_a);

    label_AE72:
    // AE72: LDA #$00
    cpu.m_a = 0x00;

    // AE74: STA <$BC
    cpu.write_memory(0xBC, cpu.m_a);

    // AE76: ORCC #$10
    cpu.m_cc |= 0x10;

    // AE78: LDA <$31
    cpu.m_a = cpu.read_memory(0x31);

    // AE7A: BEQ $AE87
    if (cpu.zero_flag()) cpu.m_pc = 0xAE87;

    // AE7C: INC $4B1B
    cpu.increment_memory(0x4B1B);

    // AE7F: CLR <$BD
    cpu.write_memory(0xBD, 0);

    // AE81: LDB #$08
    cpu.m_b = 0x08;

    // AE83: STB <$B7
    cpu.write_memory(0xB7, cpu.m_b);

    // AE85: CLR <$31
    cpu.write_memory(0x31, 0);

    // AE87: LDA <$B7
    cpu.m_a = cpu.read_memory(0xB7);

    // AE89: BLE $AE9F
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xAE9F;

    // AE8B: DEC <$B7
    cpu.decrement_memory(0xB7);

    // AE8D: STA <$BC
    cpu.write_memory(0xBC, cpu.m_a);

    // AE8F: LDD <$74
    cpu.m_d = cpu.read_memory16(0x74);

    // AE91: STD <$B8
    cpu.write_memory16(0xB8, cpu.m_d);

    // AE93: LDD <$6B
    cpu.m_d = cpu.read_memory16(0x6B);

    // AE95: STD <$BA
    cpu.write_memory16(0xBA, cpu.m_d);

    // AE97: LDD <$2D
    cpu.m_d = cpu.read_memory16(0x2D);

    // AE99: STD <$B3
    cpu.write_memory16(0xB3, cpu.m_d);

    // AE9B: LDD <$2F
    cpu.m_d = cpu.read_memory16(0x2F);

    // AE9D: STD <$B5
    cpu.write_memory16(0xB5, cpu.m_d);

    label_AE9F:
    // AE9F: JMP $ae9f
    goto label_AE9F;

    // AEA1: LDA <$B7
    cpu.m_a = cpu.read_memory(0xB7);

    // AEA3: CMPA #$07
    cpu.compare_a(0x07);

    // AEA5: BNE $AEB2
    if (!cpu.zero_flag()) cpu.m_pc = 0xAEB2;

    // AEA7: LDA $4B36
    cpu.m_a = cpu.read_memory(0x4B36);

    // AEAA: BNE $AEAF
    if (!cpu.zero_flag()) cpu.m_pc = 0xAEAF;

    // AEAC: DEC $4B36
    cpu.decrement_memory(0x4B36);

    // AEAF: JSR $BE16
    cpu.call_function(0xBE16);

    label_AEB2:
    // AEB2: JMP $aeb2
    goto label_AEB2;

    // AEB4: STA <$C4
    cpu.write_memory(0xC4, cpu.m_a);

    // AEB6: STA <$C8
    cpu.write_memory(0xC8, cpu.m_a);

    // AEB8: STA <$CC
    cpu.write_memory(0xCC, cpu.m_a);

    // AEBA: STA <$D0
    cpu.write_memory(0xD0, cpu.m_a);

    // AEBC: RTS 
    return;

    // AEBD: LDA <$BC
    cpu.m_a = cpu.read_memory(0xBC);

    // AEBF: ORA <$BD
    cpu.m_a |= 0xBD;

    // AEC1: BNE $AEC4
    if (!cpu.zero_flag()) cpu.m_pc = 0xAEC4;

    // AEC3: RTS 
    return;

    // AEC4: LDA $4B1B
    cpu.m_a = cpu.read_memory(0x4B1B);

    // AEC7: ANDA #$01
    cpu.m_a &= 0x01;

    // AEC9: BEQ $AF25
    if (cpu.zero_flag()) cpu.m_pc = 0xAF25;

    // AECB: LDD #$FF98
    cpu.m_d = 0xFF98;

    // AECE: ADDD $4B1E
    cpu.m_d += 0x4B1E;

    // AED1: ANDA #$1F
    cpu.m_a &= 0x1F;

    // AED3: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AED5: LDD <$B5
    cpu.m_d = cpu.read_memory16(0xB5);

    // AED7: SUBD #$0000
    cpu.m_d -= 0x0000;

    // AEDA: SUBD $4B1E
    cpu.m_d -= 0x4B1E;

    // AEDD: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    // AEDF: LDD #$FE7A
    cpu.m_d = 0xFE7A;

    // AEE2: ADDD $4B1C
    cpu.m_d += 0x4B1C;

    // AEE5: ANDA #$1F
    cpu.m_a &= 0x1F;

    // AEE7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AEE9: LDD <$B3
    cpu.m_d = cpu.read_memory16(0xB3);

    // AEEB: SUBD #$FE7A
    cpu.m_d -= 0xFE7A;

    // AEEE: SUBD $4B1C
    cpu.m_d -= 0x4B1C;

    // AEF1: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // AEF3: LDB #$00
    cpu.m_b = 0x00;

    // AEF5: JSR $AF87
    cpu.call_function(0xAF87);

    // AEF8: LDD #$FDFB
    cpu.m_d = 0xFDFB;

    // AEFB: ADDD $4B1E
    cpu.m_d += 0x4B1E;

    // AEFE: ANDA #$1F
    cpu.m_a &= 0x1F;

    // AF00: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AF02: LDD <$B5
    cpu.m_d = cpu.read_memory16(0xB5);

    // AF04: SUBD #$FE63
    cpu.m_d -= 0xFE63;

    // AF07: SUBD $4B1E
    cpu.m_d -= 0x4B1E;

    // AF0A: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    // AF0C: LDD #$FE75
    cpu.m_d = 0xFE75;

    // AF0F: ADDD $4B1C
    cpu.m_d += 0x4B1C;

    // AF12: ANDA #$1F
    cpu.m_a &= 0x1F;

    // AF14: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AF16: LDD <$B3
    cpu.m_d = cpu.read_memory16(0xB3);

    // AF18: SUBD #$FE75
    cpu.m_d -= 0xFE75;

    // AF1B: SUBD $4B1C
    cpu.m_d -= 0x4B1C;

    // AF1E: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // AF20: LDB #$08
    cpu.m_b = 0x08;

    // AF22: JSR $AF87
    cpu.call_function(0xAF87);

    // AF25: LDA $4B1B
    cpu.m_a = cpu.read_memory(0x4B1B);

    // AF28: ANDA #$01
    cpu.m_a &= 0x01;

    // AF2A: BNE $AF86
    if (!cpu.zero_flag()) cpu.m_pc = 0xAF86;

    // AF2C: LDD #$FDFB
    cpu.m_d = 0xFDFB;

    // AF2F: ADDD $4B1E
    cpu.m_d += 0x4B1E;

    // AF32: ANDA #$1F
    cpu.m_a &= 0x1F;

    // AF34: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AF36: LDD <$B5
    cpu.m_d = cpu.read_memory16(0xB5);

    // AF38: SUBD #$FE63
    cpu.m_d -= 0xFE63;

    // AF3B: SUBD $4B1E
    cpu.m_d -= 0x4B1E;

    // AF3E: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    // AF40: LDD #$018B
    cpu.m_d = 0x018B;

    // AF43: ADDD $4B1C
    cpu.m_d += 0x4B1C;

    // AF46: ANDA #$1F
    cpu.m_a &= 0x1F;

    // AF48: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AF4A: LDD <$B3
    cpu.m_d = cpu.read_memory16(0xB3);

    // AF4C: SUBD #$018B
    cpu.m_d -= 0x018B;

    // AF4F: SUBD $4B1C
    cpu.m_d -= 0x4B1C;

    // AF52: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // AF54: LDB #$00
    cpu.m_b = 0x00;

    // AF56: JSR $AF87
    cpu.call_function(0xAF87);

    // AF59: LDD #$FF98
    cpu.m_d = 0xFF98;

    // AF5C: ADDD $4B1E
    cpu.m_d += 0x4B1E;

    // AF5F: ANDA #$1F
    cpu.m_a &= 0x1F;

    // AF61: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AF63: LDD <$B5
    cpu.m_d = cpu.read_memory16(0xB5);

    // AF65: SUBD #$0000
    cpu.m_d -= 0x0000;

    // AF68: SUBD $4B1E
    cpu.m_d -= 0x4B1E;

    // AF6B: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    // AF6D: LDD #$0186
    cpu.m_d = 0x0186;

    // AF70: ADDD $4B1C
    cpu.m_d += 0x4B1C;

    // AF73: ANDA #$1F
    cpu.m_a &= 0x1F;

    // AF75: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AF77: LDD <$B3
    cpu.m_d = cpu.read_memory16(0xB3);

    // AF79: SUBD #$0186
    cpu.m_d -= 0x0186;

    // AF7C: SUBD $4B1C
    cpu.m_d -= 0x4B1C;

    // AF7F: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // AF81: LDB #$08
    cpu.m_b = 0x08;

    // AF83: JSR $AF87
    cpu.call_function(0xAF87);

    // AF86: RTS 
    return;

    // AF87: LDU #$B04F
    cpu.m_u = 0xB04F;

    // AF8A: LEAU B,U
    // TODO: Fix comma operator: LEAU B,U

    // AF8C: LDA <$BD
    cpu.m_a = cpu.read_memory(0xBD);

    // AF8E: BLE $AF9A
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xAF9A;

    // AF90: LDB #$3F
    cpu.m_b = 0x3F;

    // AF92: MUL 
    // TODO: Convert MUL 

    // AF93: LDA #$63
    cpu.m_a = 0x63;

    // AF95: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AF97: JMP $AFEF
    goto label_AFEF;

    // AF9A: LDX #$4C00
    cpu.m_x = 0x4C00;

    // AF9D: LDD ,U++
    cpu.m_d = cpu.read_memory16(cpu.m_u++);

    // AF9F: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AFA1: LDD <$03
    cpu.m_d = cpu.read_memory16(0x03);

    // AFA3: BMI $AFA8
    if (cpu.negative_flag()) cpu.m_pc = 0xAFA8;

    // AFA5: ADDD #$0001
    cpu.m_d += 0x0001;

    // AFA8: ASRA 
    // TODO: Convert ASRA 

    // AFA9: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // AFAA: STD ,Y
    cpu.write_memory16(cpu.m_y, cpu.m_d);

    // AFAC: COMA 
    cpu.m_a = ~cpu.m_a;

    // AFAD: NEGB 
    cpu.m_b = -cpu.m_b;

    // AFAE: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // AFB0: ADDD <$03
    cpu.m_d += 0x03;

    // AFB2: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    // AFB4: LDD ,Y
    // TODO: Complex indexed addressing: ,Y

    // AFB6: ANDA #$1F
    cpu.m_a &= 0x1F;

    // AFB8: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AFBA: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    // AFBC: BMI $AFC1
    if (cpu.negative_flag()) cpu.m_pc = 0xAFC1;

    // AFBE: ADDD #$0001
    cpu.m_d += 0x0001;

    // AFC1: ASRA 
    // TODO: Convert ASRA 

    // AFC2: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // AFC3: STD ,Y
    cpu.write_memory16(cpu.m_y, cpu.m_d);

    // AFC5: COMA 
    cpu.m_a = ~cpu.m_a;

    // AFC6: NEGB 
    cpu.m_b = -cpu.m_b;

    // AFC7: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // AFC9: ADDD <$01
    cpu.m_d += 0x01;

    // AFCB: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // AFCD: LDD ,Y
    // TODO: Complex indexed addressing: ,Y

    // AFCF: ORA #$E0
    cpu.m_a |= 0xE0;

    // AFD1: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AFD3: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    // AFD5: ADDD #$0008
    cpu.m_d += 0x0008;

    // AFD8: BLT $AF9D
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xAF9D;

    // AFDA: SUBD #$0010
    cpu.m_d -= 0x0010;

    // AFDD: BGT $AF9D
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xAF9D;

    // AFDF: LDD <$03
    cpu.m_d = cpu.read_memory16(0x03);

    // AFE1: ADDD #$0008
    cpu.m_d += 0x0008;

    // AFE4: BLT $AF9D
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xAF9D;

    // AFE6: SUBD #$0010
    cpu.m_d -= 0x0010;

    // AFE9: BGT $AF9D
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xAF9D;

    // AFEB: LDD ,U++
    cpu.m_d = cpu.read_memory16(cpu.m_u++);

    // AFED: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    label_AFEF:
    // AFEF: LDD <$03
    cpu.m_d = cpu.read_memory16(0x03);

    // AFF1: ANDA #$1F
    cpu.m_a &= 0x1F;

    // AFF3: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AFF5: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    // AFF7: ORA #$E0
    cpu.m_a |= 0xE0;

    // AFF9: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // AFFB: LDA <$BD
    cpu.m_a = cpu.read_memory(0xBD);

    // AFFD: BLE $B006
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB006;

    // AFFF: LDD #$A011
    cpu.m_d = 0xA011;

    // B002: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // B004: BRA $B044
    goto label_B044;

    // B006: BGE $B044
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xB044;

    // B008: LDB $4B22
    cpu.m_b = cpu.read_memory(0x4B22);

    // B00B: LDA #$71
    cpu.m_a = 0x71;

    // B00D: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // B00F: LDD $4B20
    cpu.m_d = cpu.read_memory16(0x4B20);

    // B012: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // B014: LDA $4B23
    cpu.m_a = cpu.read_memory(0x4B23);

    // B017: ANDA #$01
    cpu.m_a &= 0x01;

    // B019: BEQ $B020
    if (cpu.zero_flag()) cpu.m_pc = 0xB020;

    // B01B: LDD #$A01C
    cpu.m_d = 0xA01C;

    // B01E: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // B020: LDA $4B23
    cpu.m_a = cpu.read_memory(0x4B23);

    // B023: ANDA #$02
    cpu.m_a &= 0x02;

    // B025: BEQ $B02C
    if (cpu.zero_flag()) cpu.m_pc = 0xB02C;

    // B027: LDD #$A023
    cpu.m_d = 0xA023;

    // B02A: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // B02C: LDA $4B23
    cpu.m_a = cpu.read_memory(0x4B23);

    // B02F: ANDA #$04
    cpu.m_a &= 0x04;

    // B031: BEQ $B038
    if (cpu.zero_flag()) cpu.m_pc = 0xB038;

    // B033: LDD #$A02A
    cpu.m_d = 0xA02A;

    // B036: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // B038: LDA $4B23
    cpu.m_a = cpu.read_memory(0x4B23);

    // B03B: ANDA #$08
    cpu.m_a &= 0x08;

    // B03D: BEQ $B044
    if (cpu.zero_flag()) cpu.m_pc = 0xB044;

    // B03F: LDD #$A031
    cpu.m_d = 0xA031;

    // B042: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    label_B044:
    // B044: LDD #$7200
    cpu.m_d = 0x7200;

    // B047: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // B049: LDD #$8040
    cpu.m_d = 0x8040;

    // B04C: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // B04E: RTS 
    return;

    // B04F: SUBA $1,X
    // TODO: Fix comma operator: SUBA $1,X

    // B051: SUBA $2,X
    // TODO: Fix comma operator: SUBA $2,X

    // B053: SUBA $3,X
    // TODO: Fix comma operator: SUBA $3,X

    // B055: SUBA $4,X
    // TODO: Fix comma operator: SUBA $4,X

    // B057: SUBA $5,X
    // TODO: Fix comma operator: SUBA $5,X

    // B059: SUBA $6,X
    // TODO: Fix comma operator: SUBA $6,X

    // B05B: SUBA $7,X
    // TODO: Fix comma operator: SUBA $7,X

    // B05D: SUBA $8,X
    // TODO: Fix comma operator: SUBA $8,X

    // B05F: SUBA $9,X
    // TODO: Fix comma operator: SUBA $9,X

    // B061: SUBA $A,X
    // TODO: Fix comma operator: SUBA $A,X

    // B063: SUBA $B,X
    // TODO: Fix comma operator: SUBA $B,X

    // B065: SUBA $C,X
    // TODO: Fix comma operator: SUBA $C,X

    // B067: SUBA $D,X
    // TODO: Fix comma operator: SUBA $D,X

    // B069: SUBA $E,X
    // TODO: Fix comma operator: SUBA $E,X

    // B06B: SUBA $F,X
    // TODO: Fix comma operator: SUBA $F,X

    // B06D: SUBA -$10,X
    // TODO: Fix comma operator: SUBA -$10,X

    // B06F: SUBA $1,X
    // TODO: Fix comma operator: SUBA $1,X

    // B071: LDA <$BC
    cpu.m_a = cpu.read_memory(0xBC);

    // B073: BEQ $B094
    if (cpu.zero_flag()) cpu.m_pc = 0xB094;

    // B075: JSR $B095
    cpu.call_function(0xB095);

    // B078: LDD #$0200
    cpu.m_d = 0x0200;

    // B07B: STD $4706
    cpu.write_memory16(0x4706, cpu.m_d);

    // B07E: LDD <$CC
    cpu.m_d = cpu.read_memory16(0xCC);

    // B080: BMI $B089
    if (cpu.negative_flag()) cpu.m_pc = 0xB089;

    // B082: LDA #$04
    cpu.m_a = 0x04;

    // B084: STA <$BD
    cpu.write_memory(0xBD, cpu.m_a);

    // B086: JSR $AD20
    cpu.call_function(0xAD20);

    // B089: LDA <$44
    cpu.m_a = cpu.read_memory(0x44);

    // B08B: BLE $B094
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB094;

    // B08D: LDA #$FF
    cpu.m_a = 0xFF;

    // B08F: STA <$44
    cpu.write_memory(0x44, cpu.m_a);

    // B091: JSR $AD3E
    cpu.call_function(0xAD3E);

    // B094: RTS 
    return;

    // B095: LDD #$7000
    cpu.m_d = 0x7000;

    // B098: ADDD $5040
    cpu.m_d += 0x5040;

    // B09B: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // B09D: LDD #$0000
    cpu.m_d = 0x0000;

    // B0A0: SUBD <$B8
    cpu.m_d -= 0xB8;

    // B0A2: JSR $CDA2
    cpu.call_function(0xCDA2);

    // B0A5: ADDD <$B8
    cpu.m_d += 0xB8;

    // B0A7: ADDD $5042
    cpu.m_d += 0x5042;

    // B0AA: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    // B0AC: LDD #$0000
    cpu.m_d = 0x0000;

    // B0AF: SUBD <$BA
    cpu.m_d -= 0xBA;

    // B0B1: JSR $CDA2
    cpu.call_function(0xCDA2);

    // B0B4: ADDD <$BA
    cpu.m_d += 0xBA;

    // B0B6: ADDD $5044
    cpu.m_d += 0x5044;

    // B0B9: STD <$05
    cpu.write_memory16(0x05, cpu.m_d);

    // B0BB: LDD #$F000
    cpu.m_d = 0xF000;

    // B0BE: SUBD <$05
    cpu.m_d -= 0x05;

    // B0C0: LBLT $B158
    // TODO: Convert LBLT $B158

    // B0C4: STD $4706
    cpu.write_memory16(0x4706, cpu.m_d);

    // B0C7: LDD $5044
    cpu.m_d = cpu.read_memory16(0x5044);

    // B0CA: SUBD <$05
    cpu.m_d -= 0x05;

    // B0CC: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // B0CF: LDD <$03
    cpu.m_d = cpu.read_memory16(0x03);

    // B0D1: SUBD $5042
    cpu.m_d -= 0x5042;

    // B0D4: STD $5002
    cpu.write_memory16(0x5002, cpu.m_d);

    // B0D7: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    // B0D9: SUBD $5040
    cpu.m_d -= 0x5040;

    // B0DC: STD $5004
    cpu.write_memory16(0x5004, cpu.m_d);

    // B0DF: LDD $4700
    cpu.m_d = cpu.read_memory16(0x4700);

    // B0E2: STD $5000
    cpu.write_memory16(0x5000, cpu.m_d);

    // B0E5: LDA #$86
    cpu.m_a = 0x86;

    // B0E7: JSR $CDBA
    cpu.call_function(0xCDBA);

    // B0EA: LDD <$03
    cpu.m_d = cpu.read_memory16(0x03);

    // B0EC: SUBD $5002
    cpu.m_d -= 0x5002;

    // B0EF: BMI $B0F9
    if (cpu.negative_flag()) cpu.m_pc = 0xB0F9;

    // B0F1: CMPD #$0400
    cpu.execute_cmpd_immediate(0x0400);

    // B0F5: BGT $B158
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xB158;

    // B0F7: BRA $B0FF
    goto label_B0FF;

    label_B0F9:
    // B0F9: JMP $b0f9
    goto label_B0F9;

    // B0FD: BLT $B158
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB158;

    label_B0FF:
    // B0FF: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    // B101: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    // B103: SUBD $5004
    cpu.m_d -= 0x5004;

    // B106: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // B108: STD <$C0
    cpu.write_memory16(0xC0, cpu.m_d);

    // B10A: LDD #$F000
    cpu.m_d = 0xF000;

    // B10D: STD <$05
    cpu.write_memory16(0x05, cpu.m_d);

    // B10F: LDA #$FF
    cpu.m_a = 0xFF;

    // B111: STA <$BD
    cpu.write_memory(0xBD, cpu.m_a);

    // B113: LDA #$03
    cpu.m_a = 0x03;

    // B115: STA $4B23
    cpu.write_memory(0x4B23, cpu.m_a);

    // B118: LDA <$01
    cpu.m_a = cpu.read_memory(0x01);

    // B11A: SUBA $5040
    cpu.m_a -= cpu.read_memory(0x5040);

    // B11D: LDB #$03
    cpu.m_b = 0x03;

    // B11F: MUL 
    // TODO: Convert MUL 

    // B120: CMPD #$00E0
    cpu.execute_cmpd_immediate(0x00E0);

    // B124: BCS $B128
    if (cpu.carry_flag()) cpu.m_pc = 0xB128;

    // B126: LDB #$E0
    cpu.m_b = 0xE0;

    // B128: STB $4B22
    cpu.write_memory(0x4B22, cpu.m_b);

    // B12B: LDD #$6280
    cpu.m_d = 0x6280;

    // B12E: STD $4B20
    cpu.write_memory16(0x4B20, cpu.m_d);

    // B131: LDA <$95
    cpu.m_a = cpu.read_memory(0x95);

    // B133: BEQ $B157
    if (cpu.zero_flag()) cpu.m_pc = 0xB157;

    // B135: LDA <$44
    cpu.m_a = cpu.read_memory(0x44);

    // B137: BNE $B157
    if (!cpu.zero_flag()) cpu.m_pc = 0xB157;

    // B139: LDD <$03
    cpu.m_d = cpu.read_memory16(0x03);

    // B13B: ADDD #$0200
    cpu.m_d += 0x0200;

    // B13E: BLT $B157
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB157;

    // B140: SUBD #$0400
    cpu.m_d -= 0x0400;

    // B143: BGT $B157
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xB157;

    // B145: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    // B147: SUBD <$96
    cpu.m_d -= 0x96;

    // B149: ADDD #$0200
    cpu.m_d += 0x0200;

    // B14C: BLT $B157
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB157;

    // B14E: SUBD #$0400
    cpu.m_d -= 0x0400;

    // B151: BGT $B157
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xB157;

    // B153: LDA #$01
    cpu.m_a = 0x01;

    // B155: STA <$44
    cpu.write_memory(0x44, cpu.m_a);

    // B157: RTS 
    return;

    // B158: LDD <$03
    cpu.m_d = cpu.read_memory16(0x03);

    // B15A: LBPL $B1E3
    // TODO: Convert LBPL $B1E3

    // B15E: LDD #$FC00
    cpu.m_d = 0xFC00;

    // B161: SUBD <$03
    cpu.m_d -= 0x03;

    // B163: LBLT $B260
    // TODO: Convert LBLT $B260

    // B167: STD $4706
    cpu.write_memory16(0x4706, cpu.m_d);

    // B16A: LDD $5042
    cpu.m_d = cpu.read_memory16(0x5042);

    // B16D: SUBD <$03
    cpu.m_d -= 0x03;

    // B16F: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // B172: LDD <$05
    cpu.m_d = cpu.read_memory16(0x05);

    // B174: SUBD $5044
    cpu.m_d -= 0x5044;

    // B177: STD $5004
    cpu.write_memory16(0x5004, cpu.m_d);

    // B17A: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    // B17C: SUBD $5040
    cpu.m_d -= 0x5040;

    // B17F: STD $5002
    cpu.write_memory16(0x5002, cpu.m_d);

    // B182: LDD $4700
    cpu.m_d = cpu.read_memory16(0x4700);

    // B185: STD $5000
    cpu.write_memory16(0x5000, cpu.m_d);

    // B188: LDA #$86
    cpu.m_a = 0x86;

    // B18A: JSR $CDBA
    cpu.call_function(0xCDBA);

    // B18D: LDD <$05
    cpu.m_d = cpu.read_memory16(0x05);

    // B18F: SUBD $5004
    cpu.m_d -= 0x5004;

    // B192: BMI $B19E
    if (cpu.negative_flag()) cpu.m_pc = 0xB19E;

    // B194: CMPD #$0000
    cpu.execute_cmpd_immediate(0x0000);

    // B198: LBGT $B260
    // TODO: Convert LBGT $B260

    // B19C: BRA $B1A6
    goto label_B1A6;

    // B19E: CMPD #$F000
    cpu.execute_cmpd_immediate(0xF000);

    // B1A2: LBLT $B260
    // TODO: Convert LBLT $B260

    label_B1A6:
    // B1A6: JMP $b1a6
    goto label_B1A6;

    // B1A8: ADDD #$1000
    cpu.m_d += 0x1000;

    // B1AB: STD <$BE
    cpu.write_memory16(0xBE, cpu.m_d);

    // B1AD: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    // B1AF: SUBD $5002
    cpu.m_d -= 0x5002;

    // B1B2: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // B1B4: STD <$C0
    cpu.write_memory16(0xC0, cpu.m_d);

    // B1B6: LDD #$FC00
    cpu.m_d = 0xFC00;

    // B1B9: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    // B1BB: LDA #$FF
    cpu.m_a = 0xFF;

    // B1BD: STA <$BD
    cpu.write_memory(0xBD, cpu.m_a);

    // B1BF: LDA #$09
    cpu.m_a = 0x09;

    // B1C1: STA $4B23
    cpu.write_memory(0x4B23, cpu.m_a);

    // B1C4: LDA <$01
    cpu.m_a = cpu.read_memory(0x01);

    // B1C6: SUBA $5040
    cpu.m_a -= cpu.read_memory(0x5040);

    // B1C9: LDB #$03
    cpu.m_b = 0x03;

    // B1CB: MUL 
    // TODO: Convert MUL 

    // B1CC: CMPD #$00E0
    cpu.execute_cmpd_immediate(0x00E0);

    // B1D0: BCS $B1D4
    if (cpu.carry_flag()) cpu.m_pc = 0xB1D4;

    // B1D2: LDB #$E0
    cpu.m_b = 0xE0;

    // B1D4: STB $4B22
    cpu.write_memory(0x4B22, cpu.m_b);

    // B1D7: LDD #$6280
    cpu.m_d = 0x6280;

    // B1DA: STD $4B20
    cpu.write_memory16(0x4B20, cpu.m_d);

    // B1DD: LDX #$4989
    cpu.m_x = 0x4989;

    // B1E0: JMP $B261
    goto label_B261;

    // B1E3: SUBD #$0400
    cpu.m_d -= 0x0400;

    // B1E6: BLT $B260
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB260;

    // B1E8: STD $4706
    cpu.write_memory16(0x4706, cpu.m_d);

    // B1EB: LDD <$03
    cpu.m_d = cpu.read_memory16(0x03);

    // B1ED: SUBD $5042
    cpu.m_d -= 0x5042;

    // B1F0: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // B1F3: LDD <$05
    cpu.m_d = cpu.read_memory16(0x05);

    // B1F5: SUBD $5044
    cpu.m_d -= 0x5044;

    // B1F8: STD $5004
    cpu.write_memory16(0x5004, cpu.m_d);

    // B1FB: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    // B1FD: SUBD $5040
    cpu.m_d -= 0x5040;

    // B200: STD $5002
    cpu.write_memory16(0x5002, cpu.m_d);

    // B203: LDD $4700
    cpu.m_d = cpu.read_memory16(0x4700);

    // B206: STD $5000
    cpu.write_memory16(0x5000, cpu.m_d);

    // B209: LDA #$86
    cpu.m_a = 0x86;

    // B20B: JSR $CDBA
    cpu.call_function(0xCDBA);

    // B20E: LDD <$05
    cpu.m_d = cpu.read_memory16(0x05);

    // B210: SUBD $5004
    cpu.m_d -= 0x5004;

    // B213: BMI $B21D
    if (cpu.negative_flag()) cpu.m_pc = 0xB21D;

    // B215: CMPD #$0000
    cpu.execute_cmpd_immediate(0x0000);

    // B219: BGT $B260
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xB260;

    // B21B: BRA $B223
    goto label_B223;

    // B21D: CMPD #$F000
    cpu.execute_cmpd_immediate(0xF000);

    // B221: BLT $B260
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB260;

    label_B223:
    // B223: STD <$05
    cpu.write_memory16(0x05, cpu.m_d);

    // B225: ADDD #$1000
    cpu.m_d += 0x1000;

    // B228: STD <$BE
    cpu.write_memory16(0xBE, cpu.m_d);

    // B22A: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    // B22C: SUBD $5002
    cpu.m_d -= 0x5002;

    // B22F: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // B231: STD <$C0
    cpu.write_memory16(0xC0, cpu.m_d);

    // B233: LDD #$0400
    cpu.m_d = 0x0400;

    // B236: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    // B238: LDA #$FF
    cpu.m_a = 0xFF;

    // B23A: STA <$BD
    cpu.write_memory(0xBD, cpu.m_a);

    // B23C: LDA #$06
    cpu.m_a = 0x06;

    // B23E: STA $4B23
    cpu.write_memory(0x4B23, cpu.m_a);

    // B241: LDA <$01
    cpu.m_a = cpu.read_memory(0x01);

    // B243: SUBA $5040
    cpu.m_a -= cpu.read_memory(0x5040);

    // B246: LDB #$03
    cpu.m_b = 0x03;

    // B248: MUL 
    // TODO: Convert MUL 

    // B249: CMPD #$00E0
    cpu.execute_cmpd_immediate(0x00E0);

    // B24D: BCS $B251
    if (cpu.carry_flag()) cpu.m_pc = 0xB251;

    // B24F: LDB #$E0
    cpu.m_b = 0xE0;

    // B251: STB $4B22
    cpu.write_memory(0x4B22, cpu.m_b);

    // B254: LDD #$6280
    cpu.m_d = 0x6280;

    // B257: STD $4B20
    cpu.write_memory16(0x4B20, cpu.m_d);

    // B25A: LDX #$4999
    cpu.m_x = 0x4999;

    // B25D: JMP $B261
    goto label_B261;

    // B260: RTS 
    return;

    label_B261:
    // B261: LDA <$BC
    cpu.m_a = cpu.read_memory(0xBC);

    // B263: BNE $B266
    if (!cpu.zero_flag()) cpu.m_pc = 0xB266;

    // B265: RTS 
    return;

    // B266: LDB <$C0
    cpu.m_b = cpu.read_memory(0xC0);

    // B268: LSRB 
    cpu.m_b >>= 1;

    // B269: LSRB 
    cpu.m_b >>= 1;

    // B26A: LSRB 
    cpu.m_b >>= 1;

    // B26B: ANDB #$0F
    cpu.m_b &= 0x0F;

    // B26D: ABX 
    // TODO: Convert ABX 

    // B26E: LDD <$C0
    cpu.m_d = cpu.read_memory16(0xC0);

    // B270: ANDA #$07
    cpu.m_a &= 0x07;

    // B272: SUBD #$01C0
    cpu.m_d -= 0x01C0;

    // B275: BLT $B29B
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB29B;

    // B277: SUBD #$0480
    cpu.m_d -= 0x0480;

    // B27A: BGT $B29B
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xB29B;

    // B27C: LDA #$03
    cpu.m_a = 0x03;

    // B27E: STA <$01
    cpu.write_memory(0x01, cpu.m_a);

    // B280: LDD <$BE
    cpu.m_d = cpu.read_memory16(0xBE);

    // B282: SUBD #$0040
    cpu.m_d -= 0x0040;

    // B285: SUBD #$0380
    cpu.m_d -= 0x0380;

    // B288: BGT $B292
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xB292;

    // B28A: SUBD #$FC80
    cpu.m_d -= 0xFC80;

    // B28D: BLT $B29B
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB29B;

    // B28F: JMP $B29C
    goto label_B29C;

    // B292: SUBD #$0080
    cpu.m_d -= 0x0080;

    // B295: ASL <$01
    cpu.arithmetic_shift_left(0x01);

    // B297: ASL <$01
    cpu.arithmetic_shift_left(0x01);

    // B299: BNE $B285
    if (!cpu.zero_flag()) cpu.m_pc = 0xB285;

    // B29B: RTS 
    return;

    label_B29C:
    // B29C: LDA <$01
    cpu.m_a = cpu.read_memory(0x01);

    // B29E: ANDA ,X
    // TODO: Complex indexed addressing: ,X

    // B2A0: BEQ $B2D1
    if (cpu.zero_flag()) cpu.m_pc = 0xB2D1;

    // B2A2: STA <$02
    cpu.write_memory(0x02, cpu.m_a);

    // B2A4: LDA <$01
    cpu.m_a = cpu.read_memory(0x01);

    // B2A6: ASLA 
    cpu.m_a <<= 1;

    // B2A7: ANDA <$01
    cpu.m_a &= 0x01;

    // B2A9: CMPA <$02
    cpu.compare_a(cpu.read_memory(0x02));

    // B2AB: BEQ $B2D1
    if (cpu.zero_flag()) cpu.m_pc = 0xB2D1;

    // B2AD: BLS $B2C1
    // TODO: Convert BLS $B2C1

    // B2AF: LDA #$04
    cpu.m_a = 0x04;

    // B2B1: STA <$BD
    cpu.write_memory(0xBD, cpu.m_a);

    // B2B3: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // B2B5: EORA <$02
    cpu.m_a ^= 0x02;

    // B2B7: STA ,X
    cpu.write_memory(cpu.m_x, cpu.m_a);

    // B2B9: JSR $97F2
    cpu.call_function(0x97F2);

    // B2BC: JSR $BDFD
    cpu.call_function(0xBDFD);

    // B2BF: BRA $B2D1
    goto label_B2D1;

    // B2C1: LDA #$04
    cpu.m_a = 0x04;

    // B2C3: STA <$BD
    cpu.write_memory(0xBD, cpu.m_a);

    // B2C5: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // B2C7: EORA <$02
    cpu.m_a ^= 0x02;

    // B2C9: STA ,X
    cpu.write_memory(cpu.m_x, cpu.m_a);

    // B2CB: JSR $97FC
    cpu.call_function(0x97FC);

    // B2CE: JSR $BDFD
    cpu.call_function(0xBDFD);

    label_B2D1:
    // B2D1: RTS 
    return;

    // B2D2: LDA <$BC
    cpu.m_a = cpu.read_memory(0xBC);

    // B2D4: BEQ $B2E3
    if (cpu.zero_flag()) cpu.m_pc = 0xB2E3;

    // B2D6: LDD <$CC
    cpu.m_d = cpu.read_memory16(0xCC);

    // B2D8: BMI $B2E1
    if (cpu.negative_flag()) cpu.m_pc = 0xB2E1;

    // B2DA: LDA #$04
    cpu.m_a = 0x04;

    // B2DC: STA <$BD
    cpu.write_memory(0xBD, cpu.m_a);

    // B2DE: JSR $AD20
    cpu.call_function(0xAD20);

    // B2E1: BRA $B2E4
    goto label_B2E4;

    // B2E3: RTS 
    return;

    label_B2E4:
    // B2E4: LDD <$C4
    cpu.m_d = cpu.read_memory16(0xC4);

    // B2E6: BMI $B2F8
    if (cpu.negative_flag()) cpu.m_pc = 0xB2F8;

    // B2E8: CMPD <$C8
    cpu.execute_cmpd_immediate(0xC8);

    // B2EB: BHI $B2F8
    // TODO: Convert BHI $B2F8

    // B2ED: SUBD <$D0
    cpu.m_d -= 0xD0;

    // B2EF: BHI $B307
    // TODO: Convert BHI $B307

    // B2F1: LDA #$04
    cpu.m_a = 0x04;

    // B2F3: STA <$BD
    cpu.write_memory(0xBD, cpu.m_a);

    // B2F5: JMP $8ACF
    goto label_8ACF;

    // B2F8: LDD <$C8
    cpu.m_d = cpu.read_memory16(0xC8);

    // B2FA: BMI $B307
    if (cpu.negative_flag()) cpu.m_pc = 0xB307;

    // B2FC: SUBD <$D0
    cpu.m_d -= 0xD0;

    // B2FE: BHI $B307
    // TODO: Convert BHI $B307

    // B300: LDA #$04
    cpu.m_a = 0x04;

    // B302: STA <$BD
    cpu.write_memory(0xBD, cpu.m_a);

    // B304: JMP $A54B
    goto label_A54B;

    // B307: LDD <$D0
    cpu.m_d = cpu.read_memory16(0xD0);

    // B309: BMI $B32A
    if (cpu.negative_flag()) cpu.m_pc = 0xB32A;

    // B30B: LDA #$FF
    cpu.m_a = 0xFF;

    // B30D: STA <$BD
    cpu.write_memory(0xBD, cpu.m_a);

    // B30F: LDA #$0F
    cpu.m_a = 0x0F;

    // B311: STA $4B23
    cpu.write_memory(0x4B23, cpu.m_a);

    // B314: LDA <$D0
    cpu.m_a = cpu.read_memory(0xD0);

    // B316: LDB #$03
    cpu.m_b = 0x03;

    // B318: MUL 
    // TODO: Convert MUL 

    // B319: CMPD #$00E0
    cpu.execute_cmpd_immediate(0x00E0);

    // B31D: BCS $B321
    if (cpu.carry_flag()) cpu.m_pc = 0xB321;

    // B31F: LDB #$E0
    cpu.m_b = 0xE0;

    // B321: STB $4B22
    cpu.write_memory(0x4B22, cpu.m_b);

    // B324: LDD #$6680
    cpu.m_d = 0x6680;

    // B327: STD $4B20
    cpu.write_memory16(0x4B20, cpu.m_d);

    // B32A: RTS 
    return;

    // B32B: LDA <$BC
    cpu.m_a = cpu.read_memory(0xBC);

    // B32D: BEQ $B33D
    if (cpu.zero_flag()) cpu.m_pc = 0xB33D;

    // B32F: LDD <$CC
    cpu.m_d = cpu.read_memory16(0xCC);

    // B331: BMI $B339
    if (cpu.negative_flag()) cpu.m_pc = 0xB339;

    // B333: SUBD <$C4
    cpu.m_d -= 0xC4;

    // B335: BCS $B33E
    if (cpu.carry_flag()) cpu.m_pc = 0xB33E;

    // B337: BRA $B345
    goto label_B345;

    // B339: LDA <$C4
    cpu.m_a = cpu.read_memory(0xC4);

    // B33B: BGE $B345
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xB345;

    // B33D: RTS 
    return;

    // B33E: LDA #$04
    cpu.m_a = 0x04;

    // B340: STA <$BD
    cpu.write_memory(0xBD, cpu.m_a);

    // B342: JMP $AD20
    goto label_AD20;

    label_B345:
    // B345: LDA #$04
    cpu.m_a = 0x04;

    // B347: STA <$BD
    cpu.write_memory(0xBD, cpu.m_a);

    // B349: JMP $8ACF
    goto label_8ACF;

    // B34C: ADCA $94FF
    cpu.add_a_with_carry(cpu.read_memory(0x94FF));

    // B34F: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B352: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B355: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B358: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B35B: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B35E: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B361: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B364: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B367: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B36A: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B36D: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B370: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B373: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B376: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B379: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B37C: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B37F: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B382: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B385: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B388: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B38B: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B38E: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B391: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B394: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B397: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B39A: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B39D: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B3A0: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B3A3: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B3A6: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B3A9: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B3AC: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B3AF: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // B3B2: COMA 
    cpu.m_a = ~cpu.m_a;

    // B3B3: CLRA 
    cpu.m_a = 0;

    // B3B4: NEGB 
    cpu.m_b = -cpu.m_b;

    // B3B5: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // B3B6: XNCB 
    // TODO: Convert XNCB 

    // B3B7: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // B3B8: ASRA 
    // TODO: Convert ASRA 

    // B3B9: ASLA 
    cpu.m_a <<= 1;

    // B3BA: LSRB 
    cpu.m_b >>= 1;

    // B3BB: BRA $B3EE
    goto label_B3EE;

    // B3BD: RTS 
    return;

    // B3BE: XANDCC #$33
    // TODO: Convert XANDCC #$33

    // B3C0: BRA $B403
    goto label_B403;

    // B3C2: LSRB 
    cpu.m_b >>= 1;

    // B3C3: NEGA 
    cpu.m_a = -cpu.m_a;

    // B3C4: XNCB 
    // TODO: Convert XNCB 

    // B3C5: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // B3C6: LSR <$BC
    // TODO: Convert LSR <$BC

    // B3C8: LDA <$FA
    cpu.m_a = cpu.read_memory(0xFA);

    // B3CA: XDECB 
    cpu.m_b--;

    // B3CB: BVC $B40E
    // TODO: Convert BVC $B40E

    // B3CD: INCA 
    cpu.m_a++;

    // B3CE: INCA 
    cpu.m_a++;

    // B3CF: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // B3D0: BRA $B429
    // TODO: External jump to 0xB429 - not implemented

    // B3D2: NEGA 
    cpu.m_a = -cpu.m_a;

    // B3D3: COMB 
    cpu.m_b = ~cpu.m_b;

    // B3D4: BRA $B42A
    goto label_B42A;

    // B3D6: ASLA 
    cpu.m_a <<= 1;

    // B3D7: LSRA 
    cpu.m_a >>= 1;

    // B3D8: BRA $B431
    goto label_B431;

    // B3DA: ASLA 
    cpu.m_a <<= 1;

    // B3DB: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // B3DC: NEGB 
    cpu.m_b = -cpu.m_b;

    // B3DD: COMA 
    cpu.m_a = ~cpu.m_a;

    // B3DE: XNCB 
    // TODO: Convert XNCB 

    // B3DF: NEGA 
    cpu.m_a = -cpu.m_a;

    // B3E0: COMA 
    cpu.m_a = ~cpu.m_a;

    // B3E1: XDECA 
    cpu.m_a--;

    // B3E2: LSRA 
    cpu.m_a >>= 1;

    // B3E3: XNCB 
    // TODO: Convert XNCB 

    // B3E4: LDA $49C0
    cpu.m_a = cpu.read_memory(0x49C0);

    // B3E7: CMPA #$03
    cpu.compare_a(0x03);

    // B3E9: BCS $B3F0
    if (cpu.carry_flag()) cpu.m_pc = 0xB3F0;

    // B3EB: LDA #$00
    cpu.m_a = 0x00;

    // B3ED: STA $49C0
    cpu.write_memory(0x49C0, cpu.m_a);

    label_B3EE:
    // B3EE: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // B3EF: SUBB #$86
    cpu.m_b -= 0x86;

    // B3F0: LDA #$01
    cpu.m_a = 0x01;

    // B3F1: NEG <$97
    // TODO: Convert NEG <$97

    // B3F2: STA <$9C
    cpu.write_memory(0x9C, cpu.m_a);

    // B3F3: CMPX <$86
    cpu.compare_x(cpu.read_memory16(0x86));

    // B3F4: LDA #$0B
    cpu.m_a = 0x0B;

    // B3F5: XDEC <$97
    // TODO: Convert XDEC <$97

    // B3F6: STA <$DC
    cpu.write_memory(0xDC, cpu.m_a);

    // B3F7: LDD <$97
    cpu.m_d = cpu.read_memory16(0x97);

    // B3F8: STA <$9D
    cpu.write_memory(0x9D, cpu.m_a);

    // B3F9: JSR <$BD
    cpu.call_function(0xBD);

    // B3FA: JSR $CD38
    cpu.call_function(0xCD38);

    // B3FB: XHCF 
    // TODO: Convert XHCF 

    // B3FC: XANDCC #$BD
    // TODO: Convert XANDCC #$BD

    // B3FD: JSR $B43F
    cpu.call_function(0xB43F);

    // B3FE: ANDA $3F96
    cpu.m_a &= cpu.read_memory(0x3F96);

    // B400: LDA <$9D
    cpu.m_a = cpu.read_memory(0x9D);

    // B401: JSR <$97
    cpu.call_function(0x97);

    // B402: STA <$DC
    cpu.write_memory(0xDC, cpu.m_a);

    label_B403:
    // B403: LDD <$BD
    cpu.m_d = cpu.read_memory16(0xBD);

    // B404: JSR $CD44
    cpu.call_function(0xCD44);

    // B405: XHCF 
    // TODO: Convert XHCF 

    // B406: LSRA 
    cpu.m_a >>= 1;

    // B407: JSR $B579
    cpu.call_function(0xB579);

    // B40A: LDA #$02
    cpu.m_a = 0x02;

    // B40C: STA <$9C
    cpu.write_memory(0x9C, cpu.m_a);

    // B40E: LDA #$0E
    cpu.m_a = 0x0E;

    // B410: STA <$DC
    cpu.write_memory(0xDC, cpu.m_a);

    // B412: STA <$9D
    cpu.write_memory(0x9D, cpu.m_a);

    // B414: JSR $CD38
    cpu.call_function(0xCD38);

    // B417: JSR $B43F
    cpu.call_function(0xB43F);

    // B41A: LDA <$9D
    cpu.m_a = cpu.read_memory(0x9D);

    // B41C: STA <$DC
    cpu.write_memory(0xDC, cpu.m_a);

    // B41E: JSR $CD44
    cpu.call_function(0xCD44);

    // B421: JSR $B579
    cpu.call_function(0xB579);

    // B424: LDA #$03
    cpu.m_a = 0x03;

    // B426: STA <$9C
    cpu.write_memory(0x9C, cpu.m_a);

    // B428: LDA #$0C
    cpu.m_a = 0x0C;

    label_B42A:
    // B42A: STA <$DC
    cpu.write_memory(0xDC, cpu.m_a);

    // B42C: STA <$9D
    cpu.write_memory(0x9D, cpu.m_a);

    // B42E: JSR $CD38
    cpu.call_function(0xCD38);

    label_B431:
    // B431: JMP $b431
    goto label_B431;

    // B434: LDA <$9D
    cpu.m_a = cpu.read_memory(0x9D);

    // B436: STA <$DC
    cpu.write_memory(0xDC, cpu.m_a);

    // B438: JSR $CD44
    cpu.call_function(0xCD44);

    // B43B: JSR $B579
    cpu.call_function(0xB579);

    // B43E: RTS 
    return;

    // B43F: LDA #$00
    cpu.m_a = 0x00;

    // B441: STA $49BD
    cpu.write_memory(0x49BD, cpu.m_a);

    // B444: LDA $49C0
    cpu.m_a = cpu.read_memory(0x49C0);

    // B447: STA $49BE
    cpu.write_memory(0x49BE, cpu.m_a);

    // B44A: LDA #$88
    cpu.m_a = 0x88;

    // B44C: STA $49C1
    cpu.write_memory(0x49C1, cpu.m_a);

    // B44F: LDB $5040
    cpu.m_b = cpu.read_memory(0x5040);

    // B452: LSRB 
    cpu.m_b >>= 1;

    // B453: LSRB 
    cpu.m_b >>= 1;

    // B454: LSRB 
    cpu.m_b >>= 1;

    // B455: ANDB #$0F
    cpu.m_b &= 0x0F;

    // B457: LDX #$4989
    cpu.m_x = 0x4989;

    // B45A: ABX 
    // TODO: Convert ABX 

    // B45B: STX <$64
    cpu.write_memory16(0x64, cpu.m_x);

    // B45D: LDA $5040
    cpu.m_a = cpu.read_memory(0x5040);

    // B460: ANDA #$F8
    cpu.m_a &= 0xF8;

    // B462: ADDA #$04
    cpu.m_a += 0x04;

    // B464: LDB #$00
    cpu.m_b = 0x00;

    // B466: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // B469: LDD #$FC00
    cpu.m_d = 0xFC00;

    // B46C: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // B46F: LDD #$F200
    cpu.m_d = 0xF200;

    // B472: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // B475: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // B477: CMPX #$4999
    cpu.compare_x(0x4999);

    // B47A: BCS $B47F
    if (cpu.carry_flag()) cpu.m_pc = 0xB47F;

    // B47C: LEAX -$10,X
    // TODO: Fix comma operator: LEAX -$10,X

    // B47F: LDA ,X+
    // TODO: Complex indexed addressing: ,X+

    // B481: STX <$64
    cpu.write_memory16(0x64, cpu.m_x);

    // B483: STA <$9E
    cpu.write_memory(0x9E, cpu.m_a);

    // B485: ANDA #$03
    cpu.m_a &= 0x03;

    // B487: CMPA <$9C
    cpu.compare_a(cpu.read_memory(0x9C));

    // B489: LBNE $B516
    // TODO: Convert LBNE $B516

    // B48D: LDA <$9D
    cpu.m_a = cpu.read_memory(0x9D);

    // B48F: STA <$DC
    cpu.write_memory(0xDC, cpu.m_a);

    // B491: LDD #$000F
    cpu.m_d = 0x000F;

    // B494: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // B497: LDA #$67
    cpu.m_a = 0x67;

    // B499: JSR $CDBA
    cpu.call_function(0xCDBA);

    // B49C: LDA <$9C
    cpu.m_a = cpu.read_memory(0x9C);

    // B49E: CMPA #$02
    cpu.compare_a(0x02);

    // B4A0: BNE $B4B5
    if (!cpu.zero_flag()) cpu.m_pc = 0xB4B5;

    // B4A2: INC $49BD
    cpu.increment_memory(0x49BD);

    // B4A5: LDB $49BE
    cpu.m_b = cpu.read_memory(0x49BE);

    // B4A8: ASLB 
    cpu.m_b <<= 1;

    // B4A9: LDX #$B6B3
    cpu.m_x = 0xB6B3;

    // B4AC: LDD B,X
    // TODO: Fix comma operator: LDD B,X

    // B4AE: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // B4B0: LDA $49C1
    cpu.m_a = cpu.read_memory(0x49C1);

    // B4B3: STA -$1,Y
    cpu.write_memory(cpu.m_y - 0x01, cpu.m_a);

    // B4B5: LDD $5078
    cpu.m_d = cpu.read_memory16(0x5078);

    // B4B8: SUBD $5040
    cpu.m_d -= 0x5040;

    // B4BB: CMPD #$1000
    cpu.execute_cmpd_immediate(0x1000);

    // B4BF: BGT $B510
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xB510;

    // B4C1: LDA <$9D
    cpu.m_a = cpu.read_memory(0x9D);

    // B4C3: CMPA #$0E
    cpu.compare_a(0x0E);

    // B4C5: BNE $B50B
    if (!cpu.zero_flag()) cpu.m_pc = 0xB50B;

    // B4C7: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // B4CA: SUBD #$0000
    cpu.m_d -= 0x0000;

    // B4CD: BLT $B516
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB516;

    // B4CF: LDD $5042
    cpu.m_d = cpu.read_memory16(0x5042);

    // B4D2: BGT $B50B
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xB50B;

    // B4D4: LDD $507C
    cpu.m_d = cpu.read_memory16(0x507C);

    // B4D7: ADDD #$0200
    cpu.m_d += 0x0200;

    // B4DA: SUBD $5044
    cpu.m_d -= 0x5044;

    // B4DD: BLT $B50B
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB50B;

    // B4DF: SUBD #$0400
    cpu.m_d -= 0x0400;

    // B4E2: BGT $B50B
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xB50B;

    // B4E4: LDD $5078
    cpu.m_d = cpu.read_memory16(0x5078);

    // B4E7: SUBD $5040
    cpu.m_d -= 0x5040;

    // B4EA: SUBD #$0400
    cpu.m_d -= 0x0400;

    // B4ED: BHI $B50B
    // TODO: Convert BHI $B50B

    // B4EF: LDA #$0F
    cpu.m_a = 0x0F;

    // B4F1: STA <$DC
    cpu.write_memory(0xDC, cpu.m_a);

    // B4F3: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // B4F5: BLT $B4FD
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB4FD;

    // B4F7: JSR $9874
    cpu.call_function(0x9874);

    // B4FA: JSR $BDB2
    cpu.call_function(0xBDB2);

    // B4FD: LDA <$63
    cpu.m_a = cpu.read_memory(0x63);

    // B4FF: BNE $B50B
    if (!cpu.zero_flag()) cpu.m_pc = 0xB50B;

    // B501: LDA #$4E
    cpu.m_a = 0x4E;

    // B503: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // B506: BPL $B509
    if (!cpu.negative_flag()) cpu.m_pc = 0xB509;

    // B508: NEGA 
    cpu.m_a = -cpu.m_a;

    // B509: STA <$63
    cpu.write_memory(0x63, cpu.m_a);

    // B50B: JSR $CD5C
    cpu.call_function(0xCD5C);

    // B50E: BRA $B513
    goto label_B513;

    // B510: JSR $CD50
    cpu.call_function(0xCD50);

    label_B513:
    // B513: JSR $CD74
    cpu.call_function(0xCD74);

    // B516: LDD $507C
    cpu.m_d = cpu.read_memory16(0x507C);

    // B519: ADDD #$0400
    cpu.m_d += 0x0400;

    // B51C: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // B51F: LDA <$9E
    cpu.m_a = cpu.read_memory(0x9E);

    // B521: LSRA 
    cpu.m_a >>= 1;

    // B522: LSRA 
    cpu.m_a >>= 1;

    // B523: LBNE $B483
    // TODO: Convert LBNE $B483

    // B527: LDA <$9C
    cpu.m_a = cpu.read_memory(0x9C);

    // B529: CMPA #$02
    cpu.compare_a(0x02);

    // B52B: BNE $B565
    if (!cpu.zero_flag()) cpu.m_pc = 0xB565;

    // B52D: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // B52F: LDA $000F,X
    // TODO: Fix comma operator: LDA $000F,X

    // B533: ASLA 
    cpu.m_a <<= 1;

    // B534: BCC $B53D
    if (!cpu.carry_flag()) cpu.m_pc = 0xB53D;

    // B536: BMI $B53D
    if (cpu.negative_flag()) cpu.m_pc = 0xB53D;

    // B538: INC $49BD
    cpu.increment_memory(0x49BD);

    // B53B: BRA $B540
    goto label_B540;

    // B53D: ASLA 
    cpu.m_a <<= 1;

    // B53E: BNE $B533
    if (!cpu.zero_flag()) cpu.m_pc = 0xB533;

    label_B540:
    // B540: LDA $49BD
    cpu.m_a = cpu.read_memory(0x49BD);

    // B543: BEQ $B565
    if (cpu.zero_flag()) cpu.m_pc = 0xB565;

    // B545: LDA $49BE
    cpu.m_a = cpu.read_memory(0x49BE);

    // B548: INCA 
    cpu.m_a++;

    // B549: CMPA #$03
    cpu.compare_a(0x03);

    // B54B: BCS $B54F
    if (cpu.carry_flag()) cpu.m_pc = 0xB54F;

    // B54D: LDA #$00
    cpu.m_a = 0x00;

    // B54F: STA $49BE
    cpu.write_memory(0x49BE, cpu.m_a);

    // B552: LDA $49C1
    cpu.m_a = cpu.read_memory(0x49C1);

    // B555: SUBA #$08
    cpu.m_a -= 0x08;

    // B557: CMPA #$40
    cpu.compare_a(0x40);

    // B559: BCC $B55D
    if (!cpu.carry_flag()) cpu.m_pc = 0xB55D;

    // B55B: LDA #$40
    cpu.m_a = 0x40;

    // B55D: STA $49C1
    cpu.write_memory(0x49C1, cpu.m_a);

    // B560: LDA #$00
    cpu.m_a = 0x00;

    // B562: STA $49BD
    cpu.write_memory(0x49BD, cpu.m_a);

    // B565: LDD $5078
    cpu.m_d = cpu.read_memory16(0x5078);

    // B568: ADDD #$0800
    cpu.m_d += 0x0800;

    // B56B: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // B56E: SUBD $5040
    cpu.m_d -= 0x5040;

    // B571: SUBD #$7000
    cpu.m_d -= 0x7000;

    // B574: LBCS $B46F
    // TODO: Convert LBCS $B46F

    // B578: RTS 
    return;

    // B579: LDA #$00
    cpu.m_a = 0x00;

    // B57B: STA $49BD
    cpu.write_memory(0x49BD, cpu.m_a);

    // B57E: LDA $49C0
    cpu.m_a = cpu.read_memory(0x49C0);

    // B581: STA $49BE
    cpu.write_memory(0x49BE, cpu.m_a);

    // B584: LDA #$88
    cpu.m_a = 0x88;

    // B586: STA $49C1
    cpu.write_memory(0x49C1, cpu.m_a);

    // B589: LDB $5040
    cpu.m_b = cpu.read_memory(0x5040);

    // B58C: LSRB 
    cpu.m_b >>= 1;

    // B58D: LSRB 
    cpu.m_b >>= 1;

    // B58E: LSRB 
    cpu.m_b >>= 1;

    // B58F: ANDB #$0F
    cpu.m_b &= 0x0F;

    // B591: LDX #$4999
    cpu.m_x = 0x4999;

    // B594: ABX 
    // TODO: Convert ABX 

    // B595: STX <$64
    cpu.write_memory16(0x64, cpu.m_x);

    // B597: LDA $5040
    cpu.m_a = cpu.read_memory(0x5040);

    // B59A: ANDA #$F8
    cpu.m_a &= 0xF8;

    // B59C: ADDA #$04
    cpu.m_a += 0x04;

    // B59E: LDB #$00
    cpu.m_b = 0x00;

    // B5A0: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // B5A3: LDD #$0400
    cpu.m_d = 0x0400;

    // B5A6: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // B5A9: LDD #$F200
    cpu.m_d = 0xF200;

    // B5AC: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // B5AF: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // B5B1: CMPX #$49A9
    cpu.compare_x(0x49A9);

    // B5B4: BCS $B5B9
    if (cpu.carry_flag()) cpu.m_pc = 0xB5B9;

    // B5B6: LEAX -$10,X
    // TODO: Fix comma operator: LEAX -$10,X

    // B5B9: LDA ,X+
    // TODO: Complex indexed addressing: ,X+

    // B5BB: STX <$64
    cpu.write_memory16(0x64, cpu.m_x);

    // B5BD: STA <$9E
    cpu.write_memory(0x9E, cpu.m_a);

    // B5BF: ANDA #$03
    cpu.m_a &= 0x03;

    // B5C1: CMPA <$9C
    cpu.compare_a(cpu.read_memory(0x9C));

    // B5C3: LBNE $B650
    // TODO: Convert LBNE $B650

    // B5C7: LDA <$9D
    cpu.m_a = cpu.read_memory(0x9D);

    // B5C9: STA <$DC
    cpu.write_memory(0xDC, cpu.m_a);

    // B5CB: LDD #$000F
    cpu.m_d = 0x000F;

    // B5CE: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // B5D1: LDA #$67
    cpu.m_a = 0x67;

    // B5D3: JSR $CDBA
    cpu.call_function(0xCDBA);

    // B5D6: LDA <$9C
    cpu.m_a = cpu.read_memory(0x9C);

    // B5D8: CMPA #$02
    cpu.compare_a(0x02);

    // B5DA: BNE $B5EF
    if (!cpu.zero_flag()) cpu.m_pc = 0xB5EF;

    // B5DC: INC $49BD
    cpu.increment_memory(0x49BD);

    // B5DF: LDB $49BE
    cpu.m_b = cpu.read_memory(0x49BE);

    // B5E2: ASLB 
    cpu.m_b <<= 1;

    // B5E3: LDX #$B6B3
    cpu.m_x = 0xB6B3;

    // B5E6: LDD B,X
    // TODO: Fix comma operator: LDD B,X

    // B5E8: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // B5EA: LDA $49C1
    cpu.m_a = cpu.read_memory(0x49C1);

    // B5ED: STA -$1,Y
    cpu.write_memory(cpu.m_y - 0x01, cpu.m_a);

    // B5EF: LDD $5078
    cpu.m_d = cpu.read_memory16(0x5078);

    // B5F2: SUBD $5040
    cpu.m_d -= 0x5040;

    // B5F5: CMPD #$1000
    cpu.execute_cmpd_immediate(0x1000);

    // B5F9: BGT $B64A
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xB64A;

    // B5FB: LDA <$9D
    cpu.m_a = cpu.read_memory(0x9D);

    // B5FD: CMPA #$0E
    cpu.compare_a(0x0E);

    // B5FF: BNE $B645
    if (!cpu.zero_flag()) cpu.m_pc = 0xB645;

    // B601: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // B604: SUBD #$0000
    cpu.m_d -= 0x0000;

    // B607: BLT $B650
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB650;

    // B609: LDD $5042
    cpu.m_d = cpu.read_memory16(0x5042);

    // B60C: BLT $B645
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB645;

    // B60E: LDD $507C
    cpu.m_d = cpu.read_memory16(0x507C);

    // B611: ADDD #$0200
    cpu.m_d += 0x0200;

    // B614: SUBD $5044
    cpu.m_d -= 0x5044;

    // B617: BLT $B645
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB645;

    // B619: SUBD #$0400
    cpu.m_d -= 0x0400;

    // B61C: BGT $B645
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xB645;

    // B61E: LDD $5078
    cpu.m_d = cpu.read_memory16(0x5078);

    // B621: SUBD $5040
    cpu.m_d -= 0x5040;

    // B624: SUBD #$0400
    cpu.m_d -= 0x0400;

    // B627: BHI $B645
    // TODO: Convert BHI $B645

    // B629: LDA #$0F
    cpu.m_a = 0x0F;

    // B62B: STA <$DC
    cpu.write_memory(0xDC, cpu.m_a);

    // B62D: LDA <$60
    cpu.m_a = cpu.read_memory(0x60);

    // B62F: BLT $B637
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xB637;

    // B631: JSR $9874
    cpu.call_function(0x9874);

    // B634: JSR $BDB2
    cpu.call_function(0xBDB2);

    // B637: LDA <$63
    cpu.m_a = cpu.read_memory(0x63);

    // B639: BNE $B645
    if (!cpu.zero_flag()) cpu.m_pc = 0xB645;

    // B63B: LDA #$4E
    cpu.m_a = 0x4E;

    // B63D: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // B640: BPL $B643
    if (!cpu.negative_flag()) cpu.m_pc = 0xB643;

    // B642: NEGA 
    cpu.m_a = -cpu.m_a;

    // B643: STA <$63
    cpu.write_memory(0x63, cpu.m_a);

    // B645: JSR $CD5C
    cpu.call_function(0xCD5C);

    // B648: BRA $B64D
    goto label_B64D;

    // B64A: JSR $CD50
    cpu.call_function(0xCD50);

    label_B64D:
    // B64D: JSR $CD74
    cpu.call_function(0xCD74);

    // B650: LDD $507C
    cpu.m_d = cpu.read_memory16(0x507C);

    // B653: ADDD #$0400
    cpu.m_d += 0x0400;

    // B656: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // B659: LDA <$9E
    cpu.m_a = cpu.read_memory(0x9E);

    // B65B: LSRA 
    cpu.m_a >>= 1;

    // B65C: LSRA 
    cpu.m_a >>= 1;

    // B65D: LBNE $B5BD
    // TODO: Convert LBNE $B5BD

    // B661: LDA <$9C
    cpu.m_a = cpu.read_memory(0x9C);

    // B663: CMPA #$02
    cpu.compare_a(0x02);

    // B665: BNE $B69F
    if (!cpu.zero_flag()) cpu.m_pc = 0xB69F;

    // B667: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // B669: LDA -$0011,X
    // TODO: Fix comma operator: LDA -$0011,X

    // B66D: ASLA 
    cpu.m_a <<= 1;

    // B66E: BCC $B677
    if (!cpu.carry_flag()) cpu.m_pc = 0xB677;

    // B670: BMI $B677
    if (cpu.negative_flag()) cpu.m_pc = 0xB677;

    // B672: INC $49BD
    cpu.increment_memory(0x49BD);

    // B675: BRA $B67A
    goto label_B67A;

    // B677: ASLA 
    cpu.m_a <<= 1;

    // B678: BNE $B66D
    if (!cpu.zero_flag()) cpu.m_pc = 0xB66D;

    label_B67A:
    // B67A: LDA $49BD
    cpu.m_a = cpu.read_memory(0x49BD);

    // B67D: BEQ $B69F
    if (cpu.zero_flag()) cpu.m_pc = 0xB69F;

    // B67F: LDA $49BE
    cpu.m_a = cpu.read_memory(0x49BE);

    // B682: INCA 
    cpu.m_a++;

    // B683: CMPA #$03
    cpu.compare_a(0x03);

    // B685: BCS $B689
    if (cpu.carry_flag()) cpu.m_pc = 0xB689;

    // B687: LDA #$00
    cpu.m_a = 0x00;

    // B689: STA $49BE
    cpu.write_memory(0x49BE, cpu.m_a);

    // B68C: LDA $49C1
    cpu.m_a = cpu.read_memory(0x49C1);

    // B68F: SUBA #$08
    cpu.m_a -= 0x08;

    // B691: CMPA #$40
    cpu.compare_a(0x40);

    // B693: BCC $B697
    if (!cpu.carry_flag()) cpu.m_pc = 0xB697;

    // B695: LDA #$40
    cpu.m_a = 0x40;

    // B697: STA $49C1
    cpu.write_memory(0x49C1, cpu.m_a);

    // B69A: LDA #$00
    cpu.m_a = 0x00;

    // B69C: STA $49BD
    cpu.write_memory(0x49BD, cpu.m_a);

    // B69F: LDD $5078
    cpu.m_d = cpu.read_memory16(0x5078);

    // B6A2: ADDD #$0800
    cpu.m_d += 0x0800;

    // B6A5: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // B6A8: SUBD $5040
    cpu.m_d -= 0x5040;

    // B6AB: SUBD #$7000
    cpu.m_d -= 0x7000;

    // B6AE: LBCS $B5A9
    // TODO: Convert LBCS $B5A9

    // B6B2: RTS 
    return;

    // B6B3: ROR ,X+
    // TODO: Convert ROR ,X+

    // B6B5: COM ,X+
    // TODO: Convert COM ,X+

    // B6B7: LSR ,X+
    // TODO: Convert LSR ,X+

    // B6B9: JSR $B6C7
    cpu.call_function(0xB6C7);

    // B6BC: JSR $B6D7
    cpu.call_function(0xB6D7);

    // B6BF: RTS 
    return;

    label_B6C0:
    // B6C0: JMP $b6c0
    goto label_B6C0;

    // B6C3: JSR $B6D7
    cpu.call_function(0xB6D7);

    // B6C6: RTS 
    return;

    // B6C7: LDD #$6380
    cpu.m_d = 0x6380;

    // B6CA: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    label_B6CC:
    // B6CC: JMP $b6cc
    goto label_B6CC;

    // B6CF: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // B6D1: LDD $32FE
    cpu.m_d = cpu.read_memory16(0x32FE);

    // B6D4: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // B6D6: RTS 
    return;

    // B6D7: LDA <$7D
    cpu.m_a = cpu.read_memory(0x7D);

    // B6D9: BPL $B6DC
    if (!cpu.negative_flag()) cpu.m_pc = 0xB6DC;

    // B6DB: NEGA 
    cpu.m_a = -cpu.m_a;

    // B6DC: LDB #$6E
    cpu.m_b = 0x6E;

    // B6DE: MUL 
    // TODO: Convert MUL 

    // B6DF: LDB <$7D
    cpu.m_b = cpu.read_memory(0x7D);

    // B6E1: BPL $B6E4
    if (!cpu.negative_flag()) cpu.m_pc = 0xB6E4;

    // B6E3: NEGA 
    cpu.m_a = -cpu.m_a;

    // B6E4: TFR A,B
    cpu.m_b = cpu.m_a;

    // B6E6: SEX 
    // TODO: Convert SEX 

    // B6E7: STD $4B1C
    cpu.write_memory16(0x4B1C, cpu.m_d);

    // B6EA: ANDA #$1F
    cpu.m_a &= 0x1F;

    // B6EC: STD $2,Y
    cpu.write_memory16(cpu.m_y + 0x02, cpu.m_d);

    // B6EE: STD $8,Y
    cpu.write_memory16(cpu.m_y + 0x08, cpu.m_d);

    // B6F0: STD $E,Y
    cpu.write_memory16(cpu.m_y + 0x0E, cpu.m_d);

    // B6F2: STD $14,Y
    cpu.write_memory16(cpu.m_y + 0x14, cpu.m_d);

    // B6F5: STD $1A,Y
    cpu.write_memory16(cpu.m_y + 0x1A, cpu.m_d);

    // B6F8: LDA <$7F
    cpu.m_a = cpu.read_memory(0x7F);

    // B6FA: BPL $B6FD
    if (!cpu.negative_flag()) cpu.m_pc = 0xB6FD;

    // B6FC: NEGA 
    cpu.m_a = -cpu.m_a;

    // B6FD: LDB #$50
    cpu.m_b = 0x50;

    // B6FF: MUL 
    // TODO: Convert MUL 

    // B700: LDB <$7F
    cpu.m_b = cpu.read_memory(0x7F);

    // B702: BPL $B705
    if (!cpu.negative_flag()) cpu.m_pc = 0xB705;

    // B704: NEGA 
    cpu.m_a = -cpu.m_a;

    // B705: TFR A,B
    cpu.m_b = cpu.m_a;

    // B707: SEX 
    // TODO: Convert SEX 

    // B708: STD $4B1E
    cpu.write_memory16(0x4B1E, cpu.m_d);

    // B70B: ANDA #$1F
    cpu.m_a &= 0x1F;

    // B70D: STD ,Y
    cpu.write_memory16(cpu.m_y, cpu.m_d);

    // B70F: STD $6,Y
    cpu.write_memory16(cpu.m_y + 0x06, cpu.m_d);

    // B711: STD $C,Y
    cpu.write_memory16(cpu.m_y + 0x0C, cpu.m_d);

    // B713: STD $12,Y
    cpu.write_memory16(cpu.m_y + 0x12, cpu.m_d);

    // B716: STD $18,Y
    cpu.write_memory16(cpu.m_y + 0x18, cpu.m_d);

    // B719: LDD #$BAAC
    cpu.m_d = 0xBAAC;

    // B71C: STD $4,Y
    cpu.write_memory16(cpu.m_y + 0x04, cpu.m_d);

    // B71E: LDD #$BA0D
    cpu.m_d = 0xBA0D;

    // B721: STD $A,Y
    cpu.write_memory16(cpu.m_y + 0x0A, cpu.m_d);

    // B723: LDD #$BB33
    cpu.m_d = 0xBB33;

    // B726: STD $10,Y
    cpu.write_memory16(cpu.m_y + 0x10, cpu.m_d);

    // B729: LDD #$BAE6
    cpu.m_d = 0xBAE6;

    // B72C: STD $16,Y
    cpu.write_memory16(cpu.m_y + 0x16, cpu.m_d);

    // B72F: LDD #$BA5A
    cpu.m_d = 0xBA5A;

    // B732: STD $1C,Y
    cpu.write_memory16(cpu.m_y + 0x1C, cpu.m_d);

    // B735: LEAY $1E,Y
    // TODO: Fix comma operator: LEAY $1E,Y

    // B738: RTS 
    return;

    // B739: LDA #$00
    cpu.m_a = 0x00;

    // B73B: STA $3,X
    cpu.write_memory(cpu.m_x + 0x03, cpu.m_a);

    // B73D: JSR $8E1C
    cpu.call_function(0x8E1C);

    // B740: PSHS U,X
    // TODO: Convert PSHS U,X

    // B742: JSR $B76C
    cpu.call_function(0xB76C);

    // B745: PULS X,U
    // TODO: Convert PULS X,U

    // B747: RTS 
    return;

    // B748: ADCA $C0B9
    cpu.add_a_with_carry(cpu.read_memory(0xC0B9));

    // B74B: SUBB #$B9
    cpu.m_b -= 0xB9;

    // B74D: SUBB #$B9
    cpu.m_b -= 0xB9;

    // B74F: SUBB #$B9
    cpu.m_b -= 0xB9;

    // B751: SUBB #$B9
    cpu.m_b -= 0xB9;

    // B753: SUBB #$B9
    cpu.m_b -= 0xB9;

    // B755: ADCB $B9F9
    cpu.add_b_with_carry(cpu.read_memory(0xB9F9));

    // B758: ADCA $F9BA
    cpu.add_a_with_carry(cpu.read_memory(0xF9BA));

    // B75B: SUBA [F,Y]
    // TODO: Complex indexed addressing: [F,Y]

    // B75D: ANDA [F,Y]
    // TODO: Complex indexed addressing: [F,Y]

    // B75F: EORA [F,Y]
    // TODO: Complex indexed addressing: [F,Y]

    // B761: CMPX [F,Y]
    // TODO: Handle indexed addressing: CMPX [F,Y]

    // B763: SUBA $BAB4
    cpu.m_a -= cpu.read_memory(0xBAB4);

    // B766: ADDA $1ABB
    cpu.m_a += cpu.read_memory(0x1ABB);

    // B769: EXG DP,DP
    // TODO: Convert EXG DP,DP

    // B76B: LBRA $A5F2
    // TODO: Convert LBRA $A5F2

    // B76E: JSR $B948
    cpu.call_function(0xB948);

    // B771: LDA #$06
    cpu.m_a = 0x06;

    // B773: STA $C,X
    cpu.write_memory(cpu.m_x + 0x0C, cpu.m_a);

    // B775: LDA #$18
    cpu.m_a = 0x18;

    // B777: STA $D,X
    cpu.write_memory(cpu.m_x + 0x0D, cpu.m_a);

    // B779: LDD #$0000
    cpu.m_d = 0x0000;

    // B77C: SUBD -$E,U
    // TODO: Fix comma operator: SUBD -$E,U

    // B77E: JSR $CD9C
    cpu.call_function(0xCD9C);

    // B781: STD $6,X
    cpu.write_memory16(cpu.m_x + 0x06, cpu.m_d);

    // B783: ADDD $8,U
    // TODO: Fix comma operator: ADDD $8,U

    // B785: STD ,X
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // B787: LDD #$0000
    cpu.m_d = 0x0000;

    // B78A: SUBD -$6,U
    // TODO: Fix comma operator: SUBD -$6,U

    // B78C: JSR $CD9C
    cpu.call_function(0xCD9C);

    // B78F: STD $8,X
    cpu.write_memory16(cpu.m_x + 0x08, cpu.m_d);

    // B791: ADDD $A,U
    // TODO: Fix comma operator: ADDD $A,U

    // B793: STD $2,X
    cpu.write_memory16(cpu.m_x + 0x02, cpu.m_d);

    // B795: LDD #$0000
    cpu.m_d = 0x0000;

    // B798: SUBD $2,U
    // TODO: Fix comma operator: SUBD $2,U

    // B79A: JSR $CD9C
    cpu.call_function(0xCD9C);

    // B79D: STD $A,X
    cpu.write_memory16(cpu.m_x + 0x0A, cpu.m_d);

    // B79F: ADDD $C,U
    // TODO: Fix comma operator: ADDD $C,U

    // B7A1: STD $4,X
    cpu.write_memory16(cpu.m_x + 0x04, cpu.m_d);

    // B7A3: JSR $B83F
    cpu.call_function(0xB83F);

    // B7A6: JSR $B948
    cpu.call_function(0xB948);

    // B7A9: LDA #$07
    cpu.m_a = 0x07;

    // B7AB: STA $C,X
    cpu.write_memory(cpu.m_x + 0x0C, cpu.m_a);

    // B7AD: LDA #$18
    cpu.m_a = 0x18;

    // B7AF: STA $D,X
    cpu.write_memory(cpu.m_x + 0x0D, cpu.m_a);

    // B7B1: LDD -$E,U
    // TODO: Fix comma operator: LDD -$E,U

    // B7B3: JSR $CD9C
    cpu.call_function(0xCD9C);

    // B7B6: STD $6,X
    cpu.write_memory16(cpu.m_x + 0x06, cpu.m_d);

    // B7B8: ADDD $8,U
    // TODO: Fix comma operator: ADDD $8,U

    // B7BA: STD ,X
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // B7BC: LDD -$6,U
    // TODO: Fix comma operator: LDD -$6,U

    // B7BE: JSR $CD9C
    cpu.call_function(0xCD9C);

    // B7C1: STD $8,X
    cpu.write_memory16(cpu.m_x + 0x08, cpu.m_d);

    // B7C3: ADDD $A,U
    // TODO: Fix comma operator: ADDD $A,U

    // B7C5: STD $2,X
    cpu.write_memory16(cpu.m_x + 0x02, cpu.m_d);

    // B7C7: LDD $2,U
    // TODO: Fix comma operator: LDD $2,U

    // B7C9: JSR $CD9C
    cpu.call_function(0xCD9C);

    // B7CC: STD $A,X
    cpu.write_memory16(cpu.m_x + 0x0A, cpu.m_d);

    // B7CE: ADDD $C,U
    // TODO: Fix comma operator: ADDD $C,U

    // B7D0: STD $4,X
    cpu.write_memory16(cpu.m_x + 0x04, cpu.m_d);

    // B7D2: JSR $B83F
    cpu.call_function(0xB83F);

    // B7D5: JSR $B948
    cpu.call_function(0xB948);

    // B7D8: LDA #$08
    cpu.m_a = 0x08;

    // B7DA: STA $C,X
    cpu.write_memory(cpu.m_x + 0x0C, cpu.m_a);

    // B7DC: LDA #$10
    cpu.m_a = 0x10;

    // B7DE: STA $D,X
    cpu.write_memory(cpu.m_x + 0x0D, cpu.m_a);

    // B7E0: LDD $8,U
    // TODO: Fix comma operator: LDD $8,U

    // B7E2: STD ,X
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // B7E4: STD $6,X
    cpu.write_memory16(cpu.m_x + 0x06, cpu.m_d);

    // B7E6: LDD $A,U
    // TODO: Fix comma operator: LDD $A,U

    // B7E8: STD $2,X
    cpu.write_memory16(cpu.m_x + 0x02, cpu.m_d);

    // B7EA: STD $8,X
    cpu.write_memory16(cpu.m_x + 0x08, cpu.m_d);

    // B7EC: LDD $C,U
    // TODO: Fix comma operator: LDD $C,U

    // B7EE: STD $4,X
    cpu.write_memory16(cpu.m_x + 0x04, cpu.m_d);

    // B7F0: STD $A,X
    cpu.write_memory16(cpu.m_x + 0x0A, cpu.m_d);

    // B7F2: LDA $6,X
    // TODO: Fix comma operator: LDA $6,X

    // B7F4: LDB #$80
    cpu.m_b = 0x80;

    // B7F6: ASLB 
    cpu.m_b <<= 1;

    // B7F7: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // B7F8: BVC $B7FE
    // TODO: Convert BVC $B7FE

    // B7FA: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // B7FB: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // B7FC: BRA $B81C
    goto label_B81C;

    // B7FE: ASL $9,X
    // TODO: Fix comma operator: ASL $9,X

    // B800: ROL $8,X
    // TODO: Fix comma operator: ROL $8,X

    // B802: BVC $B80C
    // TODO: Convert BVC $B80C

    // B804: ROR $8,X
    // TODO: Convert ROR $8,X

    // B806: ROR $9,X
    // TODO: Convert ROR $9,X

    // B808: ASRA 
    // TODO: Convert ASRA 

    // B809: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // B80A: BRA $B81C
    goto label_B81C;

    // B80C: ASL $B,X
    // TODO: Fix comma operator: ASL $B,X

    // B80E: ROL $A,X
    // TODO: Fix comma operator: ROL $A,X

    // B810: BVC $B7F6
    // TODO: Convert BVC $B7F6

    // B812: ROR $A,X
    // TODO: Convert ROR $A,X

    // B814: ROR $B,X
    // TODO: Convert ROR $B,X

    // B816: ASR $8,X
    // TODO: Convert ASR $8,X

    // B818: ASR $9,X
    // TODO: Convert ASR $9,X

    // B81A: ASRA 
    // TODO: Convert ASRA 

    // B81B: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    label_B81C:
    // B81C: SUBD ,X
    // TODO: Complex indexed addressing: ,X

    // B81E: JSR $CDA0
    cpu.call_function(0xCDA0);

    // B821: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // B824: STD $6,X
    cpu.write_memory16(cpu.m_x + 0x06, cpu.m_d);

    // B826: LDD $8,X
    // TODO: Fix comma operator: LDD $8,X

    // B828: SUBD $2,X
    // TODO: Fix comma operator: SUBD $2,X

    // B82A: JSR $CDA0
    cpu.call_function(0xCDA0);

    // B82D: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // B830: STD $8,X
    cpu.write_memory16(cpu.m_x + 0x08, cpu.m_d);

    // B832: LDD $A,X
    // TODO: Fix comma operator: LDD $A,X

    // B834: SUBD $4,X
    // TODO: Fix comma operator: SUBD $4,X

    // B836: JSR $CDA0
    cpu.call_function(0xCDA0);

    // B839: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // B83C: STD $A,X
    cpu.write_memory16(cpu.m_x + 0x0A, cpu.m_d);

    // B83E: RTS 
    return;

    // B83F: LDD -$A,U
    // TODO: Fix comma operator: LDD -$A,U

    // B841: ADDD $6,X
    // TODO: Fix comma operator: ADDD $6,X

    // B843: STD $6,X
    cpu.write_memory16(cpu.m_x + 0x06, cpu.m_d);

    // B845: LDD -$2,U
    // TODO: Fix comma operator: LDD -$2,U

    // B847: ADDD $8,X
    // TODO: Fix comma operator: ADDD $8,X

    // B849: STD $8,X
    cpu.write_memory16(cpu.m_x + 0x08, cpu.m_d);

    // B84B: LDD $6,U
    // TODO: Fix comma operator: LDD $6,U

    // B84D: ADDD $A,X
    // TODO: Fix comma operator: ADDD $A,X

    // B84F: STD $A,X
    cpu.write_memory16(cpu.m_x + 0x0A, cpu.m_d);

    // B851: RTS 
    return;

    // B852: LDD #$0001
    cpu.m_d = 0x0001;

    // B855: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // B857: LDD #$0203
    cpu.m_d = 0x0203;

    // B85A: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    // B85C: BRA $B868
    goto label_B868;

    // B85E: LDD #$0304
    cpu.m_d = 0x0304;

    // B861: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // B863: LDD #$0502
    cpu.m_d = 0x0502;

    // B866: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    label_B868:
    // B868: JSR $B948
    cpu.call_function(0xB948);

    // B86B: LDA <$01
    cpu.m_a = cpu.read_memory(0x01);

    // B86D: STA $C,X
    cpu.write_memory(cpu.m_x + 0x0C, cpu.m_a);

    // B86F: LDA #$20
    cpu.m_a = 0x20;

    // B871: STA $D,X
    cpu.write_memory(cpu.m_x + 0x0D, cpu.m_a);

    // B873: LDD $5018
    cpu.m_d = cpu.read_memory16(0x5018);

    // B876: STD ,X
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // B878: LDD $501A
    cpu.m_d = cpu.read_memory16(0x501A);

    // B87B: ADDA #$FE
    cpu.m_a += 0xFE;

    // B87D: STD $2,X
    cpu.write_memory16(cpu.m_x + 0x02, cpu.m_d);

    // B87F: LDD $501C
    cpu.m_d = cpu.read_memory16(0x501C);

    // B882: STD $4,X
    cpu.write_memory16(cpu.m_x + 0x04, cpu.m_d);

    // B884: LDD $5098
    cpu.m_d = cpu.read_memory16(0x5098);

    // B887: ADDA #$7F
    cpu.m_a += 0x7F;

    // B889: SUBD $5018
    cpu.m_d -= 0x5018;

    // B88C: JSR $CD9E
    cpu.call_function(0xCD9E);

    // B88F: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // B892: STD $6,X
    cpu.write_memory16(cpu.m_x + 0x06, cpu.m_d);

    // B894: LDD $509A
    cpu.m_d = cpu.read_memory16(0x509A);

    // B897: ADDA #$C1
    cpu.m_a += 0xC1;

    // B899: SUBD $501A
    cpu.m_d -= 0x501A;

    // B89C: JSR $CD9E
    cpu.call_function(0xCD9E);

    // B89F: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // B8A2: STD $8,X
    cpu.write_memory16(cpu.m_x + 0x08, cpu.m_d);

    // B8A4: LDA <$04
    cpu.m_a = cpu.read_memory(0x04);

    // B8A6: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // B8A9: JSR $CDB5
    cpu.call_function(0xCDB5);

    // B8AC: STD $A,X
    cpu.write_memory16(cpu.m_x + 0x0A, cpu.m_d);

    // B8AE: JSR $B948
    cpu.call_function(0xB948);

    // B8B1: LDA <$02
    cpu.m_a = cpu.read_memory(0x02);

    // B8B3: STA $C,X
    cpu.write_memory(cpu.m_x + 0x0C, cpu.m_a);

    // B8B5: LDA #$20
    cpu.m_a = 0x20;

    // B8B7: STA $D,X
    cpu.write_memory(cpu.m_x + 0x0D, cpu.m_a);

    // B8B9: LDD $5018
    cpu.m_d = cpu.read_memory16(0x5018);

    // B8BC: ADDA #$02
    cpu.m_a += 0x02;

    // B8BE: STD ,X
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // B8C0: LDD $501A
    cpu.m_d = cpu.read_memory16(0x501A);

    // B8C3: STD $2,X
    cpu.write_memory16(cpu.m_x + 0x02, cpu.m_d);

    // B8C5: LDD $501C
    cpu.m_d = cpu.read_memory16(0x501C);

    // B8C8: STD $4,X
    cpu.write_memory16(cpu.m_x + 0x04, cpu.m_d);

    // B8CA: LDD $5098
    cpu.m_d = cpu.read_memory16(0x5098);

    // B8CD: ADDA #$7F
    cpu.m_a += 0x7F;

    // B8CF: SUBD $5018
    cpu.m_d -= 0x5018;

    // B8D2: JSR $CD9E
    cpu.call_function(0xCD9E);

    // B8D5: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // B8D8: STD $6,X
    cpu.write_memory16(cpu.m_x + 0x06, cpu.m_d);

    // B8DA: LDD $509A
    cpu.m_d = cpu.read_memory16(0x509A);

    // B8DD: SUBD $501A
    cpu.m_d -= 0x501A;

    // B8E0: JSR $CD9E
    cpu.call_function(0xCD9E);

    // B8E3: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // B8E6: STD $8,X
    cpu.write_memory16(cpu.m_x + 0x08, cpu.m_d);

    // B8E8: LDA <$04
    cpu.m_a = cpu.read_memory(0x04);

    // B8EA: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // B8ED: JSR $CDB5
    cpu.call_function(0xCDB5);

    // B8F0: STD $A,X
    cpu.write_memory16(cpu.m_x + 0x0A, cpu.m_d);

    // B8F2: JSR $B948
    cpu.call_function(0xB948);

    // B8F5: LDA <$03
    cpu.m_a = cpu.read_memory(0x03);

    // B8F7: STA $C,X
    cpu.write_memory(cpu.m_x + 0x0C, cpu.m_a);

    // B8F9: LDA #$20
    cpu.m_a = 0x20;

    // B8FB: STA $D,X
    cpu.write_memory(cpu.m_x + 0x0D, cpu.m_a);

    // B8FD: LDD $5018
    cpu.m_d = cpu.read_memory16(0x5018);

    // B900: STD ,X
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // B902: LDD $501A
    cpu.m_d = cpu.read_memory16(0x501A);

    // B905: ADDA #$02
    cpu.m_a += 0x02;

    // B907: STD $2,X
    cpu.write_memory16(cpu.m_x + 0x02, cpu.m_d);

    // B909: LDD $501C
    cpu.m_d = cpu.read_memory16(0x501C);

    // B90C: STD $4,X
    cpu.write_memory16(cpu.m_x + 0x04, cpu.m_d);

    // B90E: LDD $5098
    cpu.m_d = cpu.read_memory16(0x5098);

    // B911: ADDA #$7F
    cpu.m_a += 0x7F;

    // B913: SUBD $5018
    cpu.m_d -= 0x5018;

    // B916: JSR $CD9E
    cpu.call_function(0xCD9E);

    // B919: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // B91C: STD $6,X
    cpu.write_memory16(cpu.m_x + 0x06, cpu.m_d);

    // B91E: LDD $509A
    cpu.m_d = cpu.read_memory16(0x509A);

    // B921: ADDA #$3F
    cpu.m_a += 0x3F;

    // B923: SUBD $501A
    cpu.m_d -= 0x501A;

    // B926: JSR $CD9E
    cpu.call_function(0xCD9E);

    // B929: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // B92C: STD $8,X
    cpu.write_memory16(cpu.m_x + 0x08, cpu.m_d);

    // B92E: LDA <$04
    cpu.m_a = cpu.read_memory(0x04);

    // B930: LDB $4703
    cpu.m_b = cpu.read_memory(0x4703);

    // B933: JSR $CDB5
    cpu.call_function(0xCDB5);

    // B936: STD $A,X
    cpu.write_memory16(cpu.m_x + 0x0A, cpu.m_d);

    // B938: RTS 
    return;

    // B939: LDX #$49E2
    cpu.m_x = 0x49E2;

    // B93C: LDA #$00
    cpu.m_a = 0x00;

    // B93E: STA $D,X
    cpu.write_memory(cpu.m_x + 0x0D, cpu.m_a);

    // B940: LEAX $E,X
    // TODO: Fix comma operator: LEAX $E,X

    // B942: CMPX #$4A52
    cpu.compare_x(0x4A52);

    // B945: BCS $B93C
    if (cpu.carry_flag()) cpu.m_pc = 0xB93C;

    // B947: RTS 
    return;

    // B948: LDB <$A2
    cpu.m_b = cpu.read_memory(0xA2);

    // B94A: INCB 
    cpu.m_b++;

    // B94B: CMPB #$08
    cpu.compare_b(0x08);

    // B94D: BCS $B951
    if (cpu.carry_flag()) cpu.m_pc = 0xB951;

    // B94F: LDB #$00
    cpu.m_b = 0x00;

    // B951: STB <$A2
    cpu.write_memory(0xA2, cpu.m_b);

    // B953: LDA #$0E
    cpu.m_a = 0x0E;

    // B955: MUL 
    // TODO: Convert MUL 

    // B956: LDX #$49E2
    cpu.m_x = 0x49E2;

    // B959: LEAX D,X
    // TODO: Fix comma operator: LEAX D,X

    // B95B: RTS 
    return;

    label_B95C:
    // B95C: LDD #$14BD
    cpu.m_d = 0x14BD;

    // B95F: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // B962: LDD #$3C8C
    cpu.m_d = 0x3C8C;

    // B965: STD $5024
    cpu.write_memory16(0x5024, cpu.m_d);

    // B968: LDD #$0018
    cpu.m_d = 0x0018;

    // B96B: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // B96E: LDA #$00
    cpu.m_a = 0x00;

    // B970: JSR $CDBA
    cpu.call_function(0xCDBA);

    // B973: LDD #$0590
    cpu.m_d = 0x0590;

    // B976: STD $5022
    cpu.write_memory16(0x5022, cpu.m_d);

    // B979: LDD #$3FC2
    cpu.m_d = 0x3FC2;

    // B97C: STD $5024
    cpu.write_memory16(0x5024, cpu.m_d);

    // B97F: LDD #$0018
    cpu.m_d = 0x0018;

    label_B982:
    // B982: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // B985: LDA #$0E
    cpu.m_a = 0x0E;

    // B987: JSR $CDBA
    cpu.call_function(0xCDBA);

    // B98A: RTS 
    return;

    // B98B: LDX #$49E2
    cpu.m_x = 0x49E2;

    // B98E: LDA $D,X
    // TODO: Fix comma operator: LDA $D,X

    // B990: BEQ $B9A1
    if (cpu.zero_flag()) cpu.m_pc = 0xB9A1;

    // B992: DEC $D,X
    // TODO: Fix comma operator: DEC $D,X

    // B994: LDB $C,X
    // TODO: Fix comma operator: LDB $C,X

    // B996: CMPB #$09
    cpu.compare_b(0x09);

    // B998: BCS $B99B
    if (cpu.carry_flag()) cpu.m_pc = 0xB99B;

    // B99A: SWI 
    // TODO: Convert SWI 

    // B99B: LDU #$B748
    cpu.m_u = 0xB748;

    // B99E: ASLB 
    cpu.m_b <<= 1;

    // B99F: JSR [B,U]
    // TODO: Complex indexed addressing: [B,U]

    // B9A1: LEAX $E,X
    // TODO: Fix comma operator: LEAX $E,X

    // B9A3: CMPX #$4A52
    cpu.compare_x(0x4A52);

    // B9A6: BCS $B98E
    if (cpu.carry_flag()) cpu.m_pc = 0xB98E;

    // B9A8: LDX #$49E2
    cpu.m_x = 0x49E2;

    // B9AB: LDA $D,X
    // TODO: Fix comma operator: LDA $D,X

    // B9AD: BEQ $B9B2
    if (cpu.zero_flag()) cpu.m_pc = 0xB9B2;

    // B9AF: JMP $B95C
    goto label_B95C;

    // B9B2: LEAX $E,X
    // TODO: Fix comma operator: LEAX $E,X

    // B9B4: CMPX #$4A52
    cpu.compare_x(0x4A52);

    // B9B7: BCS $B9AB
    if (cpu.carry_flag()) cpu.m_pc = 0xB9AB;

    // B9B9: LDU #$50D0
    cpu.m_u = 0x50D0;

    // B9BC: JSR $CDC3
    cpu.call_function(0xCDC3);

    // B9BF: RTS 
    return;

    // B9C0: LDD $6,X
    // TODO: Fix comma operator: LDD $6,X

    // B9C2: ADDD ,X
    // TODO: Complex indexed addressing: ,X

    // B9C4: STD ,X
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // B9C6: LDD #$0000
    cpu.m_d = 0x0000;

    // B9C9: SUBD $6,X
    // TODO: Fix comma operator: SUBD $6,X

    // B9CB: JSR $CD9E
    cpu.call_function(0xCD9E);

    // B9CE: ADDD $6,X
    // TODO: Fix comma operator: ADDD $6,X

    // B9D0: STD $6,X
    cpu.write_memory16(cpu.m_x + 0x06, cpu.m_d);

    // B9D2: LDD $8,X
    // TODO: Fix comma operator: LDD $8,X

    // B9D4: ADDD $2,X
    // TODO: Fix comma operator: ADDD $2,X

    // B9D6: STD $2,X
    cpu.write_memory16(cpu.m_x + 0x02, cpu.m_d);

    // B9D8: LDD #$0000
    cpu.m_d = 0x0000;

    // B9DB: SUBD $8,X
    // TODO: Fix comma operator: SUBD $8,X

    // B9DD: JSR $CD9E
    cpu.call_function(0xCD9E);

    // B9E0: ADDD $8,X
    // TODO: Fix comma operator: ADDD $8,X

    // B9E2: STD $8,X
    cpu.write_memory16(cpu.m_x + 0x08, cpu.m_d);

    // B9E4: LDD $4,X
    // TODO: Fix comma operator: LDD $4,X

    // B9E6: ADDD $A,X
    // TODO: Fix comma operator: ADDD $A,X

    // B9E8: BVS $B9F1
    // TODO: Convert BVS $B9F1

    // B9EA: BGE $B9EF
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xB9EF;

    // B9EC: LDD #$0000
    cpu.m_d = 0x0000;

    // B9EF: STD $4,X
    cpu.write_memory16(cpu.m_x + 0x04, cpu.m_d);

    // B9F1: LDD $A,X
    // TODO: Fix comma operator: LDD $A,X

    // B9F3: SUBD #$00C8
    cpu.m_d -= 0x00C8;

    // B9F6: STD $A,X
    cpu.write_memory16(cpu.m_x + 0x0A, cpu.m_d);

    // B9F8: RTS 
    return;

    // B9F9: LDD $6,X
    // TODO: Fix comma operator: LDD $6,X

    // B9FB: ADDD ,X
    // TODO: Complex indexed addressing: ,X

    // B9FD: BVS $BA01
    // TODO: Convert BVS $BA01

    // B9FF: STD ,X
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // BA01: LDD $8,X
    // TODO: Fix comma operator: LDD $8,X

    // BA03: ADDD $2,X
    // TODO: Fix comma operator: ADDD $2,X

    // BA05: BVS $BA09
    // TODO: Convert BVS $BA09

    // BA07: STD $2,X
    cpu.write_memory16(cpu.m_x + 0x02, cpu.m_d);

    // BA09: LDD $A,X
    // TODO: Fix comma operator: LDD $A,X

    // BA0B: ADDD $4,X
    // TODO: Fix comma operator: ADDD $4,X

    // BA0D: BVS $BA11
    // TODO: Convert BVS $BA11

    // BA0F: STD $4,X
    cpu.write_memory16(cpu.m_x + 0x04, cpu.m_d);

    // BA11: RTS 
    return;

    // BA12: LDA #$18
    cpu.m_a = 0x18;

    // BA14: JSR $CE18
    cpu.call_function(0xCE18);

    // BA17: LDA #$40
    cpu.m_a = 0x40;

    // BA19: JSR $CDBA
    cpu.call_function(0xCDBA);

    // BA1C: LDX #$49E2
    cpu.m_x = 0x49E2;

    // BA1F: STX <$64
    cpu.write_memory16(0x64, cpu.m_x);

    // BA21: LDA $D,X
    // TODO: Fix comma operator: LDA $D,X

    // BA23: BEQ $BA28
    if (cpu.zero_flag()) cpu.m_pc = 0xBA28;

    // BA25: JSR $BA32
    cpu.call_function(0xBA32);

    // BA28: LDX <$64
    cpu.m_x = cpu.read_memory16(0x64);

    // BA2A: LEAX $E,X
    // TODO: Fix comma operator: LEAX $E,X

    // BA2C: CMPX #$4A52
    cpu.compare_x(0x4A52);

    // BA2F: BCS $BA1F
    if (cpu.carry_flag()) cpu.m_pc = 0xBA1F;

    // BA31: RTS 
    return;

    // BA32: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // BA34: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // BA37: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // BA39: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // BA3C: LDD $4,X
    // TODO: Fix comma operator: LDD $4,X

    // BA3E: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // BA41: LDD #$000F
    cpu.m_d = 0x000F;

    // BA44: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // BA47: LDA #$67
    cpu.m_a = 0x67;

    // BA49: JSR $CDBA
    cpu.call_function(0xCDBA);

    // BA4C: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // BA4F: BMI $BA9D
    if (cpu.negative_flag()) cpu.m_pc = 0xBA9D;

    // BA51: STD $5018
    cpu.write_memory16(0x5018, cpu.m_d);

    // BA54: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // BA57: LDD $5002
    cpu.m_d = cpu.read_memory16(0x5002);

    // BA5A: STD $501A
    cpu.write_memory16(0x501A, cpu.m_d);

    // BA5D: BPL $BA63
    if (!cpu.negative_flag()) cpu.m_pc = 0xBA63;

    // BA5F: COMA 
    cpu.m_a = ~cpu.m_a;

    // BA60: NEGB 
    cpu.m_b = -cpu.m_b;

    // BA61: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // BA63: SUBD $5018
    cpu.m_d -= 0x5018;

    // BA66: BGE $BA9D
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xBA9D;

    // BA68: LDD $5004
    cpu.m_d = cpu.read_memory16(0x5004);

    // BA6B: STD $501C
    cpu.write_memory16(0x501C, cpu.m_d);

    // BA6E: BPL $BA74
    if (!cpu.negative_flag()) cpu.m_pc = 0xBA74;

    // BA70: COMA 
    cpu.m_a = ~cpu.m_a;

    // BA71: NEGB 
    cpu.m_b = -cpu.m_b;

    // BA72: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // BA74: LSRA 
    cpu.m_a >>= 1;

    // BA75: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // BA76: SUBD $5018
    cpu.m_d -= 0x5018;

    // BA79: BGE $BA9D
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xBA9D;

    // BA7B: LDB $C,X
    // TODO: Fix comma operator: LDB $C,X

    // BA7D: CMPB #$09
    cpu.compare_b(0x09);

    // BA7F: BCS $BA82
    if (cpu.carry_flag()) cpu.m_pc = 0xBA82;

    // BA81: SWI 
    // TODO: Convert SWI 

    // BA82: LDU #$B75A
    cpu.m_u = 0xB75A;

    // BA85: ASLB 
    cpu.m_b <<= 1;

    // BA86: JSR [B,U]
    // TODO: Complex indexed addressing: [B,U]

    // BA88: JSR $CCD8
    cpu.call_function(0xCCD8);

    // BA8B: JSR $CD20
    cpu.call_function(0xCD20);

    // BA8E: JSR $CD2C
    cpu.call_function(0xCD2C);

    // BA91: LDD #$7200
    cpu.m_d = 0x7200;

    // BA94: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BA96: LDD #$8040
    cpu.m_d = 0x8040;

    // BA99: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BA9B: BRA $BA9F
    goto label_BA9F;

    // BA9D: CLR $D,X
    // TODO: Fix comma operator: CLR $D,X

    label_BA9F:
    // BA9F: RTS 
    return;

    // BAA0: LDA #$14
    cpu.m_a = 0x14;

    // BAA2: BRA $BABE
    goto label_BABE;

    // BAA4: LDA #$15
    cpu.m_a = 0x15;

    // BAA6: BRA $BABE
    goto label_BABE;

    // BAA8: LDA #$16
    cpu.m_a = 0x16;

    // BAAA: BRA $BABE
    goto label_BABE;

    // BAAC: LDA #$11
    cpu.m_a = 0x11;

    // BAAE: BRA $BAB8
    goto label_BAB8;

    // BAB0: LDA #$12
    cpu.m_a = 0x12;

    // BAB2: BRA $BAB8
    goto label_BAB8;

    // BAB4: LDA #$13
    cpu.m_a = 0x13;

    // BAB6: BRA $BAB8
    goto label_BAB8;

    label_BAB8:
    // BAB8: STA <$DC
    cpu.write_memory(0xDC, cpu.m_a);

    // BABA: LDA #$67
    cpu.m_a = 0x67;

    // BABC: BRA $BAC2
    goto label_BAC2;

    label_BABE:
    // BABE: STA <$DC
    cpu.write_memory(0xDC, cpu.m_a);

    // BAC0: LDA #$64
    cpu.m_a = 0x64;

    label_BAC2:
    // BAC2: LDB $D,X
    // TODO: Fix comma operator: LDB $D,X

    // BAC4: CMPB #$07
    cpu.compare_b(0x07);

    // BAC6: BHI $BACE
    // TODO: Convert BHI $BACE

    // BAC8: ASLB 
    cpu.m_b <<= 1;

    // BAC9: ASLB 
    cpu.m_b <<= 1;

    // BACA: ASLB 
    cpu.m_b <<= 1;

    // BACB: ASLB 
    cpu.m_b <<= 1;

    // BACC: BRA $BAD0
    goto label_BAD0;

    // BACE: LDB #$80
    cpu.m_b = 0x80;

    label_BAD0:
    // BAD0: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BAD2: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // BAD4: STD $5078
    cpu.write_memory16(0x5078, cpu.m_d);

    // BAD7: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // BAD9: STD $507A
    cpu.write_memory16(0x507A, cpu.m_d);

    // BADC: LDD #$0000
    cpu.m_d = 0x0000;

    // BADF: STD $507C
    cpu.write_memory16(0x507C, cpu.m_d);

    // BAE2: LDD #$000F
    cpu.m_d = 0x000F;

    // BAE5: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // BAE8: LDD $501C
    cpu.m_d = cpu.read_memory16(0x501C);

    // BAEB: PSHS U,X,D
    // TODO: Convert PSHS U,X,D

    // BAED: LDU $501A
    cpu.m_u = cpu.read_memory16(0x501A);

    // BAF0: LDX $5018
    cpu.m_x = cpu.read_memory16(0x5018);

    // BAF3: LDA #$67
    cpu.m_a = 0x67;

    // BAF5: JSR $CDBA
    cpu.call_function(0xCDBA);

    // BAF8: STX $5018
    cpu.write_memory16(0x5018, cpu.m_x);

    // BAFB: STU $501A
    cpu.write_memory16(0x501A, cpu.m_u);

    // BAFE: PULS D,X,U
    // TODO: Convert PULS D,X,U

    // BB00: STD $501C
    cpu.write_memory16(0x501C, cpu.m_d);

    // BB03: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // BB06: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // BB09: JSR $CCF0
    cpu.call_function(0xCCF0);

    // BB0C: LDA #$72
    cpu.m_a = 0x72;

    // BB0E: LDB $5018
    cpu.m_b = cpu.read_memory(0x5018);

    // BB11: ASLB 
    cpu.m_b <<= 1;

    // BB12: ASLB 
    cpu.m_b <<= 1;

    // BB13: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BB15: RTS 
    return;

    // BB16: LDB #$03
    cpu.m_b = 0x03;

    // BB18: BRA $BB22
    goto label_BB22;

    // BB1A: LDB #$01
    cpu.m_b = 0x01;

    // BB1C: BRA $BB22
    goto label_BB22;

    // BB1E: LDB #$02
    cpu.m_b = 0x02;

    // BB20: BRA $BB22
    goto label_BB22;

    label_BB22:
    // BB22: STB <$DC
    cpu.write_memory(0xDC, cpu.m_b);

    // BB24: LDB $D,X
    // TODO: Fix comma operator: LDB $D,X

    // BB26: CMPB #$1F
    cpu.compare_b(0x1F);

    // BB28: BLS $BB2F
    // TODO: Convert BLS $BB2F

    // BB2A: LDD #$A018
    cpu.m_d = 0xA018;

    // BB2D: BRA $BB35
    goto label_BB35;

    // BB2F: LDU #$BB3B
    cpu.m_u = 0xBB3B;

    // BB32: ASLB 
    cpu.m_b <<= 1;

    // BB33: LDD B,U
    // TODO: Fix comma operator: LDD B,U

    label_BB35:
    // BB35: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BB37: JSR $CCF0
    cpu.call_function(0xCCF0);

    // BB3A: RTS 
    return;

    // BB3B: XNC -$10,Y
    // TODO: Convert XNC -$10,Y

    // BB3D: XNC -$10,Y
    // TODO: Convert XNC -$10,Y

    // BB3F: XNC $0,U
    // TODO: Convert XNC $0,U

    // BB41: XNC $0,U
    // TODO: Convert XNC $0,U

    // BB43: XNC -$10,U
    // TODO: Convert XNC -$10,U

    // BB45: XNC -$10,U
    // TODO: Convert XNC -$10,U

    // BB47: XNC $0,S
    // TODO: Convert XNC $0,S

    // BB49: XNC $0,S
    // TODO: Convert XNC $0,S

    // BB4B: XNC -$10,S
    // TODO: Convert XNC -$10,S

    // BB4D: XNC -$10,S
    // TODO: Convert XNC -$10,S

    // BB4F: XNC ,X+
    // TODO: Convert XNC ,X+

    // BB51: XNC ,X+
    // TODO: Convert XNC ,X+

    // BB53: XNC [,W]
    // TODO: Convert XNC [,W]

    // BB55: XNC [,W]
    // TODO: Convert XNC [,W]

    // BB57: XNC ,Y+
    // TODO: Convert XNC ,Y+

    // BB59: XNC ,Y+
    // TODO: Convert XNC ,Y+

    // BB5B: ASR ,X+
    // TODO: Convert ASR ,X+

    // BB5D: XNC ,Y+
    // TODO: Convert XNC ,Y+

    // BB5F: ASR [,W]
    // TODO: Convert ASR [,W]

    // BB61: XNC ,Y+
    // TODO: Convert XNC ,Y+

    // BB63: ASR ,Y+
    // TODO: Convert ASR ,Y+

    // BB65: XNC ,Y+
    // TODO: Convert XNC ,Y+

    // BB67: ASR ,U+
    // TODO: Convert ASR ,U+

    // BB69: XNC ,Y+
    // TODO: Convert XNC ,Y+

    // BB6B: ROR ,Y+
    // TODO: Convert ROR ,Y+

    // BB6D: ROR ,Y+
    // TODO: Convert ROR ,Y+

    // BB6F: ROR ,Y+
    // TODO: Convert ROR ,Y+

    // BB71: ROR ,Y+
    // TODO: Convert ROR ,Y+

    // BB73: ROR ,Y+
    // TODO: Convert ROR ,Y+

    // BB75: ROR ,Y+
    // TODO: Convert ROR ,Y+

    // BB77: ROR ,Y+
    // TODO: Convert ROR ,Y+

    // BB79: ROR ,Y+
    // TODO: Convert ROR ,Y+

    // BB7B: LDA #$01
    cpu.m_a = 0x01;

    // BB7D: STA <$A1
    cpu.write_memory(0xA1, cpu.m_a);

    // BB7F: LDD #$0001
    cpu.m_d = 0x0001;

    // BB82: STD <$9F
    cpu.write_memory16(0x9F, cpu.m_d);

    // BB84: RTS 
    return;

    // BB85: LDA <$A1
    cpu.m_a = cpu.read_memory(0xA1);

    // BB87: ASLA 
    cpu.m_a <<= 1;

    // BB88: LDX #$BB8E
    cpu.m_x = 0xBB8E;

    // BB8B: JSR [A,X]
    // TODO: Complex indexed addressing: [A,X]

    // BB8D: RTS 
    return;

    // BB8E: ADDA $8DBB
    cpu.m_a += cpu.read_memory(0x8DBB);

    // BB91: EORA <$BB
    cpu.m_a ^= 0xBB;

    // BB93: ADDA $BC1E
    cpu.m_a += cpu.read_memory(0xBC1E);

    // BB96: CMPX $85CC
    cpu.compare_x(cpu.read_memory16(0x85CC));

    // BB99: LSR ,X+
    // TODO: Convert LSR ,X+

    // BB9B: LDU #$76F0
    cpu.m_u = 0x76F0;

    // BB9E: LDX <$9F
    cpu.m_x = cpu.read_memory16(0x9F);

    // BBA0: JSR $BCAE
    cpu.call_function(0xBCAE);

    // BBA3: LDD <$9F
    cpu.m_d = cpu.read_memory16(0x9F);

    // BBA5: ADDD #$0002
    cpu.m_d += 0x0002;

    // BBA8: STD <$9F
    cpu.write_memory16(0x9F, cpu.m_d);

    // BBAA: CMPD #$003F
    cpu.execute_cmpd_immediate(0x003F);

    // BBAE: BCC $BBBA
    if (!cpu.carry_flag()) cpu.m_pc = 0xBBBA;

    // BBB0: LDD #$0001
    cpu.m_d = 0x0001;

    // BBB3: STD <$9F
    cpu.write_memory16(0x9F, cpu.m_d);

    // BBB5: INC <$A1
    cpu.increment_memory(0xA1);

    // BBB7: JSR $BDB7
    cpu.call_function(0xBDB7);

    // BBBA: RTS 
    return;

    // BBBB: LDX <$9F
    cpu.m_x = cpu.read_memory16(0x9F);

    // BBBD: LDD #$61FF
    cpu.m_d = 0x61FF;

    // BBC0: LDU #$76F0
    cpu.m_u = 0x76F0;

    // BBC3: JSR $BCAE
    cpu.call_function(0xBCAE);

    // BBC6: LDD <$9F
    cpu.m_d = cpu.read_memory16(0x9F);

    // BBC8: ADDD #$0002
    cpu.m_d += 0x0002;

    // BBCB: STD <$9F
    cpu.write_memory16(0x9F, cpu.m_d);

    // BBCD: CMPD #$003F
    cpu.execute_cmpd_immediate(0x003F);

    // BBD1: BCC $BC0B
    if (!cpu.carry_flag()) cpu.m_pc = 0xBC0B;

    // BBD3: LDB #$3F
    cpu.m_b = 0x3F;

    // BBD5: SUBB <$A0
    cpu.m_b -= 0xA0;

    // BBD7: CLRA 
    cpu.m_a = 0;

    // BBD8: TFR D,X
    cpu.m_x = cpu.m_d;

    // BBDA: LDD #$64FF
    cpu.m_d = 0x64FF;

    // BBDD: JSR $BCAE
    cpu.call_function(0xBCAE);

    // BBE0: LDD <$9F
    cpu.m_d = cpu.read_memory16(0x9F);

    // BBE2: ASLB 
    cpu.m_b <<= 1;

    // BBE3: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // BBE4: ASLB 
    cpu.m_b <<= 1;

    // BBE5: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // BBE6: ASLB 
    cpu.m_b <<= 1;

    // BBE7: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // BBE8: COMA 
    cpu.m_a = ~cpu.m_a;

    // BBE9: COMB 
    cpu.m_b = ~cpu.m_b;

    // BBEA: BMI $BBEF
    if (cpu.negative_flag()) cpu.m_pc = 0xBBEF;

    // BBEC: DECA 
    cpu.m_a--;

    // BBED: ORB #$80
    cpu.m_b |= 0x80;

    // BBEF: ADDD #$7670
    cpu.m_d += 0x7670;

    // BBF2: TSTB 
    cpu.test_b();

    // BBF3: BMI $BBF8
    if (cpu.negative_flag()) cpu.m_pc = 0xBBF8;

    // BBF5: DECA 
    cpu.m_a--;

    // BBF6: ANDB #$7F
    cpu.m_b &= 0x7F;

    // BBF8: TFR D,U
    cpu.m_u = cpu.m_d;

    // BBFA: LDD <$9F
    cpu.m_d = cpu.read_memory16(0x9F);

    // BBFC: LSRB 
    cpu.m_b >>= 1;

    // BBFD: LSRB 
    cpu.m_b >>= 1;

    // BBFE: ANDB #$07
    cpu.m_b &= 0x07;

    // BC00: EORB #$07
    cpu.m_b ^= 0x07;

    // BC02: INCB 
    cpu.m_b++;

    // BC03: TFR D,X
    cpu.m_x = cpu.m_d;

    // BC05: LDD #$64FF
    cpu.m_d = 0x64FF;

    // BC08: JSR $BCC8
    cpu.call_function(0xBCC8);

    // BC0B: LDD <$9F
    cpu.m_d = cpu.read_memory16(0x9F);

    // BC0D: CMPD #$003F
    cpu.execute_cmpd_immediate(0x003F);

    // BC11: BCS $BC1D
    if (cpu.carry_flag()) cpu.m_pc = 0xBC1D;

    // BC13: LDD #$0001
    cpu.m_d = 0x0001;

    // BC16: STD <$9F
    cpu.write_memory16(0x9F, cpu.m_d);

    // BC18: INC <$A1
    cpu.increment_memory(0xA1);

    // BC1A: JSR $BDB7
    cpu.call_function(0xBDB7);

    // BC1D: RTS 
    return;

    // BC1E: LDX <$9F
    cpu.m_x = cpu.read_memory16(0x9F);

    // BC20: LDD #$67FF
    cpu.m_d = 0x67FF;

    // BC23: LDU #$7670
    cpu.m_u = 0x7670;

    // BC26: JSR $BCAE
    cpu.call_function(0xBCAE);

    // BC29: LDD <$9F
    cpu.m_d = cpu.read_memory16(0x9F);

    // BC2B: ADDD #$0003
    cpu.m_d += 0x0003;

    // BC2E: STD <$9F
    cpu.write_memory16(0x9F, cpu.m_d);

    // BC30: CMPD #$003F
    cpu.execute_cmpd_immediate(0x003F);

    // BC34: BCC $BC43
    if (!cpu.carry_flag()) cpu.m_pc = 0xBC43;

    // BC36: LDB #$3F
    cpu.m_b = 0x3F;

    // BC38: SUBB <$A0
    cpu.m_b -= 0xA0;

    // BC3A: CLRA 
    cpu.m_a = 0;

    // BC3B: TFR D,X
    cpu.m_x = cpu.m_d;

    // BC3D: LDD #$61FF
    cpu.m_d = 0x61FF;

    // BC40: JSR $BCAE
    cpu.call_function(0xBCAE);

    // BC43: LDD <$9F
    cpu.m_d = cpu.read_memory16(0x9F);

    // BC45: CMPD #$003F
    cpu.execute_cmpd_immediate(0x003F);

    // BC49: BCC $BC72
    if (!cpu.carry_flag()) cpu.m_pc = 0xBC72;

    // BC4B: ASLB 
    cpu.m_b <<= 1;

    // BC4C: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // BC4D: ASLB 
    cpu.m_b <<= 1;

    // BC4E: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // BC4F: ASLB 
    cpu.m_b <<= 1;

    // BC50: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // BC51: COMA 
    cpu.m_a = ~cpu.m_a;

    // BC52: COMB 
    cpu.m_b = ~cpu.m_b;

    // BC53: BMI $BC58
    if (cpu.negative_flag()) cpu.m_pc = 0xBC58;

    // BC55: DECA 
    cpu.m_a--;

    // BC56: ORB #$80
    cpu.m_b |= 0x80;

    // BC58: ADDD #$7670
    cpu.m_d += 0x7670;

    // BC5B: TSTB 
    cpu.test_b();

    // BC5C: BMI $BC61
    if (cpu.negative_flag()) cpu.m_pc = 0xBC61;

    // BC5E: DECA 
    cpu.m_a--;

    // BC5F: ANDB #$7F
    cpu.m_b &= 0x7F;

    // BC61: TFR D,U
    cpu.m_u = cpu.m_d;

    // BC63: LDD <$9F
    cpu.m_d = cpu.read_memory16(0x9F);

    // BC65: ANDB #$0F
    cpu.m_b &= 0x0F;

    // BC67: EORB #$0F
    cpu.m_b ^= 0x0F;

    // BC69: INCB 
    cpu.m_b++;

    // BC6A: TFR D,X
    cpu.m_x = cpu.m_d;

    // BC6C: LDD #$61FF
    cpu.m_d = 0x61FF;

    // BC6F: JSR $BCC8
    cpu.call_function(0xBCC8);

    // BC72: LDD <$9F
    cpu.m_d = cpu.read_memory16(0x9F);

    // BC74: CMPD #$0050
    cpu.execute_cmpd_immediate(0x0050);

    // BC78: BCS $BC84
    if (cpu.carry_flag()) cpu.m_pc = 0xBC84;

    // BC7A: LDD #$0080
    cpu.m_d = 0x0080;

    // BC7D: STD <$9F
    cpu.write_memory16(0x9F, cpu.m_d);

    // BC7F: INC <$A1
    cpu.increment_memory(0xA1);

    // BC81: JSR $BDB7
    cpu.call_function(0xBDB7);

    // BC84: RTS 
    return;

    // BC85: LDD <$9F
    cpu.m_d = cpu.read_memory16(0x9F);

    // BC87: SUBD #$0004
    cpu.m_d -= 0x0004;

    // BC8A: STD <$9F
    cpu.write_memory16(0x9F, cpu.m_d);

    // BC8C: CMPD #$0008
    cpu.execute_cmpd_immediate(0x0008);

    // BC90: BCS $BCA9
    if (cpu.carry_flag()) cpu.m_pc = 0xBCA9;

    // BC92: ADDD #$7500
    cpu.m_d += 0x7500;

    // BC95: TFR D,U
    cpu.m_u = cpu.m_d;

    // BC97: LDD <$9F
    cpu.m_d = cpu.read_memory16(0x9F);

    // BC99: LSRA 
    cpu.m_a >>= 1;

    // BC9A: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // BC9B: ANDB #$3F
    cpu.m_b &= 0x3F;

    // BC9D: EORB #$3F
    cpu.m_b ^= 0x3F;

    // BC9F: TFR D,X
    cpu.m_x = cpu.m_d;

    // BCA1: LDD #$67FF
    cpu.m_d = 0x67FF;

    // BCA4: JSR $BCC8
    cpu.call_function(0xBCC8);

    // BCA7: BRA $BCAD
    goto label_BCAD;

    // BCA9: LDA #$00
    cpu.m_a = 0x00;

    // BCAB: STA <$A1
    cpu.write_memory(0xA1, cpu.m_a);

    label_BCAD:
    // BCAD: RTS 
    return;

    // BCAE: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BCB0: LDD #$1F98
    cpu.m_d = 0x1F98;

    // BCB3: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BCB5: LDD #$0000
    cpu.m_d = 0x0000;

    // BCB8: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BCBA: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // BCBC: LDD #$BD69
    cpu.m_d = 0xBD69;

    // BCBF: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BCC1: LEAU -$2,U
    // TODO: Fix comma operator: LEAU -$2,U

    // BCC3: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // BCC5: BNE $BCB0
    if (!cpu.zero_flag()) cpu.m_pc = 0xBCB0;

    // BCC7: RTS 
    return;

    // BCC8: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BCCA: LDD #$1F98
    cpu.m_d = 0x1F98;

    // BCCD: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BCCF: LDD #$0000
    cpu.m_d = 0x0000;

    // BCD2: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BCD4: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // BCD6: LDD #$BD69
    cpu.m_d = 0xBD69;

    // BCD9: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BCDB: TFR U,D
    cpu.m_d = cpu.m_u;

    // BCDD: SUBD #$0004
    cpu.m_d -= 0x0004;

    // BCE0: ANDB #$7F
    cpu.m_b &= 0x7F;

    // BCE2: TFR D,U
    cpu.m_u = cpu.m_d;

    // BCE4: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // BCE6: BNE $BCCA
    if (!cpu.zero_flag()) cpu.m_pc = 0xBCCA;

    // BCE8: RTS 
    return;

    label_BCE9:
    // BCE9: LDB #$0E
    cpu.m_b = 0x0E;

    // BCEB: TST $4401
    // TODO: Convert TST $4401

    // BCEE: BPL $BCF5
    if (!cpu.negative_flag()) cpu.m_pc = 0xBCF5;

    // BCF0: DECB 
    cpu.m_b--;

    // BCF1: BNE $BCEB
    if (!cpu.zero_flag()) cpu.m_pc = 0xBCEB;

    // BCF3: LDA #$00
    cpu.m_a = 0x00;

    // BCF5: STA $4400
    cpu.write_memory(0x4400, cpu.m_a);

    // BCF8: RTS 
    return;

    // BCF9: LDA #$01
    cpu.m_a = 0x01;

    // BCFB: JMP $BCE9
    goto label_BCE9;

    // BCFE: LDA #$02
    cpu.m_a = 0x02;

    // BD00: JMP $BCE9
    goto label_BCE9;

    label_BD03:
    // BD03: JMP $bd03
    goto label_BD03;

    // BD05: JMP $BCE9
    goto label_BCE9;

    // BD08: LDA #$04
    cpu.m_a = 0x04;

    // BD0A: JMP $BCE9
    goto label_BCE9;

    // BD0D: LDA #$05
    cpu.m_a = 0x05;

    // BD0F: JMP $BCE9
    goto label_BCE9;

    label_BD12:
    // BD12: JMP $bd12
    goto label_BD12;

    // BD14: JMP $BCE9
    goto label_BCE9;

    // BD17: LDA #$07
    cpu.m_a = 0x07;

    // BD19: JMP $BCE9
    goto label_BCE9;

    // BD1C: LDA #$08
    cpu.m_a = 0x08;

    // BD1E: JMP $BCE9
    goto label_BCE9;

    // BD21: LDA #$09
    cpu.m_a = 0x09;

    // BD23: JMP $BCE9
    goto label_BCE9;

    // BD26: LDA #$0A
    cpu.m_a = 0x0A;

    // BD28: JMP $BCE9
    goto label_BCE9;

    // BD2B: LDA #$0B
    cpu.m_a = 0x0B;

    // BD2D: JMP $BCE9
    goto label_BCE9;

    // BD30: LDA #$0C
    cpu.m_a = 0x0C;

    // BD32: JMP $BCE9
    goto label_BCE9;

    // BD35: LDA #$0D
    cpu.m_a = 0x0D;

    // BD37: JMP $BCE9
    goto label_BCE9;

    // BD3A: LDA #$0E
    cpu.m_a = 0x0E;

    // BD3C: JMP $BCE9
    goto label_BCE9;

    // BD3F: LDA #$0F
    cpu.m_a = 0x0F;

    // BD41: JMP $BCE9
    goto label_BCE9;

    // BD44: LDA #$10
    cpu.m_a = 0x10;

    // BD46: JMP $BCE9
    goto label_BCE9;

    // BD49: LDA #$11
    cpu.m_a = 0x11;

    // BD4B: JMP $BCE9
    goto label_BCE9;

    // BD4E: LDA #$12
    cpu.m_a = 0x12;

    // BD50: JMP $BCE9
    goto label_BCE9;

    // BD53: LDA #$13
    cpu.m_a = 0x13;

    // BD55: JMP $BCE9
    goto label_BCE9;

    // BD58: LDA #$14
    cpu.m_a = 0x14;

    // BD5A: JMP $BCE9
    goto label_BCE9;

    // BD5D: LDA #$15
    cpu.m_a = 0x15;

    // BD5F: JMP $BCE9
    goto label_BCE9;

    // BD62: LDA #$16
    cpu.m_a = 0x16;

    // BD64: JMP $BCE9
    goto label_BCE9;

    // BD67: LDA #$17
    cpu.m_a = 0x17;

    // BD69: JMP $BCE9
    goto label_BCE9;

    // BD6C: LDA #$18
    cpu.m_a = 0x18;

    // BD6E: JMP $BCE9
    goto label_BCE9;

    // BD71: LDA #$19
    cpu.m_a = 0x19;

    // BD73: JMP $BCE9
    goto label_BCE9;

    // BD76: LDA #$1A
    cpu.m_a = 0x1A;

    // BD78: JMP $BCE9
    goto label_BCE9;

    // BD7B: LDA #$1B
    cpu.m_a = 0x1B;

    // BD7D: JMP $BCE9
    goto label_BCE9;

    // BD80: LDA #$1C
    cpu.m_a = 0x1C;

    // BD82: JMP $BCE9
    goto label_BCE9;

    // BD85: LDA #$1D
    cpu.m_a = 0x1D;

    // BD87: JMP $BCE9
    goto label_BCE9;

    // BD8A: LDA #$1E
    cpu.m_a = 0x1E;

    // BD8C: JMP $BCE9
    goto label_BCE9;

    // BD8F: LDA #$1F
    cpu.m_a = 0x1F;

    // BD91: JMP $BCE9
    goto label_BCE9;

    // BD94: LDA #$20
    cpu.m_a = 0x20;

    // BD96: JMP $BCE9
    goto label_BCE9;

    // BD99: LDA #$21
    cpu.m_a = 0x21;

    // BD9B: JMP $BCE9
    goto label_BCE9;

    // BD9E: LDA #$22
    cpu.m_a = 0x22;

    // BDA0: JMP $BCE9
    goto label_BCE9;

    // BDA3: LDA #$23
    cpu.m_a = 0x23;

    // BDA5: JMP $BCE9
    goto label_BCE9;

    // BDA8: LDA #$24
    cpu.m_a = 0x24;

    // BDAA: JMP $BCE9
    goto label_BCE9;

    // BDAD: LDA #$25
    cpu.m_a = 0x25;

    // BDAF: JMP $BCE9
    goto label_BCE9;

    // BDB2: LDA #$26
    cpu.m_a = 0x26;

    // BDB4: JMP $BCE9
    goto label_BCE9;

    // BDB7: LDA #$27
    cpu.m_a = 0x27;

    // BDB9: JMP $BCE9
    goto label_BCE9;

    // BDBC: LDA #$28
    cpu.m_a = 0x28;

    // BDBE: JMP $BCE9
    goto label_BCE9;

    // BDC1: LDA #$29
    cpu.m_a = 0x29;

    // BDC3: JMP $BCE9
    goto label_BCE9;

    // BDC6: LDA #$2A
    cpu.m_a = 0x2A;

    // BDC8: JMP $BCE9
    goto label_BCE9;

    // BDCB: LDA #$2B
    cpu.m_a = 0x2B;

    // BDCD: JMP $BCE9
    goto label_BCE9;

    // BDD0: LDA #$2C
    cpu.m_a = 0x2C;

    // BDD2: JMP $BCE9
    goto label_BCE9;

    // BDD5: LDA #$2D
    cpu.m_a = 0x2D;

    // BDD7: JMP $BCE9
    goto label_BCE9;

    // BDDA: LDA #$2E
    cpu.m_a = 0x2E;

    // BDDC: JMP $BCE9
    goto label_BCE9;

    // BDDF: LDA #$2F
    cpu.m_a = 0x2F;

    // BDE1: JMP $BCE9
    goto label_BCE9;

    // BDE4: LDA #$30
    cpu.m_a = 0x30;

    // BDE6: JMP $BCE9
    goto label_BCE9;

    // BDE9: LDA #$31
    cpu.m_a = 0x31;

    // BDEB: JMP $BCE9
    goto label_BCE9;

    // BDEE: LDA #$32
    cpu.m_a = 0x32;

    // BDF0: JMP $BCE9
    goto label_BCE9;

    // BDF3: LDA #$33
    cpu.m_a = 0x33;

    // BDF5: JMP $BCE9
    goto label_BCE9;

    // BDF8: LDA #$34
    cpu.m_a = 0x34;

    // BDFA: JMP $BCE9
    goto label_BCE9;

    // BDFD: LDA #$35
    cpu.m_a = 0x35;

    // BDFF: JMP $BCE9
    goto label_BCE9;

    // BE02: LDA #$36
    cpu.m_a = 0x36;

    // BE04: JMP $BCE9
    goto label_BCE9;

    // BE07: LDA #$37
    cpu.m_a = 0x37;

    // BE09: JMP $BCE9
    goto label_BCE9;

    // BE0C: LDA #$38
    cpu.m_a = 0x38;

    // BE0E: JMP $BCE9
    goto label_BCE9;

    // BE11: LDA #$39
    cpu.m_a = 0x39;

    // BE13: JMP $BCE9
    goto label_BCE9;

    // BE16: LDA #$3A
    cpu.m_a = 0x3A;

    // BE18: JMP $BCE9
    goto label_BCE9;

    // BE1B: LDA #$3B
    cpu.m_a = 0x3B;

    // BE1D: JMP $BCE9
    goto label_BCE9;

    // BE20: LDA #$59
    cpu.m_a = 0x59;

    // BE22: JSR $D8DF
    cpu.call_function(0xD8DF);

    // BE25: INCA 
    cpu.m_a++;

    // BE26: CMPA #$65
    cpu.compare_a(0x65);

    // BE28: BCS $BE22
    if (cpu.carry_flag()) cpu.m_pc = 0xBE22;

    // BE2A: LDA #$D3
    cpu.m_a = 0xD3;

    // BE2C: JSR $D8DF
    cpu.call_function(0xD8DF);

    // BE2F: LDD #$6480
    cpu.m_d = 0x6480;

    // BE32: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BE34: LDX #$453C
    cpu.m_x = 0x453C;

    // BE37: LDU #$C7BB
    cpu.m_u = 0xC7BB;

    // BE3A: LDD ,U++
    cpu.m_d = cpu.read_memory16(cpu.m_u++);

    // BE3C: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BE3E: LDD #$0030
    cpu.m_d = 0x0030;

    // BE41: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BE43: STU $4AFA
    cpu.write_memory16(0x4AFA, cpu.m_u);

    // BE46: LDB #$05
    cpu.m_b = 0x05;

    // BE48: STB <$AD
    cpu.write_memory(0xAD, cpu.m_b);

    // BE4A: LDB #$05
    cpu.m_b = 0x05;

    // BE4C: LDA ,X+
    // TODO: Complex indexed addressing: ,X+

    // BE4E: JSR $E7AD
    cpu.call_function(0xE7AD);

    // BE51: DECB 
    cpu.m_b--;

    // BE52: BPL $BE4C
    if (!cpu.negative_flag()) cpu.m_pc = 0xBE4C;

    // BE54: LDD #$8040
    cpu.m_d = 0x8040;

    // BE57: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BE59: LDU $4AFA
    cpu.m_u = cpu.read_memory16(0x4AFA);

    // BE5C: CMPX #$4554
    cpu.compare_x(0x4554);

    // BE5F: BCS $BE3A
    if (cpu.carry_flag()) cpu.m_pc = 0xBE3A;

    // BE61: LDD $C7C1
    cpu.m_d = cpu.read_memory16(0xC7C1);

    // BE64: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BE66: LDD #$013C
    cpu.m_d = 0x013C;

    // BE69: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BE6B: LDA #$01
    cpu.m_a = 0x01;

    // BE6D: STA <$AD
    cpu.write_memory(0xAD, cpu.m_a);

    // BE6F: LDA $4588
    cpu.m_a = cpu.read_memory(0x4588);

    // BE72: JSR $E7AD
    cpu.call_function(0xE7AD);

    // BE75: LDA $4589
    cpu.m_a = cpu.read_memory(0x4589);

    // BE78: JSR $E7AD
    cpu.call_function(0xE7AD);

    // BE7B: LDD #$8040
    cpu.m_d = 0x8040;

    // BE7E: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BE80: LDX #$4548
    cpu.m_x = 0x4548;

    // BE83: JSR $C6D4
    cpu.call_function(0xC6D4);

    // BE86: LDU #$4AFE
    cpu.m_u = 0x4AFE;

    // BE89: LDX #$4542
    cpu.m_x = 0x4542;

    // BE8C: JSR $C6D7
    cpu.call_function(0xC6D7);

    // BE8F: LDA $4AFC
    cpu.m_a = cpu.read_memory(0x4AFC);

    // BE92: ADDA $4B00
    cpu.m_a += cpu.read_memory(0x4B00);

    // BE95: DAA 
    // TODO: Convert DAA 

    // BE96: STA $4AFC
    cpu.write_memory(0x4AFC, cpu.m_a);

    // BE99: LDA $4AFB
    cpu.m_a = cpu.read_memory(0x4AFB);

    // BE9C: ADCA $4AFF
    cpu.add_a_with_carry(cpu.read_memory(0x4AFF));

    // BE9F: DAA 
    // TODO: Convert DAA 

    // BEA0: STA $4AFB
    cpu.write_memory(0x4AFB, cpu.m_a);

    // BEA3: LDA $4AFA
    cpu.m_a = cpu.read_memory(0x4AFA);

    // BEA6: ADCA $4AFE
    cpu.add_a_with_carry(cpu.read_memory(0x4AFE));

    // BEA9: DAA 
    // TODO: Convert DAA 

    // BEAA: STA $4AFA
    cpu.write_memory(0x4AFA, cpu.m_a);

    // BEAD: LDD $C7C3
    cpu.m_d = cpu.read_memory16(0xC7C3);

    // BEB0: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BEB2: LDD #$0030
    cpu.m_d = 0x0030;

    // BEB5: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BEB7: LDB #$05
    cpu.m_b = 0x05;

    // BEB9: STB <$AD
    cpu.write_memory(0xAD, cpu.m_b);

    // BEBB: LDA $4AFA
    cpu.m_a = cpu.read_memory(0x4AFA);

    // BEBE: JSR $E790
    cpu.call_function(0xE790);

    // BEC1: LDA $4AFB
    cpu.m_a = cpu.read_memory(0x4AFB);

    // BEC4: JSR $E790
    cpu.call_function(0xE790);

    // BEC7: LDA $4AFC
    cpu.m_a = cpu.read_memory(0x4AFC);

    // BECA: JSR $E790
    cpu.call_function(0xE790);

    // BECD: LDD #$8040
    cpu.m_d = 0x8040;

    // BED0: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BED2: LDX #$4554
    cpu.m_x = 0x4554;

    // BED5: JSR $C6D4
    cpu.call_function(0xC6D4);

    // BED8: JSR $C087
    cpu.call_function(0xC087);

    // BEDB: LDD $C7C9
    cpu.m_d = cpu.read_memory16(0xC7C9);

    // BEDE: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BEE0: LDD #$0030
    cpu.m_d = 0x0030;

    // BEE3: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BEE5: LDB #$07
    cpu.m_b = 0x07;

    // BEE7: STB <$AD
    cpu.write_memory(0xAD, cpu.m_b);

    // BEE9: LDA $4AFA
    cpu.m_a = cpu.read_memory(0x4AFA);

    // BEEC: JSR $E790
    cpu.call_function(0xE790);

    // BEEF: LDA $4AFB
    cpu.m_a = cpu.read_memory(0x4AFB);

    // BEF2: JSR $E790
    cpu.call_function(0xE790);

    // BEF5: LDA $4AFC
    cpu.m_a = cpu.read_memory(0x4AFC);

    // BEF8: JSR $E790
    cpu.call_function(0xE790);

    // BEFB: LDA $4AFD
    cpu.m_a = cpu.read_memory(0x4AFD);

    // BEFE: JSR $E790
    cpu.call_function(0xE790);

    // BF01: LDD #$8040
    cpu.m_d = 0x8040;

    // BF04: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BF06: LDX #$455C
    cpu.m_x = 0x455C;

    // BF09: JSR $C6D4
    cpu.call_function(0xC6D4);

    // BF0C: JSR $C087
    cpu.call_function(0xC087);

    // BF0F: LDD $C7CB
    cpu.m_d = cpu.read_memory16(0xC7CB);

    // BF12: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BF14: LDD #$0030
    cpu.m_d = 0x0030;

    // BF17: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BF19: LDB #$07
    cpu.m_b = 0x07;

    // BF1B: STB <$AD
    cpu.write_memory(0xAD, cpu.m_b);

    // BF1D: LDA $4AFA
    cpu.m_a = cpu.read_memory(0x4AFA);

    // BF20: JSR $E790
    cpu.call_function(0xE790);

    // BF23: LDA $4AFB
    cpu.m_a = cpu.read_memory(0x4AFB);

    // BF26: JSR $E790
    cpu.call_function(0xE790);

    // BF29: LDA $4AFC
    cpu.m_a = cpu.read_memory(0x4AFC);

    // BF2C: JSR $E790
    cpu.call_function(0xE790);

    // BF2F: LDA $4AFD
    cpu.m_a = cpu.read_memory(0x4AFD);

    // BF32: JSR $E790
    cpu.call_function(0xE790);

    // BF35: LDD #$8040
    cpu.m_d = 0x8040;

    // BF38: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BF3A: LDX #$454C
    cpu.m_x = 0x454C;

    // BF3D: JSR $C6D4
    cpu.call_function(0xC6D4);

    // BF40: CLR $4AFA
    cpu.write_memory(0x4AFA, 0);

    // BF43: LDA $4AFB
    cpu.m_a = cpu.read_memory(0x4AFB);

    // BF46: ORA $4AFC
    cpu.m_a |= cpu.read_memory(0x4AFC);

    // BF49: ORA $4AFD
    cpu.m_a |= cpu.read_memory(0x4AFD);

    // BF4C: BEQ $BF7C
    if (cpu.zero_flag()) cpu.m_pc = 0xBF7C;

    // BF4E: LDX #$4554
    cpu.m_x = 0x4554;

    // BF51: LDU #$4AFE
    cpu.m_u = 0x4AFE;

    // BF54: JSR $C6D7
    cpu.call_function(0xC6D7);

    // BF57: JSR $C02F
    cpu.call_function(0xC02F);

    // BF5A: LDA $4AFA
    cpu.m_a = cpu.read_memory(0x4AFA);

    // BF5D: ANDA #$0F
    cpu.m_a &= 0x0F;

    // BF5F: CMPA #$0F
    cpu.compare_a(0x0F);

    // BF61: LDA $4AFA
    cpu.m_a = cpu.read_memory(0x4AFA);

    // BF64: BCS $BF69
    if (cpu.carry_flag()) cpu.m_pc = 0xBF69;

    // BF66: INC $4AFA
    cpu.increment_memory(0x4AFA);

    // BF69: LSRA 
    cpu.m_a >>= 1;

    // BF6A: LSRA 
    cpu.m_a >>= 1;

    // BF6B: LSRA 
    cpu.m_a >>= 1;

    // BF6C: LSRA 
    cpu.m_a >>= 1;

    // BF6D: ADDA $4AFA
    cpu.m_a += cpu.read_memory(0x4AFA);

    // BF70: STA $4AFA
    cpu.write_memory(0x4AFA, cpu.m_a);

    // BF73: ANDA #$0F
    cpu.m_a &= 0x0F;

    // BF75: CMPA #$0F
    cpu.compare_a(0x0F);

    // BF77: BCS $BF7C
    if (cpu.carry_flag()) cpu.m_pc = 0xBF7C;

    // BF79: INC $4AFA
    cpu.increment_memory(0x4AFA);

    // BF7C: LDD $C7C5
    cpu.m_d = cpu.read_memory16(0xC7C5);

    // BF7F: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BF81: LDD #$0030
    cpu.m_d = 0x0030;

    // BF84: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BF86: LDA $4AFA
    cpu.m_a = cpu.read_memory(0x4AFA);

    // BF89: JSR $C70E
    cpu.call_function(0xC70E);

    // BF8C: LDD #$8040
    cpu.m_d = 0x8040;

    // BF8F: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BF91: LDX #$455C
    cpu.m_x = 0x455C;

    // BF94: JSR $C6D4
    cpu.call_function(0xC6D4);

    // BF97: LDA $4AFA
    cpu.m_a = cpu.read_memory(0x4AFA);

    // BF9A: ORA $4AFB
    cpu.m_a |= cpu.read_memory(0x4AFB);

    // BF9D: ORA $4AFC
    cpu.m_a |= cpu.read_memory(0x4AFC);

    // BFA0: ORA $4AFD
    cpu.m_a |= cpu.read_memory(0x4AFD);

    // BFA3: BEQ $BFB4
    if (cpu.zero_flag()) cpu.m_pc = 0xBFB4;

    // BFA5: LDX #$4556
    cpu.m_x = 0x4556;

    // BFA8: LDU #$4AFE
    cpu.m_u = 0x4AFE;

    // BFAB: JSR $C6D7
    cpu.call_function(0xC6D7);

    // BFAE: CLR $4B01
    cpu.write_memory(0x4B01, 0);

    // BFB1: JSR $C02F
    cpu.call_function(0xC02F);

    // BFB4: LDD $C7C7
    cpu.m_d = cpu.read_memory16(0xC7C7);

    // BFB7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BFB9: LDD #$0030
    cpu.m_d = 0x0030;

    // BFBC: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BFBE: CLRA 
    cpu.m_a = 0;

    // BFBF: LDB $4AFA
    cpu.m_b = cpu.read_memory(0x4AFA);

    // BFC2: LDX #$0010
    cpu.m_x = 0x0010;

    // BFC5: JSR $7720
    cpu.call_function(0x7720);

    // BFC8: LDB #$01
    cpu.m_b = 0x01;

    // BFCA: STB <$AD
    cpu.write_memory(0xAD, cpu.m_b);

    // BFCC: LDA $4AD6
    cpu.m_a = cpu.read_memory(0x4AD6);

    // BFCF: JSR $E790
    cpu.call_function(0xE790);

    // BFD2: LDD #$8040
    cpu.m_d = 0x8040;

    // BFD5: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BFD7: LDB #$11
    cpu.m_b = 0x11;

    // BFD9: STB $4AFA
    cpu.write_memory(0x4AFA, cpu.m_b);

    // BFDC: LDU #$C7CD
    cpu.m_u = 0xC7CD;

    // BFDF: STU $4AFC
    cpu.write_memory16(0x4AFC, cpu.m_u);

    // BFE2: LDU $4AFC
    cpu.m_u = cpu.read_memory16(0x4AFC);

    // BFE5: LDD ,U++
    cpu.m_d = cpu.read_memory16(cpu.m_u++);

    // BFE7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BFE9: CMPU #$C7E1
    cpu.execute_cmpu_immediate(0xC7E1);

    // BFED: BCS $BFF4
    if (cpu.carry_flag()) cpu.m_pc = 0xBFF4;

    // BFEF: LDD #$1ED4
    cpu.m_d = 0x1ED4;

    // BFF2: BRA $BFF7
    goto label_BFF7;

    // BFF4: LDD #$0064
    cpu.m_d = 0x0064;

    label_BFF7:
    // BFF7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // BFF9: STU $4AFC
    cpu.write_memory16(0x4AFC, cpu.m_u);

    // BFFC: LDX #$C7A3
    cpu.m_x = 0xC7A3;

    // BFFF: LDB $4AFA
    cpu.m_b = cpu.read_memory(0x4AFA);

    // C002: LDA B,X
    // TODO: Fix comma operator: LDA B,X

    // C004: JSR $C70E
    cpu.call_function(0xC70E);

    // C007: LDD $3002
    cpu.m_d = cpu.read_memory16(0x3002);

    // C00A: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C00C: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C00E: LDB #$00
    cpu.m_b = 0x00;

    // C010: STB <$AD
    cpu.write_memory(0xAD, cpu.m_b);

    // C012: LDX #$4564
    cpu.m_x = 0x4564;

    // C015: LDB $4AFA
    cpu.m_b = cpu.read_memory(0x4AFA);

    // C018: ASLB 
    cpu.m_b <<= 1;

    // C019: LDA B,X
    // TODO: Fix comma operator: LDA B,X

    // C01B: JSR $E7AD
    cpu.call_function(0xE7AD);

    // C01E: INCB 
    cpu.m_b++;

    // C01F: LDA B,X
    // TODO: Fix comma operator: LDA B,X

    // C021: JSR $E7AD
    cpu.call_function(0xE7AD);

    // C024: LDD #$8040
    cpu.m_d = 0x8040;

    // C027: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C029: DEC $4AFA
    cpu.decrement_memory(0x4AFA);

    // C02C: BPL $BFE2
    if (!cpu.negative_flag()) cpu.m_pc = 0xBFE2;

    // C02E: RTS 
    return;

    // C02F: LDX #$4AFE
    cpu.m_x = 0x4AFE;

    // C032: LDA #$01
    cpu.m_a = 0x01;

    // C034: STA $4B02
    cpu.write_memory(0x4B02, cpu.m_a);

    // C037: LDB #$03
    cpu.m_b = 0x03;

    // C039: LDA #$99
    cpu.m_a = 0x99;

    // C03B: SUBA ,-X
    // TODO: Complex indexed addressing: ,-X

    // C03D: ADDA $4B02
    cpu.m_a += cpu.read_memory(0x4B02);

    // C040: DAA 
    // TODO: Convert DAA 

    // C041: STA ,X
    cpu.write_memory(cpu.m_x, cpu.m_a);

    // C043: BCS $C04A
    if (cpu.carry_flag()) cpu.m_pc = 0xC04A;

    // C045: CLR $4B02
    cpu.write_memory(0x4B02, 0);

    // C048: BRA $C04F
    goto label_C04F;

    // C04A: LDA #$01
    cpu.m_a = 0x01;

    // C04C: STA $4B02
    cpu.write_memory(0x4B02, cpu.m_a);

    label_C04F:
    // C04F: DECB 
    cpu.m_b--;

    // C050: BPL $C039
    if (!cpu.negative_flag()) cpu.m_pc = 0xC039;

    // C052: LDB #$FF
    cpu.m_b = 0xFF;

    // C054: INCB 
    cpu.m_b++;

    // C055: CMPB #$EF
    cpu.compare_b(0xEF);

    // C057: BEQ $C083
    if (cpu.zero_flag()) cpu.m_pc = 0xC083;

    // C059: LDA $4B01
    cpu.m_a = cpu.read_memory(0x4B01);

    // C05C: ADDA $4AFD
    cpu.m_a += cpu.read_memory(0x4AFD);

    // C05F: DAA 
    // TODO: Convert DAA 

    // C060: STA $4B01
    cpu.write_memory(0x4B01, cpu.m_a);

    // C063: LDA $4B00
    cpu.m_a = cpu.read_memory(0x4B00);

    // C066: ADCA $4AFC
    cpu.add_a_with_carry(cpu.read_memory(0x4AFC));

    // C069: DAA 
    // TODO: Convert DAA 

    // C06A: STA $4B00
    cpu.write_memory(0x4B00, cpu.m_a);

    // C06D: LDA $4AFF
    cpu.m_a = cpu.read_memory(0x4AFF);

    // C070: ADCA $4AFB
    cpu.add_a_with_carry(cpu.read_memory(0x4AFB));

    // C073: DAA 
    // TODO: Convert DAA 

    // C074: STA $4AFF
    cpu.write_memory(0x4AFF, cpu.m_a);

    // C077: LDA $4AFE
    cpu.m_a = cpu.read_memory(0x4AFE);

    // C07A: ADCA $4AFA
    cpu.add_a_with_carry(cpu.read_memory(0x4AFA));

    // C07D: DAA 
    // TODO: Convert DAA 

    // C07E: STA $4AFE
    cpu.write_memory(0x4AFE, cpu.m_a);

    // C081: BCS $C054
    if (cpu.carry_flag()) cpu.m_pc = 0xC054;

    // C083: STB $4AFA
    cpu.write_memory(0x4AFA, cpu.m_b);

    // C086: RTS 
    return;

    // C087: BSR $C089
    // TODO: Convert BSR $C089

    // C089: ANDCC #$FE
    // TODO: Convert ANDCC #$FE

    // C08B: LDB #$03
    cpu.m_b = 0x03;

    // C08D: LDX #$4AFD
    cpu.m_x = 0x4AFD;

    // C090: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // C092: ADCA ,X
    // TODO: Complex indexed addressing: ,X

    // C094: DAA 
    // TODO: Convert DAA 

    // C095: STA ,X
    cpu.write_memory(cpu.m_x, cpu.m_a);

    // C097: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // C099: DECB 
    cpu.m_b--;

    // C09A: BPL $C090
    if (!cpu.negative_flag()) cpu.m_pc = 0xC090;

    // C09C: RTS 
    return;

    // C09D: LDA #$02
    cpu.m_a = 0x02;

    // C09F: JSR $C2C3
    cpu.call_function(0xC2C3);

    // C0A2: BNE $C0FE
    if (!cpu.zero_flag()) cpu.m_pc = 0xC0FE;

    // C0A4: CLRA 
    cpu.m_a = 0;

    // C0A5: LDB $4815
    cpu.m_b = cpu.read_memory(0x4815);

    // C0A8: ASLB 
    cpu.m_b <<= 1;

    // C0A9: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // C0AA: LDB $4816
    cpu.m_b = cpu.read_memory(0x4816);

    // C0AD: ASLB 
    cpu.m_b <<= 1;

    // C0AE: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // C0AF: LDB $4817
    cpu.m_b = cpu.read_memory(0x4817);

    // C0B2: ASLB 
    cpu.m_b <<= 1;

    // C0B3: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // C0B4: TFR A,B
    cpu.m_b = cpu.m_a;

    // C0B6: EORB $4AF4
    cpu.m_b ^= cpu.read_memory(0x4AF4);

    // C0B9: ANDB $4AF4
    cpu.m_b &= cpu.read_memory(0x4AF4);

    // C0BC: STA $4AF4
    cpu.write_memory(0x4AF4, cpu.m_a);

    // C0BF: LDX #$4548
    cpu.m_x = 0x4548;

    // C0C2: LSRB 
    cpu.m_b >>= 1;

    // C0C3: BCC $C0F7
    if (!cpu.carry_flag()) cpu.m_pc = 0xC0F7;

    // C0C5: LDU #$4B5F
    cpu.m_u = 0x4B5F;

    // C0C8: JSR $C6D7
    cpu.call_function(0xC6D7);

    // C0CB: LDA $4B61
    cpu.m_a = cpu.read_memory(0x4B61);

    // C0CE: ADDA #$01
    cpu.m_a += 0x01;

    // C0D0: DAA 
    // TODO: Convert DAA 

    // C0D1: STA $4B61
    cpu.write_memory(0x4B61, cpu.m_a);

    // C0D4: LDA $4B60
    cpu.m_a = cpu.read_memory(0x4B60);

    // C0D7: ADCA #$00
    cpu.add_a_with_carry(0x00);

    // C0D9: DAA 
    // TODO: Convert DAA 

    // C0DA: STA $4B60
    cpu.write_memory(0x4B60, cpu.m_a);

    // C0DD: LDA $4B5F
    cpu.m_a = cpu.read_memory(0x4B5F);

    // C0E0: ADCA #$00
    cpu.add_a_with_carry(0x00);

    // C0E2: DAA 
    // TODO: Convert DAA 

    // C0E3: STA $4B5F
    cpu.write_memory(0x4B5F, cpu.m_a);

    // C0E6: LDU #$4B5F
    cpu.m_u = 0x4B5F;

    // C0E9: JSR $C6F7
    cpu.call_function(0xC6F7);

    // C0EC: LDA #$02
    cpu.m_a = 0x02;

    // C0EE: STB $4B62
    cpu.write_memory(0x4B62, cpu.m_b);

    // C0F1: JSR $C2B3
    cpu.call_function(0xC2B3);

    // C0F4: LDB $4B62
    cpu.m_b = cpu.read_memory(0x4B62);

    // C0F7: LEAX -$6,X
    // TODO: Fix comma operator: LEAX -$6,X

    // C0F9: CMPX #$453C
    cpu.compare_x(0x453C);

    // C0FC: BCC $C0C2
    if (!cpu.carry_flag()) cpu.m_pc = 0xC0C2;

    // C0FE: RTS 
    return;

    // C0FF: LDA #$02
    cpu.m_a = 0x02;

    // C101: JSR $C413
    cpu.call_function(0xC413);

    // C104: LDX #$4554
    cpu.m_x = 0x4554;

    // C107: JSR $C6D4
    cpu.call_function(0xC6D4);

    // C10A: LDA $4AFD
    cpu.m_a = cpu.read_memory(0x4AFD);

    // C10D: ADDA $481A
    cpu.m_a += cpu.read_memory(0x481A);

    // C110: DAA 
    // TODO: Convert DAA 

    // C111: STA $4AFD
    cpu.write_memory(0x4AFD, cpu.m_a);

    // C114: LDA $4AFC
    cpu.m_a = cpu.read_memory(0x4AFC);

    // C117: ADCA $4819
    cpu.add_a_with_carry(cpu.read_memory(0x4819));

    // C11A: DAA 
    // TODO: Convert DAA 

    // C11B: STA $4AFC
    cpu.write_memory(0x4AFC, cpu.m_a);

    // C11E: LDA $4AFB
    cpu.m_a = cpu.read_memory(0x4AFB);

    // C121: ADCA #$00
    cpu.add_a_with_carry(0x00);

    // C123: DAA 
    // TODO: Convert DAA 

    // C124: STA $4AFB
    cpu.write_memory(0x4AFB, cpu.m_a);

    // C127: LDA $4AFA
    cpu.m_a = cpu.read_memory(0x4AFA);

    // C12A: ADCA #$00
    cpu.add_a_with_carry(0x00);

    // C12C: DAA 
    // TODO: Convert DAA 

    // C12D: BCS $C132
    if (cpu.carry_flag()) cpu.m_pc = 0xC132;

    // C12F: STA $4AFA
    cpu.write_memory(0x4AFA, cpu.m_a);

    // C132: LDA #$03
    cpu.m_a = 0x03;

    // C134: STB $4B02
    cpu.write_memory(0x4B02, cpu.m_b);

    // C137: LDU #$4AFA
    cpu.m_u = 0x4AFA;

    // C13A: JSR $C6F9
    cpu.call_function(0xC6F9);

    // C13D: LDX #$454E
    cpu.m_x = 0x454E;

    // C140: JSR $C6D4
    cpu.call_function(0xC6D4);

    // C143: LDA $4AFC
    cpu.m_a = cpu.read_memory(0x4AFC);

    // C146: ADDA #$01
    cpu.m_a += 0x01;

    // C148: DAA 
    // TODO: Convert DAA 

    // C149: STA $4AFC
    cpu.write_memory(0x4AFC, cpu.m_a);

    // C14C: LDA $4AFB
    cpu.m_a = cpu.read_memory(0x4AFB);

    // C14F: ADCA #$00
    cpu.add_a_with_carry(0x00);

    // C151: DAA 
    // TODO: Convert DAA 

    // C152: STA $4AFB
    cpu.write_memory(0x4AFB, cpu.m_a);

    // C155: LDA $4AFA
    cpu.m_a = cpu.read_memory(0x4AFA);

    // C158: ADCA #$00
    cpu.add_a_with_carry(0x00);

    // C15A: DAA 
    // TODO: Convert DAA 

    // C15B: STA $4AFA
    cpu.write_memory(0x4AFA, cpu.m_a);

    // C15E: JSR $C6F4
    cpu.call_function(0xC6F4);

    // C161: LDX #$4588
    cpu.m_x = 0x4588;

    // C164: JSR $C6D4
    cpu.call_function(0xC6D4);

    // C167: LDA $4B16
    cpu.m_a = cpu.read_memory(0x4B16);

    // C16A: CMPA $4AFA
    cpu.compare_a(cpu.read_memory(cpu.read_memory(0x4AFA)));

    // C16D: BLS $C17B
    // TODO: Convert BLS $C17B

    // C16F: STA $4AFA
    cpu.write_memory(0x4AFA, cpu.m_a);

    // C172: CLR $4AFB
    cpu.write_memory(0x4AFB, 0);

    // C175: CLR $4AFC
    cpu.write_memory(0x4AFC, 0);

    // C178: JSR $C6F4
    cpu.call_function(0xC6F4);

    // C17B: LDX #$4586
    cpu.m_x = 0x4586;

    // C17E: LDA $4819
    cpu.m_a = cpu.read_memory(0x4819);

    // C181: BNE $C19E
    if (!cpu.zero_flag()) cpu.m_pc = 0xC19E;

    // C183: LDA $481A
    cpu.m_a = cpu.read_memory(0x481A);

    // C186: LDX #$4564
    cpu.m_x = 0x4564;

    // C189: LDB #$9A
    cpu.m_b = 0x9A;

    // C18B: SUBB $C7A4
    cpu.m_b -= cpu.read_memory(0xC7A4);

    // C18E: STB $4AFA
    cpu.write_memory(0x4AFA, cpu.m_b);

    // C191: ADDA $4AFA
    cpu.m_a += cpu.read_memory(0x4AFA);

    // C194: DAA 
    // TODO: Convert DAA 

    // C195: BCC $C19E
    if (!cpu.carry_flag()) cpu.m_pc = 0xC19E;

    // C197: LEAX $2,X
    // TODO: Fix comma operator: LEAX $2,X

    // C199: CMPX #$4586
    cpu.compare_x(0x4586);

    // C19C: BCS $C191
    if (cpu.carry_flag()) cpu.m_pc = 0xC191;

    // C19E: LDA $1,X
    // TODO: Fix comma operator: LDA $1,X

    // C1A0: ANDA #$0F
    cpu.m_a &= 0x0F;

    // C1A2: ADDA #$01
    cpu.m_a += 0x01;

    // C1A4: DAA 
    // TODO: Convert DAA 

    // C1A5: STA $1,X
    cpu.write_memory(cpu.m_x + 0x01, cpu.m_a);

    // C1A7: ANDA #$F0
    cpu.m_a &= 0xF0;

    // C1A9: BEQ $C1E9
    if (cpu.zero_flag()) cpu.m_pc = 0xC1E9;

    // C1AB: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // C1AD: ANDA #$0F
    cpu.m_a &= 0x0F;

    // C1AF: ADDA #$01
    cpu.m_a += 0x01;

    // C1B1: DAA 
    // TODO: Convert DAA 

    // C1B2: STA ,X
    cpu.write_memory(cpu.m_x, cpu.m_a);

    // C1B4: ANDA #$F0
    cpu.m_a &= 0xF0;

    // C1B6: BEQ $C1E9
    if (cpu.zero_flag()) cpu.m_pc = 0xC1E9;

    // C1B8: LDX #$4564
    cpu.m_x = 0x4564;

    // C1BB: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // C1BD: ASLA 
    cpu.m_a <<= 1;

    // C1BE: ASLA 
    cpu.m_a <<= 1;

    // C1BF: ASLA 
    cpu.m_a <<= 1;

    // C1C0: ASLA 
    cpu.m_a <<= 1;

    // C1C1: STA $4AFA
    cpu.write_memory(0x4AFA, cpu.m_a);

    // C1C4: LDA $1,X
    // TODO: Fix comma operator: LDA $1,X

    // C1C6: ANDA #$0F
    cpu.m_a &= 0x0F;

    // C1C8: ADDA $4AFA
    cpu.m_a += cpu.read_memory(0x4AFA);

    // C1CB: BITA #$10
    // TODO: Convert BITA #$10

    // C1CD: BEQ $C1D1
    if (cpu.zero_flag()) cpu.m_pc = 0xC1D1;

    // C1CF: SUBA #$06
    cpu.m_a -= 0x06;

    // C1D1: LSRA 
    cpu.m_a >>= 1;

    // C1D2: STA $1,X
    cpu.write_memory(cpu.m_x + 0x01, cpu.m_a);

    // C1D4: LSRA 
    cpu.m_a >>= 1;

    // C1D5: LSRA 
    cpu.m_a >>= 1;

    // C1D6: LSRA 
    cpu.m_a >>= 1;

    // C1D7: LSRA 
    cpu.m_a >>= 1;

    // C1D8: STA ,X
    cpu.write_memory(cpu.m_x, cpu.m_a);

    // C1DA: LEAX $2,X
    // TODO: Fix comma operator: LEAX $2,X

    // C1DC: CMPX #$4588
    cpu.compare_x(0x4588);

    // C1DF: BCS $C1BB
    if (cpu.carry_flag()) cpu.m_pc = 0xC1BB;

    // C1E1: LDA #$05
    cpu.m_a = 0x05;

    // C1E3: STA ,U
    cpu.write_memory(cpu.m_u, cpu.m_a);

    // C1E5: LDA #$00
    cpu.m_a = 0x00;

    // C1E7: STA $1,U
    cpu.write_memory(cpu.m_u + 0x01, cpu.m_a);

    // C1E9: LDA $4866
    cpu.m_a = cpu.read_memory(0x4866);

    // C1EC: STA $4AFA
    cpu.write_memory(0x4AFA, cpu.m_a);

    // C1EF: LDA $4868
    cpu.m_a = cpu.read_memory(0x4868);

    // C1F2: STA $4AFB
    cpu.write_memory(0x4AFB, cpu.m_a);

    // C1F5: LDA $486F
    cpu.m_a = cpu.read_memory(0x486F);

    // C1F8: STA $4AFC
    cpu.write_memory(0x4AFC, cpu.m_a);

    // C1FB: LDA $4871
    cpu.m_a = cpu.read_memory(0x4871);

    // C1FE: STA $4AFD
    cpu.write_memory(0x4AFD, cpu.m_a);

    // C201: LDX #$4534
    cpu.m_x = 0x4534;

    // C204: LDU #$4AFA
    cpu.m_u = 0x4AFA;

    // C207: LDA #$03
    cpu.m_a = 0x03;

    // C209: JSR $C6F9
    cpu.call_function(0xC6F9);

    // C20C: LDX #$455C
    cpu.m_x = 0x455C;

    // C20F: JSR $C6D4
    cpu.call_function(0xC6D4);

    // C212: ORCC #$10
    cpu.m_cc |= 0x10;

    // C214: LDU $4B06
    cpu.m_u = cpu.read_memory16(0x4B06);

    // C217: LDD $4B04
    cpu.m_d = cpu.read_memory16(0x4B04);

    // C21A: ANDCC #$EF
    // TODO: Convert ANDCC #$EF

    // C21C: CMPD $4AFA
    cpu.execute_cmpd_immediate(0x4AFA);

    // C220: BHI $C22A
    // TODO: Convert BHI $C22A

    // C222: BCS $C23D
    if (cpu.carry_flag()) cpu.m_pc = 0xC23D;

    // C224: CMPU $4AFC
    cpu.execute_cmpu_immediate(0x4AFC);

    // C228: BLS $C23D
    // TODO: Convert BLS $C23D

    // C22A: STD $4AFA
    cpu.write_memory16(0x4AFA, cpu.m_d);

    // C22D: STU $4AFC
    cpu.write_memory16(0x4AFC, cpu.m_u);

    // C230: LDX #$455C
    cpu.m_x = 0x455C;

    // C233: LDU #$4AFA
    cpu.m_u = 0x4AFA;

    // C236: LDA #$03
    cpu.m_a = 0x03;

    // C238: JSR $C6F9
    cpu.call_function(0xC6F9);

    // C23B: BRA $C249
    goto label_C249;

    // C23D: LDD $4AFA
    cpu.m_d = cpu.read_memory16(0x4AFA);

    // C240: STD $4B04
    cpu.write_memory16(0x4B04, cpu.m_d);

    // C243: LDD $4AFC
    cpu.m_d = cpu.read_memory16(0x4AFC);

    // C246: STD $4B06
    cpu.write_memory16(0x4B06, cpu.m_d);

    label_C249:
    // C249: LDA #$02
    cpu.m_a = 0x02;

    // C24B: JMP $C2B3
    goto label_C2B3;

    label_C24E:
    // C24E: JMP $c24e
    goto label_C24E;

    // C250: BCC $C2B3
    if (!cpu.carry_flag()) cpu.m_pc = 0xC2B3;

    // C252: CMPA #$02
    cpu.compare_a(0x02);

    // C254: BCS $C27F
    if (cpu.carry_flag()) cpu.m_pc = 0xC27F;

    // C256: LDX #$C7B7
    cpu.m_x = 0xC7B7;

    // C259: LDB A,X
    // TODO: Fix comma operator: LDB A,X

    // C25B: SUBB #$02
    cpu.m_b -= 0x02;

    // C25D: STB $4AFB
    cpu.write_memory(0x4AFB, cpu.m_b);

    // C260: LDB #$45
    cpu.m_b = 0x45;

    // C262: STB $4AFA
    cpu.write_memory(0x4AFA, cpu.m_b);

    // C265: LDX #$C7B6
    cpu.m_x = 0xC7B6;

    // C268: LDB A,X
    // TODO: Fix comma operator: LDB A,X

    // C26A: LDX #$C707
    cpu.m_x = 0xC707;

    // C26D: ABX 
    // TODO: Convert ABX 

    // C26E: TFR X,U
    cpu.m_u = cpu.m_x;

    // C270: LDX #$4500
    cpu.m_x = 0x4500;

    // C273: ABX 
    // TODO: Convert ABX 

    // C274: LDB ,U+
    // TODO: Complex indexed addressing: ,U+

    // C276: STB ,X+
    cpu.write_memory(cpu.m_x, cpu.m_b);
    cpu.m_x++;

    // C278: CMPX $4AFA
    cpu.compare_x(cpu.read_memory16(0x4AFA));

    // C27B: BCS $C274
    if (cpu.carry_flag()) cpu.m_pc = 0xC274;

    // C27D: BRA $C2B3
    goto label_C2B3;

    // C27F: TFR A,B
    cpu.m_b = cpu.m_a;

    // C281: TSTA 
    cpu.test_a();

    // C282: BNE $C29B
    if (!cpu.zero_flag()) cpu.m_pc = 0xC29B;

    // C284: LDA <$27
    cpu.m_a = cpu.read_memory(0x27);

    // C286: STA $4AFA
    cpu.write_memory(0x4AFA, cpu.m_a);

    // C289: LDA <$24
    cpu.m_a = cpu.read_memory(0x24);

    // C28B: STA $4AFB
    cpu.write_memory(0x4AFB, cpu.m_a);

    // C28E: LDA #$00
    cpu.m_a = 0x00;

    // C290: STA $4AFC
    cpu.write_memory(0x4AFC, cpu.m_a);

    // C293: LDX #$4500
    cpu.m_x = 0x4500;

    // C296: JSR $C6F4
    cpu.call_function(0xC6F4);

    // C299: BRA $C2B1
    goto label_C2B1;

    // C29B: LDX #$4508
    cpu.m_x = 0x4508;

    // C29E: LDU #$CC98
    cpu.m_u = 0xCC98;

    // C2A1: LDA #$0B
    cpu.m_a = 0x0B;

    // C2A3: JSR $C6F9
    cpu.call_function(0xC6F9);

    // C2A6: LDX #$4520
    cpu.m_x = 0x4520;

    // C2A9: LDU #$CC7A
    cpu.m_u = 0xCC7A;

    // C2AC: LDA #$08
    cpu.m_a = 0x08;

    // C2AE: JSR $C6F9
    cpu.call_function(0xC6F9);

    label_C2B1:
    // C2B1: TFR B,A
    cpu.m_a = cpu.m_b;

    label_C2B3:
    // C2B3: JSR $C2C3
    cpu.call_function(0xC2C3);

    // C2B6: BEQ $C2C2
    if (cpu.zero_flag()) cpu.m_pc = 0xC2C2;

    // C2B8: STB $1,X
    cpu.write_memory(cpu.m_x + 0x01, cpu.m_b);

    // C2BA: LSRB 
    cpu.m_b >>= 1;

    // C2BB: LSRB 
    cpu.m_b >>= 1;

    // C2BC: LSRB 
    cpu.m_b >>= 1;

    // C2BD: LSRB 
    cpu.m_b >>= 1;

    // C2BE: STB ,X
    cpu.write_memory(cpu.m_x, cpu.m_b);

    // C2C0: LDB #$FF
    cpu.m_b = 0xFF;

    // C2C2: RTS 
    return;

    label_C2C3:
    // C2C3: JMP $c2c3
    goto label_C2C3;

    // C2C5: LDX #$C7B7
    cpu.m_x = 0xC7B7;

    // C2C8: LDB A,X
    // TODO: Fix comma operator: LDB A,X

    // C2CA: LDX #$C7B6
    cpu.m_x = 0xC7B6;

    // C2CD: SUBB A,X
    // TODO: Fix comma operator: SUBB A,X

    // C2CF: SUBB #$02
    cpu.m_b -= 0x02;

    // C2D1: STB ,S
    cpu.write_memory(cpu.m_sp, cpu.m_b);

    // C2D3: LDB A,X
    // TODO: Fix comma operator: LDB A,X

    // C2D5: LDX #$4500
    cpu.m_x = 0x4500;

    // C2D8: ABX 
    // TODO: Convert ABX 

    // C2D9: LDB #$00
    cpu.m_b = 0x00;

    // C2DB: STB $1,S
    cpu.write_memory(cpu.m_sp + 0x01, cpu.m_b);

    // C2DD: ORCC #$01
    cpu.m_cc |= 0x01;

    // C2DF: LDB ,X+
    // TODO: Complex indexed addressing: ,X+

    // C2E1: ANDB #$0F
    cpu.m_b &= 0x0F;

    // C2E3: ADCB $1,S
    // TODO: Fix comma operator: ADCB $1,S

    // C2E5: STB $1,S
    cpu.write_memory(cpu.m_sp + 0x01, cpu.m_b);

    // C2E7: DEC ,S
    // TODO: Complex indexed addressing: ,S

    // C2E9: BNE $C2DF
    if (!cpu.zero_flag()) cpu.m_pc = 0xC2DF;

    // C2EB: ADCB #$00
    cpu.add_b_with_carry(0x00);

    // C2ED: STB $1,S
    cpu.write_memory(cpu.m_sp + 0x01, cpu.m_b);

    // C2EF: LDB ,X
    // TODO: Complex indexed addressing: ,X

    // C2F1: ASLB 
    cpu.m_b <<= 1;

    // C2F2: ASLB 
    cpu.m_b <<= 1;

    // C2F3: ASLB 
    cpu.m_b <<= 1;

    // C2F4: ASLB 
    cpu.m_b <<= 1;

    // C2F5: STB $2,S
    cpu.write_memory(cpu.m_sp + 0x02, cpu.m_b);

    // C2F7: LDB $1,X
    // TODO: Fix comma operator: LDB $1,X

    // C2F9: ANDB #$0F
    cpu.m_b &= 0x0F;

    // C2FB: ADDB $2,S
    // TODO: Fix comma operator: ADDB $2,S

    // C2FD: STB $2,S
    cpu.write_memory(cpu.m_sp + 0x02, cpu.m_b);

    // C2FF: LDB $1,S
    // TODO: Fix comma operator: LDB $1,S

    // C301: CMPB $2,S
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_sp + 0x02));

    // C303: LEAS $3,S
    // TODO: Fix comma operator: LEAS $3,S

    // C305: RTS 
    return;

    label_C306:
    // C306: JMP $c306
    goto label_C306;

    // C309: LDU #$4C00
    cpu.m_u = 0x4C00;

    // C30C: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // C30E: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // C310: CMPX #$4600
    cpu.compare_x(0x4600);

    // C313: BCS $C30C
    if (cpu.carry_flag()) cpu.m_pc = 0xC30C;

    // C315: LDA #$FF
    cpu.m_a = 0xFF;

    // C317: STA $4687
    cpu.write_memory(0x4687, cpu.m_a);

    // C31A: LDX #$0100
    cpu.m_x = 0x0100;

    // C31D: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // C320: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // C322: BNE $C31D
    if (!cpu.zero_flag()) cpu.m_pc = 0xC31D;

    // C324: LDA #$00
    cpu.m_a = 0x00;

    // C326: STA $4687
    cpu.write_memory(0x4687, cpu.m_a);

    // C329: LDX #$A000
    cpu.m_x = 0xA000;

    // C32C: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // C32F: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // C331: BNE $C32C
    if (!cpu.zero_flag()) cpu.m_pc = 0xC32C;

    // C333: LDX #$4500
    cpu.m_x = 0x4500;

    // C336: LDY #$4C00
    cpu.m_y = 0x4C00;

    // C33A: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // C33C: LDD ,Y
    // TODO: Complex indexed addressing: ,Y

    // C33E: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // C340: STD ,X++
    cpu.write_memory16(cpu.m_x++, cpu.m_d);

    // C342: CMPX #$4600
    cpu.compare_x(0x4600);

    // C345: BCS $C33A
    if (cpu.carry_flag()) cpu.m_pc = 0xC33A;

    // C347: LDA #$03
    cpu.m_a = 0x03;

    // C349: JSR $C2C3
    cpu.call_function(0xC2C3);

    // C34C: BEQ $C37C
    if (cpu.zero_flag()) cpu.m_pc = 0xC37C;

    // C34E: LDA #$00
    cpu.m_a = 0x00;

    // C350: JSR $C2C3
    cpu.call_function(0xC2C3);

    // C353: BEQ $C36C
    if (cpu.zero_flag()) cpu.m_pc = 0xC36C;

    // C355: JSR $C3EE
    cpu.call_function(0xC3EE);

    // C358: LDA #$03
    cpu.m_a = 0x03;

    // C35A: JSR $C3EE
    cpu.call_function(0xC3EE);

    // C35D: JSR $C2C3
    cpu.call_function(0xC2C3);

    // C360: BEQ $C37C
    if (cpu.zero_flag()) cpu.m_pc = 0xC37C;

    // C362: LDA #$00
    cpu.m_a = 0x00;

    // C364: JSR $C2C3
    cpu.call_function(0xC2C3);

    // C367: BEQ $C36C
    if (cpu.zero_flag()) cpu.m_pc = 0xC36C;

    // C369: JSR $C24E
    cpu.call_function(0xC24E);

    // C36C: LDX #$C7B6
    cpu.m_x = 0xC7B6;

    // C36F: LDB $0003,X
    // TODO: Fix comma operator: LDB $0003,X

    // C373: LDX #$4500
    cpu.m_x = 0x4500;

    // C376: ABX 
    // TODO: Convert ABX 

    // C377: LDU #$4500
    cpu.m_u = 0x4500;

    // C37A: BRA $C3B7
    goto label_C3B7;

    // C37C: LDA #$00
    cpu.m_a = 0x00;

    // C37E: JSR $C2C3
    cpu.call_function(0xC2C3);

    // C381: BNE $C3A7
    if (!cpu.zero_flag()) cpu.m_pc = 0xC3A7;

    // C383: LDA $4596
    cpu.m_a = cpu.read_memory(0x4596);

    // C386: ANDA #$0F
    cpu.m_a &= 0x0F;

    // C388: STA $4AFA
    cpu.write_memory(0x4AFA, cpu.m_a);

    // C38B: LDA $4506
    cpu.m_a = cpu.read_memory(0x4506);

    // C38E: ANDA #$0F
    cpu.m_a &= 0x0F;

    // C390: CMPA $4AFA
    cpu.compare_a(cpu.read_memory(cpu.read_memory(0x4AFA)));

    // C393: BNE $C3A5
    if (!cpu.zero_flag()) cpu.m_pc = 0xC3A5;

    // C395: LDA $4597
    cpu.m_a = cpu.read_memory(0x4597);

    // C398: ANDA #$0F
    cpu.m_a &= 0x0F;

    // C39A: STA $4AFA
    cpu.write_memory(0x4AFA, cpu.m_a);

    // C39D: LDA $4507
    cpu.m_a = cpu.read_memory(0x4507);

    // C3A0: ANDA #$0F
    cpu.m_a &= 0x0F;

    // C3A2: CMPA $4AFA
    cpu.compare_a(cpu.read_memory(cpu.read_memory(0x4AFA)));

    // C3A5: BEQ $C3C6
    if (cpu.zero_flag()) cpu.m_pc = 0xC3C6;

    // C3A7: LDX #$C7B6
    cpu.m_x = 0xC7B6;

    // C3AA: LDB $0003,X
    // TODO: Fix comma operator: LDB $0003,X

    // C3AE: LDX #$4500
    cpu.m_x = 0x4500;

    // C3B1: ABX 
    // TODO: Convert ABX 

    // C3B2: TFR X,U
    cpu.m_u = cpu.m_x;

    // C3B4: LDX #$4500
    cpu.m_x = 0x4500;

    label_C3B7:
    // C3B7: LDB $C7B7
    cpu.m_b = cpu.read_memory(0xC7B7);

    // C3BA: STB $4B02
    cpu.write_memory(0x4B02, cpu.m_b);

    // C3BD: LDB ,U+
    // TODO: Complex indexed addressing: ,U+

    // C3BF: STB ,X+
    cpu.write_memory(cpu.m_x, cpu.m_b);
    cpu.m_x++;

    // C3C1: DEC $4B02
    cpu.decrement_memory(0x4B02);

    // C3C4: BNE $C3BD
    if (!cpu.zero_flag()) cpu.m_pc = 0xC3BD;

    // C3C6: LDA #$02
    cpu.m_a = 0x02;

    // C3C8: JSR $C2C3
    cpu.call_function(0xC2C3);

    // C3CB: BEQ $C3D8
    if (cpu.zero_flag()) cpu.m_pc = 0xC3D8;

    // C3CD: JSR $C3EE
    cpu.call_function(0xC3EE);

    // C3D0: JSR $C2C3
    cpu.call_function(0xC2C3);

    // C3D3: BEQ $C3D8
    if (cpu.zero_flag()) cpu.m_pc = 0xC3D8;

    // C3D5: JSR $C24E
    cpu.call_function(0xC24E);

    // C3D8: DECA 
    cpu.m_a--;

    // C3D9: BNE $C3C8
    if (!cpu.zero_flag()) cpu.m_pc = 0xC3C8;

    // C3DB: LDX #$455C
    cpu.m_x = 0x455C;

    // C3DE: JSR $C6D4
    cpu.call_function(0xC6D4);

    // C3E1: LDD $4AFA
    cpu.m_d = cpu.read_memory16(0x4AFA);

    // C3E4: STD $4B04
    cpu.write_memory16(0x4B04, cpu.m_d);

    // C3E7: LDD $4AFC
    cpu.m_d = cpu.read_memory16(0x4AFC);

    // C3EA: STD $4B06
    cpu.write_memory16(0x4B06, cpu.m_d);

    // C3ED: RTS 
    return;

    // C3EE: LDX #$C7B7
    cpu.m_x = 0xC7B7;

    // C3F1: LDB A,X
    // TODO: Fix comma operator: LDB A,X

    // C3F3: LDX #$4500
    cpu.m_x = 0x4500;

    // C3F6: ABX 
    // TODO: Convert ABX 

    // C3F7: STX $4AFA
    cpu.write_memory16(0x4AFA, cpu.m_x);

    // C3FA: LDX #$C7B6
    cpu.m_x = 0xC7B6;

    // C3FD: LDB A,X
    // TODO: Fix comma operator: LDB A,X

    // C3FF: LDX #$4C00
    cpu.m_x = 0x4C00;

    // C402: ABX 
    // TODO: Convert ABX 

    // C403: TFR X,U
    cpu.m_u = cpu.m_x;

    // C405: LDX #$4500
    cpu.m_x = 0x4500;

    // C408: ABX 
    // TODO: Convert ABX 

    label_C409:
    // C409: JMP $c409
    goto label_C409;

    // C40B: STB ,X+
    cpu.write_memory(cpu.m_x, cpu.m_b);
    cpu.m_x++;

    // C40D: CMPX $4AFA
    cpu.compare_x(cpu.read_memory16(0x4AFA));

    // C410: BCS $C409
    if (cpu.carry_flag()) cpu.m_pc = 0xC409;

    // C412: RTS 
    return;

    // C413: JSR $C2C3
    cpu.call_function(0xC2C3);

    // C416: BEQ $C44F
    if (cpu.zero_flag()) cpu.m_pc = 0xC44F;

    // C418: STA $4AFA
    cpu.write_memory(0x4AFA, cpu.m_a);

    // C41B: LDX #$4500
    cpu.m_x = 0x4500;

    // C41E: LDU #$4C00
    cpu.m_u = 0x4C00;

    label_C421:
    // C421: JMP $c421
    goto label_C421;

    // C423: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // C425: CMPX #$4600
    cpu.compare_x(0x4600);

    // C428: BCS $C421
    if (cpu.carry_flag()) cpu.m_pc = 0xC421;

    // C42A: JSR $C6B8
    cpu.call_function(0xC6B8);

    // C42D: LDX #$4500
    cpu.m_x = 0x4500;

    // C430: LDY #$4C00
    cpu.m_y = 0x4C00;

    label_C434:
    // C434: JMP $c434
    goto label_C434;

    // C436: LDD ,Y
    // TODO: Complex indexed addressing: ,Y

    // C438: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // C43A: STD ,X++
    cpu.write_memory16(cpu.m_x++, cpu.m_d);

    // C43C: CMPX #$4600
    cpu.compare_x(0x4600);

    // C43F: BCS $C434
    if (cpu.carry_flag()) cpu.m_pc = 0xC434;

    // C441: LDA $4AFA
    cpu.m_a = cpu.read_memory(0x4AFA);

    // C444: JSR $C3EE
    cpu.call_function(0xC3EE);

    // C447: JSR $C2C3
    cpu.call_function(0xC2C3);

    // C44A: BEQ $C44F
    if (cpu.zero_flag()) cpu.m_pc = 0xC44F;

    // C44C: JSR $C24E
    cpu.call_function(0xC24E);

    label_C44F:
    // C44F: JMP $c44f
    goto label_C44F;

    // C450: LDA #$65
    cpu.m_a = 0x65;

    // C452: JSR $D8DF
    cpu.call_function(0xD8DF);

    // C455: INCA 
    cpu.m_a++;

    // C456: CMPA #$74
    cpu.compare_a(0x74);

    // C458: BCS $C452
    if (cpu.carry_flag()) cpu.m_pc = 0xC452;

    // C45A: LDA #$D4
    cpu.m_a = 0xD4;

    // C45C: JSR $D8DF
    cpu.call_function(0xD8DF);

    // C45F: LDD #$6280
    cpu.m_d = 0x6280;

    // C462: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C464: LDA #$0B
    cpu.m_a = 0x0B;

    // C466: STA $4AFE
    cpu.write_memory(0x4AFE, cpu.m_a);

    // C469: LDA $4AFE
    cpu.m_a = cpu.read_memory(0x4AFE);

    // C46C: JSR $C5A4
    cpu.call_function(0xC5A4);

    // C46F: DEC $4AFE
    cpu.decrement_memory(0x4AFE);

    // C472: BPL $C469
    if (!cpu.negative_flag()) cpu.m_pc = 0xC469;

    // C474: JSR $C690
    cpu.call_function(0xC690);

    // C477: LDA $4598
    cpu.m_a = cpu.read_memory(0x4598);

    // C47A: ANDA #$0F
    cpu.m_a &= 0x0F;

    // C47C: BEQ $C4EA
    if (cpu.zero_flag()) cpu.m_pc = 0xC4EA;

    // C47E: LDB #$D5
    cpu.m_b = 0xD5;

    // C480: JSR $E7C7
    cpu.call_function(0xE7C7);

    // C483: LDA <$AC
    cpu.m_a = cpu.read_memory(0xAC);

    // C485: ANDA #$40
    cpu.m_a &= 0x40;

    // C487: BEQ $C4EA
    if (cpu.zero_flag()) cpu.m_pc = 0xC4EA;

    // C489: LDA $4598
    cpu.m_a = cpu.read_memory(0x4598);

    // C48C: ANDA #$08
    cpu.m_a &= 0x08;

    // C48E: BEQ $C498
    if (cpu.zero_flag()) cpu.m_pc = 0xC498;

    // C490: LDA #$01
    cpu.m_a = 0x01;

    // C492: JSR $C24E
    cpu.call_function(0xC24E);

    // C495: JSR $CC18
    cpu.call_function(0xCC18);

    // C498: LDA $4598
    cpu.m_a = cpu.read_memory(0x4598);

    // C49B: ANDA #$04
    cpu.m_a &= 0x04;

    // C49D: BEQ $C4B1
    if (cpu.zero_flag()) cpu.m_pc = 0xC4B1;

    // C49F: LDX #$454E
    cpu.m_x = 0x454E;

    // C4A2: LDD #$0000
    cpu.m_d = 0x0000;

    // C4A5: STD ,X++
    cpu.write_memory16(cpu.m_x++, cpu.m_d);

    // C4A7: CMPX #$458E
    cpu.compare_x(0x458E);

    // C4AA: BCS $C4A5
    if (cpu.carry_flag()) cpu.m_pc = 0xC4A5;

    // C4AC: LDA #$02
    cpu.m_a = 0x02;

    // C4AE: JSR $C2B3
    cpu.call_function(0xC2B3);

    // C4B1: LDA $4598
    cpu.m_a = cpu.read_memory(0x4598);

    // C4B4: ANDA #$02
    cpu.m_a &= 0x02;

    // C4B6: BEQ $C4DA
    if (cpu.zero_flag()) cpu.m_pc = 0xC4DA;

    // C4B8: LDA #$00
    cpu.m_a = 0x00;

    // C4BA: JSR $C24E
    cpu.call_function(0xC24E);

    // C4BD: LDX #$C7B6
    cpu.m_x = 0xC7B6;

    // C4C0: LDB $0003,X
    // TODO: Fix comma operator: LDB $0003,X

    // C4C4: LDX #$4500
    cpu.m_x = 0x4500;

    // C4C7: ABX 
    // TODO: Convert ABX 

    // C4C8: LDU #$4500
    cpu.m_u = 0x4500;

    // C4CB: LDB $C7B7
    cpu.m_b = cpu.read_memory(0xC7B7);

    // C4CE: STB $4B02
    cpu.write_memory(0x4B02, cpu.m_b);

    // C4D1: LDB ,U+
    // TODO: Complex indexed addressing: ,U+

    // C4D3: STB ,X+
    cpu.write_memory(cpu.m_x, cpu.m_b);
    cpu.m_x++;

    // C4D5: DEC $4B02
    cpu.decrement_memory(0x4B02);

    // C4D8: BNE $C4D1
    if (!cpu.zero_flag()) cpu.m_pc = 0xC4D1;

    // C4DA: LDA $4598
    cpu.m_a = cpu.read_memory(0x4598);

    // C4DD: ANDA #$01
    cpu.m_a &= 0x01;

    // C4DF: BEQ $C4E4
    if (cpu.zero_flag()) cpu.m_pc = 0xC4E4;

    // C4E1: JSR $C5F2
    cpu.call_function(0xC5F2);

    // C4E4: LDD #$0000
    cpu.m_d = 0x0000;

    // C4E7: STD $4598
    cpu.write_memory16(0x4598, cpu.m_d);

    // C4EA: RTS 
    return;

    // C4EB: LDB <$43
    cpu.m_b = cpu.read_memory(0x43);

    // C4ED: ANDB #$0F
    cpu.m_b &= 0x0F;

    // C4EF: BNE $C519
    if (!cpu.zero_flag()) cpu.m_pc = 0xC519;

    // C4F1: LDB $487F
    cpu.m_b = cpu.read_memory(0x487F);

    // C4F4: CMPB #$D0
    cpu.compare_b(0xD0);

    // C4F6: BCC $C519
    if (!cpu.carry_flag()) cpu.m_pc = 0xC519;

    // C4F8: CMPB #$30
    cpu.compare_b(0x30);

    // C4FA: BLS $C519
    // TODO: Convert BLS $C519

    // C4FC: TSTB 
    cpu.test_b();

    // C4FD: BMI $C50C
    if (cpu.negative_flag()) cpu.m_pc = 0xC50C;

    // C4FF: LDB $4AF6
    cpu.m_b = cpu.read_memory(0x4AF6);

    // C502: DECB 
    cpu.m_b--;

    // C503: BPL $C507
    if (!cpu.negative_flag()) cpu.m_pc = 0xC507;

    // C505: LDB #$0B
    cpu.m_b = 0x0B;

    // C507: STB $4AF6
    cpu.write_memory(0x4AF6, cpu.m_b);

    // C50A: BRA $C519
    goto label_C519;

    // C50C: LDB $4AF6
    cpu.m_b = cpu.read_memory(0x4AF6);

    // C50F: INCB 
    cpu.m_b++;

    // C510: CMPB #$0B
    cpu.compare_b(0x0B);

    // C512: BLS $C516
    // TODO: Convert BLS $C516

    // C514: LDB #$00
    cpu.m_b = 0x00;

    // C516: STB $4AF6
    cpu.write_memory(0x4AF6, cpu.m_b);

    label_C519:
    // C519: LDX #$C797
    cpu.m_x = 0xC797;

    // C51C: LDA $4AF6
    cpu.m_a = cpu.read_memory(0x4AF6);

    // C51F: LDB A,X
    // TODO: Fix comma operator: LDB A,X

    // C521: STB $4AFC
    cpu.write_memory(0x4AFC, cpu.m_b);

    // C524: LSRB 
    cpu.m_b >>= 1;

    // C525: LSRB 
    cpu.m_b >>= 1;

    // C526: LSRB 
    cpu.m_b >>= 1;

    // C527: ANDB #$03
    cpu.m_b &= 0x03;

    // C529: LDX #$C737
    cpu.m_x = 0xC737;

    // C52C: LDA B,X
    // TODO: Fix comma operator: LDA B,X

    // C52E: STA $4AFA
    cpu.write_memory(0x4AFA, cpu.m_a);

    // C531: LDB <$AC
    cpu.m_b = cpu.read_memory(0xAC);

    // C533: ANDB #$80
    cpu.m_b &= 0x80;

    // C535: BEQ $C5A3
    if (cpu.zero_flag()) cpu.m_pc = 0xC5A3;

    // C537: LDB $4AF5
    cpu.m_b = cpu.read_memory(0x4AF5);

    // C53A: INCB 
    cpu.m_b++;

    // C53B: CMPB $4AFA
    cpu.compare_b(cpu.read_memory(cpu.read_memory(0x4AFA)));

    // C53E: BLS $C542
    // TODO: Convert BLS $C542

    // C540: LDB #$00
    cpu.m_b = 0x00;

    label_C542:
    // C542: JMP $c542
    goto label_C542;

    // C545: LDA $4AFC
    cpu.m_a = cpu.read_memory(0x4AFC);

    // C548: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // C549: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // C54A: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // C54B: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // C54C: ANDA #$07
    cpu.m_a &= 0x07;

    label_C54E:
    // C54E: DECA 
    cpu.m_a--;

    // C54F: BMI $C557
    if (cpu.negative_flag()) cpu.m_pc = 0xC557;

    // C551: ASLB 
    cpu.m_b <<= 1;

    // C552: ASL $4AFA
    cpu.arithmetic_shift_left(0x4AFA);

    // C555: BRA $C54E
    goto label_C54E;

    // C557: LDA $4AFC
    cpu.m_a = cpu.read_memory(0x4AFC);

    // C55A: ANDA #$07
    cpu.m_a &= 0x07;

    // C55C: ASLA 
    cpu.m_a <<= 1;

    // C55D: LDX #$4590
    cpu.m_x = 0x4590;

    // C560: LEAX A,X
    // TODO: Fix comma operator: LEAX A,X

    // C562: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // C564: ASLA 
    cpu.m_a <<= 1;

    // C565: ASLA 
    cpu.m_a <<= 1;

    // C566: ASLA 
    cpu.m_a <<= 1;

    // C567: ASLA 
    cpu.m_a <<= 1;

    // C568: STA $4AFB
    cpu.write_memory(0x4AFB, cpu.m_a);

    // C56B: LDA $1,X
    // TODO: Fix comma operator: LDA $1,X

    // C56D: ANDA #$0F
    cpu.m_a &= 0x0F;

    // C56F: ADDA $4AFB
    cpu.m_a += cpu.read_memory(0x4AFB);

    // C572: STA $4AFB
    cpu.write_memory(0x4AFB, cpu.m_a);

    // C575: EORB $4AFB
    cpu.m_b ^= cpu.read_memory(0x4AFB);

    // C578: ANDB $4AFA
    cpu.m_b &= cpu.read_memory(0x4AFA);

    // C57B: EORB $4AFB
    cpu.m_b ^= cpu.read_memory(0x4AFB);

    // C57E: STB $1,X
    cpu.write_memory(cpu.m_x + 0x01, cpu.m_b);

    // C580: LSRB 
    cpu.m_b >>= 1;

    // C581: LSRB 
    cpu.m_b >>= 1;

    // C582: LSRB 
    cpu.m_b >>= 1;

    // C583: LSRB 
    cpu.m_b >>= 1;

    // C584: STB ,X
    cpu.write_memory(cpu.m_x, cpu.m_b);

    // C586: LDA #$03
    cpu.m_a = 0x03;

    // C588: JSR $C2B3
    cpu.call_function(0xC2B3);

    // C58B: LDX #$4500
    cpu.m_x = 0x4500;

    // C58E: LDU #$4C00
    cpu.m_u = 0x4C00;

    // C591: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // C593: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // C595: CMPX #$45FF
    cpu.compare_x(0x45FF);

    // C598: BCS $C591
    if (cpu.carry_flag()) cpu.m_pc = 0xC591;

    // C59A: JSR $C3A7
    cpu.call_function(0xC3A7);

    // C59D: LDA $4AF6
    cpu.m_a = cpu.read_memory(0x4AF6);

    // C5A0: JSR $C5A4
    cpu.call_function(0xC5A4);

    // C5A3: RTS 
    return;

    // C5A4: LDX #$C797
    cpu.m_x = 0xC797;

    // C5A7: LDB A,X
    // TODO: Fix comma operator: LDB A,X

    // C5A9: STB $4AFA
    cpu.write_memory(0x4AFA, cpu.m_b);

    // C5AC: ANDB #$07
    cpu.m_b &= 0x07;

    // C5AE: LDX #$4590
    cpu.m_x = 0x4590;

    // C5B1: ASLB 
    cpu.m_b <<= 1;

    // C5B2: ABX 
    // TODO: Convert ABX 

    // C5B3: LDB $4AFA
    cpu.m_b = cpu.read_memory(0x4AFA);

    // C5B6: LSRB 
    cpu.m_b >>= 1;

    // C5B7: LSRB 
    cpu.m_b >>= 1;

    // C5B8: LSRB 
    cpu.m_b >>= 1;

    // C5B9: STB $4AFA
    cpu.write_memory(0x4AFA, cpu.m_b);

    // C5BC: ANDB #$03
    cpu.m_b &= 0x03;

    // C5BE: LDU #$C737
    cpu.m_u = 0xC737;

    // C5C1: LEAU B,U
    // TODO: Fix comma operator: LEAU B,U

    // C5C3: LDB $4AFA
    cpu.m_b = cpu.read_memory(0x4AFA);

    // C5C6: LSRB 
    cpu.m_b >>= 1;

    // C5C7: LSRB 
    cpu.m_b >>= 1;

    // C5C8: STB $4AFA
    cpu.write_memory(0x4AFA, cpu.m_b);

    // C5CB: LDB ,X
    // TODO: Complex indexed addressing: ,X

    // C5CD: ASLB 
    cpu.m_b <<= 1;

    // C5CE: ASLB 
    cpu.m_b <<= 1;

    // C5CF: ASLB 
    cpu.m_b <<= 1;

    // C5D0: ASLB 
    cpu.m_b <<= 1;

    // C5D1: STB $4AFB
    cpu.write_memory(0x4AFB, cpu.m_b);

    // C5D4: LDB $1,X
    // TODO: Fix comma operator: LDB $1,X

    // C5D6: ANDB #$0F
    cpu.m_b &= 0x0F;

    // C5D8: ADDB $4AFB
    cpu.m_b += cpu.read_memory(0x4AFB);

    label_C5DB:
    // C5DB: JMP $c5db
    goto label_C5DB;

    // C5DE: BMI $C5E3
    if (cpu.negative_flag()) cpu.m_pc = 0xC5E3;

    // C5E0: LSRB 
    cpu.m_b >>= 1;

    // C5E1: BRA $C5DB
    goto label_C5DB;

    // C5E3: ANDB ,U
    // TODO: Complex indexed addressing: ,U

    // C5E5: STB $4AF5
    cpu.write_memory(0x4AF5, cpu.m_b);

    // C5E8: LDX #$C7F1
    cpu.m_x = 0xC7F1;

    // C5EB: LEAX A,X
    // TODO: Fix comma operator: LEAX A,X

    // C5ED: ADDB ,X
    // TODO: Complex indexed addressing: ,X

    // C5EF: JMP $E7D3
    goto label_E7D3;

    // C5F2: LDX #$4500
    cpu.m_x = 0x4500;

    // C5F5: LDU #$4C00
    cpu.m_u = 0x4C00;

    // C5F8: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // C5FA: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // C5FC: CMPX #$4600
    cpu.compare_x(0x4600);

    // C5FF: BCS $C5F8
    if (cpu.carry_flag()) cpu.m_pc = 0xC5F8;

    // C601: LDX #$4500
    cpu.m_x = 0x4500;

    // C604: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // C606: COMA 
    cpu.m_a = ~cpu.m_a;

    // C607: STA ,X+
    cpu.write_memory(cpu.m_x, cpu.m_a);
    cpu.m_x++;

    // C609: CMPX #$4600
    cpu.compare_x(0x4600);

    // C60C: BCS $C604
    if (cpu.carry_flag()) cpu.m_pc = 0xC604;

    // C60E: STA $46A0
    cpu.write_memory(0x46A0, cpu.m_a);

    // C611: JSR $C688
    cpu.call_function(0xC688);

    // C614: JSR $C67A
    cpu.call_function(0xC67A);

    // C617: JSR $C6B8
    cpu.call_function(0xC6B8);

    // C61A: LDX #$4500
    cpu.m_x = 0x4500;

    // C61D: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // C61F: COMA 
    cpu.m_a = ~cpu.m_a;

    // C620: STA ,X+
    cpu.write_memory(cpu.m_x, cpu.m_a);
    cpu.m_x++;

    // C622: CMPX #$4600
    cpu.compare_x(0x4600);

    // C625: BCS $C61D
    if (cpu.carry_flag()) cpu.m_pc = 0xC61D;

    // C627: STA $46A0
    cpu.write_memory(0x46A0, cpu.m_a);

    // C62A: JSR $C688
    cpu.call_function(0xC688);

    // C62D: JSR $C641
    cpu.call_function(0xC641);

    // C630: BNE $C65B
    if (!cpu.zero_flag()) cpu.m_pc = 0xC65B;

    // C632: JSR $C67A
    cpu.call_function(0xC67A);

    // C635: JSR $C6B8
    cpu.call_function(0xC6B8);

    // C638: JSR $C641
    cpu.call_function(0xC641);

    // C63B: BEQ $C640
    if (cpu.zero_flag()) cpu.m_pc = 0xC640;

    // C63D: JMP $C65B
    goto label_C65B;

    // C640: RTS 
    return;

    // C641: LDX #$4500
    cpu.m_x = 0x4500;

    // C644: LDU #$4C00
    cpu.m_u = 0x4C00;

    // C647: LDA ,X+
    // TODO: Complex indexed addressing: ,X+

    // C649: EORA ,U+
    // TODO: Complex indexed addressing: ,U+

    // C64B: ANDA #$0F
    cpu.m_a &= 0x0F;

    // C64D: BNE $C65A
    if (!cpu.zero_flag()) cpu.m_pc = 0xC65A;

    // C64F: CMPX #$4600
    cpu.compare_x(0x4600);

    // C652: BCS $C647
    if (cpu.carry_flag()) cpu.m_pc = 0xC647;

    // C654: LDA #$01
    cpu.m_a = 0x01;

    // C656: STA $4AF7
    cpu.write_memory(0x4AF7, cpu.m_a);

    // C659: CLRA 
    cpu.m_a = 0;

    // C65A: RTS 
    return;

    label_C65B:
    // C65B: JMP $c65b
    goto label_C65B;

    // C65D: TFR X,D
    cpu.m_d = cpu.m_x;

    // C65F: STD $4AF8
    cpu.write_memory16(0x4AF8, cpu.m_d);

    // C662: LDA #$FF
    cpu.m_a = 0xFF;

    // C664: STA $4AF7
    cpu.write_memory(0x4AF7, cpu.m_a);

    // C667: LDX #$4500
    cpu.m_x = 0x4500;

    // C66A: LDU #$4C00
    cpu.m_u = 0x4C00;

    // C66D: LDD ,U++
    cpu.m_d = cpu.read_memory16(cpu.m_u++);

    // C66F: STD ,X++
    cpu.write_memory16(cpu.m_x++, cpu.m_d);

    // C671: CMPX #$4600
    cpu.compare_x(0x4600);

    // C674: BCS $C66D
    if (cpu.carry_flag()) cpu.m_pc = 0xC66D;

    // C676: TST $4AF7
    // TODO: Convert TST $4AF7

    // C679: RTS 
    return;

    // C67A: LDX #$4500
    cpu.m_x = 0x4500;

    // C67D: LDD #$0000
    cpu.m_d = 0x0000;

    // C680: STD ,X++
    cpu.write_memory16(cpu.m_x++, cpu.m_d);

    // C682: CMPX #$4600
    cpu.compare_x(0x4600);

    // C685: BCS $C680
    if (cpu.carry_flag()) cpu.m_pc = 0xC680;

    // C687: RTS 
    return;

    // C688: LDX #$07D0
    cpu.m_x = 0x07D0;

    // C68B: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // C68D: BNE $C68B
    if (!cpu.zero_flag()) cpu.m_pc = 0xC68B;

    // C68F: RTS 
    return;

    // C690: LDA $4AF7
    cpu.m_a = cpu.read_memory(0x4AF7);

    // C693: BEQ $C6B7
    if (cpu.zero_flag()) cpu.m_pc = 0xC6B7;

    // C695: CMPA #$01
    cpu.compare_a(0x01);

    // C697: BNE $C69D
    if (!cpu.zero_flag()) cpu.m_pc = 0xC69D;

    // C699: LDB #$9C
    cpu.m_b = 0x9C;

    // C69B: BRA $C6B4
    goto label_C6B4;

    // C69D: LDD #$1F6A
    cpu.m_d = 0x1F6A;

    // C6A0: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C6A2: LDD #$01A4
    cpu.m_d = 0x01A4;

    // C6A5: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C6A7: LDA $4AF9
    cpu.m_a = cpu.read_memory(0x4AF9);

    // C6AA: JSR $E790
    cpu.call_function(0xE790);

    // C6AD: LDD #$8040
    cpu.m_d = 0x8040;

    // C6B0: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C6B2: LDB #$9D
    cpu.m_b = 0x9D;

    label_C6B4:
    // C6B4: JSR $E7C7
    cpu.call_function(0xE7C7);

    // C6B7: RTS 
    return;

    // C6B8: LDA #$FF
    cpu.m_a = 0xFF;

    // C6BA: STA $4687
    cpu.write_memory(0x4687, cpu.m_a);

    // C6BD: JSR $6005
    cpu.call_function(0x6005);

    // C6C0: LDA #$00
    cpu.m_a = 0x00;

    // C6C2: STA $4687
    cpu.write_memory(0x4687, cpu.m_a);

    // C6C5: LDU #$0000
    cpu.m_u = 0x0000;

    // C6C8: JSR $6005
    cpu.call_function(0x6005);

    // C6CB: LEAU $1,U
    // TODO: Fix comma operator: LEAU $1,U

    // C6CD: CMPU #$0020
    cpu.execute_cmpu_immediate(0x0020);

    // C6D1: BCS $C6C8
    if (cpu.carry_flag()) cpu.m_pc = 0xC6C8;

    // C6D3: RTS 
    return;

    // C6D4: LDU #$4AFA
    cpu.m_u = 0x4AFA;

    // C6D7: LDA #$03
    cpu.m_a = 0x03;

    // C6D9: STA $4B02
    cpu.write_memory(0x4B02, cpu.m_a);

    // C6DC: LDA ,X+
    // TODO: Complex indexed addressing: ,X+

    // C6DE: ASLA 
    cpu.m_a <<= 1;

    // C6DF: ASLA 
    cpu.m_a <<= 1;

    // C6E0: ASLA 
    cpu.m_a <<= 1;

    // C6E1: ASLA 
    cpu.m_a <<= 1;

    // C6E2: STA ,U
    cpu.write_memory(cpu.m_u, cpu.m_a);

    // C6E4: LDA ,X+
    // TODO: Complex indexed addressing: ,X+

    // C6E6: ANDA #$0F
    cpu.m_a &= 0x0F;

    // C6E8: ADDA ,U
    // TODO: Complex indexed addressing: ,U

    // C6EA: STA ,U+
    cpu.write_memory(cpu.m_u, cpu.m_a);
    cpu.m_u++;

    // C6EC: DEC $4B02
    cpu.decrement_memory(0x4B02);

    // C6EF: BPL $C6DC
    if (!cpu.negative_flag()) cpu.m_pc = 0xC6DC;

    // C6F1: LEAX -$8,X
    // TODO: Fix comma operator: LEAX -$8,X

    // C6F3: RTS 
    return;

    // C6F4: LDU #$4AFA
    cpu.m_u = 0x4AFA;

    // C6F7: LDA #$02
    cpu.m_a = 0x02;

    // C6F9: STA $4B02
    cpu.write_memory(0x4B02, cpu.m_a);

    // C6FC: LDA ,U+
    // TODO: Complex indexed addressing: ,U+

    // C6FE: STA $1,X
    cpu.write_memory(cpu.m_x + 0x01, cpu.m_a);

    // C700: LSRA 
    cpu.m_a >>= 1;

    // C701: LSRA 
    cpu.m_a >>= 1;

    // C702: LSRA 
    cpu.m_a >>= 1;

    // C703: LSRA 
    cpu.m_a >>= 1;

    // C704: STA ,X++
    cpu.write_memory(cpu.m_x++, cpu.m_a);

    // C706: DEC $4B02
    cpu.decrement_memory(0x4B02);

    // C709: BPL $C6FC
    if (!cpu.negative_flag()) cpu.m_pc = 0xC6FC;

    // C70B: LEAX -$6,X
    // TODO: Fix comma operator: LEAX -$6,X

    // C70D: RTS 
    return;

    // C70E: LDB #$00
    cpu.m_b = 0x00;

    // C710: STB <$AD
    cpu.write_memory(0xAD, cpu.m_b);

    // C712: TFR A,B
    cpu.m_b = cpu.m_a;

    // C714: LSRA 
    cpu.m_a >>= 1;

    // C715: LSRA 
    cpu.m_a >>= 1;

    // C716: LSRA 
    cpu.m_a >>= 1;

    // C717: LSRA 
    cpu.m_a >>= 1;

    // C718: CMPA #$0A
    cpu.compare_a(0x0A);

    // C71A: BCS $C71E
    if (cpu.carry_flag()) cpu.m_pc = 0xC71E;

    // C71C: LDA #$09
    cpu.m_a = 0x09;

    // C71E: JSR $E7AD
    cpu.call_function(0xE7AD);

    // C721: LDA #$B8
    cpu.m_a = 0xB8;

    // C723: STA ,Y+
    cpu.write_memory(cpu.m_y, cpu.m_a);
    cpu.m_y++;

    // C725: LDA #$DF
    cpu.m_a = 0xDF;

    // C727: STA ,Y+
    cpu.write_memory(cpu.m_y, cpu.m_a);
    cpu.m_y++;

    // C729: CLRA 
    cpu.m_a = 0;

    // C72A: ANDB #$0F
    cpu.m_b &= 0x0F;

    // C72C: BEQ $C734
    if (cpu.zero_flag()) cpu.m_pc = 0xC734;

    // C72E: ADDA #$04
    cpu.m_a += 0x04;

    // C730: DAA 
    // TODO: Convert DAA 

    // C731: DECB 
    cpu.m_b--;

    // C732: BNE $C72E
    if (!cpu.zero_flag()) cpu.m_pc = 0xC72E;

    // C734: JMP $E790
    goto label_E790;

    // C737: NEG <$03
    // TODO: Convert NEG <$03

    // C739: ASR <$0F
    // TODO: Convert ASR <$0F

    // C73B: ASL <$00
    cpu.arithmetic_shift_left(0x00);

    // C73D: ASL <$00
    cpu.arithmetic_shift_left(0x00);

    // C73F: ASL <$00
    cpu.arithmetic_shift_left(0x00);

    // C741: ASL <$00
    cpu.arithmetic_shift_left(0x00);

    // C743: NEG <$00
    // TODO: Convert NEG <$00

    // C745: NEG <$00
    // TODO: Convert NEG <$00

    // C747: NEG <$00
    // TODO: Convert NEG <$00

    // C749: NEG <$00
    // TODO: Convert NEG <$00

    // C74B: NEG <$00
    // TODO: Convert NEG <$00

    // C74D: NEG <$00
    // TODO: Convert NEG <$00

    // C74F: NEG <$00
    // TODO: Convert NEG <$00

    // C751: NEG <$00
    // TODO: Convert NEG <$00

    // C753: NEG <$00
    // TODO: Convert NEG <$00

    // C755: NEG <$00
    // TODO: Convert NEG <$00

    // C757: NEG <$00
    // TODO: Convert NEG <$00

    // C759: NEG <$00
    // TODO: Convert NEG <$00

    // C75B: NEG <$00
    // TODO: Convert NEG <$00

    // C75D: NEG <$00
    // TODO: Convert NEG <$00

    // C75F: NEG <$00
    // TODO: Convert NEG <$00

    // C761: NEG <$00
    // TODO: Convert NEG <$00

    // C763: NEG <$00
    // TODO: Convert NEG <$00

    // C765: NEG <$00
    // TODO: Convert NEG <$00

    // C767: NEG <$00
    // TODO: Convert NEG <$00

    // C769: NEG <$00
    // TODO: Convert NEG <$00

    // C76B: NEG <$00
    // TODO: Convert NEG <$00

    // C76D: NEG <$00
    // TODO: Convert NEG <$00

    // C76F: NEG <$00
    // TODO: Convert NEG <$00

    // C771: NEG <$00
    // TODO: Convert NEG <$00

    // C773: NEG <$00
    // TODO: Convert NEG <$00

    // C775: NEG <$00
    // TODO: Convert NEG <$00

    // C777: NEG <$00
    // TODO: Convert NEG <$00

    // C779: NEG <$00
    // TODO: Convert NEG <$00

    // C77B: NEG <$00
    // TODO: Convert NEG <$00

    // C77D: NEG <$00
    // TODO: Convert NEG <$00

    // C77F: NEG <$00
    // TODO: Convert NEG <$00

    // C781: NEG <$00
    // TODO: Convert NEG <$00

    // C783: NEG <$00
    // TODO: Convert NEG <$00

    // C785: NEG <$00
    // TODO: Convert NEG <$00

    // C787: NEG <$00
    // TODO: Convert NEG <$00

    // C789: NEG <$00
    // TODO: Convert NEG <$00

    // C78B: NEG <$00
    // TODO: Convert NEG <$00

    // C78D: NEG <$00
    // TODO: Convert NEG <$00

    // C78F: NEG <$00
    // TODO: Convert NEG <$00

    // C791: NEG <$00
    // TODO: Convert NEG <$00

    // C793: NEG <$00
    // TODO: Convert NEG <$00

    // C795: NEG <$00
    // TODO: Convert NEG <$00

    // C797: ASL <$80
    cpu.arithmetic_shift_left(0x80);

    // C799: ASLA 
    cpu.m_a <<= 1;

    // C79A: SUBA $0949
    cpu.m_a -= cpu.read_memory(0x0949);

    // C79D: ADCA #$C1
    cpu.add_a_with_carry(0xC1);

    // C79F: ANDB ,U
    // TODO: Complex indexed addressing: ,U

    // C7A1: ANDA ,X
    // TODO: Complex indexed addressing: ,X

    // C7A3: NEG <$05
    // TODO: Convert NEG <$05

    // C7A5: DEC <$10
    cpu.decrement_memory(0x10);

    // C7A7: XHCF 
    // TODO: Convert XHCF 

    // C7A8: ORCC #$20
    cpu.m_cc |= 0x20;

    // C7AA: BCS $C7D6
    // TODO: External jump to 0xC7D6 - not implemented

    // C7AC: LEAX -$B,Y
    // TODO: Fix comma operator: LEAX -$B,Y

    // C7AE: ABX 
    // TODO: Convert ABX 

    // C7AF: NEGA 
    cpu.m_a = -cpu.m_a;

    // C7B0: LSRA 
    cpu.m_a >>= 1;

    // C7B1: DECA 
    cpu.m_a--;

    // C7B2: NEGB 
    cpu.m_b = -cpu.m_b;

    // C7B3: LSRB 
    cpu.m_b >>= 1;

    // C7B4: DECB 
    cpu.m_b--;

    // C7B5: NEG $0,X
    // TODO: Convert NEG $0,X

    // C7B7: ASL <$34
    cpu.arithmetic_shift_left(0x34);

    // C7B9: SUBA <$98
    cpu.m_a -= 0x98;

    // C7BB: NEG <$B8
    // TODO: Convert NEG <$B8

    // C7BD: NEG <$90
    // TODO: Convert NEG <$90

    // C7BF: NEG <$68
    // TODO: Convert NEG <$68

    // C7C1: NEG <$18
    // TODO: Convert NEG <$18

    // C7C3: NEG <$40
    // TODO: Convert NEG <$40

    // C7C5: NEG <$B4
    // TODO: Convert NEG <$B4

    // C7C7: NEG <$50
    // TODO: Convert NEG <$50

    // C7C9: NEG <$DC
    // TODO: Convert NEG <$DC

    // C7CB: NEG <$78
    // TODO: Convert NEG <$78

    // C7CD: EXG inv,DP
    // TODO: Convert EXG inv,DP

    // C7CF: EXG B,A
    // TODO: Convert EXG B,A

    // C7D1: EXG inv,PC
    // TODO: Convert EXG inv,PC

    // C7D3: EXG inv,Y
    // TODO: Convert EXG inv,Y

    // C7D5: TFR X,inv
    cpu.m_inv = cpu.m_x;

    // C7D7: TFR S,inv
    cpu.m_inv = cpu.m_sp;

    // C7D9: TFR inv,B
    cpu.m_b = cpu.m_inv;

    // C7DB: TFR CC,inv
    cpu.m_inv = cpu.m_cc;

    // C7DD: TFR inv,U
    cpu.m_u = cpu.m_inv;

    // C7DF: EXG inv,DP
    // TODO: Convert EXG inv,DP

    // C7E1: EXG B,A
    // TODO: Convert EXG B,A

    // C7E3: EXG inv,PC
    // TODO: Convert EXG inv,PC

    // C7E5: EXG inv,Y
    // TODO: Convert EXG inv,Y

    // C7E7: TFR X,inv
    cpu.m_inv = cpu.m_x;

    // C7E9: TFR S,inv
    cpu.m_inv = cpu.m_sp;

    // C7EB: TFR inv,B
    cpu.m_b = cpu.m_inv;

    // C7ED: TFR CC,inv
    cpu.m_inv = cpu.m_cc;

    // C7EF: TFR inv,U
    cpu.m_u = cpu.m_inv;

    // C7F1: LSR $787A
    // TODO: Convert LSR $787A

    // C7F4: JMP $868A
    goto label_868A;

    // C7F7: LDX #$9294
    cpu.m_x = 0x9294;

    // C7FA: LDA <$98
    cpu.m_a = cpu.read_memory(0x98);

    // C7FC: ORA <$7D
    cpu.m_a |= 0x7D;

    // C7FE: DECA 
    cpu.m_a--;

    // C7FF: LDD $B,Y
    // TODO: Fix comma operator: LDD $B,Y

    // C801: CLR <$86
    cpu.write_memory(0x86, 0);

    // C803: XRES 
    // TODO: Convert XRES 

    // C804: JSR $D8DF
    cpu.call_function(0xD8DF);

    // C807: LDD #$7200
    cpu.m_d = 0x7200;

    // C80A: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C80C: LDD #$CA64
    cpu.m_d = 0xCA64;

    // C80F: BRA $C81E
    goto label_C81E;

    // C811: LDA #$3F
    cpu.m_a = 0x3F;

    // C813: JSR $D8DF
    cpu.call_function(0xD8DF);

    // C816: LDD #$7140
    cpu.m_d = 0x7140;

    // C819: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C81B: LDD #$CA78
    cpu.m_d = 0xCA78;

    label_C81E:
    // C81E: STD $4AF1
    cpu.write_memory16(0x4AF1, cpu.m_d);

    // C821: LDA #$00
    cpu.m_a = 0x00;

    // C823: STA $4AEA
    cpu.write_memory(0x4AEA, cpu.m_a);

    // C826: LDU $4AF1
    cpu.m_u = cpu.read_memory16(0x4AF1);

    // C829: LDD ,U
    // TODO: Complex indexed addressing: ,U

    // C82B: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C82D: LDD #$1F80
    cpu.m_d = 0x1F80;

    // C830: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C832: LDB $4AEA
    cpu.m_b = cpu.read_memory(0x4AEA);

    // C835: ASLB 
    cpu.m_b <<= 1;

    // C836: ADDB $4AEA
    cpu.m_b += cpu.read_memory(0x4AEA);

    // C839: LDX #$4AB6
    cpu.m_x = 0x4AB6;

    // C83C: ABX 
    // TODO: Convert ABX 

    // C83D: CMPX $4AEC
    cpu.compare_x(cpu.read_memory16(0x4AEC));

    // C840: BNE $C847
    if (!cpu.zero_flag()) cpu.m_pc = 0xC847;

    // C842: LDD #$6780
    cpu.m_d = 0x6780;

    // C845: BRA $C84A
    goto label_C84A;

    // C847: LDD $4B10
    cpu.m_d = cpu.read_memory16(0x4B10);

    label_C84A:
    // C84A: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C84C: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // C84E: LDU #$3016
    cpu.m_u = 0x3016;

    // C851: TST $4AEC
    // TODO: Convert TST $4AEC

    // C854: BMI $C871
    if (cpu.negative_flag()) cpu.m_pc = 0xC871;

    // C856: LDA $4AEE
    cpu.m_a = cpu.read_memory(0x4AEE);

    // C859: CMPA #$00
    cpu.compare_a(0x00);

    // C85B: BNE $C86D
    if (!cpu.zero_flag()) cpu.m_pc = 0xC86D;

    // C85D: LDA $4843
    cpu.m_a = cpu.read_memory(0x4843);

    // C860: ANDA #$01
    cpu.m_a &= 0x01;

    // C862: BNE $C869
    if (!cpu.zero_flag()) cpu.m_pc = 0xC869;

    // C864: LDD $4B10
    cpu.m_d = cpu.read_memory16(0x4B10);

    // C867: BRA $C86B
    goto label_C86B;

    // C869: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    label_C86B:
    // C86B: BRA $C86F
    goto label_C86F;

    // C86D: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    label_C86F:
    // C86F: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C871: LDA ,X+
    // TODO: Complex indexed addressing: ,X+

    // C873: BNE $C884
    if (!cpu.zero_flag()) cpu.m_pc = 0xC884;

    // C875: TST $4AEC
    // TODO: Convert TST $4AEC

    // C878: BMI $C87F
    if (cpu.negative_flag()) cpu.m_pc = 0xC87F;

    // C87A: LDD $3054
    cpu.m_d = cpu.read_memory16(0x3054);

    // C87D: BRA $C882
    goto label_C882;

    // C87F: LDD $3002
    cpu.m_d = cpu.read_memory16(0x3002);

    label_C882:
    // C882: BRA $C887
    goto label_C887;

    // C884: ASLA 
    cpu.m_a <<= 1;

    // C885: LDD A,U
    // TODO: Fix comma operator: LDD A,U

    label_C887:
    // C887: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C889: TST $4AEC
    // TODO: Convert TST $4AEC

    // C88C: BMI $C8A9
    if (cpu.negative_flag()) cpu.m_pc = 0xC8A9;

    // C88E: LDA $4AEE
    cpu.m_a = cpu.read_memory(0x4AEE);

    // C891: CMPA #$01
    cpu.compare_a(0x01);

    // C893: BNE $C8A5
    if (!cpu.zero_flag()) cpu.m_pc = 0xC8A5;

    // C895: LDA $4843
    cpu.m_a = cpu.read_memory(0x4843);

    // C898: ANDA #$01
    cpu.m_a &= 0x01;

    // C89A: BNE $C8A1
    if (!cpu.zero_flag()) cpu.m_pc = 0xC8A1;

    // C89C: LDD $4B10
    cpu.m_d = cpu.read_memory16(0x4B10);

    // C89F: BRA $C8A3
    goto label_C8A3;

    // C8A1: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    label_C8A3:
    // C8A3: BRA $C8A7
    goto label_C8A7;

    // C8A5: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    label_C8A7:
    // C8A7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C8A9: LDA ,X+
    // TODO: Complex indexed addressing: ,X+

    // C8AB: BNE $C8BC
    if (!cpu.zero_flag()) cpu.m_pc = 0xC8BC;

    // C8AD: TST $4AEC
    // TODO: Convert TST $4AEC

    // C8B0: BMI $C8B7
    if (cpu.negative_flag()) cpu.m_pc = 0xC8B7;

    // C8B2: LDD $3054
    cpu.m_d = cpu.read_memory16(0x3054);

    // C8B5: BRA $C8BA
    goto label_C8BA;

    // C8B7: LDD $3002
    cpu.m_d = cpu.read_memory16(0x3002);

    label_C8BA:
    // C8BA: BRA $C8BF
    goto label_C8BF;

    // C8BC: ASLA 
    cpu.m_a <<= 1;

    // C8BD: LDD A,U
    // TODO: Fix comma operator: LDD A,U

    label_C8BF:
    // C8BF: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C8C1: TST $4AEC
    // TODO: Convert TST $4AEC

    // C8C4: BMI $C8E1
    if (cpu.negative_flag()) cpu.m_pc = 0xC8E1;

    // C8C6: LDA $4AEE
    cpu.m_a = cpu.read_memory(0x4AEE);

    // C8C9: CMPA #$02
    cpu.compare_a(0x02);

    // C8CB: BNE $C8DD
    if (!cpu.zero_flag()) cpu.m_pc = 0xC8DD;

    // C8CD: LDA $4843
    cpu.m_a = cpu.read_memory(0x4843);

    // C8D0: ANDA #$01
    cpu.m_a &= 0x01;

    // C8D2: BNE $C8D9
    if (!cpu.zero_flag()) cpu.m_pc = 0xC8D9;

    // C8D4: LDD $4B10
    cpu.m_d = cpu.read_memory16(0x4B10);

    // C8D7: BRA $C8DB
    goto label_C8DB;

    // C8D9: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    label_C8DB:
    // C8DB: BRA $C8DF
    goto label_C8DF;

    // C8DD: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    label_C8DF:
    // C8DF: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C8E1: LDA ,X+
    // TODO: Complex indexed addressing: ,X+

    // C8E3: BNE $C8F4
    if (!cpu.zero_flag()) cpu.m_pc = 0xC8F4;

    // C8E5: TST $4AEC
    // TODO: Convert TST $4AEC

    // C8E8: BMI $C8EF
    if (cpu.negative_flag()) cpu.m_pc = 0xC8EF;

    // C8EA: LDD $3054
    cpu.m_d = cpu.read_memory16(0x3054);

    // C8ED: BRA $C8F2
    goto label_C8F2;

    // C8EF: LDD $3002
    cpu.m_d = cpu.read_memory16(0x3002);

    label_C8F2:
    // C8F2: BRA $C8F7
    goto label_C8F7;

    // C8F4: ASLA 
    cpu.m_a <<= 1;

    // C8F5: LDD A,U
    // TODO: Fix comma operator: LDD A,U

    label_C8F7:
    // C8F7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C8F9: LDD <$01
    cpu.m_d = cpu.read_memory16(0x01);

    // C8FB: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C8FD: LDD #$8040
    cpu.m_d = 0x8040;

    // C900: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C902: LDU $4AF1
    cpu.m_u = cpu.read_memory16(0x4AF1);

    // C905: LDD ,U
    // TODO: Complex indexed addressing: ,U

    // C907: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C909: LDD #$1F38
    cpu.m_d = 0x1F38;

    // C90C: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C90E: LDA $4AEA
    cpu.m_a = cpu.read_memory(0x4AEA);

    // C911: INCA 
    cpu.m_a++;

    // C912: CMPA #$0A
    cpu.compare_a(0x0A);

    // C914: BCS $C918
    if (cpu.carry_flag()) cpu.m_pc = 0xC918;

    // C916: LDA #$10
    cpu.m_a = 0x10;

    // C918: LDB #$01
    cpu.m_b = 0x01;

    // C91A: STB <$AD
    cpu.write_memory(0xAD, cpu.m_b);

    // C91C: JSR $E790
    cpu.call_function(0xE790);

    // C91F: LDD #$B8DC
    cpu.m_d = 0xB8DC;

    // C922: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C924: LDD #$8040
    cpu.m_d = 0x8040;

    // C927: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C929: LDB $4AEA
    cpu.m_b = cpu.read_memory(0x4AEA);

    // C92C: ASLB 
    cpu.m_b <<= 1;

    // C92D: ASLB 
    cpu.m_b <<= 1;

    // C92E: LDX #$4A8E
    cpu.m_x = 0x4A8E;

    // C931: ABX 
    // TODO: Convert ABX 

    // C932: LDU $4AF1
    cpu.m_u = cpu.read_memory16(0x4AF1);

    // C935: LDD ,U++
    cpu.m_d = cpu.read_memory16(cpu.m_u++);

    // C937: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C939: LDD #$1FF0
    cpu.m_d = 0x1FF0;

    // C93C: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C93E: STU $4AF1
    cpu.write_memory16(0x4AF1, cpu.m_u);

    // C941: LDB #$06
    cpu.m_b = 0x06;

    // C943: STB <$AD
    cpu.write_memory(0xAD, cpu.m_b);

    // C945: JSR $E764
    cpu.call_function(0xE764);

    // C948: LEAX $4,X
    // TODO: Fix comma operator: LEAX $4,X

    // C94A: LDD #$8040
    cpu.m_d = 0x8040;

    // C94D: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C94F: INC $4AEA
    cpu.increment_memory(0x4AEA);

    // C952: LDA $4AEA
    cpu.m_a = cpu.read_memory(0x4AEA);

    // C955: CMPA #$0A
    cpu.compare_a(0x0A);

    // C957: LBCS $C826
    // TODO: Convert LBCS $C826

    // C95B: LDD #$7200
    cpu.m_d = 0x7200;

    // C95E: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C960: LDD $4AEC
    cpu.m_d = cpu.read_memory16(0x4AEC);

    // C963: BPL $C966
    if (!cpu.negative_flag()) cpu.m_pc = 0xC966;

    // C965: RTS 
    return;

    // C966: LDD #$6480
    cpu.m_d = 0x6480;

    // C969: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C96B: LDX #$CBA8
    cpu.m_x = 0xCBA8;

    // C96E: LDU #$3018
    cpu.m_u = 0x3018;

    // C971: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // C973: ANDA #$1F
    cpu.m_a &= 0x1F;

    // C975: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C977: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // C979: ANDA #$1F
    cpu.m_a &= 0x1F;

    // C97B: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C97D: LDD ,U++
    cpu.m_d = cpu.read_memory16(cpu.m_u++);

    // C97F: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C981: LDD #$8040
    cpu.m_d = 0x8040;

    // C984: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C986: LEAX $4,X
    // TODO: Fix comma operator: LEAX $4,X

    // C988: CMPX #$CC10
    cpu.compare_x(0xCC10);

    // C98B: BCS $C971
    if (cpu.carry_flag()) cpu.m_pc = 0xC971;

    // C98D: LDD $CBA6
    cpu.m_d = cpu.read_memory16(0xCBA6);

    // C990: ANDA #$1F
    cpu.m_a &= 0x1F;

    // C992: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C994: LDD $CBA4
    cpu.m_d = cpu.read_memory16(0xCBA4);

    // C997: ANDA #$1F
    cpu.m_a &= 0x1F;

    // C999: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C99B: LDD $3054
    cpu.m_d = cpu.read_memory16(0x3054);

    // C99E: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C9A0: LDD #$7200
    cpu.m_d = 0x7200;

    // C9A3: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C9A5: LDD #$8040
    cpu.m_d = 0x8040;

    // C9A8: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C9AA: LDB $4AEF
    cpu.m_b = cpu.read_memory(0x4AEF);

    // C9AD: CMPB #$1B
    cpu.compare_b(0x1B);

    // C9AF: BNE $C9B6
    if (!cpu.zero_flag()) cpu.m_pc = 0xC9B6;

    // C9B1: LDD #$6750
    cpu.m_d = 0x6750;

    // C9B4: BRA $C9B9
    goto label_C9B9;

    // C9B6: LDD #$6450
    cpu.m_d = 0x6450;

    label_C9B9:
    // C9B9: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C9BB: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // C9BD: ANDA #$1F
    cpu.m_a &= 0x1F;

    // C9BF: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C9C1: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // C9C3: SUBD #$0008
    cpu.m_d -= 0x0008;

    // C9C6: ANDA #$1F
    cpu.m_a &= 0x1F;

    // C9C8: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C9CA: LDD #$71C0
    cpu.m_d = 0x71C0;

    // C9CD: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C9CF: LDD $303A
    cpu.m_d = cpu.read_memory16(0x303A);

    // C9D2: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C9D4: LDD $3040
    cpu.m_d = cpu.read_memory16(0x3040);

    // C9D7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C9D9: LDD $301A
    cpu.m_d = cpu.read_memory16(0x301A);

    // C9DC: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C9DE: LDD #$7200
    cpu.m_d = 0x7200;

    // C9E1: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C9E3: LDD #$8040
    cpu.m_d = 0x8040;

    // C9E6: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C9E8: LDB $4AEF
    cpu.m_b = cpu.read_memory(0x4AEF);

    // C9EB: CMPB #$1C
    cpu.compare_b(0x1C);

    // C9ED: BNE $C9F4
    if (!cpu.zero_flag()) cpu.m_pc = 0xC9F4;

    // C9EF: LDD #$6750
    cpu.m_d = 0x6750;

    // C9F2: BRA $C9F7
    goto label_C9F7;

    // C9F4: LDD #$6450
    cpu.m_d = 0x6450;

    label_C9F7:
    // C9F7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C9F9: LDD $6,X
    // TODO: Fix comma operator: LDD $6,X

    // C9FB: ANDA #$1F
    cpu.m_a &= 0x1F;

    // C9FD: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // C9FF: LDD $4,X
    // TODO: Fix comma operator: LDD $4,X

    // CA01: SUBD #$0008
    cpu.m_d -= 0x0008;

    // CA04: ANDA #$1F
    cpu.m_a &= 0x1F;

    // CA06: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // CA08: LDD #$71C0
    cpu.m_d = 0x71C0;

    // CA0B: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // CA0D: LDD $3020
    cpu.m_d = cpu.read_memory16(0x3020);

    // CA10: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // CA12: LDD $3032
    cpu.m_d = cpu.read_memory16(0x3032);

    // CA15: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // CA17: LDD $301E
    cpu.m_d = cpu.read_memory16(0x301E);

    // CA1A: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // CA1C: LDD #$7200
    cpu.m_d = 0x7200;

    // CA1F: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // CA21: LDD #$8040
    cpu.m_d = 0x8040;

    // CA24: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // CA26: LDD #$6780
    cpu.m_d = 0x6780;

    // CA29: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // CA2B: LDB $4AEF
    cpu.m_b = cpu.read_memory(0x4AEF);

    // CA2E: CMPB #$1B
    cpu.compare_b(0x1B);

    // CA30: BCC $CA5B
    if (!cpu.carry_flag()) cpu.m_pc = 0xCA5B;

    // CA32: ASLB 
    cpu.m_b <<= 1;

    // CA33: ASLB 
    cpu.m_b <<= 1;

    // CA34: LDX #$CBA4
    cpu.m_x = 0xCBA4;

    // CA37: ABX 
    // TODO: Convert ABX 

    // CA38: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // CA3A: ANDA #$1F
    cpu.m_a &= 0x1F;

    // CA3C: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // CA3E: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // CA40: ANDA #$1F
    cpu.m_a &= 0x1F;

    // CA42: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // CA44: LDB $4AEF
    cpu.m_b = cpu.read_memory(0x4AEF);

    // CA47: BNE $CA4E
    if (!cpu.zero_flag()) cpu.m_pc = 0xCA4E;

    // CA49: LDD $3054
    cpu.m_d = cpu.read_memory16(0x3054);

    // CA4C: BRA $CA54
    goto label_CA54;

    // CA4E: ASLB 
    cpu.m_b <<= 1;

    // CA4F: LDX #$3016
    cpu.m_x = 0x3016;

    // CA52: LDD B,X
    // TODO: Fix comma operator: LDD B,X

    label_CA54:
    // CA54: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // CA56: LDD #$8040
    cpu.m_d = 0x8040;

    // CA59: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // CA5B: LDD #$6680
    cpu.m_d = 0x6680;

    // CA5E: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // CA60: JSR $B6CC
    cpu.call_function(0xB6CC);

    // CA63: RTS 
    return;

    // CA64: TFR DP,A
    cpu.m_a = cpu.m_dp;

    // CA66: TFR B,S
    cpu.m_sp = cpu.m_b;

    // CA68: TFR inv,Y
    cpu.m_y = cpu.m_inv;

    // CA6A: TFR S,Y
    cpu.m_y = cpu.m_sp;

    // CA6C: TFR X,inv
    cpu.m_inv = cpu.m_x;

    // CA6E: EXG inv,inv
    // TODO: Convert EXG inv,inv

    // CA70: EXG inv,A
    // TODO: Convert EXG inv,A

    // CA72: EXG DP,inv
    // TODO: Convert EXG DP,inv

    // CA74: EXG B,Y
    // TODO: Convert EXG B,Y

    // CA76: EXG inv,inv
    // TODO: Convert EXG inv,inv

    // CA78: NEG <$8C
    // TODO: Convert NEG <$8C

    // CA7A: NEG <$64
    // TODO: Convert NEG <$64

    // CA7C: NEG <$3C
    // TODO: Convert NEG <$3C

    // CA7E: NEG <$14
    // TODO: Convert NEG <$14

    // CA80: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // CA82: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // CA84: TFR B,inv
    cpu.m_inv = cpu.m_b;

    // CA86: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // CA88: TFR S,inv
    cpu.m_inv = cpu.m_sp;

    // CA8A: TFR Y,S
    cpu.m_sp = cpu.m_y;

    // CA8C: LDX #$4A8E
    cpu.m_x = 0x4A8E;

    // CA8F: LDD <$5C
    cpu.m_d = cpu.read_memory16(0x5C);

    // CA91: SUBD ,X
    // TODO: Complex indexed addressing: ,X

    // CA93: BHI $CAA5
    // TODO: Convert BHI $CAA5

    // CA95: BNE $CA9D
    if (!cpu.zero_flag()) cpu.m_pc = 0xCA9D;

    // CA97: LDD <$5E
    cpu.m_d = cpu.read_memory16(0x5E);

    // CA99: SUBD $2,X
    // TODO: Fix comma operator: SUBD $2,X

    // CA9B: BCC $CAA5
    if (!cpu.carry_flag()) cpu.m_pc = 0xCAA5;

    // CA9D: LEAX $4,X
    // TODO: Fix comma operator: LEAX $4,X

    // CA9F: CMPX #$4AB6
    cpu.compare_x(0x4AB6);

    // CAA2: BCS $CA8F
    if (cpu.carry_flag()) cpu.m_pc = 0xCA8F;

    // CAA4: RTS 
    return;

    // CAA5: JSR $CAB7
    cpu.call_function(0xCAB7);

    // CAA8: LDA #$00
    cpu.m_a = 0x00;

    // CAAA: STA $4AEE
    cpu.write_memory(0x4AEE, cpu.m_a);

    // CAAD: LDD #$0000
    cpu.m_d = 0x0000;

    // CAB0: STD $4AEF
    cpu.write_memory16(0x4AEF, cpu.m_d);

    // CAB3: LDX #$4AB6
    cpu.m_x = 0x4AB6;

    // CAB6: RTS 
    return;

    // CAB7: STX $4AEC
    cpu.write_memory16(0x4AEC, cpu.m_x);

    // CABA: LDU #$4AD1
    cpu.m_u = 0x4AD1;

    // CABD: LDX #$4AB2
    cpu.m_x = 0x4AB2;

    // CAC0: CMPX $4AEC
    cpu.compare_x(cpu.read_memory16(0x4AEC));

    // CAC3: BEQ $CADE
    if (cpu.zero_flag()) cpu.m_pc = 0xCADE;

    label_CAC5:
    // CAC5: JMP $cac5
    goto label_CAC5;

    // CAC7: STD ,X
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // CAC9: LDD -$2,X
    // TODO: Fix comma operator: LDD -$2,X

    // CACB: STD $2,X
    cpu.write_memory16(cpu.m_x + 0x02, cpu.m_d);

    // CACD: LDD -$3,U
    // TODO: Fix comma operator: LDD -$3,U

    // CACF: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // CAD1: LDA -$1,U
    // TODO: Fix comma operator: LDA -$1,U

    // CAD3: STA $2,U
    cpu.write_memory(cpu.m_u + 0x02, cpu.m_a);

    // CAD5: LEAU -$3,U
    // TODO: Fix comma operator: LEAU -$3,U

    // CAD7: LEAX -$4,X
    // TODO: Fix comma operator: LEAX -$4,X

    // CAD9: CMPX $4AEC
    cpu.compare_x(cpu.read_memory16(0x4AEC));

    // CADC: BHI $CAC5
    // TODO: Convert BHI $CAC5

    // CADE: STU $4AEC
    cpu.write_memory16(0x4AEC, cpu.m_u);

    // CAE1: LDA #$00
    cpu.m_a = 0x00;

    // CAE3: STA ,U
    cpu.write_memory(cpu.m_u, cpu.m_a);

    // CAE5: LDD #$0000
    cpu.m_d = 0x0000;

    // CAE8: STD $1,U
    cpu.write_memory16(cpu.m_u + 0x01, cpu.m_d);

    // CAEA: LDD <$5C
    cpu.m_d = cpu.read_memory16(0x5C);

    // CAEC: STD ,X
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // CAEE: LDD <$5E
    cpu.m_d = cpu.read_memory16(0x5E);

    // CAF0: STD $2,X
    cpu.write_memory16(cpu.m_x + 0x02, cpu.m_d);

    // CAF2: RTS 
    return;

    // CAF3: LDX $4AEC
    cpu.m_x = cpu.read_memory16(0x4AEC);

    // CAF6: LDB $4AEE
    cpu.m_b = cpu.read_memory(0x4AEE);

    // CAF9: ABX 
    // TODO: Convert ABX 

    // CAFA: TFR X,U
    cpu.m_u = cpu.m_x;

    // CAFC: LDA $4AEE
    cpu.m_a = cpu.read_memory(0x4AEE);

    // CAFF: CMPA #$03
    cpu.compare_a(0x03);

    // CB01: BCS $CB08
    if (cpu.carry_flag()) cpu.m_pc = 0xCB08;

    // CB03: LDX #$CC10
    cpu.m_x = 0xCC10;

    // CB06: BRA $CB0B
    goto label_CB0B;

    label_CB08:
    // CB08: JMP $cb08
    goto label_CB08;

    label_CB0B:
    // CB0B: LDD $4879
    cpu.m_d = cpu.read_memory16(0x4879);

    // CB0E: SUBD #$0008
    cpu.m_d -= 0x0008;

    // CB11: SUBD ,X
    // TODO: Complex indexed addressing: ,X

    // CB13: TSTA 
    cpu.test_a();

    // CB14: BPL $CB1A
    if (!cpu.negative_flag()) cpu.m_pc = 0xCB1A;

    // CB16: COMA 
    cpu.m_a = ~cpu.m_a;

    // CB17: NEGB 
    cpu.m_b = -cpu.m_b;

    // CB18: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // CB1A: STD <$01
    cpu.write_memory16(0x01, cpu.m_d);

    // CB1C: CMPD #$0018
    cpu.execute_cmpd_immediate(0x0018);

    // CB20: BCC $CB49
    if (!cpu.carry_flag()) cpu.m_pc = 0xCB49;

    // CB22: LDD $487B
    cpu.m_d = cpu.read_memory16(0x487B);

    // CB25: ADDD #$FF8C
    cpu.m_d += 0xFF8C;

    // CB28: SUBD $2,X
    // TODO: Fix comma operator: SUBD $2,X

    // CB2A: TSTA 
    cpu.test_a();

    // CB2B: BPL $CB31
    if (!cpu.negative_flag()) cpu.m_pc = 0xCB31;

    // CB2D: COMA 
    cpu.m_a = ~cpu.m_a;

    // CB2E: NEGB 
    cpu.m_b = -cpu.m_b;

    // CB2F: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // CB31: CMPD #$0018
    cpu.execute_cmpd_immediate(0x0018);

    // CB35: BCC $CB49
    if (!cpu.carry_flag()) cpu.m_pc = 0xCB49;

    // CB37: ADDD <$01
    cpu.m_d += 0x01;

    // CB39: CMPD #$0020
    cpu.execute_cmpd_immediate(0x0020);

    // CB3D: BCC $CB49
    if (!cpu.carry_flag()) cpu.m_pc = 0xCB49;

    // CB3F: TFR X,D
    cpu.m_d = cpu.m_x;

    // CB41: SUBD #$CBA4
    cpu.m_d -= 0xCBA4;

    // CB44: LSRB 
    cpu.m_b >>= 1;

    // CB45: LSRB 
    cpu.m_b >>= 1;

    // CB46: STB $4AEF
    cpu.write_memory(0x4AEF, cpu.m_b);

    // CB49: LEAX $4,X
    // TODO: Fix comma operator: LEAX $4,X

    // CB4B: CMPX #$CC18
    cpu.compare_x(0xCC18);

    // CB4E: BCS $CB0B
    if (cpu.carry_flag()) cpu.m_pc = 0xCB0B;

    // CB50: LDA $4AEF
    cpu.m_a = cpu.read_memory(0x4AEF);

    // CB53: CMPA #$1B
    cpu.compare_a(0x1B);

    // CB55: BCC $CB59
    if (!cpu.carry_flag()) cpu.m_pc = 0xCB59;

    // CB57: STA ,U
    cpu.write_memory(cpu.m_u, cpu.m_a);

    // CB59: LDA <$AC
    cpu.m_a = cpu.read_memory(0xAC);

    // CB5B: ANDA #$F0
    cpu.m_a &= 0xF0;

    // CB5D: BEQ $CBA3
    if (cpu.zero_flag()) cpu.m_pc = 0xCBA3;

    // CB5F: LDA $4AEF
    cpu.m_a = cpu.read_memory(0x4AEF);

    // CB62: CMPA #$1B
    cpu.compare_a(0x1B);

    // CB64: BNE $CB82
    if (!cpu.zero_flag()) cpu.m_pc = 0xCB82;

    // CB66: LDA $4AEE
    cpu.m_a = cpu.read_memory(0x4AEE);

    // CB69: CMPA #$02
    cpu.compare_a(0x02);

    // CB6B: BHI $CB71
    // TODO: Convert BHI $CB71

    // CB6D: LDA #$00
    cpu.m_a = 0x00;

    // CB6F: STA ,U
    cpu.write_memory(cpu.m_u, cpu.m_a);

    // CB71: LDA $4AEE
    cpu.m_a = cpu.read_memory(0x4AEE);

    // CB74: BEQ $CB7D
    if (cpu.zero_flag()) cpu.m_pc = 0xCB7D;

    // CB76: DEC $4AEE
    cpu.decrement_memory(0x4AEE);

    // CB79: LDA #$00
    cpu.m_a = 0x00;

    // CB7B: STA -$1,U
    cpu.write_memory(cpu.m_u - 0x01, cpu.m_a);

    // CB7D: JSR $BDF8
    cpu.call_function(0xBDF8);

    // CB80: BRA $CBA3
    goto label_CBA3;

    // CB82: CMPA #$1C
    cpu.compare_a(0x1C);

    // CB84: BNE $CB91
    if (!cpu.zero_flag()) cpu.m_pc = 0xCB91;

    // CB86: LDD #$FFFF
    cpu.m_d = 0xFFFF;

    // CB89: STD $4AEC
    cpu.write_memory16(0x4AEC, cpu.m_d);

    // CB8C: JSR $BDD5
    cpu.call_function(0xBDD5);

    // CB8F: BRA $CBA3
    goto label_CBA3;

    // CB91: INC $4AEE
    cpu.increment_memory(0x4AEE);

    // CB94: LDA $4AEE
    cpu.m_a = cpu.read_memory(0x4AEE);

    // CB97: CMPA #$03
    cpu.compare_a(0x03);

    // CB99: BCS $CBA0
    if (cpu.carry_flag()) cpu.m_pc = 0xCBA0;

    // CB9B: LDA #$1C
    cpu.m_a = 0x1C;

    // CB9D: STA $4AEF
    cpu.write_memory(0x4AEF, cpu.m_a);

    // CBA0: JSR $BE16
    cpu.call_function(0xBE16);

    label_CBA3:
    // CBA3: RTS 
    return;

    // CBCC: STU $0CFE
    cpu.write_memory16(0x0CFE, cpu.m_u);

    // CBCF: BCC $CBD0
    if (!cpu.carry_flag()) cpu.m_pc = 0xCBD0;

    label_CBD0:
    // CBD0: STU $3CFE
    cpu.write_memory16(0x3CFE, cpu.m_u);

    // CBD1: JMP $cbd0
    goto label_CBD0;

    // CBD3: BCC $CBD4
    // TODO: External jump to 0xCBD4 - not implemented

    // CBD5: INC [W,S]
    // TODO: Complex indexed addressing: [W,S]

    // CBD7: BCC $CBD8
    if (!cpu.carry_flag()) cpu.m_pc = 0xCBD8;

    label_CBD8:
    // CBD8: STU $9CFE
    cpu.write_memory16(0x9CFE, cpu.m_u);

    // CBD9: JMP $cbd8
    goto label_CBD8;

    // CBDB: BCC $CBDC
    // TODO: External jump to 0xCBDC - not implemented

    // CBDD: LDD #$FE24
    cpu.m_d = 0xFE24;

    // CBE0: STU $FCFE
    cpu.write_memory16(0xFCFE, cpu.m_u);

    // CBE3: BCC $CBE5
    if (!cpu.carry_flag()) cpu.m_pc = 0xCBE5;

    label_CBE5:
    // CBE5: JMP $cbe5
    goto label_CBE5;

    // CBE7: BCC $CBE9
    if (!cpu.carry_flag()) cpu.m_pc = 0xCBE9;

    // CBE9: INCB 
    cpu.m_b++;

    // CBEA: LDU $2400
    cpu.m_u = cpu.read_memory16(0x2400);

    // CBED: CMPX #$FE24
    cpu.compare_x(0xFE24);

    // CBF0: NEG <$BC
    // TODO: Convert NEG <$BC

    // CBF2: LDU $2400
    cpu.m_u = cpu.read_memory16(0x2400);

    // CBF5: LDD [W,S]
    // TODO: Complex indexed addressing: [W,S]

    // CBF7: BCC $CBFA
    // TODO: External jump to 0xCBFA - not implemented

    // CBF9: ANDCC #$FE
    // TODO: Convert ANDCC #$FE

    // CBFB: BCC $CBFE
    if (!cpu.carry_flag()) cpu.m_pc = 0xCBFE;

    // CBFD: ANDCC #$FE
    // TODO: Convert ANDCC #$FE

    // CBFE: LDU $5401
    cpu.m_u = cpu.read_memory16(0x5401);

    // CBFF: LSRB 
    cpu.m_b >>= 1;

    // CC00: NEG <$1C
    // TODO: Convert NEG <$1C

    // CC01: ANDCC #$FE
    // TODO: Convert ANDCC #$FE

    // CC02: LDU $8401
    cpu.m_u = cpu.read_memory16(0x8401);

    // CC03: ANDA #$01
    cpu.m_a &= 0x01;

    // CC05: ANDCC #$FE
    // TODO: Convert ANDCC #$FE

    // CC07: ANDA $011C
    cpu.m_a &= cpu.read_memory(0x011C);

    // CC0A: LDU $E401
    cpu.m_u = cpu.read_memory16(0xE401);

    // CC0D: ANDCC #$FF
    // TODO: Convert ANDCC #$FF

    // CC0F: XHCF 
    // TODO: Convert XHCF 

    // CC10: NEG <$1C
    // TODO: Convert NEG <$1C

    // CC12: STU $7401
    cpu.write_memory16(0x7401, cpu.m_u);

    // CC15: ANDCC #$FF
    // TODO: Convert ANDCC #$FF

    // CC17: ANDA [$9876,PCR]
    // TODO: Complex indexed addressing: [$9876,PCR]

    label_CC18:
    // CC18: JSR $CC5B
    cpu.call_function(0xCC5B);

    // CC1B: JMP $cc18
    goto label_CC18;

    // CC1D: JSR $C2C3
    cpu.call_function(0xC2C3);

    // CC20: BNE $CC38
    if (!cpu.zero_flag()) cpu.m_pc = 0xCC38;

    // CC22: LDU #$4AB6
    cpu.m_u = 0x4AB6;

    // CC25: LDX #$4520
    cpu.m_x = 0x4520;

    // CC28: LDA #$08
    cpu.m_a = 0x08;

    // CC2A: JSR $C6D9
    cpu.call_function(0xC6D9);

    // CC2D: LDU #$4A8E
    cpu.m_u = 0x4A8E;

    // CC30: LDX #$4508
    cpu.m_x = 0x4508;

    // CC33: LDA #$0B
    cpu.m_a = 0x0B;

    // CC35: JSR $C6D9
    cpu.call_function(0xC6D9);

    // CC38: LDX #$4AB6
    cpu.m_x = 0x4AB6;

    // CC3B: LDA ,X+
    // TODO: Complex indexed addressing: ,X+

    // CC3D: CMPA #$1B
    cpu.compare_a(0x1B);

    // CC3F: BCC $CC5B
    if (!cpu.carry_flag()) cpu.m_pc = 0xCC5B;

    // CC41: CMPX #$4AD4
    cpu.compare_x(0x4AD4);

    // CC44: BCS $CC3B
    if (cpu.carry_flag()) cpu.m_pc = 0xCC3B;

    // CC46: LDX #$4A8E
    cpu.m_x = 0x4A8E;

    // CC49: LDA ,X+
    // TODO: Complex indexed addressing: ,X+

    // CC4B: CMPA #$A0
    cpu.compare_a(0xA0);

    // CC4D: BCC $CC5B
    if (!cpu.carry_flag()) cpu.m_pc = 0xCC5B;

    // CC4F: ANDA #$0F
    cpu.m_a &= 0x0F;

    // CC51: CMPA #$0A
    cpu.compare_a(0x0A);

    // CC53: BCC $CC5B
    if (!cpu.carry_flag()) cpu.m_pc = 0xCC5B;

    // CC55: CMPX #$4AB6
    cpu.compare_x(0x4AB6);

    // CC58: BCS $CC49
    if (cpu.carry_flag()) cpu.m_pc = 0xCC49;

    // CC5A: RTS 
    return;

    // CC5B: LDX #$4AB6
    cpu.m_x = 0x4AB6;

    // CC5E: LDU #$CC7A
    cpu.m_u = 0xCC7A;

    // CC61: LDD ,U++
    cpu.m_d = cpu.read_memory16(cpu.m_u++);

    // CC63: STD ,X++
    cpu.write_memory16(cpu.m_x++, cpu.m_d);

    // CC65: CMPX #$4AD4
    cpu.compare_x(0x4AD4);

    // CC68: BCS $CC61
    if (cpu.carry_flag()) cpu.m_pc = 0xCC61;

    // CC6A: LDX #$4A8E
    cpu.m_x = 0x4A8E;

    // CC6D: LDU #$CC98
    cpu.m_u = 0xCC98;

    // CC70: LDD ,U++
    cpu.m_d = cpu.read_memory16(cpu.m_u++);

    // CC72: STD ,X++
    cpu.write_memory16(cpu.m_x++, cpu.m_d);

    // CC74: CMPX #$4AB6
    cpu.compare_x(0x4AB6);

    // CC77: BCS $CC70
    if (cpu.carry_flag()) cpu.m_pc = 0xCC70;

    // CC79: RTS 
    return;

    // CCC0: ORCC #$01
    cpu.m_cc |= 0x01;

    // CCC2: ROR $4684
    // TODO: Convert ROR $4684

    // CCC5: JSR $670D
    cpu.call_function(0x670D);

    // CCC8: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CCCB: RTS 
    return;

    label_CCCC:
    // CCCC: JMP $cccc
    goto label_CCCC;

    // CCCE: ROR $4684
    // TODO: Convert ROR $4684

    // CCD1: JSR $6724
    cpu.call_function(0x6724);

    // CCD4: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CCD7: RTS 
    return;

    // CCE4: ORCC #$01
    cpu.m_cc |= 0x01;

    // CCE6: ROR $4684
    // TODO: Convert ROR $4684

    // CCE9: JSR $6761
    cpu.call_function(0x6761);

    // CCEC: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CCEF: RTS 
    return;

    // CCF0: ORCC #$01
    cpu.m_cc |= 0x01;

    // CCF2: ROR $4684
    // TODO: Convert ROR $4684

    // CCF5: JSR $6761
    cpu.call_function(0x6761);

    // CCF8: CLR $4684
    cpu.write_memory(0x4684, 0);

    label_CCF9:
    // CCF9: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // CCFA: ANDA #$39
    cpu.m_a &= 0x39;

    // CCFB: JMP $ccf9
    goto label_CCF9;

    // CCFC: ORCC #$01
    cpu.m_cc |= 0x01;

    // CCFE: ROR $4684
    // TODO: Convert ROR $4684

    // CD01: JSR $6782
    cpu.call_function(0x6782);

    // CD04: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CD07: RTS 
    return;

    // CD08: ORCC #$01
    cpu.m_cc |= 0x01;

    // CD0A: ROR $4684
    // TODO: Convert ROR $4684

    // CD0D: JSR $67AA
    cpu.call_function(0x67AA);

    // CD10: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CD13: RTS 
    return;

    // CD14: ORCC #$01
    cpu.m_cc |= 0x01;

    // CD16: ROR $4684
    // TODO: Convert ROR $4684

    // CD19: JSR $67D2
    cpu.call_function(0x67D2);

    // CD1C: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CD1F: RTS 
    return;

    // CD20: ORCC #$01
    cpu.m_cc |= 0x01;

    // CD22: ROR $4684
    // TODO: Convert ROR $4684

    // CD25: JSR $67D4
    cpu.call_function(0x67D4);

    // CD28: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CD2B: RTS 
    return;

    // CD2C: ORCC #$01
    cpu.m_cc |= 0x01;

    // CD2E: ROR $4684
    // TODO: Convert ROR $4684

    // CD31: JSR $6819
    cpu.call_function(0x6819);

    // CD34: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CD37: RTS 
    return;

    // CD38: ORCC #$01
    cpu.m_cc |= 0x01;

    // CD3A: ROR $4684
    // TODO: Convert ROR $4684

    // CD3D: JSR $6864
    cpu.call_function(0x6864);

    // CD40: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CD43: RTS 
    return;

    // CD44: ORCC #$01
    cpu.m_cc |= 0x01;

    // CD46: ROR $4684
    // TODO: Convert ROR $4684

    // CD49: JSR $68C7
    cpu.call_function(0x68C7);

    // CD4C: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CD4F: RTS 
    return;

    // CD50: ORCC #$01
    cpu.m_cc |= 0x01;

    // CD52: ROR $4684
    // TODO: Convert ROR $4684

    // CD55: JSR $692D
    cpu.call_function(0x692D);

    // CD58: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CD5B: RTS 
    return;

    // CD5C: ORCC #$01
    cpu.m_cc |= 0x01;

    // CD5E: ROR $4684
    // TODO: Convert ROR $4684

    // CD61: JSR $6978
    cpu.call_function(0x6978);

    // CD64: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CD67: RTS 
    return;

    // CD68: ORCC #$01
    cpu.m_cc |= 0x01;

    // CD6A: ROR $4684
    // TODO: Convert ROR $4684

    // CD6D: JSR $6A0C
    cpu.call_function(0x6A0C);

    // CD70: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CD73: RTS 
    return;

    // CD74: ORCC #$01
    cpu.m_cc |= 0x01;

    // CD76: ROR $4684
    // TODO: Convert ROR $4684

    // CD79: JSR $6AA0
    cpu.call_function(0x6AA0);

    // CD7C: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CD7F: RTS 
    return;

    // CD80: ORCC #$01
    cpu.m_cc |= 0x01;

    // CD82: ROR $4684
    // TODO: Convert ROR $4684

    // CD85: JSR $7D9A
    cpu.call_function(0x7D9A);

    // CD88: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CD8B: RTS 
    return;

    // CD8C: ORCC #$01
    cpu.m_cc |= 0x01;

    // CD8E: ROR $4684
    // TODO: Convert ROR $4684

    // CD91: JSR $7EAF
    cpu.call_function(0x7EAF);

    // CD94: CLR $4684
    cpu.write_memory(0x4684, 0);

    // CD97: RTS 
    return;

    // CD98: ASRA 
    // TODO: Convert ASRA 

    // CD99: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // CD9A: ASRA 
    // TODO: Convert ASRA 

    // CD9B: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // CD9C: ASRA 
    // TODO: Convert ASRA 

    // CD9D: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // CD9E: ASRA 
    // TODO: Convert ASRA 

    // CD9F: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // CDA0: ASRA 
    // TODO: Convert ASRA 

    // CDA1: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // CDA2: ASRA 
    // TODO: Convert ASRA 

    // CDA3: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // CDA4: ASRA 
    // TODO: Convert ASRA 

    // CDA5: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // CDA6: ASRA 
    // TODO: Convert ASRA 

    // CDA7: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // CDA8: RTS 
    return;

    // CDA9: ASLB 
    cpu.m_b <<= 1;

    // CDAA: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // CDAB: ASLB 
    cpu.m_b <<= 1;

    // CDAC: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // CDAD: ASLB 
    cpu.m_b <<= 1;

    // CDAE: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // CDAF: ASLB 
    cpu.m_b <<= 1;

    // CDB0: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // CDB1: ASLB 
    cpu.m_b <<= 1;

    // CDB2: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // CDB3: ASLB 
    cpu.m_b <<= 1;

    // CDB4: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // CDB5: ASLB 
    cpu.m_b <<= 1;

    // CDB6: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // CDB7: ASLB 
    cpu.m_b <<= 1;

    // CDB8: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // CDB9: RTS 
    return;

    label_CDBA:
    // CDBA: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // CDBD: TST $4320
    // TODO: Convert TST $4320

    // CDC0: BMI $CDBD
    if (cpu.negative_flag()) cpu.m_pc = 0xCDBD;

    // CDC2: RTS 
    return;

    // CDC3: LDD #$0000
    cpu.m_d = 0x0000;

    // CDC6: STD -$A,U
    cpu.write_memory16(cpu.m_u - 0x0A, cpu.m_d);

    // CDC8: STD -$2,U
    cpu.write_memory16(cpu.m_u - 0x02, cpu.m_d);

    // CDCA: STD $6,U
    cpu.write_memory16(cpu.m_u + 0x06, cpu.m_d);

    // CDCC: STD $8,U
    cpu.write_memory16(cpu.m_u + 0x08, cpu.m_d);

    // CDCE: STD $A,U
    cpu.write_memory16(cpu.m_u + 0x0A, cpu.m_d);

    // CDD0: STD $C,U
    cpu.write_memory16(cpu.m_u + 0x0C, cpu.m_d);

    // CDD2: STD -$E,U
    cpu.write_memory16(cpu.m_u - 0x0E, cpu.m_d);

    // CDD4: STD -$C,U
    cpu.write_memory16(cpu.m_u - 0x0C, cpu.m_d);

    // CDD6: STD -$8,U
    cpu.write_memory16(cpu.m_u - 0x08, cpu.m_d);

    // CDD8: STD -$4,U
    cpu.write_memory16(cpu.m_u - 0x04, cpu.m_d);

    // CDDA: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // CDDC: STD $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_d);

    // CDDE: LDA #$40
    cpu.m_a = 0x40;

    // CDE0: STD -$10,U
    cpu.write_memory16(cpu.m_u - 0x10, cpu.m_d);

    // CDE2: STD -$6,U
    cpu.write_memory16(cpu.m_u - 0x06, cpu.m_d);

    // CDE4: STD $4,U
    cpu.write_memory16(cpu.m_u + 0x04, cpu.m_d);

    // CDE6: RTS 
    return;

    // CDE7: LDD $502A
    cpu.m_d = cpu.read_memory16(0x502A);

    // CDEA: LDU $5030
    cpu.m_u = cpu.read_memory16(0x5030);

    // CDED: STD $5030
    cpu.write_memory16(0x5030, cpu.m_d);

    // CDF0: STU $502A
    cpu.write_memory16(0x502A, cpu.m_u);

    // CDF3: LDD $502C
    cpu.m_d = cpu.read_memory16(0x502C);

    // CDF6: LDU $5038
    cpu.m_u = cpu.read_memory16(0x5038);

    // CDF9: STD $5038
    cpu.write_memory16(0x5038, cpu.m_d);

    // CDFC: STU $502C
    cpu.write_memory16(0x502C, cpu.m_u);

    // CDFF: LDD $5034
    cpu.m_d = cpu.read_memory16(0x5034);

    // CE02: LDU $503A
    cpu.m_u = cpu.read_memory16(0x503A);

    // CE05: STD $503A
    cpu.write_memory16(0x503A, cpu.m_d);

    // CE08: STU $5034
    cpu.write_memory16(0x5034, cpu.m_u);

    // CE0B: RTS 
    return;

    // CE0C: STA $4702
    cpu.write_memory(0x4702, cpu.m_a);

    // CE0F: CLR $4701
    cpu.write_memory(0x4701, 0);

    // CE12: LDA #$77
    cpu.m_a = 0x77;

    // CE14: JSR $CDBA
    cpu.call_function(0xCDBA);

    // CE17: RTS 
    return;

    // CE18: STA $4702
    cpu.write_memory(0x4702, cpu.m_a);

    // CE1B: CLR $4701
    cpu.write_memory(0x4701, 0);

    // CE1E: LDA #$80
    cpu.m_a = 0x80;

    // CE20: JSR $CDBA
    cpu.call_function(0xCDBA);

    // CE23: RTS 
    return;

    // CE24: LDD #$0010
    cpu.m_d = 0x0010;

    // CE27: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // CE2A: LDA #$00
    cpu.m_a = 0x00;

    // CE2C: JMP $CDBA
    goto label_CDBA;

    // CE2F: LDD #$0010
    cpu.m_d = 0x0010;

    // CE32: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // CE35: LDA #$0E
    cpu.m_a = 0x0E;

    // CE37: JMP $CDBA
    goto label_CDBA;

    // CE3A: LDD #$0010
    cpu.m_d = 0x0010;

    // CE3D: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // CE40: LDA #$1C
    cpu.m_a = 0x1C;

    // CE42: JMP $CDBA
    goto label_CDBA;

    // CE45: LDD <$53
    cpu.m_d = cpu.read_memory16(0x53);

    // CE47: STD <$54
    cpu.write_memory16(0x54, cpu.m_d);

    // CE49: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // CE4C: STA <$53
    cpu.write_memory(0x53, cpu.m_a);

    // CE4E: RTS 
    return;

    // CE4F: SYNC 
    // TODO: Convert SYNC 

    // CE50: EORB <$35
    cpu.m_b ^= 0x35;

    // CE52: XSTX #$04C4
    // TODO: Convert XSTX #$04C4

    // CE55: LSRB 
    cpu.m_b >>= 1;

    // CE56: XNCB 
    // TODO: Convert XNCB 

    // CE57: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // CE58: LSRA 
    cpu.m_a >>= 1;

    // CE59: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // CE5A: BRA $CEA3
    goto label_CEA3;

    // CE5C: CLRA 
    cpu.m_a = 0;

    // CE5D: LSRB 
    cpu.m_b >>= 1;

    // CE5E: BRA $CEB7
    goto label_CEB7;

    // CE60: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // CE61: XNCB 
    // TODO: Convert XNCB 

    // CE62: LSRA 
    cpu.m_a >>= 1;

    // CE63: LSRA 
    cpu.m_a >>= 1;

    // CE64: STA -$2,Y
    cpu.write_memory(cpu.m_y - 0x02, cpu.m_a);

    // CE66: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE69: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE6C: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE6F: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE72: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE75: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE78: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE7B: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE7E: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE81: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE84: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE87: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE8A: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE8D: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE90: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE93: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE96: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE99: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE9C: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CE9F: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEA2: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    label_CEA3:
    // CEA3: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEA5: JMP $cea3
    goto label_CEA3;

    // CEA6: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEA9: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEAC: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEAF: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEB2: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEB5: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    label_CEB7:
    // CEB7: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEB8: JMP $ceb7
    goto label_CEB7;

    // CEBA: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEBB: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEBD: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEBE: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEC0: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEC1: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEC3: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEC4: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEC6: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEC7: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // CEC9: STU $434F
    cpu.write_memory16(0x434F, cpu.m_u);

    // CECA: COMA 
    cpu.m_a = ~cpu.m_a;

    // CECB: CLRA 
    cpu.m_a = 0;

    // CECC: NEGB 
    cpu.m_b = -cpu.m_b;

    // CECD: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // CECE: XNCB 
    // TODO: Convert XNCB 

    // CECF: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // CED0: ASRA 
    // TODO: Convert ASRA 

    // CED1: ASLA 
    cpu.m_a <<= 1;

    // CED2: LSRB 
    cpu.m_b >>= 1;

    // CED3: BRA $CF06
    goto label_CF06;

    // CED5: RTS 
    return;

    // CED6: XANDCC #$33
    // TODO: Convert XANDCC #$33

    // CED8: BRA $CF1B
    goto label_CF1B;

    // CEDA: LSRB 
    cpu.m_b >>= 1;

    // CEDB: NEGA 
    cpu.m_a = -cpu.m_a;

    // CEDC: XNCB 
    // TODO: Convert XNCB 

    // CEDD: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // CEDE: ORCC #$F6
    cpu.m_cc |= 0xF6;

    // CEE0: SEX 
    // TODO: Convert SEX 

    // CEE1: EORA $0,X
    // TODO: Fix comma operator: EORA $0,X

    // CEE3: NEG <$E2
    // TODO: Convert NEG <$E2

    // CEE5: ASL <$1F
    cpu.arithmetic_shift_left(0x1F);

    // CEE7: JMP $E000
    goto label_E000;

    // CEEA: NEG <$00
    // TODO: Convert NEG <$00

    // CEEC: STU $74BB
    cpu.write_memory16(0x74BB, cpu.m_u);

    // CEEF: CMPA <$1E
    cpu.compare_a(cpu.read_memory(0x1E));

    // CEF1: SUBB #$FF
    cpu.m_b -= 0xFF;

    // CEF3: LDU #$BB8B
    cpu.m_u = 0xBB8B;

    // CEF6: NEG <$00
    // TODO: Convert NEG <$00

    // CEF8: STU $4CBB
    cpu.write_memory16(0x4CBB, cpu.m_u);

    // CEFB: CMPA <$01
    cpu.compare_a(cpu.read_memory(0x01));

    // CEFD: NEGA 
    cpu.m_a = -cpu.m_a;

    // CEFE: SUBB -$10,U
    // TODO: Fix comma operator: SUBB -$10,U

    // CF00: NEG <$00
    // TODO: Convert NEG <$00

    // CF02: STU $4C51
    cpu.write_memory16(0x4C51, cpu.m_u);

    // CF05: ADDB $1FEC
    cpu.m_b += cpu.read_memory(0x1FEC);

    label_CF06:
    // CF06: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // CF08: SUBB -$E,Y
    // TODO: Fix comma operator: SUBB -$E,Y

    // CF0A: TFR CC,inv
    cpu.m_inv = cpu.m_cc;

    // CF0C: SUBB -$E,Y
    // TODO: Fix comma operator: SUBB -$E,Y

    // CF0E: ADDA $911F
    cpu.m_a += cpu.read_memory(0x911F);

    // CF11: SUBA $FFEC
    cpu.m_a -= cpu.read_memory(0xFFEC);

    // CF14: ADDA $911F
    cpu.m_a += cpu.read_memory(0x911F);

    // CF17: CMPX <$FF
    cpu.compare_x(cpu.read_memory16(0xFF));

    // CF19: EORA #$BB
    cpu.m_a ^= 0xBB;

    label_CF1B:
    // CF1B: ADDA #$00
    cpu.m_a += 0x00;

    // CF1D: NEG <$FE
    // TODO: Convert NEG <$FE

    // CF1F: INC <$BB
    cpu.increment_memory(0xBB);

    // CF21: ADDA #$00
    cpu.m_a += 0x00;

    // CF23: CMPX #$E05A
    cpu.compare_x(0xE05A);

    // CF26: NEG <$00
    // TODO: Convert NEG <$00

    // CF28: CMPB $0,U
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_u + 0x00));

    // CF2A: DECA 
    cpu.m_a--;

    // CF2B: BITB $0,X
    // TODO: Convert BITB $0,X

    // CF2D: XHCF 
    // TODO: Convert XHCF 

    // CF2E: STU $D8BB
    cpu.write_memory16(0xD8BB, cpu.m_u);

    // CF31: BITA #$00
    // TODO: Convert BITA #$00

    // CF33: DECB 
    cpu.m_b--;

    // CF34: STU $CEBB
    cpu.write_memory16(0xCEBB, cpu.m_u);

    // CF37: ADDA #$00
    cpu.m_a += 0x00;

    // CF39: NEGB 
    cpu.m_b = -cpu.m_b;

    // CF3A: SUBB $8,Y
    // TODO: Fix comma operator: SUBB $8,Y

    // CF3C: NEG <$64
    // TODO: Convert NEG <$64

    // CF3E: SUBB ,-X
    // TODO: Complex indexed addressing: ,-X

    // CF40: XNC >$0080
    // TODO: Convert XNC >$0080

    // CF43: NEGA 
    cpu.m_a = -cpu.m_a;

    // CF44: SUBB #$00
    cpu.m_b -= 0x00;

    // CF46: ORCC #$F6
    cpu.m_cc |= 0xF6;

    // CF48: NEG <$B4
    // TODO: Convert NEG <$B4

    // CF4A: EXG U,inv
    // TODO: Convert EXG U,inv

    // CF4C: SUBB [,Y]
    // TODO: Complex indexed addressing: [,Y]

    // CF4E: ADDA $8B00
    cpu.m_a += cpu.read_memory(0x8B00);

    // CF51: NEG <$FF
    // TODO: Convert NEG <$FF

    // CF53: NEG [D,Y]
    // TODO: Convert NEG [D,Y]

    // CF55: ADDA #$00
    cpu.m_a += 0x00;

    // CF57: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // CF58: STU $E2BB
    cpu.write_memory16(0xE2BB, cpu.m_u);

    // CF5B: LDX #$0000
    cpu.m_x = 0x0000;

    // CF5E: STU $56BB
    cpu.write_memory16(0x56BB, cpu.m_u);

    // CF61: CMPA <$1F
    cpu.compare_a(cpu.read_memory(0x1F));

    // CF63: ORA $FFF6
    cpu.m_a |= cpu.read_memory(0xFFF6);

    // CF66: ADDA $9100
    cpu.m_a += cpu.read_memory(0x9100);

    // CF69: NEG <$FF
    // TODO: Convert NEG <$FF

    // CF6B: NEG [D,Y]
    // TODO: Convert NEG [D,Y]

    // CF6D: ADDA #$01
    cpu.m_a += 0x01;

    // CF6F: SBCB #$E0
    cpu.sub_b_with_carry(0xE0);

    // CF71: ASL >$0000
    cpu.arithmetic_shift_left(0x0000);

    // CF74: SUBB A,S
    // TODO: Fix comma operator: SUBB A,S

    // CF76: TFR A,A
    cpu.m_a = cpu.m_a;

    // CF78: TFR B,Y
    cpu.m_y = cpu.m_b;

    // CF7A: ADDA $8B1F
    cpu.m_a += cpu.read_memory(0x8B1F);

    // CF7D: LSR $E046
    // TODO: Convert LSR $E046

    // CF80: NEG <$00
    // TODO: Convert NEG <$00

    // CF82: STU $9200
    cpu.write_memory16(0x9200, cpu.m_u);

    // CF85: CMPX #$E028
    cpu.compare_x(0xE028);

    // CF88: XNC >$0080
    // TODO: Convert XNC >$0080

    // CF8B: NEGA 
    cpu.m_a = -cpu.m_a;

    // CF8C: SUBB #$00
    cpu.m_b -= 0x00;

    // CF8E: ORCC #$F6
    cpu.m_cc |= 0xF6;

    // CF90: XNC <$26
    // TODO: Convert XNC <$26

    // CF92: NEG <$00
    // TODO: Convert NEG <$00

    // CF94: LDU $E8BB
    cpu.m_u = cpu.read_memory16(0xE8BB);

    // CF97: CMPA <$1E
    cpu.compare_a(cpu.read_memory(0x1E));

    // CF99: XRES 
    // TODO: Convert XRES 

    // CF9A: SUBB -$6,U
    // TODO: Fix comma operator: SUBB -$6,U

    // CF9C: NEG <$00
    // TODO: Convert NEG <$00

    // CF9E: SUBB F,Y
    // TODO: Complex indexed addressing: F,Y

    // CFA0: ADDA $8E00
    cpu.m_a += cpu.read_memory(0x8E00);

    // CFA3: CMPX #$FFD8
    cpu.compare_x(0xFFD8);

    // CFA6: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // CFA8: CMPB $2,Y
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_y + 0x02));

    // CFAA: ADDA $8B00
    cpu.m_a += cpu.read_memory(0x8B00);

    // CFAD: NEG <$E1
    // TODO: Convert NEG <$E1

    // CFAF: LSRB 
    cpu.m_b >>= 1;

    // CFB0: ADDA $8B00
    cpu.m_a += cpu.read_memory(0x8B00);

    // CFB3: CMPX #$FFA6
    cpu.compare_x(0xFFA6);

    // CFB6: NEG <$00
    // TODO: Convert NEG <$00

    // CFB8: LDU $F200
    cpu.m_u = cpu.read_memory16(0xF200);

    // CFBB: XHCF 
    // TODO: Convert XHCF 

    // CFBC: STU $D800
    cpu.write_memory16(0xD800, cpu.m_u);

    // CFBF: CWAI #$E0
    // TODO: Convert CWAI #$E0

    // CFC1: CWAI #$BB
    // TODO: Convert CWAI #$BB

    // CFC3: EORA #$00
    cpu.m_a ^= 0x00;

    // CFC5: JMP [$CE00]
    // TODO: Invalid branch offset: [$CE00]

    // CFC9: ASL $FF4C
    cpu.arithmetic_shift_left(0xFF4C);

    // CFCC: TFR A,A
    cpu.m_a = cpu.m_a;

    // CFCE: NEG <$0A
    // TODO: Convert NEG <$0A

    // CFD0: ADDA $881F
    cpu.m_a += cpu.read_memory(0x881F);

    // CFD3: EORB <$E0
    cpu.m_b ^= 0xE0;

    // CFD5: CWAI #$56
    // TODO: Convert CWAI #$56

    // CFD7: BITB -$1,X
    // TODO: Convert BITB -$1,X

    // CFD9: LDU #$FFD8
    cpu.m_u = 0xFFD8;

    // CFDC: NEG <$00
    // TODO: Convert NEG <$00

    // CFDE: STU $7E00
    cpu.write_memory16(0x7E00, cpu.m_u);

    // CFE1: JMP [$D800]
    // TODO: Invalid branch offset: [$D800]

    // CFE5: NEG <$E0
    // TODO: Convert NEG <$E0

    // CFE7: CMPX #$7200
    cpu.compare_x(0x7200);

    // CFEA: SUBA #$40
    cpu.m_a -= 0x40;

    // CFEC: SUBB #$00
    cpu.m_b -= 0x00;

    // CFEE: X18 
    // TODO: Convert X18 

    // CFEF: CMPX $1C4A
    cpu.compare_x(cpu.read_memory16(0x1C4A));

    // CFF2: ADDA $9A1F
    cpu.m_a += cpu.read_memory(0x9A1F);

    // CFF5: BCC $CFF6
    // TODO: External jump to 0xCFF6 - not implemented

    // CFF7: ORA >$00DC
    cpu.m_a |= 0x00DC;

    // CFFA: SUBB ,Y+
    // TODO: Complex indexed addressing: ,Y+

    // CFFC: NEG <$00
    // TODO: Convert NEG <$00

    // CFFE: SUBB $CFBC,PCR
    // TODO: Fix comma operator: SUBB $CFBC,PCR

    // D001: ORA <$1F
    cpu.m_a |= 0x1F;

    // D003: BCC $D004
    if (!cpu.carry_flag()) cpu.m_pc = 0xD004;

    label_D004:
    // D004: STU $BA00
    cpu.write_memory16(0xBA00, cpu.m_u);

    // D005: JMP $d004
    goto label_D004;

    // D007: LDD <$E0
    cpu.m_d = cpu.read_memory16(0xE0);

    // D008: SUBB F,Y
    // TODO: Complex indexed addressing: F,Y

    // D009: ORA $0,X
    // TODO: Fix comma operator: ORA $0,X

    // D00A: NEG <$00
    // TODO: Convert NEG <$00

    // D00B: NEG <$E0
    // TODO: Convert NEG <$E0

    // D00C: SUBB $CFCA,PCR
    // TODO: Fix comma operator: SUBB $CFCA,PCR

    // D00D: CMPX #$BB9D
    cpu.compare_x(0xBB9D);

    // D00F: JSR <$1D
    cpu.call_function(0x1D);

    label_D010:
    // D010: SEX 
    // TODO: Convert SEX 

    // D011: JMP $d010
    goto label_D010;

    // D013: EORB [D,Y]
    // TODO: Complex indexed addressing: [D,Y]

    // D015: SUBD $0,X
    // TODO: Fix comma operator: SUBD $0,X

    // D017: NEG <$FF
    // TODO: Convert NEG <$FF

    // D019: ADDA $A300
    cpu.m_a += cpu.read_memory(0xA300);

    // D01C: NEG <$96
    // TODO: Convert NEG <$96

    // D01D: LDA <$E0
    cpu.m_a = cpu.read_memory(0xE0);

    // D01E: SUBB -$E,Y
    // TODO: Fix comma operator: SUBB -$E,Y

    // D01F: LEAS -$1,X
    // TODO: Fix comma operator: LEAS -$1,X

    // D020: TFR inv,CC
    cpu.m_cc = cpu.m_inv;

    // D021: DEC [$7EBB]
    // TODO: Unrecognized operand: [$7EBB]

    // D022: STU $7EBB
    cpu.write_memory16(0x7EBB, cpu.m_u);

    // D025: SUBD $0,X
    // TODO: Fix comma operator: SUBD $0,X

    // D027: NEG <$FF
    // TODO: Convert NEG <$FF

    // D029: ADDA $A302
    cpu.m_a += cpu.read_memory(0xA302);

    // D02D: ANDCC #$E0
    // TODO: Convert ANDCC #$E0

    // D02F: ANDA >$0000
    cpu.m_a &= 0x0000;

    // D032: SUBB [W,Y]
    // TODO: Complex indexed addressing: [W,Y]

    // D034: XNC >$0080
    // TODO: Convert XNC >$0080

    // D037: NEGA 
    cpu.m_a = -cpu.m_a;

    // D038: SUBB #$00
    cpu.m_b -= 0x00;

    // D03A: X18 
    // TODO: Convert X18 

    // D03B: CMPX $1FB0
    cpu.compare_x(cpu.read_memory16(0x1FB0));

    // D03E: SEX 
    // TODO: Convert SEX 

    // D03F: ANDB ,S+
    // TODO: Complex indexed addressing: ,S+

    // D041: SBCA #$BB
    cpu.sub_a_with_carry(0xBB);

    // D043: SUBD $0,X
    // TODO: Fix comma operator: SUBD $0,X

    // D045: NEG <$FF
    // TODO: Convert NEG <$FF

    // D047: XANDCC #$BB
    // TODO: Convert XANDCC #$BB

    // D049: SUBD $0,X
    // TODO: Fix comma operator: SUBD $0,X

    // D04B: NEGB 
    cpu.m_b = -cpu.m_b;

    // D04C: STU $E2BB
    cpu.write_memory16(0xE2BB, cpu.m_u);

    // D04F: SUBD $0,X
    // TODO: Fix comma operator: SUBD $0,X

    // D051: NEG <$FF
    // TODO: Convert NEG <$FF

    // D053: BGT $D010
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xD010;

    // D055: SUBD -$1,X
    // TODO: Fix comma operator: SUBD -$1,X

    // D057: SUBA $FFC4
    cpu.m_a -= cpu.read_memory(0xFFC4);

    // D05A: ADDA $A300
    cpu.m_a += cpu.read_memory(0xA300);

    // D05D: NEG <$FF
    // TODO: Convert NEG <$FF

    // D05F: BCC $D01C
    if (!cpu.carry_flag()) cpu.m_pc = 0xD01C;

    // D061: SUBD $2,X
    // TODO: Fix comma operator: SUBD $2,X

    // D063: ANDCC #$E1
    // TODO: Convert ANDCC #$E1

    // D065: X18 
    // TODO: Convert X18 

    // D066: NEG <$00
    // TODO: Convert NEG <$00

    // D068: CMPB -$A,Y
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_y - 0x0A));

    // D06A: TFR A,A
    cpu.m_a = cpu.m_a;

    // D06C: TFR PC,inv
    cpu.m_inv = cpu.m_pc;

    // D06E: ADDA $A01F
    cpu.m_a += cpu.read_memory(0xA01F);

    // D071: BGT $D053
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xD053;

    // D073: CWAI #$00
    // TODO: Convert CWAI #$00

    // D075: NEG <$FF
    // TODO: Convert NEG <$FF

    // D077: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // D078: NEG <$D2
    // TODO: Convert NEG <$D2

    // D07A: SUBB $E,S
    // TODO: Fix comma operator: SUBB $E,S

    // D07C: XNC >$0080
    // TODO: Convert XNC >$0080

    // D07F: NEGA 
    cpu.m_a = -cpu.m_a;

    // D080: SUBB #$00
    cpu.m_b -= 0x00;

    // D082: X18 
    // TODO: Convert X18 

    // D083: CMPX $019A
    cpu.compare_x(cpu.read_memory16(0x019A));

    // D086: NEG <$00
    // TODO: Convert NEG <$00

    // D088: LDU $841D
    cpu.m_u = cpu.read_memory16(0x841D);

    // D08B: ANDB ,S+
    // TODO: Complex indexed addressing: ,S+

    // D08D: DEC <$00
    cpu.decrement_memory(0x00);

    // D08F: NEG <$E0
    // TODO: Convert NEG <$E0

    // D091: EORB #$BB
    cpu.m_b ^= 0xBB;

    // D093: SUBD $0,X
    // TODO: Fix comma operator: SUBD $0,X

    // D095: ANDA $FFEC
    cpu.m_a &= cpu.read_memory(0xFFEC);

    // D098: TFR S,inv
    cpu.m_inv = cpu.m_sp;

    // D09A: CMPB -$C,U
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_u - 0x0C));

    // D09C: ADDA $A300
    cpu.m_a += cpu.read_memory(0xA300);

    // D09F: NEG <$E2
    // TODO: Convert NEG <$E2

    // D0A1: ASLB 
    cpu.m_b <<= 1;

    // D0A2: ADDA $A300
    cpu.m_a += cpu.read_memory(0xA300);

    // D0A5: ASL $E078
    cpu.arithmetic_shift_left(0xE078);

    // D0A8: ADDA $A300
    cpu.m_a += cpu.read_memory(0xA300);

    // D0AB: JMP [$C400]
    // TODO: Invalid branch offset: [$C400]

    // D0AF: ASL $FF1A
    cpu.arithmetic_shift_left(0xFF1A);

    // D0B2: NEG <$14
    // TODO: Convert NEG <$14

    // D0B4: STU $A600
    cpu.write_memory16(0xA600, cpu.m_u);

    // D0B7: BVC $D0B8
    // TODO: Convert BVC $D0B8

    // D0B9: LDD $0,X
    // TODO: Fix comma operator: LDD $0,X

    // D0BB: NEG <$E1
    // TODO: Convert NEG <$E1

    // D0BD: ASL [D,Y]
    // TODO: Complex indexed addressing: [D,Y]

    // D0BF: JSR <$00
    cpu.call_function(0x00);

    // D0C1: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // D0C3: SUBA >$0000
    cpu.m_a -= 0x0000;

    // D0C6: LDU $701F
    cpu.m_u = cpu.read_memory16(0x701F);

    // D0C9: CMPX <$FF
    cpu.compare_x(cpu.read_memory16(0xFF));

    // D0CB: CMPX <$BB
    cpu.compare_x(cpu.read_memory16(0xBB));

    // D0CD: ORA <$1F
    cpu.m_a |= 0x1F;

    // D0CF: CMPX <$E0
    cpu.compare_x(cpu.read_memory16(0xE0));

    // D0D1: BVC $D08E
    // TODO: Convert BVC $D08E

    // D0D3: JSR <$1F
    cpu.call_function(0x1F);

    // D0D5: SBCA <$E0
    cpu.sub_a_with_carry(0xE0);

    // D0D7: LDX $BB94
    cpu.m_x = cpu.read_memory16(0xBB94);

    // D0DA: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // D0DC: SUBB -$10,U
    // TODO: Fix comma operator: SUBB -$10,U

    // D0DE: NEGB 
    cpu.m_b = -cpu.m_b;

    // D0DF: BITB $0,X
    // TODO: Convert BITB $0,X

    // D0E1: NEG <$FE
    // TODO: Convert NEG <$FE

    // D0E3: EORB $0,X
    // TODO: Fix comma operator: EORB $0,X

    // D0E5: EXG inv,inv
    // TODO: Convert EXG inv,inv

    // D0E7: XNCA 
    // TODO: Convert XNCA 

    // D0E8: NEG <$50
    // TODO: Convert NEG <$50

    // D0EA: SUBB $D0A8,PCR
    // TODO: Fix comma operator: SUBB $D0A8,PCR

    // D0ED: STA <$00
    cpu.write_memory(0x00, cpu.m_a);

    // D0EF: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // D0F1: EORB <$00
    cpu.m_b ^= 0x00;

    // D0F3: ASL $FF38
    cpu.arithmetic_shift_left(0xFF38);

    // D0F6: TFR A,A
    cpu.m_a = cpu.m_a;

    // D0F8: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // D0FA: ADDA $9A1F
    cpu.m_a += cpu.read_memory(0x9A1F);

    // D0FD: ANDB #$E0
    cpu.m_b &= 0xE0;

    // D0FF: LSR -$1,X
    // TODO: Convert LSR -$1,X

    // D101: EORB <$E0
    cpu.m_b ^= 0xE0;

    // D103: DEC <$1F
    cpu.decrement_memory(0x1F);

    // D105: SBCB [$B000]
    // TODO: Unrecognized operand: [$B000]

    // D109: NEG <$FF
    // TODO: Convert NEG <$FF

    // D10B: BGT $D10D
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xD10D;

    // D10D: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // D10F: LDB >$0000
    cpu.m_b = cpu.read_memory(0x0000);

    // D112: SUBB [W,Y]
    // TODO: Complex indexed addressing: [W,Y]

    // D114: XNC >$0080
    // TODO: Convert XNC >$0080

    // D117: NEGA 
    cpu.m_a = -cpu.m_a;

    // D118: SUBB #$00
    cpu.m_b -= 0x00;

    // D11A: LSR [$0078]
    // TODO: Convert LSR [$0078]

    // D11E: SUBB $A,X
    // TODO: Fix comma operator: SUBB $A,X

    // D120: TFR inv,U
    cpu.m_u = cpu.m_inv;

    // D122: NEG <$1E
    // TODO: Convert NEG <$1E

    // D124: TFR DP,PC
    cpu.m_pc = cpu.m_dp;

    // D126: STU $D800
    cpu.write_memory16(0xD800, cpu.m_u);

    // D129: CWAI #$E0
    // TODO: Convert CWAI #$E0

    // D12B: XDECA 
    cpu.m_a--;

    // D12C: SUBA -$8,X
    // TODO: Fix comma operator: SUBA -$8,X

    // D12E: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D130: LSR [$1FD3]
    // TODO: Convert LSR [$1FD3]

    // D134: TFR inv,DP
    cpu.m_dp = cpu.m_inv;

    // D136: TFR inv,X
    cpu.m_x = cpu.m_inv;

    // D138: STU $BA1F
    cpu.write_memory16(0xBA1F, cpu.m_u);

    // D13B: ADDD <$E0
    cpu.m_d += 0xE0;

    // D13D: NEGB 
    cpu.m_b = -cpu.m_b;

    // D13E: SUBA -$8,X
    // TODO: Fix comma operator: SUBA -$8,X

    // D140: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D142: LSR [$1FD3]
    // TODO: Convert LSR [$1FD3]

    // D146: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // D148: NEG <$5A
    // TODO: Convert NEG <$5A

    // D14A: STU $C41F
    cpu.write_memory16(0xC41F, cpu.m_u);

    // D14D: BITA $E01E
    // TODO: Convert BITA $E01E

    // D150: NEGB 
    cpu.m_b = -cpu.m_b;

    // D151: LBRA $D1BD
    // TODO: Convert LBRA $D1BD

    // D154: STU $F61F
    cpu.write_memory16(0xF61F, cpu.m_u);

    // D157: EORA #$FF
    cpu.m_a ^= 0xFF;

    // D159: SBCB ,Y+
    // TODO: Complex indexed addressing: ,Y+

    // D15B: X18 
    // TODO: Convert X18 

    // D15C: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D15E: LSR [$002D]
    // TODO: Convert LSR [$002D]

    // D162: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // D164: NEG <$4B
    // TODO: Convert NEG <$4B

    // D166: SUBB $8,Y
    // TODO: Fix comma operator: SUBB $8,Y

    // D168: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // D16A: STU $C400
    cpu.write_memory16(0xC400, cpu.m_u);

    // D16D: BLT $D16F
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xD16F;

    // D16F: DEC <$00
    cpu.decrement_memory(0x00);

    // D171: CLR <$E0
    cpu.write_memory(0xE0, 0);

    // D173: LEAS $0,X
    // TODO: Fix comma operator: LEAS $0,X

    // D175: CLR <$FF
    cpu.write_memory(0xFF, 0);

    // D177: SUBA $A018
    cpu.m_a -= cpu.read_memory(0xA018);

    // D17A: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D17C: LSR [$002D]
    // TODO: Convert LSR [$002D]

    // D180: NEG <$00
    // TODO: Convert NEG <$00

    // D182: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // D184: SUBB -$10,U
    // TODO: Fix comma operator: SUBB -$10,U

    // D186: NEG <$3C
    // TODO: Convert NEG <$3C

    // D188: STU $E200
    cpu.write_memory16(0xE200, cpu.m_u);

    // D18B: CWAI #$00
    // TODO: Convert CWAI #$00

    // D18D: NEG <$A0
    // TODO: Convert NEG <$A0

    // D18F: X18 
    // TODO: Convert X18 

    // D190: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D192: LSR [$1F88]
    // TODO: Convert LSR [$1F88]

    // D196: SUBB -$2,X
    // TODO: Fix comma operator: SUBB -$2,X

    // D198: SUBA -$8,X
    // TODO: Fix comma operator: SUBA -$8,X

    // D19A: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D19C: LSR [$C000]
    // TODO: Convert LSR [$C000]

    // D1A0: LSR [$005A]
    // TODO: Convert LSR [$005A]

    // D1A4: SUBB $F,X
    // TODO: Fix comma operator: SUBB $F,X

    // D1A6: TFR inv,X
    cpu.m_x = cpu.m_inv;

    // D1A8: NEG <$0F
    // TODO: Convert NEG <$0F

    // D1AA: TFR DP,PC
    cpu.m_pc = cpu.m_dp;

    // D1AC: STU $E200
    cpu.write_memory16(0xE200, cpu.m_u);

    // D1AF: BLT $D191
    // TODO: External jump to 0xD191 - not implemented

    // D1B1: NEGB 
    cpu.m_b = -cpu.m_b;

    // D1B2: SUBA -$8,X
    // TODO: Fix comma operator: SUBA -$8,X

    // D1B4: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D1B6: LSR [$1FCC]
    // TODO: Convert LSR [$1FCC]

    // D1BA: NEG <$05
    // TODO: Convert NEG <$05

    // D1BC: NEG <$07
    // TODO: Convert NEG <$07

    // D1BE: STU $AB1F
    cpu.write_memory16(0xAB1F, cpu.m_u);

    // D1C1: BITA $E046
    // TODO: Convert BITA $E046

    // D1C4: SUBA -$8,X
    // TODO: Fix comma operator: SUBA -$8,X

    // D1C6: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D1C8: LSR [$1FF1]
    // TODO: Convert LSR [$1FF1]

    // D1CC: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // D1CE: NEG <$5A
    // TODO: Convert NEG <$5A

    // D1D0: STU $EC1F
    cpu.write_memory16(0xEC1F, cpu.m_u);

    // D1D3: EORA #$E0
    cpu.m_a ^= 0xE0;

    // D1D5: NEG <$4F
    // TODO: Convert NEG <$4F

    // D1D7: LBRA $D234
    // TODO: Convert LBRA $D234

    // D1DA: SUBB -$C,X
    // TODO: Fix comma operator: SUBB -$C,X

    // D1DC: TFR B,D
    cpu.m_d = cpu.m_b;

    // D1DE: STU $CEA0
    cpu.write_memory16(0xCEA0, cpu.m_u);

    // D1E1: X18 
    // TODO: Convert X18 

    // D1E2: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D1E4: LSR [$003C]
    // TODO: Convert LSR [$003C]

    // D1E8: TFR inv,X
    cpu.m_x = cpu.m_inv;

    // D1EA: NEG <$34
    // TODO: Convert NEG <$34

    // D1EC: SUBB $1,U
    // TODO: Fix comma operator: SUBB $1,U

    // D1EE: TFR inv,Y
    cpu.m_y = cpu.m_inv;

    // D1F0: STU $B000
    cpu.write_memory16(0xB000, cpu.m_u);

    // D1F3: BLT $D1F5
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xD1F5;

    // D1F5: XHCF 
    // TODO: Convert XHCF 

    // D1F6: TFR inv,X
    cpu.m_x = cpu.m_inv;

    // D1F8: SUBB -$4,Y
    // TODO: Fix comma operator: SUBB -$4,Y

    // D1FA: NEG <$2D
    // TODO: Convert NEG <$2D

    // D1FC: STU $B0A0
    cpu.write_memory16(0xB0A0, cpu.m_u);

    // D1FF: X18 
    // TODO: Convert X18 

    // D200: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D202: LSR [$4F05]
    // TODO: Convert LSR [$4F05]

    // D206: TFR DP,PC
    cpu.m_pc = cpu.m_dp;

    // D208: SUBB $6,U
    // TODO: Fix comma operator: SUBB $6,U

    // D20A: NEG <$5A
    // TODO: Convert NEG <$5A

    // D20C: STU $E200
    cpu.write_memory16(0xE200, cpu.m_u);

    // D20F: BCS $D211
    if (cpu.carry_flag()) cpu.m_pc = 0xD211;

    // D211: EXG CC,D
    // TODO: Convert EXG CC,D

    // D213: X18 
    // TODO: Convert X18 

    // D214: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D216: LSR [$1F81]
    // TODO: Convert LSR [$1F81]

    // D21A: SUBB $0,X
    // TODO: Fix comma operator: SUBB $0,X

    // D21C: SUBA -$8,X
    // TODO: Fix comma operator: SUBA -$8,X

    // D21E: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D220: LSR [$C000]
    // TODO: Convert LSR [$C000]

    // D224: LSR [$005A]
    // TODO: Convert LSR [$005A]

    // D228: SUBB $A,X
    // TODO: Fix comma operator: SUBB $A,X

    // D22A: XDECA 
    cpu.m_a--;

    // D22B: CLR <$A0
    cpu.write_memory(0xA0, 0);

    // D22D: X18 
    // TODO: Convert X18 

    // D22E: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D230: LSR [$1F90]
    // TODO: Convert LSR [$1F90]

    // D234: STU $D800
    cpu.write_memory16(0xD800, cpu.m_u);

    // D237: XDECA 
    cpu.m_a--;

    // D238: SUBB -$4,Y
    // TODO: Fix comma operator: SUBB -$4,Y

    // D23A: TFR inv,U
    cpu.m_u = cpu.m_inv;

    // D23C: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // D23E: TFR inv,Y
    cpu.m_y = cpu.m_inv;

    // D240: STU $CE00
    cpu.write_memory16(0xCE00, cpu.m_u);

    // D243: CLR <$E0
    cpu.write_memory(0xE0, 0);

    // D245: LSRB 
    cpu.m_b >>= 1;

    // D246: SUBA -$8,X
    // TODO: Fix comma operator: SUBA -$8,X

    // D248: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D24A: LSR [$1FE2]
    // TODO: Convert LSR [$1FE2]

    // D24E: TFR inv,X
    cpu.m_x = cpu.m_inv;

    // D250: NEG <$0F
    // TODO: Convert NEG <$0F

    // D252: STU $BA1F
    cpu.write_memory16(0xBA1F, cpu.m_u);

    // D255: ANDB #$E0
    cpu.m_b &= 0xE0;

    // D257: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // D258: TFR inv,U
    cpu.m_u = cpu.m_inv;

    // D25A: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // D25C: SUBA -$8,X
    // TODO: Fix comma operator: SUBA -$8,X

    // D25E: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D260: LSR [$0069]
    // TODO: Convert LSR [$0069]

    // D264: STU $CE1F
    cpu.write_memory16(0xCE1F, cpu.m_u);

    // D267: STA <$FF
    cpu.write_memory(0xFF, cpu.m_a);

    // D269: LDB $4F16
    cpu.m_b = cpu.read_memory(0x4F16);

    // D26C: NEG <$4B
    // TODO: Convert NEG <$4B

    // D26E: SUBB -$2,X
    // TODO: Fix comma operator: SUBB -$2,X

    // D270: TFR CC,inv
    cpu.m_inv = cpu.m_cc;

    // D272: STU $BA00
    cpu.write_memory16(0xBA00, cpu.m_u);

    // D275: BNE $D296
    if (!cpu.zero_flag()) cpu.m_pc = 0xD296;

    // D277: LDB $A018
    cpu.m_b = cpu.read_memory(0xA018);

    // D27A: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D27C: LSR [$0034]
    // TODO: Convert LSR [$0034]

    // D280: SUBB -$10,U
    // TODO: Fix comma operator: SUBB -$10,U

    // D282: TFR inv,X
    cpu.m_x = cpu.m_inv;

    // D284: STU $A600
    cpu.write_memory16(0xA600, cpu.m_u);

    // D287: BLT $D289
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xD289;

    // D289: BVC $D2AA
    // TODO: Convert BVC $D2AA

    // D28B: SBCB ,S+
    // TODO: Complex indexed addressing: ,S+

    // D28D: LEAS $0,X
    // TODO: Fix comma operator: LEAS $0,X

    // D28F: DECB 
    cpu.m_b--;

    // D290: STU $C4A0
    cpu.write_memory16(0xC4A0, cpu.m_u);

    // D293: X18 
    // TODO: Convert X18 

    // D294: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D296: LSR [$002D]
    // TODO: Convert LSR [$002D]

    // D29A: NEG <$32
    // TODO: Convert NEG <$32

    // D29C: TFR inv,B
    cpu.m_b = cpu.m_inv;

    // D29E: SUBB $A,X
    // TODO: Fix comma operator: SUBB $A,X

    // D2A0: SUBA -$8,X
    // TODO: Fix comma operator: SUBA -$8,X

    // D2A2: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D2A4: LSR [$C000]
    // TODO: Convert LSR [$C000]

    // D2A8: LSR [$1F81]
    // TODO: Convert LSR [$1F81]

    // D2AC: SUBB $F,X
    // TODO: Fix comma operator: SUBB $F,X

    // D2AE: SUBA -$8,X
    // TODO: Fix comma operator: SUBA -$8,X

    // D2B0: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D2B2: LSR [$0034]
    // TODO: Convert LSR [$0034]

    // D2B6: NEG <$19
    // TODO: Convert NEG <$19

    // D2B8: NEG <$4B
    // TODO: Convert NEG <$4B

    // D2BA: STU $D81F
    cpu.write_memory16(0xD81F, cpu.m_u);

    // D2BD: BITA $E03C
    // TODO: Convert BITA $E03C

    // D2C0: NEG <$35
    // TODO: Convert NEG <$35

    // D2C2: NEG <$05
    // TODO: Convert NEG <$05

    // D2C4: NEG <$16
    // TODO: Convert NEG <$16

    // D2C6: STU $BF1F
    cpu.write_memory16(0xBF1F, cpu.m_u);

    // D2C9: CMPB $E055
    cpu.compare_b(cpu.read_memory(cpu.read_memory(0xE055)));

    // D2CC: SUBA -$8,X
    // TODO: Fix comma operator: SUBA -$8,X

    // D2CE: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D2D0: LSR [$002D]
    // TODO: Convert LSR [$002D]

    // D2D4: TFR inv,X
    cpu.m_x = cpu.m_inv;

    // D2D6: TFR inv,Y
    cpu.m_y = cpu.m_inv;

    // D2D8: STU $BA00
    cpu.write_memory16(0xBA00, cpu.m_u);

    // D2DB: XDECA 
    cpu.m_a--;

    // D2DC: SUBB $6,U
    // TODO: Fix comma operator: SUBB $6,U

    // D2DE: NEG <$16
    // TODO: Convert NEG <$16

    // D2E0: TFR inv,X
    cpu.m_x = cpu.m_inv;

    // D2E2: SUBA -$8,X
    // TODO: Fix comma operator: SUBA -$8,X

    // D2E4: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D2E6: LSR [$1F9F]
    // TODO: Convert LSR [$1F9F]

    // D2EA: STU $C900
    cpu.write_memory16(0xC900, cpu.m_u);

    // D2ED: ROL [$F140]
    // TODO: Unrecognized operand: [$F140]

    // D2F1: SUBA -$8,X
    // TODO: Fix comma operator: SUBA -$8,X

    // D2F4: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D2F6: LSR [$1F97]
    // TODO: Convert LSR [$1F97]

    // D2FA: SUBB $D,Y
    // TODO: Fix comma operator: SUBB $D,Y

    // D2FC: NEG <$4B
    // TODO: Convert NEG <$4B

    // D2FE: STU $BA1F
    cpu.write_memory16(0xBA1F, cpu.m_u);

    // D301: ORB <$1F
    cpu.m_b |= 0x1F;

    // D303: LDB $1FDB
    cpu.m_b = cpu.read_memory(0x1FDB);

    // D306: SUBB -$10,U
    // TODO: Fix comma operator: SUBB -$10,U

    // D308: NEG <$00
    // TODO: Convert NEG <$00

    // D30A: STU $ABA0
    cpu.write_memory16(0xABA0, cpu.m_u);

    // D30D: X18 
    // TODO: Convert X18 

    // D30E: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D310: LSR [$1FE2]
    // TODO: Convert LSR [$1FE2]

    // D314: NEG <$23
    // TODO: Convert NEG <$23

    // D316: NEG <$1E
    // TODO: Convert NEG <$1E

    // D318: SUBB -$E,Y
    // TODO: Fix comma operator: SUBB -$E,Y

    // D31A: TFR CC,inv
    cpu.m_inv = cpu.m_cc;

    // D31C: STU $C41F
    cpu.write_memory16(0xC41F, cpu.m_u);

    // D31F: SBCB $0,X
    // TODO: Fix comma operator: SBCB $0,X

    // D321: BVC $D323
    // TODO: Convert BVC $D323

    // D323: ASL $E014
    cpu.arithmetic_shift_left(0xE014);

    // D326: SUBA -$8,X
    // TODO: Fix comma operator: SUBA -$8,X

    // D328: SUBA -$A,X
    // TODO: Fix comma operator: SUBA -$A,X

    // D32A: LSR [$C000]
    // TODO: Convert LSR [$C000]

    // D32E: CLRA 
    cpu.m_a = 0;

    // D32F: SUBB $0,X
    // TODO: Fix comma operator: SUBB $0,X

    // D331: NEG <$00
    // TODO: Convert NEG <$00

    // D333: CWAI #$1F
    // TODO: Convert CWAI #$1F

    // D335: SBCB [$C41F]
    // TODO: Unrecognized operand: [$C41F]

    // D339: SBCB ,S+
    // TODO: Complex indexed addressing: ,S+

    // D33B: BVC $D35C
    // TODO: Convert BVC $D35C

    // D33D: SBCB -$1,X
    // TODO: Fix comma operator: SBCB -$1,X

    // D33F: EORB <$00
    cpu.m_b ^= 0x00;

    // D341: CWAI #$E0
    // TODO: Convert CWAI #$E0

    // D343: NEG <$1F
    // TODO: Convert NEG <$1F

    // D345: SBCB [$D800]
    // TODO: Unrecognized operand: [$D800]

    // D349: DECB 
    cpu.m_b--;

    // D34A: NEG <$00
    // TODO: Convert NEG <$00

    // D34C: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // D34E: SUBB $8,Y
    // TODO: Fix comma operator: SUBB $8,Y

    // D350: SUBB #$00
    cpu.m_b -= 0x00;

    // D352: NEGA 
    cpu.m_a = -cpu.m_a;

    // D353: LDB >$005A
    cpu.m_b = cpu.read_memory(0x005A);

    // D356: NEG <$00
    // TODO: Convert NEG <$00

    // D358: TFR CC,inv
    cpu.m_inv = cpu.m_cc;

    // D35A: SUBB -$C,X
    // TODO: Fix comma operator: SUBB -$C,X

    // D35C: NEG <$3C
    // TODO: Convert NEG <$3C

    // D35E: SUBB -$C,X
    // TODO: Fix comma operator: SUBB -$C,X

    // D360: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // D362: NEG <$14
    // TODO: Convert NEG <$14

    // D364: NEG <$00
    // TODO: Convert NEG <$00

    // D366: STU $D81F
    cpu.write_memory16(0xD81F, cpu.m_u);

    // D369: ANDB #$E0
    cpu.m_b &= 0xE0;

    // D36B: XHCF 
    // TODO: Convert XHCF 

    // D36C: NEG <$00
    // TODO: Convert NEG <$00

    // D36E: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // D370: NEG <$3C
    // TODO: Convert NEG <$3C

    // D372: SUBB $8,Y
    // TODO: Fix comma operator: SUBB $8,Y

    // D374: SUBB #$00
    cpu.m_b -= 0x00;

    // D376: NEGB 
    cpu.m_b = -cpu.m_b;

    // D377: SUBB $0,X
    // TODO: Fix comma operator: SUBB $0,X

    // D379: NEG <$1F
    // TODO: Convert NEG <$1F

    // D37B: ANDB #$00
    cpu.m_b &= 0x00;

    // D37D: EXG inv,D
    // TODO: Convert EXG inv,D

    // D37F: CWAI #$00
    // TODO: Convert CWAI #$00

    // D381: EXG inv,inv
    // TODO: Convert EXG inv,inv

    // D383: EORB <$00
    cpu.m_b ^= 0x00;

    // D385: EXG D,D
    // TODO: Convert EXG D,D

    // D387: BVC $D3A8
    // TODO: Convert BVC $D3A8

    // D389: ANDB #$E0
    cpu.m_b &= 0xE0;

    // D38B: NEG <$00
    // TODO: Convert NEG <$00

    // D38D: EXG inv,D
    // TODO: Convert EXG inv,D

    // D38F: BVC $D3B0
    // TODO: Convert BVC $D3B0

    // D391: LDA $0,X
    // TODO: Fix comma operator: LDA $0,X

    // D393: NEG <$00
    // TODO: Convert NEG <$00

    // D395: CWAI #$FF
    // TODO: Convert CWAI #$FF

    // D397: EORB <$C0
    cpu.m_b ^= 0xC0;

    // D399: NEG <$40
    // TODO: Convert NEG <$40

    // D39B: ORB -$1,X
    // TODO: Fix comma operator: ORB -$1,X

    // D39D: LDA $0,X
    // TODO: Fix comma operator: LDA $0,X

    // D39F: NEG <$00
    // TODO: Convert NEG <$00

    // D3A1: DECB 
    cpu.m_b--;

    // D3A2: STU $EC1F
    cpu.write_memory16(0xEC1F, cpu.m_u);

    // D3A5: ANDB #$FF
    cpu.m_b &= 0xFF;

    // D3A7: LDD $0,X
    // TODO: Fix comma operator: LDD $0,X

    // D3A9: CWAI #$1F
    // TODO: Convert CWAI #$1F

    // D3AB: LDD $0,X
    // TODO: Fix comma operator: LDD $0,X

    // D3AD: NEG <$E0
    // TODO: Convert NEG <$E0

    // D3AF: BVC $D3B1
    // TODO: Convert BVC $D3B1

    // D3B1: CWAI #$FF
    // TODO: Convert CWAI #$FF

    // D3B3: LDD $0,X
    // TODO: Fix comma operator: LDD $0,X

    // D3B5: NEG <$00
    // TODO: Convert NEG <$00

    // D3B7: CWAI #$1F
    // TODO: Convert CWAI #$1F

    // D3B9: ANDB #$FF
    cpu.m_b &= 0xFF;

    // D3BB: EORB <$C0
    cpu.m_b ^= 0xC0;

    // D3BD: NEG <$44
    // TODO: Convert NEG <$44

    // D3BF: ORCC #$B9
    cpu.m_cc |= 0xB9;

    // D3C1: STU -$A,U
    cpu.write_memory16(cpu.m_u - 0x0A, cpu.m_u);

    // D3C3: BHI $D37E
    // TODO: Convert BHI $D37E

    // D3C5: STU $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_u);

    // D3C7: BPL $D382
    // TODO: External jump to 0xD382 - not implemented

    // D3C9: STU $6,U
    cpu.write_memory16(cpu.m_u + 0x06, cpu.m_u);

    // D3CB: LSR <$C0
    // TODO: Convert LSR <$C0

    // D3CD: NEG <$46
    // TODO: Convert NEG <$46

    // D3CF: LSR <$B9
    // TODO: Convert LSR <$B9

    // D3D1: STU -$2,U
    cpu.write_memory16(cpu.m_u - 0x02, cpu.m_u);

    // D3D3: PSHU PC,S,Y,X,D
    // TODO: Convert PSHU PC,S,Y,X,D

    // D3D5: NEG $5C06
    // TODO: Convert NEG $5C06

    // D3D8: DECA 
    cpu.m_a--;

    // D3D9: XRES 
    // TODO: Convert XRES 

    // D3DA: LDB $7941
    cpu.m_b = cpu.read_memory(0x7941);

    // D3DD: LSR <$B9
    // TODO: Convert LSR <$B9

    // D3DF: STU -$1,U
    cpu.write_memory16(cpu.m_u - 0x01, cpu.m_u);

    // D3E1: RTI 
    // TODO: Convert RTI 

    // D3E2: ADCA $EFF6
    cpu.add_a_with_carry(cpu.read_memory(0xEFF6));

    // D3E4: LDB $7C5C
    cpu.m_b = cpu.read_memory(0x7C5C);

    // D3E5: INC $5C06
    cpu.increment_memory(0x5C06);

    // D3E7: ROR <$45
    // TODO: Convert ROR <$45

    // D3E8: LSRA 
    cpu.m_a >>= 1;

    // D3E9: SWI 
    // TODO: Convert SWI 

    // D3EA: ADCA $EF5F
    cpu.add_a_with_carry(cpu.read_memory(0xEF5F));

    // D3EC: CLRB 
    cpu.m_b = 0;

    // D3ED: RTI 
    // TODO: Convert RTI 

    // D3EE: ADCA $EFF6
    cpu.add_a_with_carry(cpu.read_memory(0xEFF6));

    // D3F1: ASL $5C06
    cpu.arithmetic_shift_left(0x5C06);

    // D3F4: DECA 
    cpu.m_a--;

    // D3F5: XRES 
    // TODO: Convert XRES 

    // D3F6: ADCA $EF5E
    cpu.add_a_with_carry(cpu.read_memory(0xEF5E));

    // D3F9: LBRA $CA6D
    // TODO: Convert LBRA $CA6D

    // D3FC: ADCA $EF5B
    cpu.add_a_with_carry(cpu.read_memory(0xEF5B));

    // D3FF: NEG <$B9
    // TODO: Convert NEG <$B9

    // D401: STU $A,U
    cpu.write_memory16(cpu.m_u + 0x0A, cpu.m_u);

    // D403: XRES 
    // TODO: Convert XRES 

    // D404: ADCA $EF5F
    cpu.add_a_with_carry(cpu.read_memory(0xEF5F));

    // D407: NOP 
    // NOP;

    // D408: ADCA $EF42
    cpu.add_a_with_carry(cpu.read_memory(0xEF42));

    // D40B: BPL $D3C6
    // TODO: External jump to 0xD3C6 - not implemented

    // D40D: STU -$4,U
    cpu.write_memory16(cpu.m_u - 0x04, cpu.m_u);

    // D40F: ROR <$C0
    // TODO: Convert ROR <$C0

    // D411: NEG <$B9
    // TODO: Convert NEG <$B9

    // D413: STU -$6,U
    cpu.write_memory16(cpu.m_u - 0x06, cpu.m_u);

    // D415: ANDCC #$B9
    // TODO: Convert ANDCC #$B9

    // D417: STU $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_u);

    // D419: BPL $D3D4
    // TODO: External jump to 0xD3D4 - not implemented

    // D41B: STU -$1,U
    cpu.write_memory16(cpu.m_u - 0x01, cpu.m_u);

    // D41D: NOP 
    // NOP;

    // D41E: LDB $915A
    cpu.m_b = cpu.read_memory(0x915A);

    // D421: ANDCC #$B9
    // TODO: Convert ANDCC #$B9

    // D423: STU $A,U
    cpu.write_memory16(cpu.m_u + 0x0A, cpu.m_u);

    // D425: XRES 
    // TODO: Convert XRES 

    // D426: ADCA $EF42
    cpu.add_a_with_carry(cpu.read_memory(0xEF42));

    // D429: BPL $D3E4
    if (!cpu.negative_flag()) cpu.m_pc = 0xD3E4;

    // D42B: STU -$7,U
    cpu.write_memory16(cpu.m_u - 0x07, cpu.m_u);

    // D42D: LBSR $8E1F
    // TODO: Convert LBSR $8E1F

    // D430: NEGA 
    cpu.m_a = -cpu.m_a;

    // D431: BCS $D3EC
    if (cpu.carry_flag()) cpu.m_pc = 0xD3EC;

    // D432: ADCA $EF42
    cpu.add_a_with_carry(cpu.read_memory(0xEF42));

    // D433: STU $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_u);

    // D435: DEC <$C0
    cpu.decrement_memory(0xC0);

    // D437: NEG <$5C
    // TODO: Convert NEG <$5C

    // D439: ROR <$B9
    // TODO: Convert ROR <$B9

    // D43B: STU -$2,U
    cpu.write_memory16(cpu.m_u - 0x02, cpu.m_u);

    // D43D: PSHU PC,S,Y,X,D
    // TODO: Convert PSHU PC,S,Y,X,D

    // D43F: SBCA -$1,U
    // TODO: Fix comma operator: SBCA -$1,U

    // D441: NOP 
    // NOP;

    // D442: ASRA 
    // TODO: Convert ASRA 

    // D443: BVS $D3FE
    // TODO: Convert BVS $D3FE

    // D445: STU -$2,U
    cpu.write_memory16(cpu.m_u - 0x02, cpu.m_u);

    // D447: LBRA $8E39
    // TODO: Convert LBRA $8E39

    // D44A: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // D44B: BHI $D406
    // TODO: Convert BHI $D406

    // D44D: STU $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_u);

    // D44F: DEC <$B9
    cpu.decrement_memory(0xB9);

    // D451: STU $3,U
    cpu.write_memory16(cpu.m_u + 0x03, cpu.m_u);

    // D453: PULS CC,DP,X,Y,PC
    // TODO: Convert PULS CC,DP,X,Y,PC

    // D455: STU [A,S]
    // TODO: Handle indexed addressing: STU [A,S]

    // D457: SBCB <$B9
    cpu.sub_b_with_carry(0xB9);

    // D459: STU -$1,U
    cpu.write_memory16(cpu.m_u - 0x01, cpu.m_u);

    // D45B: NOP 
    // NOP;

    // D45C: XNCA 
    // TODO: Convert XNCA 

    // D45D: BPL $D418
    // TODO: External jump to 0xD418 - not implemented

    // D45F: STU $5,U
    cpu.write_memory16(cpu.m_u + 0x05, cpu.m_u);

    // D461: SWI 
    // TODO: Convert SWI 

    // D462: ADCA $EF5E
    cpu.add_a_with_carry(cpu.read_memory(0xEF5E));

    // D465: PSHU PC,S,Y,X,D
    // TODO: Convert PSHU PC,S,Y,X,D

    // D467: BITA $B9EF
    // TODO: Convert BITA $B9EF

    // D46A: DECB 
    cpu.m_b--;

    // D46B: ANDCC #$B9
    // TODO: Convert ANDCC #$B9

    // D46D: STU $5,U
    cpu.write_memory16(cpu.m_u + 0x05, cpu.m_u);

    // D46F: SWI 
    // TODO: Convert SWI 

    // D470: ADCA $EF46
    cpu.add_a_with_carry(cpu.read_memory(0xEF46));

    // D473: BCC $D42E
    // TODO: External jump to 0xD42E - not implemented

    // D475: STU -$4,U
    cpu.write_memory16(cpu.m_u - 0x04, cpu.m_u);

    // D477: BNE $D432
    if (!cpu.zero_flag()) cpu.m_pc = 0xD432;

    // D479: STU -$5,U
    cpu.write_memory16(cpu.m_u - 0x05, cpu.m_u);

    // D47B: BRN $D436
    // TODO: Convert BRN $D436

    // D47D: STU $5,U
    cpu.write_memory16(cpu.m_u + 0x05, cpu.m_u);

    // D47F: TFR PC,inv
    cpu.m_inv = cpu.m_pc;

    // D481: PSHU S,A,CC
    // TODO: Convert PSHU S,A,CC

    // D483: CLR <$C0
    cpu.write_memory(0xC0, 0);

    // D485: NEG <$5A
    // TODO: Convert NEG <$5A

    // D486: DECB 
    cpu.m_b--;

    // D487: ANDCC #$B9
    // TODO: Convert ANDCC #$B9

    // D489: STU $A,U
    cpu.write_memory16(cpu.m_u + 0x0A, cpu.m_u);

    // D48B: XRES 
    // TODO: Convert XRES 

    // D48C: ADCA $EF41
    cpu.add_a_with_carry(cpu.read_memory(0xEF41));

    // D48F: BCS $D44A
    if (cpu.carry_flag()) cpu.m_pc = 0xD44A;

    // D491: STU -$4,U
    cpu.write_memory16(cpu.m_u - 0x04, cpu.m_u);

    // D493: BNE $D44E
    // TODO: External jump to 0xD44E - not implemented

    // D495: STU -$6,U
    cpu.write_memory16(cpu.m_u - 0x06, cpu.m_u);

    // D497: CWAI #$B9
    // TODO: Convert CWAI #$B9

    // D499: STU -$1,U
    cpu.write_memory16(cpu.m_u - 0x01, cpu.m_u);

    // D49B: RTI 
    // TODO: Convert RTI 

    // D49C: ASLA 
    cpu.m_a <<= 1;

    // D49D: JMP <$C0
    // TODO: Invalid branch offset: <$C0

    // D49F: NEG <$5A
    // TODO: Convert NEG <$5A

    // D4A1: ANDCC #$B9
    // TODO: Convert ANDCC #$B9

    // D4A3: STU $A,U
    cpu.write_memory16(cpu.m_u + 0x0A, cpu.m_u);

    // D4A5: XRES 
    // TODO: Convert XRES 

    // D4A6: ADCA $EF58
    cpu.add_a_with_carry(cpu.read_memory(0xEF58));

    // D4A9: BGE $D4A2
    // TODO: External jump to 0xD4A2 - not implemented

    // D4AB: ORCC #$B9
    cpu.m_cc |= 0xB9;

    // D4AD: STU -$6,U
    cpu.write_memory16(cpu.m_u - 0x06, cpu.m_u);

    // D4AF: ANDCC #$B9
    // TODO: Convert ANDCC #$B9

    // D4B1: STU $A,U
    cpu.write_memory16(cpu.m_u + 0x0A, cpu.m_u);

    // D4B3: XRES 
    // TODO: Convert XRES 

    // D4B4: ADCA $EF5B
    cpu.add_a_with_carry(cpu.read_memory(0xEF5B));

    // D4B7: NEG <$B9
    // TODO: Convert NEG <$B9

    // D4B9: STU $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_u);

    // D4BB: BPL $D476
    // TODO: External jump to 0xD476 - not implemented

    // D4BD: STU $5,U
    cpu.write_memory16(cpu.m_u + 0x05, cpu.m_u);

    // D4BF: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // D4C1: ADCB $5A1C
    cpu.add_b_with_carry(cpu.read_memory(0x5A1C));

    // D4C4: ADCA $EF4A
    cpu.add_a_with_carry(cpu.read_memory(0xEF4A));

    // D4C7: XRES 
    // TODO: Convert XRES 

    // D4C8: ADCA $EF5C
    cpu.add_a_with_carry(cpu.read_memory(0xEF5C));

    // D4CB: BNE $D486
    if (!cpu.zero_flag()) cpu.m_pc = 0xD486;

    // D4CD: STU $6,U
    cpu.write_memory16(cpu.m_u + 0x06, cpu.m_u);

    // D4CF: BCC $D48A
    // TODO: External jump to 0xD48A - not implemented

    // D4D1: STU -$A,U
    cpu.write_memory16(cpu.m_u - 0x0A, cpu.m_u);

    // D4D3: BHI $D4CB
    // TODO: Convert BHI $D4CB

    // D4D5: LSR $B9EF
    // TODO: Convert LSR $B9EF

    // D4D8: DECB 
    cpu.m_b--;

    // D4D9: ANDCC #$B9
    // TODO: Convert ANDCC #$B9

    // D4DB: STU $2,U
    cpu.write_memory16(cpu.m_u + 0x02, cpu.m_u);

    // D4DD: BPL $D498
    // TODO: External jump to 0xD498 - not implemented

    // D4DF: STU $5,U
    cpu.write_memory16(cpu.m_u + 0x05, cpu.m_u);

    // D4E1: SWI 
    // TODO: Convert SWI 

    // D4E2: ADCA $EF5E
    cpu.add_a_with_carry(cpu.read_memory(0xEF5E));

    // D4E5: PSHU PC,Y,X,DP,CC
    // TODO: Convert PSHU PC,Y,X,DP,CC

    // D4E7: STU $5,U
    cpu.write_memory16(cpu.m_u + 0x05, cpu.m_u);

    // D4E9: SWI 
    // TODO: Convert SWI 

    // D4EA: ADCA $EF42
    cpu.add_a_with_carry(cpu.read_memory(0xEF42));

    // D4ED: BPL $D4E6
    // TODO: External jump to 0xD4E6 - not implemented

    // D4EF: BCS $D535
    // TODO: External jump to 0xD535 - not implemented

    // D4F1: ORCC #$B9
    cpu.m_cc |= 0xB9;

    // D4F3: STU -$5,U
    cpu.write_memory16(cpu.m_u - 0x05, cpu.m_u);

    // D4F5: BRN $D4B0
    // TODO: Convert BRN $D4B0

    // D4F7: STU -$4,U
    cpu.write_memory16(cpu.m_u - 0x04, cpu.m_u);

    // D4F9: BNE $D4B4
    if (!cpu.zero_flag()) cpu.m_pc = 0xD4B4;

    // D4FB: STU $6,U
    cpu.write_memory16(cpu.m_u + 0x06, cpu.m_u);

    // D4FD: BCC $D4B8
    // TODO: External jump to 0xD4B8 - not implemented

    // D4FF: STU $5,U
    cpu.write_memory16(cpu.m_u + 0x05, cpu.m_u);

    // D501: SWI 
    // TODO: Convert SWI 

    // D502: STB $2544
    cpu.write_memory(0x2544, cpu.m_b);

    // D505: ORCC #$B9
    cpu.m_cc |= 0xB9;

    // D507: STU -$A,U
    cpu.write_memory16(cpu.m_u - 0x0A, cpu.m_u);

    // D509: BHI $D4C4
    // TODO: Convert BHI $D4C4

    // D50B: STU $6,U
    cpu.write_memory16(cpu.m_u + 0x06, cpu.m_u);

    // D50D: BCC $D4C8
    if (!cpu.carry_flag()) cpu.m_pc = 0xD4C8;

    // D50F: STU -$4,U
    cpu.write_memory16(cpu.m_u - 0x04, cpu.m_u);

    // D511: BNE $D4CC
    // TODO: External jump to 0xD4CC - not implemented

    // D513: STU $A,U
    cpu.write_memory16(cpu.m_u + 0x0A, cpu.m_u);

    // D515: XRES 
    // TODO: Convert XRES 

    // D516: STB $255B
    cpu.write_memory(0x255B, cpu.m_b);

    // D519: NEG <$B9
    // TODO: Convert NEG <$B9

    // D51B: STU $5,U
    cpu.write_memory16(cpu.m_u + 0x05, cpu.m_u);

    // D51D: SWI 
    // TODO: Convert SWI 

    // D51E: ADCA $EF44
    cpu.add_a_with_carry(cpu.read_memory(0xEF44));

    // D521: ABX 
    // TODO: Convert ABX 

    // D522: ADCA $EF5C
    cpu.add_a_with_carry(cpu.read_memory(0xEF5C));

    // D525: ROR <$46
    // TODO: Convert ROR <$46

    // D527: BCC $D4E2
    if (!cpu.carry_flag()) cpu.m_pc = 0xD4E2;

    // D529: STU -$4,U
    cpu.write_memory16(cpu.m_u - 0x04, cpu.m_u);

    // D52B: ROR <$C0
    // TODO: Convert ROR <$C0

    // D52D: NEG <$00
    // TODO: Convert NEG <$00

    // D52F: LDA <$1F
    cpu.m_a = cpu.read_memory(0x1F);

    // D531: CMPX <$B6
    cpu.compare_x(cpu.read_memory16(0xB6));

    // D533: SBCB $B6C5
    cpu.sub_b_with_carry(cpu.read_memory(0xB6C5));

    // D536: STA $1D1F
    cpu.write_memory(0x1D1F, cpu.m_a);

    // D539: LDX $1FD8
    cpu.m_x = cpu.read_memory16(0x1FD8);

    // D53C: LDA $8FB6
    cpu.m_a = cpu.read_memory(0x8FB6);

    // D53F: STB [A,Y]
    // TODO: Handle indexed addressing: STB [A,Y]

    // D541: JSR -$1,X
    // TODO: Fix comma operator: JSR -$1,X

    // D543: LDA -$1,X
    // TODO: Fix comma operator: LDA -$1,X

    // D545: SUBA $B6A1
    cpu.m_a -= cpu.read_memory(0xB6A1);

    // D548: LDA $7CB6
    cpu.m_a = cpu.read_memory(0x7CB6);

    // D54B: JSR $B678
    cpu.call_function(0xB678);

    // D54E: LDA $AD72
    cpu.m_a = cpu.read_memory(0xAD72);

    // D551: NEG <$80
    // TODO: Convert NEG <$80

    // D553: NEGA 
    cpu.m_a = -cpu.m_a;

    // D554: SUBB #$00
    cpu.m_b -= 0x00;

    // D556: NEG <$1E
    // TODO: Convert NEG <$1E

    // D558: TFR B,inv
    cpu.m_inv = cpu.m_b;

    // D55A: LDA $F2B6
    cpu.m_a = cpu.read_memory(0xF2B6);

    // D55D: BITB #$B6
    // TODO: Convert BITB #$B6

    // D55F: JSR $B684
    cpu.call_function(0xB684);

    // D562: LDA $7CB6
    cpu.m_a = cpu.read_memory(0x7CB6);

    // D565: NEG $B69A
    // TODO: Convert NEG $B69A

    // D568: LDA $E172
    cpu.m_a = cpu.read_memory(0xE172);

    // D56B: NEG <$80
    // TODO: Convert NEG <$80

    // D56D: NEGA 
    cpu.m_a = -cpu.m_a;

    // D56E: SUBB #$00
    cpu.m_b -= 0x00;

    // D570: NEG <$5A
    // TODO: Convert NEG <$5A

    // D572: TFR DP,D
    cpu.m_d = cpu.m_dp;

    // D574: LDA $BDB6
    cpu.m_a = cpu.read_memory(0xBDB6);

    // D577: ORA <$B7
    cpu.m_a |= 0xB7;

    // D579: ROL <$B6
    cpu.rotate_left(0xB6);

    // D57B: JSR [A,Y]
    // TODO: Complex indexed addressing: [A,Y]

    // D57D: JSR $B6C5
    cpu.call_function(0xB6C5);

    // D580: XNC >$0080
    // TODO: Convert XNC >$0080

    // D583: NEGA 
    cpu.m_a = -cpu.m_a;

    // D584: SUBB #$00
    cpu.m_b -= 0x00;

    // D586: NEG <$96
    // TODO: Convert NEG <$96

    // D588: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // D58A: LDA $E7B6
    cpu.m_a = cpu.read_memory(0xE7B6);

    // D58D: BITB #$B6
    // TODO: Convert BITB #$B6

    // D58F: NEG $B670
    // TODO: Convert NEG $B670

    // D592: STA $1D72
    cpu.write_memory(0x1D72, cpu.m_a);

    // D595: NEG <$80
    // TODO: Convert NEG <$80

    // D597: NEGA 
    cpu.m_a = -cpu.m_a;

    // D598: SUBB #$00
    cpu.m_b -= 0x00;

    // D59A: TFR CC,D
    cpu.m_d = cpu.m_cc;

    // D59C: TFR DP,D
    cpu.m_d = cpu.m_dp;

    // D59E: LDA $7FB6
    cpu.m_a = cpu.read_memory(0x7FB6);

    // D5A1: JSR -$1,X
    // TODO: Fix comma operator: JSR -$1,X

    // D5A3: ORB <$00
    cpu.m_b |= 0x00;

    // D5A5: XHCF 
    // TODO: Convert XHCF 

    // D5A6: STA $13B6
    cpu.write_memory(0x13B6, cpu.m_a);

    // D5A9: ORA <$B6
    cpu.m_a |= 0xB6;

    // D5AB: XSTX #$B6E7
    // TODO: Convert XSTX #$B6E7

    // D5AE: TFR CC,inv
    cpu.m_inv = cpu.m_cc;

    // D5B0: TFR B,inv
    cpu.m_inv = cpu.m_b;

    // D5B2: STA $1DB6
    cpu.write_memory(0x1DB6, cpu.m_a);

    // D5B5: INC $B68A
    cpu.increment_memory(0xB68A);

    // D5B8: XNC >$0080
    // TODO: Convert XNC >$0080

    // D5BB: NEGA 
    cpu.m_a = -cpu.m_a;

    // D5BC: SUBB #$00
    cpu.m_b -= 0x00;

    // D5BE: TFR A,A
    cpu.m_a = cpu.m_a;

    // D5C0: TFR DP,D
    cpu.m_d = cpu.m_dp;

    // D5C2: LDA $C5B7
    cpu.m_a = cpu.read_memory(0xC5B7);

    // D5C5: ROL <$B6
    cpu.rotate_left(0xB6);

    // D5C7: JSR [A,Y]
    // TODO: Complex indexed addressing: [A,Y]

    // D5C9: NEG $B670
    // TODO: Convert NEG $B670

    // D5CC: LDA $C5B6
    cpu.m_a = cpu.read_memory(0xC5B6);

    // D5CF: JSR $7200
    cpu.call_function(0x7200);

    // D5D2: SUBA #$40
    cpu.m_a -= 0x40;

    // D5D4: SUBB #$00
    cpu.m_b -= 0x00;

    // D5D6: TFR PC,inv
    cpu.m_inv = cpu.m_pc;

    // D5D8: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // D5DA: STA $09B6
    cpu.write_memory(0x09B6, cpu.m_a);

    // D5DD: ORA <$B6
    cpu.m_a |= 0xB6;

    // D5DF: ASL $B6B1
    cpu.arithmetic_shift_left(0xB6B1);

    // D5E2: LDA $ADB6
    cpu.m_a = cpu.read_memory(0xADB6);

    // D5E5: JSR $B6FC
    cpu.call_function(0xB6FC);

    // D5E8: XNC >$0080
    // TODO: Convert XNC >$0080

    // D5EB: NEGA 
    cpu.m_a = -cpu.m_a;

    // D5EC: SUBB #$00
    cpu.m_b -= 0x00;

    // D5EE: TFR Y,inv
    cpu.m_inv = cpu.m_y;

    // D5F0: TFR inv,A
    cpu.m_a = cpu.m_inv;

    // D5F2: LDA $D4B6
    cpu.m_a = cpu.read_memory(0xD4B6);

    // D5F5: ORA #$B6
    cpu.m_a |= 0xB6;

    // D5F7: JSR $B6A1
    cpu.call_function(0xB6A1);

    // D5FA: LDA $ADB7
    cpu.m_a = cpu.read_memory(0xADB7);

    // D5FD: SEX 
    // TODO: Convert SEX 

    // D5FE: XNC >$0080
    // TODO: Convert XNC >$0080

    // D601: NEGA 
    cpu.m_a = -cpu.m_a;

    // D602: SUBB #$00
    cpu.m_b -= 0x00;

    // D604: NEG [$62FF]
    // TODO: Convert NEG [$62FF]

    // D608: COM [$64FF]
    // TODO: Convert COM [$64FF]

    // D60C: LSR [$66FF]
    // TODO: Convert LSR [$66FF]

    // D610: ASR [$6180]
    // TODO: Convert ASR [$6180]

    // D614: XNC ,X+
    // TODO: Convert XNC ,X+

    // D616: COM ,X+
    // TODO: Convert COM ,X+

    // D618: LSR ,X+
    // TODO: Convert LSR ,X+

    // D61A: LSR ,X+
    // TODO: Convert LSR ,X+

    // D61C: ROR ,X+
    // TODO: Convert ROR ,X+

    // D61E: ASR ,X+
    // TODO: Convert ASR ,X+

    // D620: ADCB $17F9
    cpu.add_b_with_carry(cpu.read_memory(0x17F9));

    // D623: DAA 
    // TODO: Convert DAA 

    // D624: ADCB $1BF9
    cpu.add_b_with_carry(cpu.read_memory(0x1BF9));

    // D627: SEX 
    // TODO: Convert SEX 

    // D628: ADCB $1FF9
    cpu.add_b_with_carry(cpu.read_memory(0x1FF9));

    // D62B: BRN $D626
    // TODO: Convert BRN $D626

    // D62D: BLS $D628
    // TODO: Convert BLS $D628

    // D62F: BCS $D62A
    // TODO: External jump to 0xD62A - not implemented

    // D631: BEQ $D62C
    // TODO: External jump to 0xD62C - not implemented

    // D633: BVS $D62E
    // TODO: Convert BVS $D62E

    // D635: BMI $D630
    // TODO: External jump to 0xD630 - not implemented

    // D637: BLT $D632
    // TODO: External jump to 0xD632 - not implemented

    // D639: BLE $D634
    // TODO: External jump to 0xD634 - not implemented

    // D63B: LEAY [$33F9,S]
    // TODO: Complex indexed addressing: [$33F9,S]

    // D63F: PULS CC,DP,X,Y,U,PC
    // TODO: Convert PULS CC,DP,X,Y,U,PC

    // D641: PULU CC,DP,X,Y,S,PC
    // TODO: Convert PULU CC,DP,X,Y,S,PC

    // D643: RTS 
    return;

    // D644: ADCB $3BF9
    cpu.add_b_with_carry(cpu.read_memory(0x3BF9));

    // D647: MUL 
    // TODO: Convert MUL 

    // D648: BITB $1EF5
    // TODO: Convert BITB $1EF5

    // D64B: NEG [B,S]
    // TODO: Convert NEG [B,S]

    // D64D: SUBD [B,S]
    // TODO: Complex indexed addressing: [B,S]

    // D64F: BITB [$3FF9,S]
    // TODO: Convert BITB [$3FF9,S]

    // D653: CLRA 
    cpu.m_a = 0;

    // D654: ADCB $5FF9
    cpu.add_b_with_carry(cpu.read_memory(0x5FF9));

    // D657: CLR [A,S]
    // TODO: Complex indexed addressing: [A,S]

    // D659: BVC $D651
    // TODO: Convert BVC $D651

    // D65B: ABX 
    // TODO: Convert ABX 

    // D65C: LDB $4CF6
    cpu.m_b = cpu.read_memory(0x4CF6);

    // D65F: XCLRB 
    // TODO: Convert XCLRB 

    // D660: JSR $D68D
    cpu.call_function(0xD68D);

    // D663: JSR $D690
    cpu.call_function(0xD690);

    // D666: LDD #$C000
    cpu.m_d = 0xC000;

    // D669: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D66B: JSR $D6A0
    cpu.call_function(0xD6A0);

    // D66E: JSR $D6A3
    cpu.call_function(0xD6A3);

    // D671: LDD #$C000
    cpu.m_d = 0xC000;

    // D674: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D676: JSR $D6BC
    cpu.call_function(0xD6BC);

    // D679: JSR $D6BF
    cpu.call_function(0xD6BF);

    // D67C: LDD #$C000
    cpu.m_d = 0xC000;

    // D67F: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D681: JSR $D6E7
    cpu.call_function(0xD6E7);

    // D684: JSR $D6EA
    cpu.call_function(0xD6EA);

    // D687: LDD #$C000
    cpu.m_d = 0xC000;

    // D68A: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D68C: RTS 
    return;

    // D68D: LDU #$0038
    cpu.m_u = 0x0038;

    // D690: JSR $D709
    cpu.call_function(0xD709);

    // D693: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // D695: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D697: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // D699: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D69B: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // D69D: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D69F: RTS 
    return;

    // D6A0: LDU #$0046
    cpu.m_u = 0x0046;

    // D6A3: JSR $D709
    cpu.call_function(0xD709);

    // D6A6: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // D6A8: NEGB 
    cpu.m_b = -cpu.m_b;

    // D6A9: ANDB #$1F
    cpu.m_b &= 0x1F;

    // D6AB: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D6AD: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // D6AF: NEGB 
    cpu.m_b = -cpu.m_b;

    // D6B0: ORB #$E0
    cpu.m_b |= 0xE0;

    // D6B2: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D6B4: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // D6B6: NEGB 
    cpu.m_b = -cpu.m_b;

    // D6B7: ANDB #$1F
    cpu.m_b &= 0x1F;

    // D6B9: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D6BB: RTS 
    return;

    // D6BC: LDU #$0054
    cpu.m_u = 0x0054;

    // D6BF: JSR $D709
    cpu.call_function(0xD709);

    // D6C2: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // D6C4: NEGA 
    cpu.m_a = -cpu.m_a;

    // D6C5: ANDA #$1F
    cpu.m_a &= 0x1F;

    // D6C7: ORA #$40
    cpu.m_a |= 0x40;

    // D6C9: NEGB 
    cpu.m_b = -cpu.m_b;

    // D6CA: ANDB #$1F
    cpu.m_b &= 0x1F;

    // D6CC: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D6CE: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // D6D0: NEGA 
    cpu.m_a = -cpu.m_a;

    // D6D1: ANDA #$1F
    cpu.m_a &= 0x1F;

    // D6D3: ORA #$40
    cpu.m_a |= 0x40;

    // D6D5: NEGB 
    cpu.m_b = -cpu.m_b;

    // D6D6: ORB #$E0
    cpu.m_b |= 0xE0;

    // D6D8: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D6DA: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // D6DC: NEGA 
    cpu.m_a = -cpu.m_a;

    // D6DD: ANDA #$1F
    cpu.m_a &= 0x1F;

    // D6DF: ORA #$40
    cpu.m_a |= 0x40;

    // D6E1: NEGB 
    cpu.m_b = -cpu.m_b;

    // D6E2: ANDB #$1F
    cpu.m_b &= 0x1F;

    // D6E4: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D6E6: RTS 
    return;

    // D6E7: LDU #$0062
    cpu.m_u = 0x0062;

    // D6EA: JSR $D709
    cpu.call_function(0xD709);

    // D6ED: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // D6EF: NEGA 
    cpu.m_a = -cpu.m_a;

    // D6F0: ANDA #$1F
    cpu.m_a &= 0x1F;

    // D6F2: ORA #$40
    cpu.m_a |= 0x40;

    // D6F4: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D6F6: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // D6F8: NEGA 
    cpu.m_a = -cpu.m_a;

    // D6F9: ANDA #$1F
    cpu.m_a &= 0x1F;

    // D6FB: ORA #$40
    cpu.m_a |= 0x40;

    // D6FD: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D6FF: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // D701: NEGA 
    cpu.m_a = -cpu.m_a;

    // D702: ANDA #$1F
    cpu.m_a &= 0x1F;

    // D704: ORA #$40
    cpu.m_a |= 0x40;

    // D706: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D708: RTS 
    return;

    // D709: LDA $4703
    cpu.m_a = cpu.read_memory(0x4703);

    // D70C: ANDA #$0F
    cpu.m_a &= 0x0F;

    // D70E: LDB #$06
    cpu.m_b = 0x06;

    // D710: MUL 
    // TODO: Convert MUL 

    // D711: LDX #$D716
    cpu.m_x = 0xD716;

    // D714: ABX 
    // TODO: Convert ABX 

    // D715: RTS 
    return;

    // D716: XNCA 
    // TODO: Convert XNCA 

    // D717: NEG <$4D
    // TODO: Convert NEG <$4D

    // D719: CMPB -$F,U
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_u - 0x0F));

    // D71B: TFR S,inv
    cpu.m_inv = cpu.m_sp;

    // D71D: NEG <$46
    // TODO: Convert NEG <$46

    // D71F: CMPB -$C,U
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_u - 0x0C));

    // D721: EXG S,B
    // TODO: Convert EXG S,B

    // D723: XNC <$43
    // TODO: Convert XNC <$43

    // D725: CMPB -$C,U
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_u - 0x0C));

    // D727: SEX 
    // TODO: Convert SEX 

    // D728: COMA 
    cpu.m_a = ~cpu.m_a;

    // D729: NEG <$4C
    // TODO: Convert NEG <$4C

    // D72B: ADDD -$F,U
    // TODO: Fix comma operator: ADDD -$F,U

    // D72D: ANDCC #$42
    // TODO: Convert ANDCC #$42

    // D72F: NEG <$48
    // TODO: Convert NEG <$48

    // D731: ANDB -$A,U
    // TODO: Fix comma operator: ANDB -$A,U

    // D733: NOP 
    // NOP;

    // D734: COMA 
    cpu.m_a = ~cpu.m_a;

    // D735: XNC <$48
    // TODO: Convert XNC <$48

    // D737: LDB -$B,U
    // TODO: Fix comma operator: LDB -$B,U

    // D739: X18 
    // TODO: Convert X18 

    // D73A: LSRA 
    cpu.m_a >>= 1;

    // D73B: LSR <$43
    // TODO: Convert LSR <$43

    // D73D: SBCB -$8,U
    // TODO: Fix comma operator: SBCB -$8,U

    // D73F: ORCC #$46
    cpu.m_cc |= 0x46;

    // D741: LSR <$45
    // TODO: Convert LSR <$45

    // D743: ANDB -$B,U
    // TODO: Fix comma operator: ANDB -$B,U

    // D745: LBSR $194A
    // TODO: Convert LBSR $194A

    // D748: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // D749: LDB -$8,U
    // TODO: Fix comma operator: LDB -$8,U

    // D74B: X18 
    // TODO: Convert X18 

    // D74C: LSRA 
    cpu.m_a >>= 1;

    // D74D: LSR <$44
    // TODO: Convert LSR <$44

    // D74F: BITB -$8,U
    // TODO: Convert BITB -$8,U

    // D751: LBRA $1957
    // TODO: Convert LBRA $1957

    // D754: ASLA 
    cpu.m_a <<= 1;

    // D755: LDD -$A,U
    // TODO: Fix comma operator: LDD -$A,U

    // D757: NEGA 
    cpu.m_a = -cpu.m_a;

    // D759: XNC <$45
    // TODO: Convert XNC <$45

    // D75B: ORB -$6,U
    // TODO: Fix comma operator: ORB -$6,U

    // D75D: XHCF 
    // TODO: Convert XHCF 

    // D75E: NEGA 
    cpu.m_a = -cpu.m_a;

    // D75F: COM <$42
    // TODO: Convert COM <$42

    // D761: LDB -$3,U
    // TODO: Fix comma operator: LDB -$3,U

    // D763: LBSR $196E
    // TODO: Convert LBSR $196E

    // D766: NEGA 
    cpu.m_a = -cpu.m_a;

    // D767: ANDB -$3,U
    // TODO: Fix comma operator: ANDB -$3,U

    // D769: XHCF 
    // TODO: Convert XHCF 

    // D76A: NEGA 
    cpu.m_a = -cpu.m_a;

    // D76B: ROR <$41
    // TODO: Convert ROR <$41

    // D76D: LDB -$2,U
    // TODO: Fix comma operator: LDB -$2,U

    // D76F: XHCF 
    // TODO: Convert XHCF 

    // D770: NEGA 
    cpu.m_a = -cpu.m_a;

    // D771: XNC <$41
    // TODO: Convert XNC <$41

    // D773: STD -$1,U
    cpu.write_memory16(cpu.m_u - 0x01, cpu.m_d);

    // D775: LDA $4300
    cpu.m_a = cpu.read_memory(0x4300);

    // D779: ANDA #$0F
    cpu.m_a &= 0x0F;

    // D77B: CMPA #$0F
    cpu.compare_a(0x0F);

    // D77D: BEQ $D783
    if (cpu.zero_flag()) cpu.m_pc = 0xD783;

    // D77F: LDA #$FF
    cpu.m_a = 0xFF;

    // D781: STA <$18
    cpu.write_memory(0x18, cpu.m_a);

    // D783: LDA <$18
    cpu.m_a = cpu.read_memory(0x18);

    // D785: BNE $D788
    if (!cpu.zero_flag()) cpu.m_pc = 0xD788;

    // D787: RTS 
    return;

    // D788: DEC <$18
    cpu.decrement_memory(0x18);

    // D78A: LDA #$12
    cpu.m_a = 0x12;

    // D78C: CMPA <$14
    cpu.compare_a(cpu.read_memory(0x14));

    // D78E: BCC $D792
    if (!cpu.carry_flag()) cpu.m_pc = 0xD792;

    // D790: STA <$14
    cpu.write_memory(0x14, cpu.m_a);

    // D792: LDA <$17
    cpu.m_a = cpu.read_memory(0x17);

    // D794: STA $4681
    cpu.write_memory(0x4681, cpu.m_a);

    // D797: LDB <$16
    cpu.m_b = cpu.read_memory(0x16);

    // D799: STB $4680
    cpu.write_memory(0x4680, cpu.m_b);

    // D79C: ORA <$16
    cpu.m_a |= 0x16;

    // D79E: ORA <$15
    cpu.m_a |= 0x15;

    // D7A0: BEQ $D7A6
    if (cpu.zero_flag()) cpu.m_pc = 0xD7A6;

    // D7A2: LDA #$FF
    cpu.m_a = 0xFF;

    // D7A4: STA <$18
    cpu.write_memory(0x18, cpu.m_a);

    // D7A6: LDA $4300
    cpu.m_a = cpu.read_memory(0x4300);

    // D7A9: ANDA #$10
    cpu.m_a &= 0x10;

    // D7AB: BNE $D7B0
    if (!cpu.zero_flag()) cpu.m_pc = 0xD7B0;

    // D7AD: JMP $D8AE
    goto label_D8AE;

    // D7B0: LDA $4590
    cpu.m_a = cpu.read_memory(0x4590);

    // D7B3: ASLA 
    cpu.m_a <<= 1;

    // D7B4: ASLA 
    cpu.m_a <<= 1;

    // D7B5: ASLA 
    cpu.m_a <<= 1;

    // D7B6: ASLA 
    cpu.m_a <<= 1;

    // D7B7: STA <$09
    cpu.write_memory(0x09, cpu.m_a);

    // D7B9: LDA $4591
    cpu.m_a = cpu.read_memory(0x4591);

    // D7BC: ANDA #$0F
    cpu.m_a &= 0x0F;

    // D7BE: ORA <$09
    cpu.m_a |= 0x09;

    // D7C0: STA <$09
    cpu.write_memory(0x09, cpu.m_a);

    // D7C2: LDA <$0A
    cpu.m_a = cpu.read_memory(0x0A);

    // D7C4: ANDA #$03
    cpu.m_a &= 0x03;

    // D7C6: BNE $D7CB
    if (!cpu.zero_flag()) cpu.m_pc = 0xD7CB;

    // D7C8: JSR $C09D
    cpu.call_function(0xC09D);

    // D7CB: LDX #$480E
    cpu.m_x = 0x480E;

    // D7CE: LDA $4300
    cpu.m_a = cpu.read_memory(0x4300);

    // D7D1: CMPX #$480D
    cpu.compare_x(0x480D);

    // D7D4: BEQ $D7D9
    if (cpu.zero_flag()) cpu.m_pc = 0xD7D9;

    // D7D6: BCC $D7DA
    if (!cpu.carry_flag()) cpu.m_pc = 0xD7DA;

    // D7D8: LSRA 
    cpu.m_a >>= 1;

    // D7D9: LSRA 
    cpu.m_a >>= 1;

    // D7DA: LSRA 
    cpu.m_a >>= 1;

    // D7DB: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // D7DD: ANDA #$1F
    cpu.m_a &= 0x1F;

    // D7DF: BCS $D812
    if (cpu.carry_flag()) cpu.m_pc = 0xD812;

    // D7E1: BEQ $D7EF
    if (cpu.zero_flag()) cpu.m_pc = 0xD7EF;

    // D7E3: CMPA #$1B
    cpu.compare_a(0x1B);

    // D7E5: BCC $D7ED
    if (!cpu.carry_flag()) cpu.m_pc = 0xD7ED;

    // D7E7: LDB <$0A
    cpu.m_b = cpu.read_memory(0x0A);

    // D7E9: ANDB #$01
    cpu.m_b &= 0x01;

    // D7EB: BNE $D7EF
    if (!cpu.zero_flag()) cpu.m_pc = 0xD7EF;

    // D7ED: SUBA #$01
    cpu.m_a -= 0x01;

    label_D7EF:
    // D7EF: STA ,X
    cpu.write_memory(cpu.m_x, cpu.m_a);

    // D7F1: LDA $4300
    cpu.m_a = cpu.read_memory(0x4300);

    // D7F4: ANDA #$08
    cpu.m_a &= 0x08;

    // D7F6: BNE $D7FC
    if (!cpu.zero_flag()) cpu.m_pc = 0xD7FC;

    // D7F8: LDA #$F0
    cpu.m_a = 0xF0;

    // D7FA: STA <$0B
    cpu.write_memory(0x0B, cpu.m_a);

    // D7FC: LDA <$0B
    cpu.m_a = cpu.read_memory(0x0B);

    // D7FE: BEQ $D808
    if (cpu.zero_flag()) cpu.m_pc = 0xD808;

    // D800: DEC <$0B
    cpu.decrement_memory(0x0B);

    // D802: LDA #$00
    cpu.m_a = 0x00;

    // D804: STA ,X
    cpu.write_memory(cpu.m_x, cpu.m_a);

    // D806: STA $3,X
    cpu.write_memory(cpu.m_x + 0x03, cpu.m_a);

    // D808: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // D80A: BEQ $D860
    if (cpu.zero_flag()) cpu.m_pc = 0xD860;

    // D80C: DEC $3,X
    // TODO: Fix comma operator: DEC $3,X

    // D80E: BEQ $D82F
    if (cpu.zero_flag()) cpu.m_pc = 0xD82F;

    // D810: BRA $D860
    goto label_D860;

    // D812: CMPA #$1B
    cpu.compare_a(0x1B);

    // D814: BCC $D81E
    if (!cpu.carry_flag()) cpu.m_pc = 0xD81E;

    // D816: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // D818: ADDA #$20
    cpu.m_a += 0x20;

    // D81A: BCC $D7EF
    if (!cpu.carry_flag()) cpu.m_pc = 0xD7EF;

    // D81C: BNE $D822
    if (!cpu.zero_flag()) cpu.m_pc = 0xD822;

    // D81E: LDA #$1F
    cpu.m_a = 0x1F;

    // D820: BRA $D7EF
    goto label_D7EF;

    // D822: LDA #$1F
    cpu.m_a = 0x1F;

    // D824: STA ,X
    cpu.write_memory(cpu.m_x, cpu.m_a);

    // D826: LDB $3,X
    // TODO: Fix comma operator: LDB $3,X

    // D828: LDA #$78
    cpu.m_a = 0x78;

    // D82A: STA $3,X
    cpu.write_memory(cpu.m_x + 0x03, cpu.m_a);

    // D82C: TSTB 
    cpu.test_b();

    // D82D: BEQ $D860
    if (cpu.zero_flag()) cpu.m_pc = 0xD860;

    // D82F: CLRA 
    cpu.m_a = 0;

    // D830: CMPX #$480D
    cpu.compare_x(0x480D);

    // D833: BCS $D853
    if (cpu.carry_flag()) cpu.m_pc = 0xD853;

    // D835: BEQ $D84B
    if (cpu.zero_flag()) cpu.m_pc = 0xD84B;

    // D837: LDA <$09
    cpu.m_a = cpu.read_memory(0x09);

    // D839: ANDA #$0C
    cpu.m_a &= 0x0C;

    // D83B: LSRA 
    cpu.m_a >>= 1;

    // D83C: LSRA 
    cpu.m_a >>= 1;

    // D83D: BEQ $D853
    if (cpu.zero_flag()) cpu.m_pc = 0xD853;

    // D83F: ADDA #$02
    cpu.m_a += 0x02;

    // D841: BRA $D853
    goto label_D853;

    // D843: STU $0408
    cpu.write_memory16(0x0408, cpu.m_u);

    // D846: ASL <$0A
    cpu.arithmetic_shift_left(0x0A);

    // D848: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // D84B: LDA <$09
    cpu.m_a = cpu.read_memory(0x09);

    // D84D: ANDA #$10
    cpu.m_a &= 0x10;

    // D84F: BEQ $D853
    if (cpu.zero_flag()) cpu.m_pc = 0xD853;

    // D851: LDA #$01
    cpu.m_a = 0x01;

    label_D853:
    // D853: INCA 
    cpu.m_a++;

    // D854: TFR A,B
    cpu.m_b = cpu.m_a;

    // D856: ADDB <$13
    cpu.m_b += 0x13;

    // D858: STB <$13
    cpu.write_memory(0x13, cpu.m_b);

    // D85A: ADDA <$12
    cpu.m_a += 0x12;

    // D85C: STA <$12
    cpu.write_memory(0x12, cpu.m_a);

    // D85E: INC $9,X
    // TODO: Fix comma operator: INC $9,X

    label_D860:
    // D860: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // D862: CMPX #$480C
    cpu.compare_x(0x480C);

    // D865: LBGE $D7CE
    // TODO: Convert LBGE $D7CE

    // D869: LDA <$09
    cpu.m_a = cpu.read_memory(0x09);

    // D86B: LSRA 
    cpu.m_a >>= 1;

    // D86C: LSRA 
    cpu.m_a >>= 1;

    // D86D: LSRA 
    cpu.m_a >>= 1;

    // D86E: LSRA 
    cpu.m_a >>= 1;

    // D86F: LSRA 
    cpu.m_a >>= 1;

    // D870: LDB <$13
    cpu.m_b = cpu.read_memory(0x13);

    // D872: ASLB 
    cpu.m_b <<= 1;

    // D873: LDX #$D843
    cpu.m_x = 0xD843;

    // D876: SUBB A,X
    // TODO: Fix comma operator: SUBB A,X

    // D878: BCS $D88B
    if (cpu.carry_flag()) cpu.m_pc = 0xD88B;

    // D87A: ASL <$13
    cpu.arithmetic_shift_left(0x13);

    // D87C: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // D87D: CMPA #$03
    cpu.compare_a(0x03);

    // D87F: BEQ $D885
    if (cpu.zero_flag()) cpu.m_pc = 0xD885;

    // D881: ADDB #$80
    cpu.m_b += 0x80;

    label_D882:
    // D882: SUBA #$24
    cpu.m_a -= 0x24;

    label_D883:
    // D883: BCC $D889
    if (!cpu.carry_flag()) cpu.m_pc = 0xD889;

    // D884: LSR <$0C
    // TODO: Convert LSR <$0C

    // D885: INC <$12
    cpu.increment_memory(0x12);

    // D886: NOP 
    // NOP;

    // D887: INC <$12
    cpu.increment_memory(0x12);

    // D889: STB <$13
    cpu.write_memory(0x13, cpu.m_b);

    // D88B: LDA <$09
    cpu.m_a = cpu.read_memory(0x09);

    // D88D: ANDA #$03
    cpu.m_a &= 0x03;

    // D88F: BEQ $D8AC
    if (cpu.zero_flag()) cpu.m_pc = 0xD8AC;

    // D891: TFR A,B
    cpu.m_b = cpu.m_a;

    // D893: NEGA 
    cpu.m_a = -cpu.m_a;

    // D894: ASRA 
    // TODO: Convert ASRA 

    // D895: ADDA <$12
    cpu.m_a += 0x12;

    // D897: BPL $D8A4
    if (!cpu.negative_flag()) cpu.m_pc = 0xD8A4;

    // D899: TST <$13
    // TODO: Convert TST <$13

    // D89B: BPL $D8AE
    if (!cpu.negative_flag()) cpu.m_pc = 0xD8AE;

    // D89D: INCA 
    cpu.m_a++;

    // D89E: BMI $D8AE
    if (cpu.negative_flag()) cpu.m_pc = 0xD8AE;

    // D8A0: ASL <$13
    cpu.arithmetic_shift_left(0x13);

    // D8A2: LSR <$13
    // TODO: Convert LSR <$13

    // D8A4: CMPB #$01
    cpu.compare_b(0x01);

    // D8A6: BNE $D8AA
    if (!cpu.zero_flag()) cpu.m_pc = 0xD8AA;

    // D8A8: INC <$14
    cpu.increment_memory(0x14);

    // D8AA: INC <$14
    cpu.increment_memory(0x14);

    // D8AC: STA <$12
    cpu.write_memory(0x12, cpu.m_a);

    label_D8AE:
    // D8AE: LDB <$0A
    cpu.m_b = cpu.read_memory(0x0A);

    // D8B0: ANDB #$0F
    cpu.m_b &= 0x0F;

    // D8B2: BNE $D8DE
    if (!cpu.zero_flag()) cpu.m_pc = 0xD8DE;

    // D8B4: LDX #$4817
    cpu.m_x = 0x4817;

    // D8B7: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // D8B9: BPL $D8C0
    if (!cpu.negative_flag()) cpu.m_pc = 0xD8C0;

    // D8BB: ANDA #$7F
    cpu.m_a &= 0x7F;

    // D8BD: INCB 
    cpu.m_b++;

    // D8BE: STA ,X
    cpu.write_memory(cpu.m_x, cpu.m_a);

    // D8C0: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // D8C2: CMPX #$4815
    cpu.compare_x(0x4815);

    // D8C5: BGE $D8B7
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xD8B7;

    // D8C7: TSTB 
    cpu.test_b();

    // D8C8: BNE $D8DE
    if (!cpu.zero_flag()) cpu.m_pc = 0xD8DE;

    // D8CA: LDX #$4817
    cpu.m_x = 0x4817;

    // D8CD: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // D8CF: BEQ $D8D7
    if (cpu.zero_flag()) cpu.m_pc = 0xD8D7;

    // D8D1: ADDA #$7F
    cpu.m_a += 0x7F;

    // D8D3: STA ,X
    cpu.write_memory(cpu.m_x, cpu.m_a);

    // D8D5: BRA $D8DE
    goto label_D8DE;

    // D8D7: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // D8D9: CMPX #$4815
    cpu.compare_x(0x4815);

    // D8DC: BGE $D8CD
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xD8CD;

    label_D8DE:
    // D8DE: RTS 
    return;

    label_D8DF:
    // D8DF: JMP $d8df
    goto label_D8DF;

    // D8E2: CMPX $4AD9
    cpu.compare_x(cpu.read_memory16(0x4AD9));

    // D8E5: BCC $D8F1
    if (!cpu.carry_flag()) cpu.m_pc = 0xD8F1;

    // D8E7: CMPA ,X+
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_x));

    // D8E9: BNE $D8EC
    if (!cpu.zero_flag()) cpu.m_pc = 0xD8EC;

    // D8EB: RTS 
    return;

    // D8EC: CMPX $4AD9
    cpu.compare_x(cpu.read_memory16(0x4AD9));

    // D8EF: BCS $D8E7
    if (cpu.carry_flag()) cpu.m_pc = 0xD8E7;

    // D8F1: STA ,X+
    cpu.write_memory(cpu.m_x, cpu.m_a);
    cpu.m_x++;

    // D8F3: STX $4AD9
    cpu.write_memory16(0x4AD9, cpu.m_x);

    // D8F6: RTS 
    return;

    // D8FA: CMPA ,X
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_x));

    // D8FC: BNE $D912
    if (!cpu.zero_flag()) cpu.m_pc = 0xD912;

    // D8FE: LDU $4AD9
    cpu.m_u = cpu.read_memory16(0x4AD9);

    // D901: CMPU #$4A52
    cpu.execute_cmpu_immediate(0x4A52);

    // D905: BLS $D912
    // TODO: Convert BLS $D912

    // D907: LEAU -$1,U
    // TODO: Fix comma operator: LEAU -$1,U

    // D909: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // D90B: STA ,X
    cpu.write_memory(cpu.m_x, cpu.m_a);

    // D90D: STU $4AD9
    cpu.write_memory16(0x4AD9, cpu.m_u);

    // D910: LEAX ,U
    // TODO: Complex indexed addressing: ,U

    label_D912:
    // D912: JMP $d912
    goto label_D912;

    // D914: CMPX $4AD9
    cpu.compare_x(cpu.read_memory16(0x4AD9));

    // D917: BCS $D8FA
    if (cpu.carry_flag()) cpu.m_pc = 0xD8FA;

    // D919: RTS 
    return;

    // D91A: LDX #$4A52
    cpu.m_x = 0x4A52;

    // D91D: CLR ,X
    // TODO: Complex indexed addressing: ,X

    // D91F: STX $4AD9
    cpu.write_memory16(0x4AD9, cpu.m_x);

    // D922: RTS 
    return;

    // D923: LDU #$4A52
    cpu.m_u = 0x4A52;

    // D926: CMPU $4AD9
    cpu.execute_cmpu_immediate(0x4AD9);

    // D92A: BCC $D941
    if (!cpu.carry_flag()) cpu.m_pc = 0xD941;

    // D92C: LDB ,U+
    // TODO: Complex indexed addressing: ,U+

    // D92E: CMPB #$D6
    cpu.compare_b(0xD6);

    // D930: BCC $D93B
    if (!cpu.carry_flag()) cpu.m_pc = 0xD93B;

    // D932: STB $48AE
    cpu.write_memory(0x48AE, cpu.m_b);

    // D935: JSR $E7DD
    cpu.call_function(0xE7DD);

    // D938: JSR $E7FC
    cpu.call_function(0xE7FC);

    // D93B: CMPU $4AD9
    cpu.execute_cmpu_immediate(0x4AD9);

    // D93F: BCS $D92C
    if (cpu.carry_flag()) cpu.m_pc = 0xD92C;

    label_D941:
    // D941: JMP $d941
    goto label_D941;

    // D942: LDU #$4A52
    cpu.m_u = 0x4A52;

    // D945: CMPU $4AD9
    cpu.execute_cmpu_immediate(0x4AD9);

    // D949: BCC $D95D
    if (!cpu.carry_flag()) cpu.m_pc = 0xD95D;

    // D94B: LDB ,U+
    // TODO: Complex indexed addressing: ,U+

    // D94D: CMPB #$D6
    cpu.compare_b(0xD6);

    // D94F: BCC $D957
    if (!cpu.carry_flag()) cpu.m_pc = 0xD957;

    // D951: STB $48AE
    cpu.write_memory(0x48AE, cpu.m_b);

    // D954: JSR $E7FC
    cpu.call_function(0xE7FC);

    // D957: CMPU $4AD9
    cpu.execute_cmpu_immediate(0x4AD9);

    // D95B: BCS $D94B
    if (cpu.carry_flag()) cpu.m_pc = 0xD94B;

    label_D95D:
    // D95D: JMP $d95d
    goto label_D95D;

    // D95E: LDU $4ADD
    cpu.m_u = cpu.read_memory16(0x4ADD);

    // D961: STA ,U+
    cpu.write_memory(cpu.m_u, cpu.m_a);
    cpu.m_u++;

    // D963: LDD #$0000
    cpu.m_d = 0x0000;

    // D966: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D968: LDD #$0100
    cpu.m_d = 0x0100;

    // D96B: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // D96D: STU $4ADD
    cpu.write_memory16(0x4ADD, cpu.m_u);

    // D970: RTS 
    return;

    // D971: LDU #$4A66
    cpu.m_u = 0x4A66;

    // D974: CMPA ,U
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_u));

    // D976: BNE $D97C
    if (!cpu.zero_flag()) cpu.m_pc = 0xD97C;

    // D978: LDA #$00
    cpu.m_a = 0x00;

    // D97A: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // D97C: LEAU $5,U
    // TODO: Fix comma operator: LEAU $5,U

    // D97E: CMPU $4ADD
    cpu.execute_cmpu_immediate(0x4ADD);

    // D982: BCS $D974
    if (cpu.carry_flag()) cpu.m_pc = 0xD974;

    // D984: RTS 
    return;

    // D985: LDU #$4A66
    cpu.m_u = 0x4A66;

    // D988: CMPU $4ADD
    cpu.execute_cmpu_immediate(0x4ADD);

    // D98C: BCC $D9DB
    if (!cpu.carry_flag()) cpu.m_pc = 0xD9DB;

    // D98E: LDD #$7200
    cpu.m_d = 0x7200;

    // D991: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // D993: LDA ,U+
    // TODO: Complex indexed addressing: ,U+

    // D995: BEQ $D9D3
    if (cpu.zero_flag()) cpu.m_pc = 0xD9D3;

    // D997: STA $48AE
    cpu.write_memory(0x48AE, cpu.m_a);

    // D99A: LDD #$0198
    cpu.m_d = 0x0198;

    // D99D: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // D99F: LDD #$0000
    cpu.m_d = 0x0000;

    // D9A2: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // D9A4: LDB ,U
    // TODO: Complex indexed addressing: ,U

    // D9A6: LDA #$71
    cpu.m_a = 0x71;

    // D9A8: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // D9AA: COMB 
    cpu.m_b = ~cpu.m_b;

    // D9AB: ADDB #$10
    cpu.m_b += 0x10;

    // D9AD: LDA #$62
    cpu.m_a = 0x62;

    // D9AF: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // D9B1: LDX #$E99E
    cpu.m_x = 0xE99E;

    // D9B4: LDB $48AE
    cpu.m_b = cpu.read_memory(0x48AE);

    // D9B7: ABX 
    // TODO: Convert ABX 

    // D9B8: ABX 
    // TODO: Convert ABX 

    // D9B9: LDD #$1DD0
    cpu.m_d = 0x1DD0;

    // D9BC: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // D9BE: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // D9C0: ANDA #$1F
    cpu.m_a &= 0x1F;

    // D9C2: ORA #$00
    cpu.m_a |= 0x00;

    // D9C4: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // D9C6: JSR $E821
    cpu.call_function(0xE821);

    // D9C9: LDD #$7200
    cpu.m_d = 0x7200;

    // D9CC: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // D9CE: LDD #$8040
    cpu.m_d = 0x8040;

    // D9D1: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // D9D3: LEAU $4,U
    // TODO: Fix comma operator: LEAU $4,U

    // D9D5: CMPU $4ADD
    cpu.execute_cmpu_immediate(0x4ADD);

    // D9D9: BCS $D993
    if (cpu.carry_flag()) cpu.m_pc = 0xD993;

    // D9DB: RTS 
    return;

    // D9DC: LDD #$0000
    cpu.m_d = 0x0000;

    // D9DF: STD $4AE4
    cpu.write_memory16(0x4AE4, cpu.m_d);

    // D9E2: LDD #$6018
    cpu.m_d = 0x6018;

    // D9E5: STD $4AE6
    cpu.write_memory16(0x4AE6, cpu.m_d);

    // D9E8: LDD #$4A66
    cpu.m_d = 0x4A66;

    // D9EB: STD $4ADD
    cpu.write_memory16(0x4ADD, cpu.m_d);

    // D9EE: LDD $DB2F
    cpu.m_d = cpu.read_memory16(0xDB2F);

    // D9F1: STD $4AE2
    cpu.write_memory16(0x4AE2, cpu.m_d);

    // D9F4: LDA #$51
    cpu.m_a = 0x51;

    // D9F6: STA $4ADF
    cpu.write_memory(0x4ADF, cpu.m_a);

    // D9F9: RTS 
    return;

    // D9FA: LDD $4AE4
    cpu.m_d = cpu.read_memory16(0x4AE4);

    // D9FD: ADDD #$0001
    cpu.m_d += 0x0001;

    // DA00: STD $4AE4
    cpu.write_memory16(0x4AE4, cpu.m_d);

    // DA03: CMPD #$00F8
    cpu.execute_cmpd_immediate(0x00F8);

    // DA07: LBCC $DA94
    // TODO: Convert LBCC $DA94

    // DA0B: CMPD #$0040
    cpu.execute_cmpd_immediate(0x0040);

    // DA0F: BCC $DA1E
    if (!cpu.carry_flag()) cpu.m_pc = 0xDA1E;

    // DA11: LDD $4AE6
    cpu.m_d = cpu.read_memory16(0x4AE6);

    // DA14: ADDB #$03
    cpu.m_b += 0x03;

    // DA16: STD $4AE6
    cpu.write_memory16(0x4AE6, cpu.m_d);

    // DA19: LDD #$0040
    cpu.m_d = 0x0040;

    // DA1C: BRA $DA2A
    goto label_DA2A;

    // DA1E: LDD $4AE4
    cpu.m_d = cpu.read_memory16(0x4AE4);

    // DA21: COMB 
    cpu.m_b = ~cpu.m_b;

    // DA22: ADDB #$18
    cpu.m_b += 0x18;

    // DA24: STD $4AE6
    cpu.write_memory16(0x4AE6, cpu.m_d);

    // DA27: LDD $4AE4
    cpu.m_d = cpu.read_memory16(0x4AE4);

    label_DA2A:
    // DA2A: ORA #$73
    cpu.m_a |= 0x73;

    // DA2C: STD $4AE8
    cpu.write_memory16(0x4AE8, cpu.m_d);

    // DA2F: LDD $4AE6
    cpu.m_d = cpu.read_memory16(0x4AE6);

    // DA32: ORA #$61
    cpu.m_a |= 0x61;

    // DA34: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // DA36: LDD #$0198
    cpu.m_d = 0x0198;

    // DA39: STD ,Y
    cpu.write_memory16(cpu.m_y, cpu.m_d);

    // DA3B: STD $8,Y
    cpu.write_memory16(cpu.m_y + 0x08, cpu.m_d);

    // DA3D: STD $10,Y
    cpu.write_memory16(cpu.m_y + 0x10, cpu.m_d);

    // DA40: STD $18,Y
    cpu.write_memory16(cpu.m_y + 0x18, cpu.m_d);

    // DA43: STD $20,Y
    cpu.write_memory16(cpu.m_y + 0x20, cpu.m_d);

    // DA46: STD $28,Y
    cpu.write_memory16(cpu.m_y + 0x28, cpu.m_d);

    // DA49: LDD #$0000
    cpu.m_d = 0x0000;

    // DA4C: STD $2,Y
    cpu.write_memory16(cpu.m_y + 0x02, cpu.m_d);

    // DA4E: STD $A,Y
    cpu.write_memory16(cpu.m_y + 0x0A, cpu.m_d);

    // DA50: STD $12,Y
    cpu.write_memory16(cpu.m_y + 0x12, cpu.m_d);

    // DA53: STD $1A,Y
    cpu.write_memory16(cpu.m_y + 0x1A, cpu.m_d);

    // DA56: STD $22,Y
    cpu.write_memory16(cpu.m_y + 0x22, cpu.m_d);

    // DA59: STD $2A,Y
    cpu.write_memory16(cpu.m_y + 0x2A, cpu.m_d);

    // DA5C: LDD $4AE8
    cpu.m_d = cpu.read_memory16(0x4AE8);

    // DA5F: STD $4,Y
    cpu.write_memory16(cpu.m_y + 0x04, cpu.m_d);

    // DA61: STD $C,Y
    cpu.write_memory16(cpu.m_y + 0x0C, cpu.m_d);

    // DA63: STD $14,Y
    cpu.write_memory16(cpu.m_y + 0x14, cpu.m_d);

    // DA66: STD $1C,Y
    cpu.write_memory16(cpu.m_y + 0x1C, cpu.m_d);

    // DA69: STD $24,Y
    cpu.write_memory16(cpu.m_y + 0x24, cpu.m_d);

    // DA6C: STD $2C,Y
    cpu.write_memory16(cpu.m_y + 0x2C, cpu.m_d);

    // DA6F: LDD #$B400
    cpu.m_d = 0xB400;

    // DA72: STD $6,Y
    cpu.write_memory16(cpu.m_y + 0x06, cpu.m_d);

    // DA74: LDD #$B434
    cpu.m_d = 0xB434;

    // DA77: STD $E,Y
    cpu.write_memory16(cpu.m_y + 0x0E, cpu.m_d);

    // DA79: LDD #$B458
    cpu.m_d = 0xB458;

    // DA7C: STD $16,Y
    cpu.write_memory16(cpu.m_y + 0x16, cpu.m_d);

    // DA7F: LDD #$B488
    cpu.m_d = 0xB488;

    // DA82: STD $1E,Y
    cpu.write_memory16(cpu.m_y + 0x1E, cpu.m_d);

    // DA85: LDD #$B4AE
    cpu.m_d = 0xB4AE;

    // DA88: STD $26,Y
    cpu.write_memory16(cpu.m_y + 0x26, cpu.m_d);

    // DA8B: LDD #$B4D2
    cpu.m_d = 0xB4D2;

    // DA8E: STD $2E,Y
    cpu.write_memory16(cpu.m_y + 0x2E, cpu.m_d);

    // DA91: LEAY $30,Y
    // TODO: Fix comma operator: LEAY $30,Y

    // DA94: LDX #$4A66
    cpu.m_x = 0x4A66;

    // DA97: CMPX $4ADD
    cpu.compare_x(cpu.read_memory16(0x4ADD));

    // DA9A: BCC $DAF5
    if (!cpu.carry_flag()) cpu.m_pc = 0xDAF5;

    // DA9C: LDD $4AE4
    cpu.m_d = cpu.read_memory16(0x4AE4);

    // DA9F: CMPD #$00E0
    cpu.execute_cmpd_immediate(0x00E0);

    // DAA3: BCC $DAB3
    if (!cpu.carry_flag()) cpu.m_pc = 0xDAB3;

    // DAA5: CMPD #$0040
    cpu.execute_cmpd_immediate(0x0040);

    // DAA9: BCS $DAB1
    if (cpu.carry_flag()) cpu.m_pc = 0xDAB1;

    // DAAB: LDD $1,X
    // TODO: Fix comma operator: LDD $1,X

    // DAAD: ADDD $3,X
    // TODO: Fix comma operator: ADDD $3,X

    // DAAF: STD $1,X
    cpu.write_memory16(cpu.m_x + 0x01, cpu.m_d);

    // DAB1: BRA $DAEE
    goto label_DAEE;

    // DAB3: CMPD #$0160
    cpu.execute_cmpd_immediate(0x0160);

    // DAB7: BCC $DAC1
    if (!cpu.carry_flag()) cpu.m_pc = 0xDAC1;

    // DAB9: LDD #$0400
    cpu.m_d = 0x0400;

    // DABC: STD $4A69
    cpu.write_memory16(0x4A69, cpu.m_d);

    // DABF: BRA $DAEE
    goto label_DAEE;

    // DAC1: LDD $1,X
    // TODO: Fix comma operator: LDD $1,X

    // DAC3: ADDD $3,X
    // TODO: Fix comma operator: ADDD $3,X

    // DAC5: STD $1,X
    cpu.write_memory16(cpu.m_x + 0x01, cpu.m_d);

    // DAC7: CMPD #$F000
    cpu.execute_cmpd_immediate(0xF000);

    // DACB: BCS $DAEE
    if (cpu.carry_flag()) cpu.m_pc = 0xDAEE;

    // DACD: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // DACF: INCA 
    cpu.m_a++;

    // DAD0: LDU #$4A66
    cpu.m_u = 0x4A66;

    // DAD3: CMPA ,U
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_u));

    // DAD5: BNE $DADF
    if (!cpu.zero_flag()) cpu.m_pc = 0xDADF;

    // DAD7: LDD #$0400
    cpu.m_d = 0x0400;

    // DADA: STD $3,U
    cpu.write_memory16(cpu.m_u + 0x03, cpu.m_d);

    // DADC: LDU $4ADD
    cpu.m_u = cpu.read_memory16(0x4ADD);

    // DADF: LEAU $5,U
    // TODO: Fix comma operator: LEAU $5,U

    // DAE1: CMPU $4ADD
    cpu.execute_cmpu_immediate(0x4ADD);

    // DAE5: BCS $DAD3
    if (cpu.carry_flag()) cpu.m_pc = 0xDAD3;

    // DAE7: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // DAE9: JSR $D971
    cpu.call_function(0xD971);

    // DAEC: LEAX -$5,X
    // TODO: Fix comma operator: LEAX -$5,X

    label_DAEE:
    // DAEE: LEAX $5,X
    // TODO: Fix comma operator: LEAX $5,X

    // DAF0: CMPX $4ADD
    cpu.compare_x(cpu.read_memory16(0x4ADD));

    // DAF3: BCS $DA9C
    if (cpu.carry_flag()) cpu.m_pc = 0xDA9C;

    label_DAF5:
    // DAF5: JMP $daf5
    goto label_DAF5;

    // DAF8: CMPD #$0200
    cpu.execute_cmpd_immediate(0x0200);

    // DAFC: BCS $DB03
    if (cpu.carry_flag()) cpu.m_pc = 0xDB03;

    // DAFE: LDA #$07
    cpu.m_a = 0x07;

    // DB00: STA $4841
    cpu.write_memory(0x4841, cpu.m_a);

    // DB03: CMPD $4AE2
    cpu.execute_cmpd_immediate(0x4AE2);

    // DB07: BCS $DB2E
    if (cpu.carry_flag()) cpu.m_pc = 0xDB2E;

    // DB09: LDA $4ADF
    cpu.m_a = cpu.read_memory(0x4ADF);

    // DB0C: JSR $D95E
    cpu.call_function(0xD95E);

    // DB0F: LDA $4ADF
    cpu.m_a = cpu.read_memory(0x4ADF);

    // DB12: INCA 
    cpu.m_a++;

    // DB13: CMPA #$59
    cpu.compare_a(0x59);

    // DB15: BCS $DB1F
    if (cpu.carry_flag()) cpu.m_pc = 0xDB1F;

    // DB17: LDD #$FFFF
    cpu.m_d = 0xFFFF;

    // DB1A: STD $4AE2
    cpu.write_memory16(0x4AE2, cpu.m_d);

    // DB1D: BRA $DB2E
    goto label_DB2E;

    // DB1F: STA $4ADF
    cpu.write_memory(0x4ADF, cpu.m_a);

    // DB22: LDX #$DA8D
    cpu.m_x = 0xDA8D;

    // DB25: TFR A,B
    cpu.m_b = cpu.m_a;

    // DB27: ABX 
    // TODO: Convert ABX 

    // DB28: ABX 
    // TODO: Convert ABX 

    // DB29: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // DB2B: STD $4AE2
    cpu.write_memory16(0x4AE2, cpu.m_d);

    label_DB2E:
    // DB2E: RTS 
    return;

    // DB2F: NEG <$41
    // TODO: Convert NEG <$41

    // DB31: NEG <$50
    // TODO: Convert NEG <$50

    // DB33: NEG <$60
    // TODO: Convert NEG <$60

    // DB35: NEG <$70
    // TODO: Convert NEG <$70

    // DB37: NEG <$80
    // TODO: Convert NEG <$80

    // DB39: NEG <$90
    // TODO: Convert NEG <$90

    // DB3B: NEG <$A0
    // TODO: Convert NEG <$A0

    // DB3D: NEG <$B8
    // TODO: Convert NEG <$B8

    // DB3F: COMB 
    cpu.m_b = ~cpu.m_b;

    // DB40: LSRB 
    cpu.m_b >>= 1;

    // DB41: NEGA 
    cpu.m_a = -cpu.m_a;

    // DB42: XNCB 
    // TODO: Convert XNCB 

    // DB43: BRA $DB9C
    goto label_DB9C;

    // DB45: NEGA 
    cpu.m_a = -cpu.m_a;

    // DB46: XNCB 
    // TODO: Convert XNCB 

    // DB47: ADDD <$40
    cpu.m_d += 0x40;

    // DB49: BRA $DB7C
    goto label_DB7C;

    // DB4B: RTS 
    return;

    // DB4C: XANDCC #$33
    // TODO: Convert XANDCC #$33

    // DB4E: BRA $DB9C
    goto label_DB9C;

    // DB50: LSRB 
    cpu.m_b >>= 1;

    // DB51: COMA 
    cpu.m_a = ~cpu.m_a;

    // DB52: NEGA 
    cpu.m_a = -cpu.m_a;

    // DB53: COMB 
    cpu.m_b = ~cpu.m_b;

    // DB54: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // DB55: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DB56: INCA 
    cpu.m_a++;

    // DB57: TSTA 
    cpu.test_a();

    // DB58: BRA $DBA6
    goto label_DBA6;

    // DB5A: LSRB 
    cpu.m_b >>= 1;

    // DB5B: LSRA 
    cpu.m_a >>= 1;

    // DB5C: BGT $DB7E
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xDB7E;

    // DB5E: NEGA 
    cpu.m_a = -cpu.m_a;

    // DB5F: XCLRA 
    // TODO: Convert XCLRA 

    // DB60: LSRA 
    cpu.m_a >>= 1;

    // DB61: BRA $DBA4
    goto label_DBA4;

    // DB63: LSRB 
    cpu.m_b >>= 1;

    // DB64: NEGA 
    cpu.m_a = -cpu.m_a;

    // DB65: XNCB 
    // TODO: Convert XNCB 

    // DB66: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DB67: BGE $DBB2
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xDBB2;

    // DB69: XCLRA 
    // TODO: Convert XCLRA 

    // DB6A: COMA 
    cpu.m_a = ~cpu.m_a;

    // DB6B: LDX $1,U
    // TODO: Fix comma operator: LDX $1,U

    // DB6D: INCA 
    cpu.m_a++;

    // DB6E: INCA 
    cpu.m_a++;

    // DB6F: BRA $DBC3
    goto label_DBC3;

    // DB71: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DB72: ASRA 
    // TODO: Convert ASRA 

    // DB73: ASLA 
    cpu.m_a <<= 1;

    // DB74: LSRB 
    cpu.m_b >>= 1;

    // DB75: COMB 
    cpu.m_b = ~cpu.m_b;

    // DB76: BRA $DBCA
    goto label_DBCA;

    // DB78: LSRA 
    cpu.m_a >>= 1;

    // DB79: COMB 
    cpu.m_b = ~cpu.m_b;

    // DB7A: LSRA 
    cpu.m_a >>= 1;

    // DB7B: XNCB 
    // TODO: Convert XNCB 

    label_DB7C:
    // DB7C: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // DB7D: LSRA 
    cpu.m_a >>= 1;

    // DB7E: LSRA 
    cpu.m_a >>= 1;

    // DB7F: LDX $C,U
    // TODO: Fix comma operator: LDX $C,U

    // DB81: LSRB 
    cpu.m_b >>= 1;

    // DB82: COMA 
    cpu.m_a = ~cpu.m_a;

    // DB83: NEGA 
    cpu.m_a = -cpu.m_a;

    // DB84: COMB 
    cpu.m_b = ~cpu.m_b;

    // DB85: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // DB86: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DB87: INCA 
    cpu.m_a++;

    // DB88: TSTA 
    cpu.test_a();

    // DB89: BRA $DBDF
    goto label_DBDF;

    // DB8B: XNCB 
    // TODO: Convert XNCB 

    // DB8C: NEGA 
    cpu.m_a = -cpu.m_a;

    // DB8D: LSRA 
    cpu.m_a >>= 1;

    // DB8E: LSRA 
    cpu.m_a >>= 1;

    // DB8F: TSTA 
    cpu.test_a();

    // DB90: NEGA 
    cpu.m_a = -cpu.m_a;

    // DB91: XNCB 
    // TODO: Convert XNCB 

    // DB92: XDECA 
    cpu.m_a--;

    // DB93: COMB 
    cpu.m_b = ~cpu.m_b;

    // DB94: BRA $DBEB
    // TODO: External jump to 0xDBEB - not implemented

    // DB96: COMB 
    cpu.m_b = ~cpu.m_b;

    // DB97: LSRA 
    cpu.m_a >>= 1;

    // DB98: LSRA 
    cpu.m_a >>= 1;

    // DB99: BRA $DBF0
    goto label_DBF0;

    // DB9B: XCLRA 
    // TODO: Convert XCLRA 

    label_DB9C:
    // DB9C: LSRA 
    cpu.m_a >>= 1;

    // DB9D: LSRA 
    cpu.m_a >>= 1;

    // DB9E: XNCB 
    // TODO: Convert XNCB 

    // DB9F: BRA $DBED
    goto label_DBED;

    // DBA1: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DBA2: COMA 
    cpu.m_a = ~cpu.m_a;

    // DBA3: LSRA 
    cpu.m_a >>= 1;

    label_DBA4:
    // DBA4: XCLRA 
    // TODO: Convert XCLRA 

    // DBA5: COMB 
    cpu.m_b = ~cpu.m_b;

    label_DBA6:
    // DBA6: LSRA 
    cpu.m_a >>= 1;

    // DBA7: LDX $7,U
    // TODO: Fix comma operator: LDX $7,U

    // DBA9: NEGA 
    cpu.m_a = -cpu.m_a;

    // DBAA: TSTA 
    cpu.test_a();

    // DBAB: LSRA 
    cpu.m_a >>= 1;

    // DBAC: BRA $DBFD
    goto label_DBFD;

    // DBAE: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // DBAF: LSRA 
    cpu.m_a >>= 1;

    // DBB0: SBCB <$49
    cpu.sub_b_with_carry(0x49);

    // DBB2: XCLRA 
    // TODO: Convert XCLRA 

    // DBB3: COMB 
    cpu.m_b = ~cpu.m_b;

    // DBB4: LSRA 
    cpu.m_a >>= 1;

    // DBB5: XNCB 
    // TODO: Convert XNCB 

    // DBB6: LSRB 
    cpu.m_b >>= 1;

    // DBB7: BRA $DBFC
    // TODO: External jump to 0xDBFC - not implemented

    // DBB9: CLRA 
    cpu.m_a = 0;

    // DBBA: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DBBB: XCLRA 
    // TODO: Convert XCLRA 

    // DBBC: ADDD <$46
    cpu.m_d += 0x46;

    // DBBE: XNCB 
    // TODO: Convert XNCB 

    // DBBF: LSRA 
    cpu.m_a >>= 1;

    // DBC0: LSRA 
    cpu.m_a >>= 1;

    // DBC1: BRA $DC13
    goto label_DC13;

    label_DBC3:
    // DBC3: INCA 
    cpu.m_a++;

    // DBC4: NEGA 
    cpu.m_a = -cpu.m_a;

    // DBC5: ADCB <$32
    cpu.add_b_with_carry(0x32);

    // DBC7: BRA $DC19
    goto label_DC19;

    // DBC9: INCA 
    cpu.m_a++;

    label_DBCA:
    // DBCA: NEGA 
    cpu.m_a = -cpu.m_a;

    // DBCB: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // DBCC: COMB 
    cpu.m_b = ~cpu.m_b;

    // DBCD: BRA $DC00
    goto label_DC00;

    // DBCF: BRA $DC14
    goto label_DC14;

    // DBD1: CLRA 
    cpu.m_a = 0;

    // DBD2: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DBD3: LDU #$3120
    cpu.m_u = 0x3120;

    // DBD6: COMA 
    cpu.m_a = ~cpu.m_a;

    // DBD7: CLRA 
    cpu.m_a = 0;

    // DBD8: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DBD9: XCLRA 
    // TODO: Convert XCLRA 

    // DBDA: BRA $DC0D
    goto label_DC0D;

    // DBDC: BRA $DC2E
    goto label_DC2E;

    // DBDE: INCA 
    cpu.m_a++;

    label_DBDF:
    // DBDF: NEGA 
    cpu.m_a = -cpu.m_a;

    // DBE0: ADCB <$32
    cpu.add_b_with_carry(0x32);

    // DBE2: BRA $DC27
    goto label_DC27;

    // DBE4: CLRA 
    cpu.m_a = 0;

    // DBE5: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DBE6: XCLRA 
    // TODO: Convert XCLRA 

    // DBE7: COMB 
    cpu.m_b = ~cpu.m_b;

    // DBE8: BRA $DC1B
    goto label_DC1B;

    // DBEA: BRA $DC3C
    goto label_DC3C;

    // DBEC: INCA 
    cpu.m_a++;

    label_DBED:
    // DBED: NEGA 
    cpu.m_a = -cpu.m_a;

    // DBEE: ADCB <$50
    cpu.add_b_with_carry(0x50);

    label_DBF0:
    // DBF0: LSRB 
    cpu.m_b >>= 1;

    // DBF1: INCA 
    cpu.m_a++;

    // DBF2: INCA 
    cpu.m_a++;

    // DBF3: BRA $DC49
    goto label_DC49;

    // DBF5: XNCB 
    // TODO: Convert XNCB 

    // DBF6: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DBF7: ASRA 
    // TODO: Convert ASRA 

    // DBF8: ASRA 
    // TODO: Convert ASRA 

    // DBF9: LSRA 
    cpu.m_a >>= 1;

    // DBFA: XNCB 
    // TODO: Convert XNCB 

    // DBFB: BRA $DC51
    goto label_DC51;

    label_DBFD:
    // DBFD: CLRA 
    cpu.m_a = 0;

    // DBFE: BRA $DC53
    goto label_DC53;

    label_DC00:
    // DC00: LSRB 
    cpu.m_b >>= 1;

    // DC01: NEGA 
    cpu.m_a = -cpu.m_a;

    // DC02: XNCB 
    // TODO: Convert XNCB 

    // DC03: ANDB <$43
    cpu.m_b &= 0x43;

    // DC05: XNCB 
    // TODO: Convert XNCB 

    // DC06: LSRA 
    cpu.m_a >>= 1;

    // DC07: LSRA 
    cpu.m_a >>= 1;

    // DC08: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DC09: LSRB 
    cpu.m_b >>= 1;

    // DC0A: ADDD <$43
    cpu.m_d += 0x43;

    // DC0C: XNCB 
    // TODO: Convert XNCB 

    label_DC0D:
    // DC0D: LSRA 
    cpu.m_a >>= 1;

    // DC0E: LSRA 
    cpu.m_a >>= 1;

    // DC0F: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DC10: ANDB <$53
    cpu.m_b &= 0x53;

    // DC12: ASLA 
    cpu.m_a <<= 1;

    label_DC13:
    // DC13: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    label_DC14:
    // DC14: LSRA 
    cpu.m_a >>= 1;

    // DC15: INCA 
    cpu.m_a++;

    // DC16: LSRA 
    cpu.m_a >>= 1;

    // DC17: BRA $DC60
    goto label_DC60;

    label_DC19:
    // DC19: CLRA 
    cpu.m_a = 0;

    // DC1A: XCLRA 
    // TODO: Convert XCLRA 

    label_DC1B:
    // DC1B: BITB #$46
    // TODO: Convert BITB #$46

    // DC1D: INCA 
    cpu.m_a++;

    // DC1E: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DC1F: ASRA 
    // TODO: Convert ASRA 

    // DC20: ASLA 
    cpu.m_a <<= 1;

    // DC21: LSRB 
    cpu.m_b >>= 1;

    // DC22: BRA $DC6D
    goto label_DC6D;

    // DC24: XCLRA 
    // TODO: Convert XCLRA 

    // DC25: COMB 
    cpu.m_b = ~cpu.m_b;

    // DC26: LSRB 
    cpu.m_b >>= 1;

    label_DC27:
    // DC27: XNCB 
    // TODO: Convert XNCB 

    // DC28: LSRB 
    cpu.m_b >>= 1;

    // DC29: COMA 
    cpu.m_a = ~cpu.m_a;

    // DC2A: LSRB 
    cpu.m_b >>= 1;

    // DC2B: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DC2C: CLRA 
    cpu.m_a = 0;

    // DC2D: XCLRA 
    // TODO: Convert XCLRA 

    label_DC2E:
    // DC2E: COMB 
    cpu.m_b = ~cpu.m_b;

    // DC2F: BRA $DC85
    goto label_DC85;

    // DC31: CLRA 
    cpu.m_a = 0;

    // DC32: BRA $DC86
    goto label_DC86;

    // DC34: LSRA 
    cpu.m_a >>= 1;

    // DC35: LSRA 
    cpu.m_a >>= 1;

    // DC36: BRA $DC7E
    goto label_DC7E;

    // DC38: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DC39: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // DC3A: BITB #$31
    // TODO: Convert BITB #$31

    label_DC3C:
    // DC3C: BGT $DC5E
    // TODO: External jump to 0xDC5E - not implemented

    // DC3E: BRA $DC99
    goto label_DC99;

    // DC40: CLRA 
    cpu.m_a = 0;

    // DC41: LSRB 
    cpu.m_b >>= 1;

    // DC42: XNCB 
    // TODO: Convert XNCB 

    // DC43: BRA $DC9D
    goto label_DC9D;

    // DC45: BLT $DC9E
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xDC9E;

    // DC47: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DC48: XCLRA 
    // TODO: Convert XCLRA 

    label_DC49:
    // DC49: ASRA 
    // TODO: Convert ASRA 

    // DC4A: BRA $DC95
    goto label_DC95;

    // DC4C: COMB 
    cpu.m_b = ~cpu.m_b;

    // DC4D: BRA $DC94
    // TODO: External jump to 0xDC94 - not implemented

    // DC4F: NEGB 
    cpu.m_b = -cpu.m_b;

    // DC50: LSRB 
    cpu.m_b >>= 1;

    label_DC51:
    // DC51: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DC52: NEGB 
    cpu.m_b = -cpu.m_b;

    label_DC53:
    // DC53: NEGB 
    cpu.m_b = -cpu.m_b;

    // DC54: LSRA 
    cpu.m_a >>= 1;

    // DC55: LSRA 
    cpu.m_a >>= 1;

    // DC56: BRA $DCAF
    goto label_DCAF;

    // DC58: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DC59: LSRB 
    cpu.m_b >>= 1;

    // DC5A: ASLA 
    cpu.m_a <<= 1;

    // DC5B: BRA $DC9E
    goto label_DC9E;

    // DC5D: LDU #$494E
    cpu.m_u = 0x494E;

    label_DC60:
    // DC60: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // DC61: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DC62: COMB 
    cpu.m_b = ~cpu.m_b;

    // DC63: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DC64: XNCA 
    // TODO: Convert XNCA 

    // DC65: INCA 
    cpu.m_a++;

    // DC66: LSRA 
    cpu.m_a >>= 1;

    // DC67: BRA $DCAD
    // TODO: External jump to 0xDCAD - not implemented

    // DC69: LSRA 
    cpu.m_a >>= 1;

    // DC6A: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // DC6B: INCA 
    cpu.m_a++;

    // DC6C: LSRA 
    cpu.m_a >>= 1;

    label_DC6D:
    // DC6D: COMA 
    cpu.m_a = ~cpu.m_a;

    // DC6E: LSRB 
    cpu.m_b >>= 1;

    // DC6F: CLRA 
    cpu.m_a = 0;

    // DC70: XNCB 
    // TODO: Convert XNCB 

    // DC71: BRA $DCC6
    goto label_DCC6;

    // DC73: ASLA 
    cpu.m_a <<= 1;

    // DC74: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DC75: LSRA 
    cpu.m_a >>= 1;

    // DC76: INCA 
    cpu.m_a++;

    // DC77: LSRA 
    cpu.m_a >>= 1;

    // DC78: BRA $DCCE
    goto label_DCCE;

    // DC7A: ASLA 
    cpu.m_a <<= 1;

    // DC7B: NEGA 
    cpu.m_a = -cpu.m_a;

    // DC7C: ANDB <$57
    cpu.m_b &= 0x57;

    label_DC7E:
    // DC7E: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DC7F: INCA 
    cpu.m_a++;

    // DC80: INCA 
    cpu.m_a++;

    // DC81: BRA $DCD3
    goto label_DCD3;

    // DC83: XNCB 
    // TODO: Convert XNCB 

    // DC84: CLRA 
    cpu.m_a = 0;

    label_DC85:
    // DC85: LSRB 
    cpu.m_b >>= 1;

    label_DC86:
    // DC86: LSRA 
    cpu.m_a >>= 1;

    // DC87: COMA 
    cpu.m_a = ~cpu.m_a;

    // DC88: LSRB 
    cpu.m_b >>= 1;

    // DC89: BRA $DCE4
    goto label_DCE4;

    // DC8B: CLRA 
    cpu.m_a = 0;

    // DC8C: LSRB 
    cpu.m_b >>= 1;

    // DC8D: BRA $DCD5
    // TODO: External jump to 0xDCD5 - not implemented

    // DC8F: CLRA 
    cpu.m_a = 0;

    // DC90: XNCB 
    // TODO: Convert XNCB 

    // DC91: BRA $DCB3
    goto label_DCB3;

    // DC93: BRA $DCD8
    goto label_DCD8;

    label_DC95:
    // DC95: CLRA 
    cpu.m_a = 0;

    // DC96: INCA 
    cpu.m_a++;

    // DC97: INCA 
    cpu.m_a++;

    // DC98: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    label_DC99:
    // DC99: COMB 
    cpu.m_b = ~cpu.m_b;

    // DC9A: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DC9B: CLRA 
    cpu.m_a = 0;

    // DC9C: XCLRA 
    // TODO: Convert XCLRA 

    label_DC9D:
    // DC9D: COMB 
    cpu.m_b = ~cpu.m_b;

    label_DC9E:
    // DC9E: LDX -$E,Y
    // TODO: Fix comma operator: LDX -$E,Y

    // DCA0: BGT $DCC2
    // TODO: External jump to 0xDCC2 - not implemented

    // DCA2: BRA $DCE8
    // TODO: External jump to 0xDCE8 - not implemented

    // DCA4: LSRA 
    cpu.m_a >>= 1;

    // DCA5: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // DCA6: INCA 
    cpu.m_a++;

    // DCA7: LSRA 
    cpu.m_a >>= 1;

    // DCA8: COMA 
    cpu.m_a = ~cpu.m_a;

    // DCA9: LSRB 
    cpu.m_b >>= 1;

    // DCAA: CLRA 
    cpu.m_a = 0;

    // DCAB: XNCB 
    // TODO: Convert XNCB 

    // DCAC: BRA $DD01
    // TODO: External jump to 0xDD01 - not implemented

    // DCAE: LSRB 
    cpu.m_b >>= 1;

    label_DCAF:
    // DCAF: XNCB 
    // TODO: Convert XNCB 

    // DCB0: LSRA 
    cpu.m_a >>= 1;

    // DCB1: XCLRA 
    // TODO: Convert XCLRA 

    // DCB2: ASRA 
    // TODO: Convert ASRA 

    label_DCB3:
    // DCB3: LSRB 
    cpu.m_b >>= 1;

    // DCB4: ASLA 
    cpu.m_a <<= 1;

    // DCB5: BRA $DD00
    goto label_DD00;

    // DCB7: COMB 
    cpu.m_b = ~cpu.m_b;

    // DCB8: BRA $DD06
    goto label_DD06;

    // DCBA: CLRA 
    cpu.m_a = 0;

    // DCBB: COMB 
    cpu.m_b = ~cpu.m_b;

    // DCBC: LSRB 
    cpu.m_b >>= 1;

    // DCBD: BRA $DD16
    // TODO: External jump to 0xDD16 - not implemented

    // DCBF: ASLA 
    cpu.m_a <<= 1;

    // DCC0: LSRA 
    cpu.m_a >>= 1;

    // DCC1: LDU #$4120
    cpu.m_u = 0x4120;

    // DCC4: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // DCC5: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    label_DCC6:
    // DCC6: XNCB 
    // TODO: Convert XNCB 

    // DCC7: LSRA 
    cpu.m_a >>= 1;

    // DCC8: XNCA 
    // TODO: Convert XNCA 

    // DCC9: NEGA 
    cpu.m_a = -cpu.m_a;

    // DCCA: INCA 
    cpu.m_a++;

    // DCCB: INCA 
    cpu.m_a++;

    // DCCC: BRA $DD17
    goto label_DD17;

    label_DCCE:
    // DCCE: TSTA 
    cpu.test_a();

    // DCCF: NEGB 
    cpu.m_b = -cpu.m_b;

    // DCD0: NEGA 
    cpu.m_a = -cpu.m_a;

    // DCD1: COMA 
    cpu.m_a = ~cpu.m_a;

    // DCD2: LSRB 
    cpu.m_b >>= 1;

    label_DCD3:
    // DCD3: COMB 
    cpu.m_b = ~cpu.m_b;

    // DCD4: BRA $DD2F
    goto label_DD2F;

    // DCD6: CLRA 
    cpu.m_a = 0;

    // DCD7: LSRB 
    cpu.m_b >>= 1;

    label_DCD8:
    // DCD8: XNCB 
    // TODO: Convert XNCB 

    // DCD9: BRA $DD2E
    goto label_DD2E;

    // DCDB: ASLA 
    cpu.m_a <<= 1;

    // DCDC: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DCDD: LSRA 
    cpu.m_a >>= 1;

    // DCDE: INCA 
    cpu.m_a++;

    // DCDF: LSRA 
    cpu.m_a >>= 1;

    // DCE0: BRA $DD31
    goto label_DD31;

    // DCE2: SBCB <$57
    cpu.sub_b_with_carry(0x57);

    label_DCE4:
    // DCE4: ASLA 
    cpu.m_a <<= 1;

    // DCE5: LSRA 
    cpu.m_a >>= 1;

    // DCE6: XCLRA 
    // TODO: Convert XCLRA 

    // DCE7: BRA $DD42
    goto label_DD42;

    // DCE9: CLRA 
    cpu.m_a = 0;

    // DCEA: LSRB 
    cpu.m_b >>= 1;

    // DCEB: BRA $DD40
    goto label_DD40;

    // DCED: LSRB 
    cpu.m_b >>= 1;

    // DCEE: XNCB 
    // TODO: Convert XNCB 

    // DCEF: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DCF0: XDECA 
    cpu.m_a--;

    // DCF1: LSRA 
    cpu.m_a >>= 1;

    // DCF2: BRA $DD35
    // TODO: External jump to 0xDD35 - not implemented

    // DCF4: BRA $DD42
    goto label_DD42;

    // DCF6: NEGA 
    cpu.m_a = -cpu.m_a;

    // DCF7: COMB 
    cpu.m_b = ~cpu.m_b;

    // DCF8: LSRA 
    cpu.m_a >>= 1;

    // DCF9: XNCB 
    // TODO: Convert XNCB 

    // DCFA: BRA $DD50
    // TODO: External jump to 0xDD50 - not implemented

    // DCFC: CLRA 
    cpu.m_a = 0;

    // DCFD: ASRB 
    // TODO: Convert ASRB 

    // DCFE: LSRA 
    cpu.m_a >>= 1;

    // DCFF: XNCB 
    // TODO: Convert XNCB 

    label_DD00:
    // DD00: BRA $DD51
    goto label_DD51;

    // DD02: SBCB <$54
    cpu.sub_b_with_carry(0x54);

    // DD04: XNCB 
    // TODO: Convert XNCB 

    // DD05: LSRA 
    cpu.m_a >>= 1;

    label_DD06:
    // DD06: XCLRA 
    // TODO: Convert XCLRA 

    // DD07: COMA 
    cpu.m_a = ~cpu.m_a;

    // DD08: ASLA 
    cpu.m_a <<= 1;

    // DD09: BRA $DD4E
    goto label_DD4E;

    // DD0B: NEGA 
    cpu.m_a = -cpu.m_a;

    // DD0C: LSRB 
    cpu.m_b >>= 1;

    // DD0D: ASRB 
    // TODO: Convert ASRB 

    // DD0E: NEGA 
    cpu.m_a = -cpu.m_a;

    // DD0F: INCA 
    cpu.m_a++;

    // DD10: XDECA 
    cpu.m_a--;

    // DD11: LDX -$D,Y
    // TODO: Fix comma operator: LDX -$D,Y

    // DD13: BGT $DD35
    // TODO: External jump to 0xDD35 - not implemented

    // DD15: BRA $DD58
    goto label_DD58;

    label_DD17:
    // DD17: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DD18: TSTA 
    cpu.test_a();

    // DD19: BRA $DD74
    // TODO: External jump to 0xDD74 - not implemented

    // DD1B: CLRA 
    cpu.m_a = 0;

    // DD1C: LSRB 
    cpu.m_b >>= 1;

    // DD1D: XNCB 
    // TODO: Convert XNCB 

    // DD1E: BRA $DD6C
    // TODO: External jump to 0xDD6C - not implemented

    // DD20: NEGA 
    cpu.m_a = -cpu.m_a;

    // DD21: COMB 
    cpu.m_b = ~cpu.m_b;

    // DD22: LSRA 
    cpu.m_a >>= 1;

    // DD23: XNCB 
    // TODO: Convert XNCB 

    // DD24: COMB 
    cpu.m_b = ~cpu.m_b;

    // DD25: BRA $DD7E
    // TODO: External jump to 0xDD7E - not implemented

    // DD27: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DD28: LSRB 
    cpu.m_b >>= 1;

    // DD29: ASLA 
    cpu.m_a <<= 1;

    // DD2A: BRA $DD6F
    goto label_DD6F;

    // DD2C: LSRB 
    cpu.m_b >>= 1;

    // DD2D: XNCB 
    // TODO: Convert XNCB 

    label_DD2E:
    // DD2E: COMB 
    cpu.m_b = ~cpu.m_b;

    label_DD2F:
    // DD2F: CLRA 
    cpu.m_a = 0;

    // DD30: XNCB 
    // TODO: Convert XNCB 

    label_DD31:
    // DD31: BRA $DD87
    goto label_DD87;

    // DD33: XSTU #$4558
    // TODO: Convert XSTU #$4558

    // DD36: NEGB 
    cpu.m_b = -cpu.m_b;

    // DD37: INCA 
    cpu.m_a++;

    // DD38: CLRA 
    cpu.m_a = 0;

    // DD39: LSRA 
    cpu.m_a >>= 1;

    // DD3A: LSRA 
    cpu.m_a >>= 1;

    // DD3B: BRA $DD82
    goto label_DD82;

    // DD3D: TSTA 
    cpu.test_a();

    // DD3E: NEGB 
    cpu.m_b = -cpu.m_b;

    // DD3F: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    label_DD40:
    // DD40: XNCB 
    // TODO: Convert XNCB 

    // DD41: LSRA 
    cpu.m_a >>= 1;

    label_DD42:
    // DD42: BRA $DD98
    goto label_DD98;

    // DD44: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DD45: LSRA 
    cpu.m_a >>= 1;

    // DD46: BRA $DD8E
    goto label_DD8E;

    // DD48: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DD49: ASRA 
    // TODO: Convert ASRA 

    // DD4A: ASLA 
    cpu.m_a <<= 1;

    // DD4B: LSRB 
    cpu.m_b >>= 1;

    // DD4C: LSRA 
    cpu.m_a >>= 1;

    // DD4D: XNCB 
    // TODO: Convert XNCB 

    label_DD4E:
    // DD4E: COMB 
    cpu.m_b = ~cpu.m_b;

    // DD4F: BGE $DD71
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xDD71;

    label_DD51:
    // DD51: INCA 
    cpu.m_a++;

    // DD52: NEGA 
    cpu.m_a = -cpu.m_a;

    // DD53: COMB 
    cpu.m_b = ~cpu.m_b;

    // DD54: LSRA 
    cpu.m_a >>= 1;

    // DD55: SBCB <$54
    cpu.sub_b_with_carry(0x54);

    // DD57: CLRA 
    cpu.m_a = 0;

    label_DD58:
    // DD58: ASRB 
    // TODO: Convert ASRB 

    // DD59: LSRA 
    cpu.m_a >>= 1;

    // DD5A: XNCB 
    // TODO: Convert XNCB 

    // DD5B: BRA $DDB1
    goto label_DDB1;

    // DD5D: CLRA 
    cpu.m_a = 0;

    // DD5E: NEGB 
    cpu.m_b = -cpu.m_b;

    // DD5F: COMB 
    cpu.m_b = ~cpu.m_b;

    // DD60: BRA $DDA3
    goto label_DDA3;

    // DD62: XCLRA 
    // TODO: Convert XCLRA 

    // DD63: LSRA 
    cpu.m_a >>= 1;

    // DD64: BRA $DDBA
    // TODO: External jump to 0xDDBA - not implemented

    // DD66: XNCB 
    // TODO: Convert XNCB 

    // DD67: LSRA 
    cpu.m_a >>= 1;

    // DD68: XCLRA 
    // TODO: Convert XCLRA 

    // DD69: COMA 
    cpu.m_a = ~cpu.m_a;

    // DD6A: ASLA 
    cpu.m_a <<= 1;

    // DD6B: BRA $DDC1
    goto label_DDC1;

    // DD6D: LSRB 
    cpu.m_b >>= 1;

    // DD6E: XNCB 
    // TODO: Convert XNCB 

    label_DD6F:
    // DD6F: XNCB 
    // TODO: Convert XNCB 

    // DD70: LSRA 
    cpu.m_a >>= 1;

    // DD71: LSRB 
    cpu.m_b >>= 1;

    // DD72: COMB 
    cpu.m_b = ~cpu.m_b;

    // DD73: LDX -$C,Y
    // TODO: Fix comma operator: LDX -$C,Y

    // DD75: BGT $DD97
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xDD97;

    // DD77: BRA $DDCC
    goto label_DDCC;

    // DD79: ASLA 
    cpu.m_a <<= 1;

    // DD7A: CLRA 
    cpu.m_a = 0;

    // DD7B: CLRA 
    cpu.m_a = 0;

    // DD7C: LSRB 
    cpu.m_b >>= 1;

    // DD7D: BRA $DDC5
    goto label_DDC5;

    // DD7F: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DD80: XNCB 
    // TODO: Convert XNCB 

    // DD81: LSRA 
    cpu.m_a >>= 1;

    label_DD82:
    // DD82: XNCA 
    // TODO: Convert XNCA 

    // DD83: NEGA 
    cpu.m_a = -cpu.m_a;

    // DD84: INCA 
    cpu.m_a++;

    // DD85: INCA 
    cpu.m_a++;

    // DD86: COMB 
    cpu.m_b = ~cpu.m_b;

    label_DD87:
    // DD87: BRA $DDCB
    goto label_DDCB;

    // DD89: LSRA 
    cpu.m_a >>= 1;

    // DD8A: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // DD8B: CLRA 
    cpu.m_a = 0;

    // DD8C: XNCB 
    // TODO: Convert XNCB 

    // DD8D: LSRA 
    cpu.m_a >>= 1;

    label_DD8E:
    // DD8E: BRA $DDE4
    goto label_DDE4;

    // DD90: ASLA 
    cpu.m_a <<= 1;

    // DD91: LSRA 
    cpu.m_a >>= 1;

    // DD92: ADCB <$49
    cpu.add_b_with_carry(0x49);

    // DD94: TSTA 
    cpu.test_a();

    // DD95: NEGB 
    cpu.m_b = -cpu.m_b;

    // DD96: NEGA 
    cpu.m_a = -cpu.m_a;

    // DD97: COMA 
    cpu.m_a = ~cpu.m_a;

    label_DD98:
    // DD98: LSRB 
    cpu.m_b >>= 1;

    // DD99: BRA $DDF4
    goto label_DDF4;

    // DD9B: CLRA 
    cpu.m_a = 0;

    // DD9C: LSRB 
    cpu.m_b >>= 1;

    // DD9D: XNCB 
    // TODO: Convert XNCB 

    // DD9E: BRA $DDF3
    goto label_DDF3;

    // DDA0: ASLA 
    cpu.m_a <<= 1;

    // DDA1: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DDA2: LSRA 
    cpu.m_a >>= 1;

    label_DDA3:
    // DDA3: INCA 
    cpu.m_a++;

    // DDA4: LSRA 
    cpu.m_a >>= 1;

    // DDA5: LDX -$B,Y
    // TODO: Fix comma operator: LDX -$B,Y

    // DDA7: BGT $DDC9
    // TODO: External jump to 0xDDC9 - not implemented

    // DDA9: BRA $DDFF
    // TODO: External jump to 0xDDFF - not implemented

    // DDAB: ASLA 
    cpu.m_a <<= 1;

    // DDAC: LSRA 
    cpu.m_a >>= 1;

    // DDAD: BRA $DE01
    goto label_DE01;

    // DDAF: LSRA 
    cpu.m_a >>= 1;

    // DDB0: XNCA 
    // TODO: Convert XNCA 

    label_DDB1:
    // DDB1: LSRA 
    cpu.m_a >>= 1;

    // DDB2: INCA 
    cpu.m_a++;

    // DDB3: BRA $DDFB
    goto label_DDFB;

    // DDB5: CLRA 
    cpu.m_a = 0;

    // DDB6: XNCB 
    // TODO: Convert XNCB 

    // DDB7: COMA 
    cpu.m_a = ~cpu.m_a;

    // DDB8: LSRA 
    cpu.m_a >>= 1;

    // DDB9: BRA $DE04
    goto label_DE04;

    // DDBB: COMB 
    cpu.m_b = ~cpu.m_b;

    // DDBC: BRA $DE02
    goto label_DE02;

    // DDBE: LSRA 
    cpu.m_a >>= 1;

    // DDBF: NEGB 
    cpu.m_b = -cpu.m_b;

    // DDC0: LSRA 
    cpu.m_a >>= 1;

    label_DDC1:
    // DDC1: XCLRA 
    // TODO: Convert XCLRA 

    // DDC2: LSRA 
    cpu.m_a >>= 1;

    // DDC3: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DDC4: XCLRA 
    // TODO: Convert XCLRA 

    label_DDC5:
    // DDC5: ASRA 
    // TODO: Convert ASRA 

    // DDC6: BRA $DE17
    goto label_DE17;

    // DDC8: LDU #$594F
    cpu.m_u = 0x594F;

    label_DDCB:
    // DDCB: LSRB 
    cpu.m_b >>= 1;

    label_DDCC:
    // DDCC: BRA $DE22
    // TODO: External jump to 0xDE22 - not implemented

    // DDCE: CLRA 
    cpu.m_a = 0;

    // DDCF: BRA $DE24
    // TODO: External jump to 0xDE24 - not implemented

    // DDD1: LSRB 
    cpu.m_b >>= 1;

    // DDD2: CLRA 
    cpu.m_a = 0;

    // DDD3: NEGB 
    cpu.m_b = -cpu.m_b;

    // DDD4: BRA $DE2A
    // TODO: External jump to 0xDE2A - not implemented

    // DDD6: ASLA 
    cpu.m_a <<= 1;

    // DDD7: LSRA 
    cpu.m_a >>= 1;

    // DDD8: BRA $DE1F
    goto label_DE1F;

    // DDDA: TSTA 
    cpu.test_a();

    // DDDB: NEGB 
    cpu.m_b = -cpu.m_b;

    // DDDC: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DDDD: XNCB 
    // TODO: Convert XNCB 

    // DDDE: LSRA 
    cpu.m_a >>= 1;

    // DDDF: BRA $DE23
    goto label_DE23;

    // DDE1: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // DDE2: BRA $DE26
    // TODO: External jump to 0xDE26 - not implemented

    label_DDE4:
    // DDE4: INCA 
    cpu.m_a++;

    // DDE5: CLRA 
    cpu.m_a = 0;

    // DDE6: ASRB 
    // TODO: Convert ASRB 

    // DDE7: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DDE8: XCLRA 
    // TODO: Convert XCLRA 

    // DDE9: XSTB #$55
    // TODO: Convert XSTB #$55

    // DDEB: NEGB 
    cpu.m_b = -cpu.m_b;

    // DDEC: BRA $DE42
    // TODO: External jump to 0xDE42 - not implemented

    // DDEE: ASLA 
    cpu.m_a <<= 1;

    // DDEF: LSRA 
    cpu.m_a >>= 1;

    // DDF0: BRA $DE36
    goto label_DE36;

    // DDF2: LSRA 
    cpu.m_a >>= 1;

    label_DDF3:
    // DDF3: NEGA 
    cpu.m_a = -cpu.m_a;

    label_DDF4:
    // DDF4: LSRB 
    cpu.m_b >>= 1;

    // DDF5: ASLA 
    cpu.m_a <<= 1;

    // DDF6: BRA $DE4B
    // TODO: External jump to 0xDE4B - not implemented

    // DDF8: LSRB 
    cpu.m_b >>= 1;

    // DDF9: NEGA 
    cpu.m_a = -cpu.m_a;

    // DDFA: XNCB 
    // TODO: Convert XNCB 

    label_DDFB:
    // DDFB: LDX [A,Y]
    // TODO: Complex indexed addressing: [A,Y]

    // DDFD: STA $B8B9
    cpu.write_memory(0xB8B9, cpu.m_a);

    // DE00: COMB 
    cpu.m_b = ~cpu.m_b;

    label_DE01:
    // DE01: COMA 
    cpu.m_a = ~cpu.m_a;

    label_DE02:
    // DE02: CLRA 
    cpu.m_a = 0;

    // DE03: XNCB 
    // TODO: Convert XNCB 

    label_DE04:
    // DE04: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DE05: XCLRA 
    // TODO: Convert XCLRA 

    // DE06: XSTB #$54
    // TODO: Convert XSTB #$54

    // DE08: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DE09: LSRA 
    cpu.m_a >>= 1;

    // DE0A: BRA $DE52
    goto label_DE52;

    // DE0C: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DE0D: ASRA 
    // TODO: Convert ASRA 

    // DE0E: ASLA 
    cpu.m_a <<= 1;

    // DE0F: LSRB 
    cpu.m_b >>= 1;

    // DE10: LSRA 
    cpu.m_a >>= 1;

    // DE11: XNCB 
    // TODO: Convert XNCB 

    // DE12: COMB 
    cpu.m_b = ~cpu.m_b;

    // DE13: BRA $DE35
    // TODO: External jump to 0xDE35 - not implemented

    // DE15: BRA $DE37
    // TODO: External jump to 0xDE37 - not implemented

    label_DE17:
    // DE17: BRA $DE39
    goto label_DE39;

    // DE19: BRA $DE3B
    goto label_DE3B;

    // DE1B: BRA $DE3D
    goto label_DE3D;

    // DE1D: BRA $DE3F
    goto label_DE3F;

    label_DE1F:
    // DE1F: BRA $DE41
    goto label_DE41;

    // DE21: BRA $DE43
    goto label_DE43;

    label_DE23:
    // DE23: BRA $DE56
    goto label_DE56;

    // DE25: BGE $DE57
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xDE57;

    // DE27: LEAX [$4441,W]
    // TODO: Complex indexed addressing: [$4441,W]

    // DE2B: XNCB 
    // TODO: Convert XNCB 

    // DE2C: LSRB 
    cpu.m_b >>= 1;

    // DE2D: ASLA 
    cpu.m_a <<= 1;

    // DE2E: BRA $DE86
    goto label_DE86;

    // DE30: NEGA 
    cpu.m_a = -cpu.m_a;

    // DE31: LSRA 
    cpu.m_a >>= 1;

    // DE32: LSRA 
    cpu.m_a >>= 1;

    // DE33: XNCB 
    // TODO: Convert XNCB 

    // DE34: BEQ $DE89
    if (cpu.zero_flag()) cpu.m_pc = 0xDE89;

    label_DE36:
    // DE36: BRA $DE8B
    goto label_DE8B;

    // DE38: ASLA 
    cpu.m_a <<= 1;

    label_DE39:
    // DE39: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DE3A: NEGB 
    cpu.m_b = -cpu.m_b;

    label_DE3B:
    // DE3B: BRA $DE5D
    // TODO: External jump to 0xDE5D - not implemented

    label_DE3D:
    // DE3D: BRA $DE5F
    // TODO: External jump to 0xDE5F - not implemented

    label_DE3F:
    // DE3F: BRA $DE61
    // TODO: External jump to 0xDE61 - not implemented

    label_DE41:
    // DE41: BRA $DE63
    // TODO: External jump to 0xDE63 - not implemented

    label_DE43:
    // DE43: BRA $DE65
    // TODO: External jump to 0xDE65 - not implemented

    // DE45: BRA $DE79
    goto label_DE79;

    // DE47: BGE $DE79
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xDE79;

    // DE49: LEAX [$4C41,W]
    // TODO: Complex indexed addressing: [$4C41,W]

    // DE4D: COMB 
    cpu.m_b = ~cpu.m_b;

    // DE4E: LSRA 
    cpu.m_a >>= 1;

    // DE4F: XNCB 
    // TODO: Convert XNCB 

    // DE50: BRA $DE94
    goto label_DE94;

    label_DE52:
    // DE52: JMP $de52
    goto label_DE52;

    // DE53: XCLRA 
    // TODO: Convert XCLRA 

    // DE54: XDECA 
    cpu.m_a--;

    // DE55: LSRA 
    cpu.m_a >>= 1;

    label_DE56:
    // DE56: XNCB 
    // TODO: Convert XNCB 

    // DE57: COMB 
    cpu.m_b = ~cpu.m_b;

    // DE58: BRA $DE7A
    // TODO: External jump to 0xDE7A - not implemented

    // DE5A: BRA $DE7C
    // TODO: External jump to 0xDE7C - not implemented

    // DE5C: BRA $DE7E
    // TODO: External jump to 0xDE7E - not implemented

    // DE5E: BRA $DE80
    // TODO: External jump to 0xDE80 - not implemented

    // DE60: BRA $DE82
    // TODO: External jump to 0xDE82 - not implemented

    // DE62: BRA $DE84
    goto label_DE84;

    // DE64: BRA $DE86
    goto label_DE86;

    // DE66: BRA $DE88
    goto label_DE88;

    // DE68: BRA $DE8A
    goto label_DE8A;

    // DE6A: LEAS -$10,Y
    // TODO: Fix comma operator: LEAS -$10,Y

    // DE6C: SUBA $4C41
    cpu.m_a -= cpu.read_memory(0x4C41);

    // DE6F: COMB 
    cpu.m_b = ~cpu.m_b;

    // DE70: LSRA 
    cpu.m_a >>= 1;

    // DE71: XNCB 
    // TODO: Convert XNCB 

    // DE72: BRA $DEC8
    goto label_DEC8;

    // DE74: CLRA 
    cpu.m_a = 0;

    // DE75: ASRB 
    // TODO: Convert ASRB 

    // DE76: LSRA 
    cpu.m_a >>= 1;

    // DE77: XNCB 
    // TODO: Convert XNCB 

    // DE78: COMB 
    cpu.m_b = ~cpu.m_b;

    label_DE79:
    // DE79: BRA $DE9B
    goto label_DE9B;

    // DE7B: BRA $DE9D
    goto label_DE9D;

    // DE7D: BRA $DE9F
    goto label_DE9F;

    // DE7F: BRA $DEA1
    goto label_DEA1;

    // DE81: BRA $DEA3
    goto label_DEA3;

    // DE83: BRA $DEA5
    goto label_DEA5;

    label_DE84:
    // DE84: BRA $DEA6
    // TODO: External jump to 0xDEA6 - not implemented

    // DE85: BRA $DEA7
    goto label_DEA7;

    label_DE86:
    // DE86: JMP $de86
    goto label_DE86;

    // DE87: BRA $DEA9
    goto label_DEA9;

    label_DE88:
    // DE88: BRA $DEAA
    // TODO: External jump to 0xDEAA - not implemented

    // DE89: BRA $DEAB
    goto label_DEAB;

    label_DE8A:
    // DE8A: JMP $de8a
    goto label_DE8A;

    label_DE8B:
    // DE8B: BRA $DEBF
    goto label_DEBF;

    // DE8C: LEAS -$10,Y
    // TODO: Fix comma operator: LEAS -$10,Y

    // DE8D: LEAX [$5452,W]
    // TODO: Complex indexed addressing: [$5452,W]

    // DE8E: SUBA $5452
    cpu.m_a -= cpu.read_memory(0x5452);

    // DE91: LSRA 
    cpu.m_a >>= 1;

    // DE92: XCLRA 
    // TODO: Convert XCLRA 

    // DE93: COMA 
    cpu.m_a = ~cpu.m_a;

    label_DE94:
    // DE94: ASLA 
    cpu.m_a <<= 1;

    // DE95: BRA $DEEB
    goto label_DEEB;

    // DE97: LSRB 
    cpu.m_b >>= 1;

    // DE98: XNCB 
    // TODO: Convert XNCB 

    // DE99: XNCB 
    // TODO: Convert XNCB 

    // DE9A: LSRA 
    cpu.m_a >>= 1;

    label_DE9B:
    // DE9B: LSRB 
    cpu.m_b >>= 1;

    // DE9C: COMB 
    cpu.m_b = ~cpu.m_b;

    label_DE9D:
    // DE9D: BRA $DEBF
    goto label_DEBF;

    label_DE9F:
    // DE9F: BRA $DEC1
    goto label_DEC1;

    label_DEA1:
    // DEA1: BRA $DEC3
    goto label_DEC3;

    label_DEA3:
    // DEA3: BRA $DEC5
    goto label_DEC5;

    label_DEA5:
    // DEA5: BRA $DEC7
    goto label_DEC7;

    label_DEA7:
    // DEA7: BRA $DEC9
    goto label_DEC9;

    label_DEA9:
    // DEA9: BRA $DECB
    goto label_DECB;

    label_DEAB:
    // DEAB: BRA $DECD
    goto label_DECD;

    // DEAD: BRA $DEE0
    goto label_DEE0;

    // DEAF: LEAX [$4649,W]
    // TODO: Complex indexed addressing: [$4649,W]

    // DEB3: XNCB 
    // TODO: Convert XNCB 

    // DEB4: LSRA 
    cpu.m_a >>= 1;

    // DEB5: XNCA 
    // TODO: Convert XNCA 

    // DEB6: NEGA 
    cpu.m_a = -cpu.m_a;

    // DEB7: INCA 
    cpu.m_a++;

    // DEB8: INCA 
    cpu.m_a++;

    // DEB9: COMB 
    cpu.m_b = ~cpu.m_b;

    // DEBA: BRA $DEDC
    goto label_DEDC;

    // DEBC: BRA $DEDE
    goto label_DEDE;

    // DEBE: BRA $DEE0
    goto label_DEE0;

    label_DEBF:
    // DEBF: BRA $DEE1
    goto label_DEE1;

    // DEC0: BRA $DEE2
    goto label_DEE2;

    label_DEC1:
    // DEC1: BRA $DEE3
    goto label_DEE3;

    // DEC2: BRA $DEE4
    goto label_DEE4;

    label_DEC3:
    // DEC3: BRA $DEE5
    goto label_DEE5;

    // DEC4: BRA $DEE6
    goto label_DEE6;

    label_DEC5:
    // DEC5: BRA $DEE7
    goto label_DEE7;

    // DEC6: BRA $DEE8
    goto label_DEE8;

    label_DEC7:
    // DEC7: BRA $DEE9
    goto label_DEE9;

    label_DEC8:
    // DEC8: BRA $DEEA
    goto label_DEEA;

    label_DEC9:
    // DEC9: BRA $DEEB
    goto label_DEEB;

    // DECA: BRA $DEEC
    goto label_DEEC;

    label_DECB:
    // DECB: BRA $DEED
    goto label_DEED;

    // DECC: BRA $DEEE
    goto label_DEEE;

    label_DECD:
    // DECD: BRA $DEEF
    goto label_DEEF;

    // DECE: BRA $DEF0
    goto label_DEF0;

    // DECF: BRA $DEF1
    goto label_DEF1;

    // DED0: BRA $DF05
    goto label_DF05;

    // DED1: LEAU [,--Y]
    // TODO: Complex indexed addressing: [,--Y]

    // DED2: SUBD $4558
    cpu.m_d -= 0x4558;

    // DED3: LSRA 
    cpu.m_a >>= 1;

    // DED4: ASLB 
    cpu.m_b <<= 1;

    // DED5: ASLA 
    cpu.m_a <<= 1;

    // DED6: NEGA 
    cpu.m_a = -cpu.m_a;

    // DED7: LSRB 
    cpu.m_b >>= 1;

    // DED8: COMB 
    cpu.m_b = ~cpu.m_b;

    // DED9: LSRB 
    cpu.m_b >>= 1;

    // DEDA: BRA $DF2C
    goto label_DF2C;

    label_DEDC:
    // DEDC: CLRA 
    cpu.m_a = 0;

    // DEDD: XNCB 
    // TODO: Convert XNCB 

    label_DEDE:
    // DEDE: LSRB 
    cpu.m_b >>= 1;

    // DEDF: BRA $DF01
    goto label_DF01;

    label_DEE0:
    // DEE0: BRA $DF02
    goto label_DF02;

    label_DEE1:
    // DEE1: BRA $DF03
    goto label_DF03;

    label_DEE2:
    // DEE2: BRA $DF04
    // TODO: External jump to 0xDF04 - not implemented

    label_DEE3:
    // DEE3: BRA $DF05
    goto label_DF05;

    label_DEE4:
    // DEE4: BRA $DF06
    goto label_DF06;

    label_DEE5:
    // DEE5: BRA $DF07
    goto label_DF07;

    label_DEE6:
    // DEE6: BRA $DF08
    goto label_DF08;

    label_DEE7:
    // DEE7: BRA $DF09
    goto label_DF09;

    label_DEE8:
    // DEE8: BRA $DF0A
    // TODO: External jump to 0xDF0A - not implemented

    label_DEE9:
    // DEE9: BRA $DF0B
    goto label_DF0B;

    label_DEEA:
    // DEEA: BRA $DF0C
    goto label_DF0C;

    label_DEEB:
    // DEEB: BRA $DF0D
    goto label_DF0D;

    label_DEEC:
    // DEEC: BRA $DF0E
    goto label_DF0E;

    label_DEED:
    // DEED: BRA $DF0F
    // TODO: External jump to 0xDF0F - not implemented

    label_DEEE:
    // DEEE: BRA $DF22
    goto label_DF22;

    label_DEEF:
    // DEEF: LEAS -$B,Y
    // TODO: Fix comma operator: LEAS -$B,Y

    label_DEF0:
    // DEF0: PULS B,DP,Y
    // TODO: Convert PULS B,DP,Y

    label_DEF1:
    // DEF1: BGE $DF23
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xDF23;

    // DEF2: LEAX -$10,Y
    // TODO: Fix comma operator: LEAX -$10,Y

    // DEF3: LEAX [$4445,W]
    // TODO: Complex indexed addressing: [$4445,W]

    // DEF4: SUBA $4445
    cpu.m_a -= cpu.read_memory(0x4445);

    // DEF7: COMB 
    cpu.m_b = ~cpu.m_b;

    // DEF8: LSRB 
    cpu.m_b >>= 1;

    // DEF9: XNCB 
    // TODO: Convert XNCB 

    // DEFA: CLRA 
    cpu.m_a = 0;

    // DEFB: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // DEFC: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DEFD: XCLRA 
    // TODO: Convert XCLRA 

    // DEFE: ASRA 
    // TODO: Convert ASRA 

    // DEFF: BRA $DF42
    goto label_DF42;

    label_DF01:
    // DF01: INCA 
    cpu.m_a++;

    label_DF02:
    // DF02: INCA 
    cpu.m_a++;

    label_DF03:
    // DF03: BRA $DF59
    goto label_DF59;

    label_DF05:
    // DF05: CLRA 
    cpu.m_a = 0;

    label_DF06:
    // DF06: ASRB 
    // TODO: Convert ASRB 

    label_DF07:
    // DF07: LSRA 
    cpu.m_a >>= 1;

    label_DF08:
    // DF08: XNCB 
    // TODO: Convert XNCB 

    label_DF09:
    // DF09: BRA $DF5F
    goto label_DF5F;

    label_DF0B:
    // DF0B: CLRA 
    cpu.m_a = 0;

    label_DF0C:
    // DF0C: NEGB 
    cpu.m_b = -cpu.m_b;

    label_DF0D:
    // DF0D: COMB 
    cpu.m_b = ~cpu.m_b;

    label_DF0E:
    // DF0E: BRA $DF30
    goto label_DF30;

    // DF10: BRA $DF47
    goto label_DF47;

    // DF12: LEAX $C,Y
    // TODO: Fix comma operator: LEAX $C,Y

    // DF14: LEAX -$10,Y
    // TODO: Fix comma operator: LEAX -$10,Y

    // DF16: SUBA $5345
    cpu.m_a -= cpu.read_memory(0x5345);

    label_DF18:
    // DF18: LSRA 
    cpu.m_a >>= 1;

    // DF19: INCA 
    cpu.m_a++;

    // DF1A: LSRA 
    cpu.m_a >>= 1;

    // DF1B: COMA 
    cpu.m_a = ~cpu.m_a;

    // DF1C: LSRB 
    cpu.m_b >>= 1;

    // DF1D: BRA $DF60
    goto label_DF60;

    // DF1F: BRA $DF65
    goto label_DF65;

    // DF21: LSRA 
    cpu.m_a >>= 1;

    label_DF22:
    // DF22: NEGA 
    cpu.m_a = -cpu.m_a;

    // DF23: LSRB 
    cpu.m_b >>= 1;

    // DF24: ASLA 
    cpu.m_a <<= 1;

    // DF25: BRA $DF7A
    goto label_DF7A;

    // DF27: LSRB 
    cpu.m_b >>= 1;

    label_DF28:
    // DF28: NEGA 
    cpu.m_a = -cpu.m_a;

    // DF29: SBCB <$46
    cpu.sub_b_with_carry(0x46);

    // DF2B: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    label_DF2C:
    // DF2C: XNCB 
    // TODO: Convert XNCB 

    // DF2D: LSRA 
    cpu.m_a >>= 1;

    // DF2E: BRA $DF7C
    goto label_DF7C;

    label_DF30:
    // DF30: NEGA 
    cpu.m_a = -cpu.m_a;

    // DF31: COMB 
    cpu.m_b = ~cpu.m_b;

    // DF32: LSRA 
    cpu.m_a >>= 1;

    // DF33: XNCB 
    // TODO: Convert XNCB 

    // DF34: BRA $DF77
    goto label_DF77;

    // DF36: LSRB 
    cpu.m_b >>= 1;

    // DF37: BRA $DF7D
    goto label_DF7D;

    // DF39: LSRA 
    cpu.m_a >>= 1;

    // DF3A: COMB 
    cpu.m_b = ~cpu.m_b;

    // DF3B: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DF3C: XNCB 
    // TODO: Convert XNCB 

    // DF3D: LSRA 
    cpu.m_a >>= 1;

    // DF3E: LSRA 
    cpu.m_a >>= 1;

    // DF3F: BRA $DF85
    goto label_DF85;

    // DF41: LSRA 
    cpu.m_a >>= 1;

    label_DF42:
    // DF42: NEGA 
    cpu.m_a = -cpu.m_a;

    // DF43: LSRB 
    cpu.m_b >>= 1;

    // DF44: ASLA 
    cpu.m_a <<= 1;

    // DF45: BRA $DF9A
    goto label_DF9A;

    label_DF47:
    // DF47: LSRB 
    cpu.m_b >>= 1;

    // DF48: NEGA 
    cpu.m_a = -cpu.m_a;

    // DF49: SBCB <$43
    cpu.sub_b_with_carry(0x43);

    // DF4B: CLRA 
    cpu.m_a = 0;

    // DF4C: LSRB 
    cpu.m_b >>= 1;

    // DF4D: XCLRA 
    // TODO: Convert XCLRA 

    // DF4E: LSRB 
    cpu.m_b >>= 1;

    // DF4F: LSRA 
    cpu.m_a >>= 1;

    // DF50: CLRA 
    cpu.m_a = 0;

    // DF51: ASRB 
    // TODO: Convert ASRB 

    // DF52: LDU #$4541
    cpu.m_u = 0x4541;

    // DF55: COMB 
    cpu.m_b = ~cpu.m_b;

    // DF56: ADCB <$4D
    cpu.add_b_with_carry(0x4D);

    // DF58: LSRA 
    cpu.m_a >>= 1;

    label_DF59:
    // DF59: LSRA 
    cpu.m_a >>= 1;

    // DF5A: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DF5B: LSRB 
    cpu.m_b >>= 1;

    // DF5C: XHCF 
    // TODO: Convert XHCF 

    // DF5D: ASLA 
    cpu.m_a <<= 1;

    // DF5E: NEGA 
    cpu.m_a = -cpu.m_a;

    label_DF5F:
    // DF5F: XNCB 
    // TODO: Convert XNCB 

    label_DF60:
    // DF60: ANDB #$57
    cpu.m_b &= 0x57;

    // DF62: NEGA 
    cpu.m_a = -cpu.m_a;

    // DF63: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // DF64: LSRA 
    cpu.m_a >>= 1;

    label_DF65:
    // DF65: BRA $DF18
    goto label_DF18;

    // DF67: ASRB 
    // TODO: Convert ASRB 

    // DF68: NEGA 
    cpu.m_a = -cpu.m_a;

    // DF69: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // DF6A: LSRA 
    cpu.m_a >>= 1;

    // DF6B: BRA $DF20
    // TODO: External jump to 0xDF20 - not implemented

    // DF6D: ASRB 
    // TODO: Convert ASRB 

    // DF6E: NEGA 
    cpu.m_a = -cpu.m_a;

    // DF6F: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // DF70: LSRA 
    cpu.m_a >>= 1;

    // DF71: BRA $DF28
    goto label_DF28;

    // DF73: XNCA 
    // TODO: Convert XNCA 

    // DF74: CLRA 
    cpu.m_a = 0;

    // DF75: XCLRA 
    // TODO: Convert XCLRA 

    // DF76: LSRB 
    cpu.m_b >>= 1;

    label_DF77:
    // DF77: ADDD <$4E
    cpu.m_d += 0x4E;

    // DF79: CLRA 
    cpu.m_a = 0;

    label_DF7A:
    // DF7A: BRA $DFBE
    goto label_DFBE;

    label_DF7C:
    // DF7C: CLRA 
    cpu.m_a = 0;

    label_DF7D:
    // DF7D: XCLRA 
    // TODO: Convert XCLRA 

    // DF7E: LSRB 
    cpu.m_b >>= 1;

    // DF7F: ADDD <$34
    cpu.m_d += 0x34;

    // DF81: LEAX -$10,Y
    // TODO: Fix comma operator: LEAX -$10,Y

    // DF83: BGE $DFB5
    // TODO: External jump to 0xDFB5 - not implemented

    label_DF85:
    // DF85: LEAX [$3830,W]
    // TODO: Complex indexed addressing: [$3830,W]

    // DF89: LEAX $C,Y
    // TODO: Fix comma operator: LEAX $C,Y

    // DF8B: LEAX -$10,Y
    // TODO: Fix comma operator: LEAX -$10,Y

    // DF8D: SUBA $4D45
    cpu.m_a -= cpu.read_memory(0x4D45);

    // DF90: COMB 
    cpu.m_b = ~cpu.m_b;

    // DF91: COMB 
    cpu.m_b = ~cpu.m_b;

    // DF92: NEGA 
    cpu.m_a = -cpu.m_a;

    // DF93: ASRA 
    // TODO: Convert ASRA 

    // DF94: LSRA 
    cpu.m_a >>= 1;

    // DF95: BRA $DFDD
    goto label_DFDD;

    // DF97: XNCB 
    // TODO: Convert XNCB 

    // DF98: CLRA 
    cpu.m_a = 0;

    // DF99: TSTA 
    cpu.test_a();

    label_DF9A:
    // DF9A: BRA $DFEE
    goto label_DFEE;

    // DF9C: LSRA 
    cpu.m_a >>= 1;

    // DF9D: XNCA 
    // TODO: Convert XNCA 

    // DF9E: LSRA 
    cpu.m_a >>= 1;

    // DF9F: INCA 
    cpu.m_a++;

    // DFA0: BRA $DFE5
    goto label_DFE5;

    // DFA2: CLRA 
    cpu.m_a = 0;

    // DFA3: TSTA 
    cpu.test_a();

    // DFA4: TSTA 
    cpu.test_a();

    // DFA5: NEGA 
    cpu.m_a = -cpu.m_a;

    // DFA6: XCLRA 
    // TODO: Convert XCLRA 

    // DFA7: LSRA 
    cpu.m_a >>= 1;

    // DFA8: BRA $DFFA
    goto label_DFFA;

    // DFAA: CLRA 
    cpu.m_a = 0;

    // DFAB: COMB 
    cpu.m_b = ~cpu.m_b;

    // DFAC: ANDB <$59
    cpu.m_b &= 0x59;

    // DFAE: CLRA 
    cpu.m_a = 0;

    // DFAF: LSRB 
    cpu.m_b >>= 1;

    // DFB0: BRA $DFF3
    goto label_DFF3;

    // DFB2: XNCB 
    // TODO: Convert XNCB 

    // DFB3: LSRA 
    cpu.m_a >>= 1;

    // DFB4: BRA $DFF7
    goto label_DFF7;

    // DFB6: BRA $E00C
    goto label_E00C;

    // DFB8: XNCB 
    // TODO: Convert XNCB 

    // DFB9: LSRB 
    cpu.m_b >>= 1;

    // DFBA: LSRA 
    cpu.m_a >>= 1;

    // DFBB: BRA $E00F
    goto label_E00F;

    // DFBD: LSRA 
    cpu.m_a >>= 1;

    label_DFBE:
    // DFBE: XNCA 
    // TODO: Convert XNCA 

    // DFBF: LSRA 
    cpu.m_a >>= 1;

    // DFC0: INCA 
    cpu.m_a++;

    // DFC1: BRA $E013
    goto label_E013;

    // DFC3: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DFC4: INCA 
    cpu.m_a++;

    // DFC5: CLRA 
    cpu.m_a = 0;

    // DFC6: ANDB <$54
    cpu.m_b &= 0x54;

    // DFC8: ASLA 
    cpu.m_a <<= 1;

    // DFC9: LSRA 
    cpu.m_a >>= 1;

    // DFCA: BRA $E012
    goto label_E012;

    // DFCC: CLRA 
    cpu.m_a = 0;

    // DFCD: XNCB 
    // TODO: Convert XNCB 

    // DFCE: COMA 
    cpu.m_a = ~cpu.m_a;

    // DFCF: LSRA 
    cpu.m_a >>= 1;

    // DFD0: BRA $E01B
    // TODO: External jump to 0xE01B - not implemented

    // DFD2: COMB 
    cpu.m_b = ~cpu.m_b;

    // DFD3: BRA $E02C
    goto label_E02C;

    // DFD5: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DFD6: LSRB 
    cpu.m_b >>= 1;

    // DFD7: ASLA 
    cpu.m_a <<= 1;

    // DFD8: BRA $E033
    // TODO: External jump to 0xE033 - not implemented

    // DFDA: CLRA 
    cpu.m_a = 0;

    // DFDB: BITB <$53
    // TODO: Convert BITB <$53

    label_DFDD:
    // DFDD: ASLA 
    cpu.m_a <<= 1;

    // DFDE: CLRA 
    cpu.m_a = 0;

    // DFDF: CLRA 
    cpu.m_a = 0;

    // DFE0: LSRB 
    cpu.m_b >>= 1;

    // DFE1: BRA $E03C
    goto label_E03C;

    // DFE3: CLRA 
    cpu.m_a = 0;

    // DFE4: LSRB 
    cpu.m_b >>= 1;

    label_DFE5:
    // DFE5: XNCB 
    // TODO: Convert XNCB 

    // DFE6: BRA $E031
    goto label_E031;

    // DFE8: XCLRA 
    // TODO: Convert XCLRA 

    // DFE9: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DFEA: LSRB 
    cpu.m_b >>= 1;

    // DFEB: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DFEC: NEGA 
    cpu.m_a = -cpu.m_a;

    // DFED: INCA 
    cpu.m_a++;

    label_DFEE:
    // DFEE: ADDD <$50
    cpu.m_d += 0x50;

    // DFF0: XNCB 
    // TODO: Convert XNCB 

    // DFF1: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DFF2: XCLRA 
    // TODO: Convert XCLRA 

    label_DFF3:
    // DFF3: COMA 
    cpu.m_a = ~cpu.m_a;

    // DFF4: LSRA 
    cpu.m_a >>= 1;

    // DFF5: COMB 
    cpu.m_b = ~cpu.m_b;

    // DFF6: COMB 
    cpu.m_b = ~cpu.m_b;

    label_DFF7:
    // DFF7: BRA $E045
    goto label_E045;

    // DFF9: LSRA 
    cpu.m_a >>= 1;

    label_DFFA:
    // DFFA: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // DFFB: NEGA 
    cpu.m_a = -cpu.m_a;

    // DFFC: BEQ $E051
    // TODO: External jump to 0xE051 - not implemented

    // DFFE: BRA $E052
    goto label_E052;

    label_E000:
    // E000: LSRA 
    cpu.m_a >>= 1;

    // E001: XNCA 
    // TODO: Convert XNCA 

    // E002: LSRA 
    cpu.m_a >>= 1;

    // E003: INCA 
    cpu.m_a++;

    // E004: BRA $E04C
    goto label_E04C;

    // E006: CLRA 
    cpu.m_a = 0;

    // E007: XNCB 
    // TODO: Convert XNCB 

    // E008: COMA 
    cpu.m_a = ~cpu.m_a;

    // E009: BITB #$50
    // TODO: Convert BITB #$50

    // E00B: CLRA 
    cpu.m_a = 0;

    label_E00C:
    // E00C: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E00D: XCLRA 
    // TODO: Convert XCLRA 

    // E00E: LSRB 
    cpu.m_b >>= 1;

    label_E00F:
    // E00F: COMB 
    cpu.m_b = ~cpu.m_b;

    // E010: BRA $E060
    goto label_E060;

    label_E012:
    // E012: LSRA 
    cpu.m_a >>= 1;

    label_E013:
    // E013: ASLB 
    cpu.m_b <<= 1;

    // E014: LSRB 
    cpu.m_b >>= 1;

    // E015: BRA $E06B
    goto label_E06B;

    // E017: CLRA 
    cpu.m_a = 0;

    // E018: ASRB 
    // TODO: Convert ASRB 

    // E019: LSRA 
    cpu.m_a >>= 1;

    // E01A: SBCB <$54
    cpu.sub_b_with_carry(0x54);

    // E01C: CLRA 
    cpu.m_a = 0;

    // E01D: ASRB 
    // TODO: Convert ASRB 

    // E01E: LSRA 
    cpu.m_a >>= 1;

    // E01F: XNCB 
    // TODO: Convert XNCB 

    // E020: ADDD <$43
    cpu.m_d += 0x43;

    // E022: INCA 
    cpu.m_a++;

    // E023: LSRA 
    cpu.m_a >>= 1;

    // E024: NEGA 
    cpu.m_a = -cpu.m_a;

    // E025: XNCB 
    // TODO: Convert XNCB 

    // E026: LSRA 
    cpu.m_a >>= 1;

    // E027: LSRA 
    cpu.m_a >>= 1;

    // E028: BRA $E06B
    goto label_E06B;

    // E02A: INCA 
    cpu.m_a++;

    // E02B: INCA 
    cpu.m_a++;

    label_E02C:
    // E02C: BRA $E07A
    goto label_E07A;

    // E02E: NEGA 
    cpu.m_a = -cpu.m_a;

    // E02F: COMB 
    cpu.m_b = ~cpu.m_b;

    // E030: LSRA 
    cpu.m_a >>= 1;

    label_E031:
    // E031: XNCB 
    // TODO: Convert XNCB 

    // E032: BRA $E088
    goto label_E088;

    // E034: CLRA 
    cpu.m_a = 0;

    // E035: ASRB 
    // TODO: Convert ASRB 

    // E036: LSRA 
    cpu.m_a >>= 1;

    // E037: XNCB 
    // TODO: Convert XNCB 

    // E038: ADDD <$35
    cpu.m_d += 0x35;

    // E03A: LEAX $C,Y
    // TODO: Fix comma operator: LEAX $C,Y

    label_E03C:
    // E03C: LEAX -$10,Y
    // TODO: Fix comma operator: LEAX -$10,Y

    // E03E: LEAX $0,Y
    // TODO: Fix comma operator: LEAX $0,Y

    // E040: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E041: CLRA 
    cpu.m_a = 0;

    // E042: XNCB 
    // TODO: Convert XNCB 

    // E043: BRA $E098
    goto label_E098;

    label_E045:
    // E045: ASLA 
    cpu.m_a <<= 1;

    // E046: CLRA 
    cpu.m_a = 0;

    // E047: CLRA 
    cpu.m_a = 0;

    // E048: LSRB 
    cpu.m_b >>= 1;

    // E049: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E04A: XCLRA 
    // TODO: Convert XCLRA 

    // E04B: ASRA 
    // TODO: Convert ASRA 

    label_E04C:
    // E04C: BRA $E08F
    goto label_E08F;

    // E04E: INCA 
    cpu.m_a++;

    // E04F: INCA 
    cpu.m_a++;

    // E050: BRA $E0A6
    goto label_E0A6;

    label_E052:
    // E052: CLRA 
    cpu.m_a = 0;

    // E053: ASRB 
    // TODO: Convert ASRB 

    // E054: LSRA 
    cpu.m_a >>= 1;

    // E055: XNCB 
    // TODO: Convert XNCB 

    // E056: ADDD <$45
    cpu.m_d += 0x45;

    // E058: ASLB 
    cpu.m_b <<= 1;

    // E059: ASLA 
    cpu.m_a <<= 1;

    // E05A: NEGA 
    cpu.m_a = -cpu.m_a;

    // E05B: LSRB 
    cpu.m_b >>= 1;

    // E05C: COMB 
    cpu.m_b = ~cpu.m_b;

    // E05D: LSRB 
    cpu.m_b >>= 1;

    // E05E: BRA $E0B0
    // TODO: External jump to 0xE0B0 - not implemented

    label_E060:
    // E060: CLRA 
    cpu.m_a = 0;

    // E061: XNCB 
    // TODO: Convert XNCB 

    // E062: LSRB 
    cpu.m_b >>= 1;

    // E063: BRA $E0A6
    goto label_E0A6;

    // E065: ASLA 
    cpu.m_a <<= 1;

    // E066: LSRA 
    cpu.m_a >>= 1;

    // E067: NEGA 
    cpu.m_a = -cpu.m_a;

    // E068: ANDB #$44
    cpu.m_b &= 0x44;

    // E06A: LSRA 
    cpu.m_a >>= 1;

    label_E06B:
    // E06B: NEGA 
    cpu.m_a = -cpu.m_a;

    // E06C: LSRB 
    cpu.m_b >>= 1;

    // E06D: ASLA 
    cpu.m_a <<= 1;

    // E06E: BRA $E0C3
    goto label_E0C3;

    // E070: LSRB 
    cpu.m_b >>= 1;

    // E071: NEGA 
    cpu.m_a = -cpu.m_a;

    // E072: XNCB 
    // TODO: Convert XNCB 

    // E073: BRA $E0B9
    goto label_E0B9;

    // E075: LSRA 
    cpu.m_a >>= 1;

    // E076: COMB 
    cpu.m_b = ~cpu.m_b;

    // E077: LSRB 
    cpu.m_b >>= 1;

    // E078: XNCB 
    // TODO: Convert XNCB 

    // E079: CLRA 
    cpu.m_a = 0;

    label_E07A:
    // E07A: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // E07B: LSRA 
    cpu.m_a >>= 1;

    // E07C: ANDB #$45
    cpu.m_b &= 0x45;

    // E07E: ASLB 
    cpu.m_b <<= 1;

    // E07F: ASLA 
    cpu.m_a <<= 1;

    // E080: NEGA 
    cpu.m_a = -cpu.m_a;

    // E081: LSRB 
    cpu.m_b >>= 1;

    // E082: COMB 
    cpu.m_b = ~cpu.m_b;

    // E083: LSRB 
    cpu.m_b >>= 1;

    // E084: BRA $E0D6
    goto label_E0D6;

    // E086: CLRA 
    cpu.m_a = 0;

    // E087: XNCB 
    // TODO: Convert XNCB 

    label_E088:
    // E088: LSRB 
    cpu.m_b >>= 1;

    // E089: BRA $E0D8
    goto label_E0D8;

    // E08B: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E08C: COMB 
    cpu.m_b = ~cpu.m_b;

    // E08D: COMB 
    cpu.m_b = ~cpu.m_b;

    // E08E: LSRA 
    cpu.m_a >>= 1;

    label_E08F:
    // E08F: ANDB #$42
    cpu.m_b &= 0x42;

    // E091: CLRA 
    cpu.m_a = 0;

    // E092: XCLRA 
    // TODO: Convert XCLRA 

    // E093: LSRB 
    cpu.m_b >>= 1;

    // E094: COMB 
    cpu.m_b = ~cpu.m_b;

    // E095: BRA $E0DD
    goto label_E0DD;

    // E097: CLRA 
    cpu.m_a = 0;

    label_E098:
    // E098: XNCB 
    // TODO: Convert XNCB 

    // E099: BRA $E0ED
    goto label_E0ED;

    // E09B: LSRA 
    cpu.m_a >>= 1;

    // E09C: TSTA 
    cpu.test_a();

    // E09D: NEGA 
    cpu.m_a = -cpu.m_a;

    // E09E: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E09F: XCLRA 
    // TODO: Convert XCLRA 

    // E0A0: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E0A1: XCLRA 
    // TODO: Convert XCLRA 

    // E0A2: ASRA 
    // TODO: Convert ASRA 

    // E0A3: BRA $E0EA
    goto label_E0EA;

    // E0A5: XCLRA 
    // TODO: Convert XCLRA 

    label_E0A6:
    // E0A6: LSRA 
    cpu.m_a >>= 1;

    // E0A7: XNCB 
    // TODO: Convert XNCB 

    // E0A8: ASRA 
    // TODO: Convert ASRA 

    // E0A9: ADCB <$35
    cpu.add_b_with_carry(0x35);

    // E0AB: BGE $E0DD
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xE0DD;

    // E0AD: LEAX -$10,Y
    // TODO: Fix comma operator: LEAX -$10,Y

    // E0AF: BRA $E0D1
    goto label_E0D1;

    // E0B1: EORB <$41
    cpu.m_b ^= 0x41;

    // E0B3: LSRA 
    cpu.m_a >>= 1;

    // E0B4: LSRA 
    cpu.m_a >>= 1;

    // E0B5: LSRA 
    cpu.m_a >>= 1;

    // E0B6: LSRA 
    cpu.m_a >>= 1;

    // E0B7: BRA $E10D
    goto label_E10D;

    label_E0B9:
    // E0B9: CLRA 
    cpu.m_a = 0;

    // E0BA: BRA $E100
    goto label_E100;

    // E0BC: LSRA 
    cpu.m_a >>= 1;

    // E0BD: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E0BE: INCA 
    cpu.m_a++;

    // E0BF: LSRA 
    cpu.m_a >>= 1;

    // E0C0: COMA 
    cpu.m_a = ~cpu.m_a;

    // E0C1: LSRB 
    cpu.m_b >>= 1;

    // E0C2: CLRA 
    cpu.m_a = 0;

    label_E0C3:
    // E0C3: XNCB 
    // TODO: Convert XNCB 

    // E0C4: BRA $E119
    goto label_E119;

    // E0C6: ASLA 
    cpu.m_a <<= 1;

    // E0C7: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E0C8: LSRA 
    cpu.m_a >>= 1;

    // E0C9: INCA 
    cpu.m_a++;

    // E0CA: ANDB #$53
    cpu.m_b &= 0x53;

    // E0CC: ASLA 
    cpu.m_a <<= 1;

    // E0CD: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E0CE: LSRA 
    cpu.m_a >>= 1;

    // E0CF: INCA 
    cpu.m_a++;

    // E0D0: LSRA 
    cpu.m_a >>= 1;

    label_E0D1:
    // E0D1: BRA $E114
    goto label_E114;

    // E0D3: LSRB 
    cpu.m_b >>= 1;

    // E0D4: BRA $E11C
    // TODO: External jump to 0xE11C - not implemented

    label_E0D6:
    // E0D6: LSRB 
    cpu.m_b >>= 1;

    // E0D7: INCA 
    cpu.m_a++;

    label_E0D8:
    // E0D8: INCA 
    cpu.m_a++;

    // E0D9: BRA $E12E
    goto label_E12E;

    // E0DB: LSRB 
    cpu.m_b >>= 1;

    // E0DC: XNCB 
    // TODO: Convert XNCB 

    label_E0DD:
    // E0DD: LSRA 
    cpu.m_a >>= 1;

    // E0DE: XCLRA 
    // TODO: Convert XCLRA 

    // E0DF: ASRA 
    // TODO: Convert ASRA 

    // E0E0: LSRB 
    cpu.m_b >>= 1;

    // E0E1: EORB #$53
    cpu.m_b ^= 0x53;

    // E0E3: LSRB 
    cpu.m_b >>= 1;

    // E0E4: NEGA 
    cpu.m_a = -cpu.m_a;

    // E0E5: XNCB 
    // TODO: Convert XNCB 

    // E0E6: LSRB 
    cpu.m_b >>= 1;

    // E0E7: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E0E8: XCLRA 
    // TODO: Convert XCLRA 

    // E0E9: ASRA 
    // TODO: Convert ASRA 

    label_E0EA:
    // E0EA: BRA $E143
    goto label_E143;

    // E0EC: NEGA 
    cpu.m_a = -cpu.m_a;

    label_E0ED:
    // E0ED: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E0EE: LSRA 
    cpu.m_a >>= 1;

    // E0EF: BRA $E133
    goto label_E133;

    // E0F1: CLRA 
    cpu.m_a = 0;

    // E0F2: XCLRA 
    // TODO: Convert XCLRA 

    // E0F3: LSRB 
    cpu.m_b >>= 1;

    // E0F4: ADDD <$53
    cpu.m_d += 0x53;

    // E0F6: ASLA 
    cpu.m_a <<= 1;

    // E0F7: CLRA 
    cpu.m_a = 0;

    // E0F8: CLRA 
    cpu.m_a = 0;

    // E0F9: LSRB 
    cpu.m_b >>= 1;

    // E0FA: BRA $E142
    goto label_E142;

    // E0FC: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E0FD: XNCB 
    // TODO: Convert XNCB 

    // E0FE: LSRA 
    cpu.m_a >>= 1;

    // E0FF: XNCA 
    // TODO: Convert XNCA 

    label_E100:
    // E100: NEGA 
    cpu.m_a = -cpu.m_a;

    // E101: INCA 
    cpu.m_a++;

    // E102: INCA 
    cpu.m_a++;

    // E103: ADDD <$53
    cpu.m_d += 0x53;

    // E105: ASLA 
    cpu.m_a <<= 1;

    // E106: CLRA 
    cpu.m_a = 0;

    // E107: CLRA 
    cpu.m_a = 0;

    // E108: LSRB 
    cpu.m_b >>= 1;

    // E109: BRA $E15F
    goto label_E15F;

    // E10B: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E10C: LSRA 
    cpu.m_a >>= 1;

    label_E10D:
    // E10D: BRA $E155
    goto label_E155;

    // E10F: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E110: ASRA 
    // TODO: Convert ASRA 

    // E111: ASLA 
    cpu.m_a <<= 1;

    // E112: LSRB 
    cpu.m_b >>= 1;

    // E113: LSRA 
    cpu.m_a >>= 1;

    label_E114:
    // E114: XNCB 
    // TODO: Convert XNCB 

    // E115: ADDD <$41
    cpu.m_d += 0x41;

    // E117: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E118: CLRA 
    cpu.m_a = 0;

    label_E119:
    // E119: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E11A: LSRA 
    cpu.m_a >>= 1;

    // E11B: BRA $E160
    // TODO: External jump to 0xE160 - not implemented

    // E11D: NEGA 
    cpu.m_a = -cpu.m_a;

    // E11E: LSRB 
    cpu.m_b >>= 1;

    // E11F: ASRB 
    // TODO: Convert ASRB 

    // E120: NEGA 
    cpu.m_a = -cpu.m_a;

    // E121: INCA 
    cpu.m_a++;

    // E122: XDECA 
    cpu.m_a--;

    // E123: ADDD <$55
    cpu.m_d += 0x55;

    // E125: COMB 
    cpu.m_b = ~cpu.m_b;

    // E126: LSRA 
    cpu.m_a >>= 1;

    // E127: BRA $E17D
    goto label_E17D;

    // E129: ASLA 
    cpu.m_a <<= 1;

    // E12A: LSRA 
    cpu.m_a >>= 1;

    // E12B: BRA $E173
    goto label_E173;

    // E12D: CLRA 
    cpu.m_a = 0;

    label_E12E:
    // E12E: XNCB 
    // TODO: Convert XNCB 

    // E12F: COMA 
    cpu.m_a = ~cpu.m_a;

    // E130: BITB #$20
    // TODO: Convert BITB #$20

    // E132: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    label_E133:
    // E133: CLRA 
    cpu.m_a = 0;

    // E134: XNCB 
    // TODO: Convert XNCB 

    // E135: BRA $E18C
    goto label_E18C;

    // E137: COMB 
    cpu.m_b = ~cpu.m_b;

    // E138: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E139: XCLRA 
    // TODO: Convert XCLRA 

    // E13A: ASRA 
    // TODO: Convert ASRA 

    // E13B: BRA $E191
    goto label_E191;

    // E13D: ASLA 
    cpu.m_a <<= 1;

    // E13E: LSRA 
    cpu.m_a >>= 1;

    // E13F: BRA $E187
    goto label_E187;

    // E141: CLRA 
    cpu.m_a = 0;

    label_E142:
    // E142: XNCB 
    // TODO: Convert XNCB 

    label_E143:
    // E143: COMA 
    cpu.m_a = ~cpu.m_a;

    // E144: BITB #$4F
    // TODO: Convert BITB #$4F

    // E146: XNCA 
    // TODO: Convert XNCA 

    // E147: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E148: BLT $E1A1
    if (cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xE1A1;

    // E14A: NEGA 
    cpu.m_a = -cpu.m_a;

    // E14B: XCLRA 
    // TODO: Convert XCLRA 

    // E14C: BRA $E199
    goto label_E199;

    // E14E: LSRA 
    cpu.m_a >>= 1;

    // E14F: XCLRA 
    // TODO: Convert XCLRA 

    // E150: CLRA 
    cpu.m_a = 0;

    // E151: XNCA 
    // TODO: Convert XNCA 

    // E152: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E153: BRA $E19E
    goto label_E19E;

    label_E155:
    // E155: COMB 
    cpu.m_b = ~cpu.m_b;

    // E156: BRA $E19F
    goto label_E19F;

    // E158: CLRA 
    cpu.m_a = 0;

    // E159: XCLRA 
    // TODO: Convert XCLRA 

    // E15A: LSRA 
    cpu.m_a >>= 1;

    // E15B: BRA $E19F
    goto label_E19F;

    // E15D: LSRB 
    cpu.m_b >>= 1;

    // E15E: LSRB 
    cpu.m_b >>= 1;

    label_E15F:
    // E15F: BRA $E1A9
    goto label_E1A9;

    // E161: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E162: ADDD <$50
    cpu.m_d += 0x50;

    // E164: XNCB 
    // TODO: Convert XNCB 

    // E165: LSRA 
    cpu.m_a >>= 1;

    // E166: COMB 
    cpu.m_b = ~cpu.m_b;

    // E167: LSRA 
    cpu.m_a >>= 1;

    // E168: XCLRA 
    // TODO: Convert XCLRA 

    // E169: COMA 
    cpu.m_a = ~cpu.m_a;

    // E16A: LSRA 
    cpu.m_a >>= 1;

    // E16B: BRA $E1B6
    goto label_E1B6;

    // E16D: COMB 
    cpu.m_b = ~cpu.m_b;

    // E16E: BRA $E1B6
    goto label_E1B6;

    // E170: LSRA 
    cpu.m_a >>= 1;

    // E171: INCA 
    cpu.m_a++;

    // E172: LSRB 
    cpu.m_b >>= 1;

    label_E173:
    // E173: BRA $E1CC
    goto label_E1CC;

    // E175: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E176: LSRB 
    cpu.m_b >>= 1;

    // E177: ASLA 
    cpu.m_a <<= 1;

    // E178: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E179: XCLRA 
    // TODO: Convert XCLRA 

    // E17A: BRA $E1D0
    goto label_E1D0;

    // E17C: ASLA 
    cpu.m_a <<= 1;

    label_E17D:
    // E17D: LSRA 
    cpu.m_a >>= 1;

    // E17E: BRA $E1C6
    goto label_E1C6;

    // E180: CLRA 
    cpu.m_a = 0;

    // E181: XNCB 
    // TODO: Convert XNCB 

    // E182: COMA 
    cpu.m_a = ~cpu.m_a;

    // E183: LSRA 
    cpu.m_a >>= 1;

    // E184: LDX -$C,U
    // TODO: Fix comma operator: LDX -$C,U

    // E186: ASLA 
    cpu.m_a <<= 1;

    label_E187:
    // E187: LSRA 
    cpu.m_a >>= 1;

    // E188: BRA $E1CF
    goto label_E1CF;

    // E18A: TSTA 
    cpu.test_a();

    // E18B: NEGB 
    cpu.m_b = -cpu.m_b;

    label_E18C:
    // E18C: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E18D: XNCB 
    // TODO: Convert XNCB 

    // E18E: LSRA 
    cpu.m_a >>= 1;

    // E18F: BEQ $E1E4
    if (cpu.zero_flag()) cpu.m_pc = 0xE1E4;

    label_E191:
    // E191: BRA $E1D7
    // TODO: External jump to 0xE1D7 - not implemented

    // E193: LSRA 
    cpu.m_a >>= 1;

    // E194: NEGA 
    cpu.m_a = -cpu.m_a;

    // E195: LSRB 
    cpu.m_b >>= 1;

    // E196: ASLA 
    cpu.m_a <<= 1;

    // E197: BRA $E1EC
    goto label_E1EC;

    label_E199:
    // E199: LSRB 
    cpu.m_b >>= 1;

    // E19A: NEGA 
    cpu.m_a = -cpu.m_a;

    // E19B: XNCB 
    // TODO: Convert XNCB 

    // E19C: BGE $E1BE
    // TODO: External jump to 0xE1BE - not implemented

    label_E19E:
    // E19E: LSRB 
    cpu.m_b >>= 1;

    label_E19F:
    // E19F: XCLRA 
    // TODO: Convert XCLRA 

    // E1A0: LSRA 
    cpu.m_a >>= 1;

    // E1A1: LSRA 
    cpu.m_a >>= 1;

    // E1A2: XNCB 
    // TODO: Convert XNCB 

    // E1A3: BRA $E1F9
    goto label_E1F9;

    // E1A5: ASLA 
    cpu.m_a <<= 1;

    // E1A6: BITB #$43
    // TODO: Convert BITB #$43

    // E1A8: CLRA 
    cpu.m_a = 0;

    label_E1A9:
    // E1A9: TSTA 
    cpu.test_a();

    // E1AA: TSTA 
    cpu.test_a();

    // E1AB: NEGA 
    cpu.m_a = -cpu.m_a;

    // E1AC: XCLRA 
    // TODO: Convert XCLRA 

    // E1AD: LSRA 
    cpu.m_a >>= 1;

    // E1AE: BRA $E1FF
    goto label_E1FF;

    // E1B0: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E1B1: BRA $E1F7
    goto label_E1F7;

    // E1B3: NEGA 
    cpu.m_a = -cpu.m_a;

    // E1B4: XNCB 
    // TODO: Convert XNCB 

    // E1B5: LSRB 
    cpu.m_b >>= 1;

    label_E1B6:
    // E1B6: ASLA 
    cpu.m_a <<= 1;

    // E1B7: BRA $E20F
    // TODO: External jump to 0xE20F - not implemented

    // E1B9: NEGA 
    cpu.m_a = -cpu.m_a;

    // E1BA: LSRA 
    cpu.m_a >>= 1;

    // E1BB: LSRA 
    cpu.m_a >>= 1;

    // E1BC: XNCB 
    // TODO: Convert XNCB 

    // E1BD: BGE $E1DF
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xE1DF;

    // E1BF: XCLRA 
    // TODO: Convert XCLRA 

    // E1C0: LSRA 
    cpu.m_a >>= 1;

    // E1C1: NEGA 
    cpu.m_a = -cpu.m_a;

    // E1C2: XNCB 
    // TODO: Convert XNCB 

    // E1C3: COMB 
    cpu.m_b = ~cpu.m_b;

    // E1C4: BRA $E21A
    goto label_E21A;

    label_E1C6:
    // E1C6: ASLA 
    cpu.m_a <<= 1;

    // E1C7: BITB #$52
    // TODO: Convert BITB #$52

    // E1C9: LSRA 
    cpu.m_a >>= 1;

    // E1CA: XNCA 
    // TODO: Convert XNCA 

    // E1CB: LSRA 
    cpu.m_a >>= 1;

    label_E1CC:
    // E1CC: INCA 
    cpu.m_a++;

    // E1CD: BRA $E21F
    goto label_E21F;

    label_E1CF:
    // E1CF: INCA 
    cpu.m_a++;

    label_E1D0:
    // E1D0: NEGA 
    cpu.m_a = -cpu.m_a;

    // E1D1: XCLRA 
    // TODO: Convert XCLRA 

    // E1D2: LSRA 
    cpu.m_a >>= 1;

    // E1D3: LSRB 
    cpu.m_b >>= 1;

    // E1D4: BGT $E1F6
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xE1F6;

    // E1D6: BRA $E231
    // TODO: External jump to 0xE231 - not implemented

    // E1D8: CLRA 
    cpu.m_a = 0;

    // E1D9: LSRB 
    cpu.m_b >>= 1;

    // E1DA: BRA $E229
    goto label_E229;

    // E1DC: LSRB 
    cpu.m_b >>= 1;

    // E1DD: COMB 
    cpu.m_b = ~cpu.m_b;

    // E1DE: LSRB 
    cpu.m_b >>= 1;

    // E1DF: BRA $E22B
    goto label_E22B;

    // E1E1: CLRA 
    cpu.m_a = 0;

    // E1E2: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E1E3: XCLRA 
    // TODO: Convert XCLRA 

    // E1E4: BRA $E23A
    goto label_E23A;

    // E1E6: ASLA 
    cpu.m_a <<= 1;

    // E1E7: BITB #$52
    // TODO: Convert BITB #$52

    // E1E9: LSRA 
    cpu.m_a >>= 1;

    // E1EA: XNCA 
    // TODO: Convert XNCA 

    // E1EB: LSRA 
    cpu.m_a >>= 1;

    label_E1EC:
    // E1EC: INCA 
    cpu.m_a++;

    // E1ED: INCA 
    cpu.m_a++;

    // E1EE: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E1EF: CLRA 
    cpu.m_a = 0;

    // E1F0: XCLRA 
    // TODO: Convert XCLRA 

    // E1F1: BRA $E247
    goto label_E247;

    // E1F3: CLRA 
    cpu.m_a = 0;

    // E1F4: BRA $E249
    goto label_E249;

    // E1F6: LSRB 
    cpu.m_b >>= 1;

    label_E1F7:
    // E1F7: CLRA 
    cpu.m_a = 0;

    // E1F8: NEGB 
    cpu.m_b = -cpu.m_b;

    label_E1F9:
    // E1F9: BRA $E24F
    // TODO: External jump to 0xE24F - not implemented

    // E1FB: ASLA 
    cpu.m_a <<= 1;

    // E1FC: LSRA 
    cpu.m_a >>= 1;

    // E1FD: BRA $E244
    goto label_E244;

    label_E1FF:
    // E1FF: TSTA 
    cpu.test_a();

    // E200: NEGB 
    cpu.m_b = -cpu.m_b;

    // E201: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E202: XNCB 
    // TODO: Convert XNCB 

    // E203: LSRA 
    cpu.m_a >>= 1;

    // E204: LDX -$C,U
    // TODO: Fix comma operator: LDX -$C,U

    // E206: ASLA 
    cpu.m_a <<= 1;

    // E207: LSRA 
    cpu.m_a >>= 1;

    // E208: BRA $E250
    goto label_E250;

    // E20A: CLRA 
    cpu.m_a = 0;

    // E20B: XNCB 
    // TODO: Convert XNCB 

    // E20C: COMA 
    cpu.m_a = ~cpu.m_a;

    // E20D: LSRA 
    cpu.m_a >>= 1;

    // E20E: BRA $E267
    goto label_E267;

    // E210: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E211: INCA 
    cpu.m_a++;

    // E212: INCA 
    cpu.m_a++;

    // E213: BRA $E257
    goto label_E257;

    // E215: LSRA 
    cpu.m_a >>= 1;

    // E216: BRA $E26F
    goto label_E26F;

    // E218: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E219: LSRB 
    cpu.m_b >>= 1;

    label_E21A:
    // E21A: ASLA 
    cpu.m_a <<= 1;

    // E21B: BRA $E276
    goto label_E276;

    // E21D: CLRA 
    cpu.m_a = 0;

    // E21E: LSRB 
    cpu.m_b >>= 1;

    label_E21F:
    // E21F: LDX $1,U
    // TODO: Fix comma operator: LDX $1,U

    // E221: INCA 
    cpu.m_a++;

    // E222: ASRB 
    // TODO: Convert ASRB 

    // E223: NEGA 
    cpu.m_a = -cpu.m_a;

    // E224: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // E225: ADDD <$41
    cpu.m_d += 0x41;

    // E227: COMA 
    cpu.m_a = ~cpu.m_a;

    // E228: COMA 
    cpu.m_a = ~cpu.m_a;

    label_E229:
    // E229: CLRA 
    cpu.m_a = 0;

    // E22A: LSRB 
    cpu.m_b >>= 1;

    label_E22B:
    // E22B: XCLRA 
    // TODO: Convert XCLRA 

    // E22C: LSRB 
    cpu.m_b >>= 1;

    // E22D: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E22E: XCLRA 
    // TODO: Convert XCLRA 

    // E22F: ASRA 
    // TODO: Convert ASRA 

    // E230: BRA $E27B
    goto label_E27B;

    // E232: XCLRA 
    // TODO: Convert XCLRA 

    // E233: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E234: CLRA 
    cpu.m_a = 0;

    // E235: XNCB 
    // TODO: Convert XNCB 

    // E236: TSTA 
    cpu.test_a();

    // E237: NEGA 
    cpu.m_a = -cpu.m_a;

    // E238: LSRB 
    cpu.m_b >>= 1;

    // E239: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    label_E23A:
    // E23A: CLRA 
    cpu.m_a = 0;

    // E23B: LDU #$4155
    cpu.m_u = 0x4155;

    // E23E: ASLB 
    cpu.m_b <<= 1;

    // E23F: BRA $E284
    goto label_E284;

    // E241: CLRA 
    cpu.m_a = 0;

    // E242: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E243: XCLRA 
    // TODO: Convert XCLRA 

    label_E244:
    // E244: ADDD <$4C
    cpu.m_d += 0x4C;

    // E246: LSRA 
    cpu.m_a >>= 1;

    label_E247:
    // E247: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E248: LSRB 
    cpu.m_b >>= 1;

    label_E249:
    // E249: BRA $E298
    goto label_E298;

    // E24B: LSRA 
    cpu.m_a >>= 1;

    // E24C: COMA 
    cpu.m_a = ~cpu.m_a;

    // E24D: ASLA 
    cpu.m_a <<= 1;

    // E24E: BRA $E293
    goto label_E293;

    label_E250:
    // E250: CLRA 
    cpu.m_a = 0;

    // E251: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E252: XCLRA 
    // TODO: Convert XCLRA 

    // E253: ADDD <$52
    cpu.m_d += 0x52;

    // E255: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E256: ASRA 
    // TODO: Convert ASRA 

    label_E257:
    // E257: ASLA 
    cpu.m_a <<= 1;

    // E258: LSRB 
    cpu.m_b >>= 1;

    // E259: BRA $E2A8
    goto label_E2A8;

    // E25B: LSRA 
    cpu.m_a >>= 1;

    // E25C: COMA 
    cpu.m_a = ~cpu.m_a;

    // E25D: ASLA 
    cpu.m_a <<= 1;

    // E25E: BRA $E2A3
    // TODO: External jump to 0xE2A3 - not implemented

    // E260: CLRA 
    cpu.m_a = 0;

    // E261: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E262: XCLRA 
    // TODO: Convert XCLRA 

    // E263: ADDD <$54
    cpu.m_d += 0x54;

    // E265: CLRA 
    cpu.m_a = 0;

    // E266: LSRB 
    cpu.m_b >>= 1;

    label_E267:
    // E267: NEGA 
    cpu.m_a = -cpu.m_a;

    // E268: INCA 
    cpu.m_a++;

    // E269: BRA $E2AE
    goto label_E2AE;

    // E26B: CLRA 
    cpu.m_a = 0;

    // E26C: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E26D: XCLRA 
    // TODO: Convert XCLRA 

    // E26E: COMB 
    cpu.m_b = ~cpu.m_b;

    label_E26F:
    // E26F: BRA $E2C1
    // TODO: External jump to 0xE2C1 - not implemented

    // E271: NEGA 
    cpu.m_a = -cpu.m_a;

    // E272: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E273: ANDB #$47
    cpu.m_b &= 0x47;

    // E275: NEGA 
    cpu.m_a = -cpu.m_a;

    label_E276:
    // E276: TSTA 
    cpu.test_a();

    // E277: LSRA 
    cpu.m_a >>= 1;

    // E278: COMB 
    cpu.m_b = ~cpu.m_b;

    // E279: BRA $E2CB
    // TODO: External jump to 0xE2CB - not implemented

    label_E27B:
    // E27B: INCA 
    cpu.m_a++;

    // E27C: NEGA 
    cpu.m_a = -cpu.m_a;

    // E27D: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // E27E: LSRA 
    cpu.m_a >>= 1;

    // E27F: ANDB #$48
    cpu.m_b &= 0x48;

    // E281: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E282: ASRA 
    // TODO: Convert ASRA 

    // E283: ASLA 
    cpu.m_a <<= 1;

    label_E284:
    // E284: BRA $E2DD
    goto label_E2DD;

    // E286: NEGA 
    cpu.m_a = -cpu.m_a;

    // E287: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E288: BITB #$54
    // TODO: Convert BITB #$54

    // E28A: CLRA 
    cpu.m_a = 0;

    // E28B: LSRB 
    cpu.m_b >>= 1;

    // E28C: NEGA 
    cpu.m_a = -cpu.m_a;

    // E28D: INCA 
    cpu.m_a++;

    // E28E: BRA $E2D7
    goto label_E2D7;

    // E290: NEGA 
    cpu.m_a = -cpu.m_a;

    // E291: TSTA 
    cpu.test_a();

    // E292: LSRA 
    cpu.m_a >>= 1;

    label_E293:
    // E293: BRA $E2E9
    goto label_E2E9;

    // E295: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E296: TSTA 
    cpu.test_a();

    // E297: LSRA 
    cpu.m_a >>= 1;

    label_E298:
    // E298: BRA $E2BA
    goto label_E2BA;

    // E29A: BRA $E2BC
    goto label_E2BC;

    // E29C: BRA $E2BE
    goto label_E2BE;

    // E29E: BRA $E2C0
    goto label_E2C0;

    // E2A0: BRA $E2C2
    goto label_E2C2;

    // E2A2: BRA $E2F7
    goto label_E2F7;

    // E2A4: LSRA 
    cpu.m_a >>= 1;

    // E2A5: COMA 
    cpu.m_a = ~cpu.m_a;

    // E2A6: CLRA 
    cpu.m_a = 0;

    // E2A7: XCLRA 
    // TODO: Convert XCLRA 

    label_E2A8:
    // E2A8: LSRA 
    cpu.m_a >>= 1;

    // E2A9: ADDD <$41
    cpu.m_d += 0x41;

    // E2AB: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E2AC: LSRA 
    cpu.m_a >>= 1;

    // E2AD: XNCB 
    // TODO: Convert XNCB 

    label_E2AE:
    // E2AE: NEGA 
    cpu.m_a = -cpu.m_a;

    // E2AF: ASRA 
    // TODO: Convert ASRA 

    // E2B0: LSRA 
    cpu.m_a >>= 1;

    // E2B1: BRA $E2FA
    goto label_E2FA;

    // E2B3: NEGA 
    cpu.m_a = -cpu.m_a;

    // E2B4: TSTA 
    cpu.test_a();

    // E2B5: LSRA 
    cpu.m_a >>= 1;

    // E2B6: BRA $E30C
    goto label_E30C;

    // E2B8: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E2B9: TSTA 
    cpu.test_a();

    label_E2BA:
    // E2BA: BITB #$54
    // TODO: Convert BITB #$54

    label_E2BC:
    // E2BC: CLRA 
    cpu.m_a = 0;

    // E2BD: LSRB 
    cpu.m_b >>= 1;

    label_E2BE:
    // E2BE: NEGA 
    cpu.m_a = -cpu.m_a;

    // E2BF: INCA 
    cpu.m_a++;

    label_E2C0:
    // E2C0: BRA $E316
    goto label_E316;

    label_E2C2:
    // E2C2: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E2C3: TSTA 
    cpu.test_a();

    // E2C4: LSRA 
    cpu.m_a >>= 1;

    // E2C5: BRA $E316
    goto label_E316;

    // E2C7: XCLRA 
    // TODO: Convert XCLRA 

    // E2C8: BRA $E2EA
    goto label_E2EA;

    // E2CA: BRA $E2EC
    goto label_E2EC;

    // E2CC: BRA $E2EE
    goto label_E2EE;

    // E2CE: BRA $E2F0
    goto label_E2F0;

    // E2D0: BRA $E2F2
    goto label_E2F2;

    // E2D2: BRA $E327
    goto label_E327;

    // E2D4: LSRA 
    cpu.m_a >>= 1;

    // E2D5: COMA 
    cpu.m_a = ~cpu.m_a;

    // E2D6: CLRA 
    cpu.m_a = 0;

    label_E2D7:
    // E2D7: XCLRA 
    // TODO: Convert XCLRA 

    // E2D8: LSRA 
    cpu.m_a >>= 1;

    // E2D9: ADDD <$50
    cpu.m_d += 0x50;

    // E2DB: LSRA 
    cpu.m_a >>= 1;

    // E2DC: XNCB 
    // TODO: Convert XNCB 

    label_E2DD:
    // E2DD: COMA 
    cpu.m_a = ~cpu.m_a;

    // E2DE: LSRA 
    cpu.m_a >>= 1;

    // E2DF: XCLRA 
    // TODO: Convert XCLRA 

    // E2E0: LSRB 
    cpu.m_b >>= 1;

    // E2E1: NEGA 
    cpu.m_a = -cpu.m_a;

    // E2E2: ASRA 
    // TODO: Convert ASRA 

    // E2E3: LSRA 
    cpu.m_a >>= 1;

    // E2E4: BRA $E335
    goto label_E335;

    // E2E6: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E2E7: BRA $E339
    goto label_E339;

    label_E2E9:
    // E2E9: INCA 
    cpu.m_a++;

    label_E2EA:
    // E2EA: NEGA 
    cpu.m_a = -cpu.m_a;

    // E2EB: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    label_E2EC:
    // E2EC: BRA $E30E
    goto label_E30E;

    label_E2EE:
    // E2EE: BRA $E310
    goto label_E310;

    label_E2F0:
    // E2F0: BRA $E342
    // TODO: External jump to 0xE342 - not implemented

    label_E2F2:
    // E2F2: LSRA 
    cpu.m_a >>= 1;

    // E2F3: XNCB 
    // TODO: Convert XNCB 

    // E2F4: COMA 
    cpu.m_a = ~cpu.m_a;

    // E2F5: LSRA 
    cpu.m_a >>= 1;

    // E2F6: XCLRA 
    // TODO: Convert XCLRA 

    label_E2F7:
    // E2F7: ANDB <$48
    cpu.m_b &= 0x48;

    // E2F9: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    label_E2FA:
    // E2FA: COMB 
    cpu.m_b = ~cpu.m_b;

    // E2FB: LSRB 
    cpu.m_b >>= 1;

    // E2FC: CLRA 
    cpu.m_a = 0;

    // E2FD: XNCB 
    // TODO: Convert XNCB 

    // E2FE: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // E2FF: BRA $E350
    goto label_E350;

    // E301: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E302: BRA $E34B
    goto label_E34B;

    // E304: NEGA 
    cpu.m_a = -cpu.m_a;

    // E305: TSTA 
    cpu.test_a();

    // E306: LSRA 
    cpu.m_a >>= 1;

    // E307: BRA $E35D
    goto label_E35D;

    // E309: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E30A: TSTA 
    cpu.test_a();

    // E30B: LSRA 
    cpu.m_a >>= 1;

    label_E30C:
    // E30C: ADDD <$47
    cpu.m_d += 0x47;

    label_E30E:
    // E30E: NEGA 
    cpu.m_a = -cpu.m_a;

    // E30F: TSTA 
    cpu.test_a();

    label_E310:
    // E310: LSRA 
    cpu.m_a >>= 1;

    // E311: BRA $E362
    goto label_E362;

    // E313: NEGB 
    cpu.m_b = -cpu.m_b;

    // E314: LSRB 
    cpu.m_b >>= 1;

    // E315: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    label_E316:
    // E316: CLRA 
    cpu.m_a = 0;

    // E317: XCLRA 
    // TODO: Convert XCLRA 

    // E318: ADDD <$56
    cpu.m_d += 0x56;

    // E31A: NEGA 
    cpu.m_a = -cpu.m_a;

    // E31B: INCA 
    cpu.m_a++;

    // E31C: LSRB 
    cpu.m_b >>= 1;

    // E31D: LSRA 
    cpu.m_a >>= 1;

    // E31E: BRA $E36F
    goto label_E36F;

    // E320: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E321: BRA $E364
    goto label_E364;

    // E323: BRA $E368
    goto label_E368;

    // E325: CLRA 
    cpu.m_a = 0;

    // E326: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    label_E327:
    // E327: LDU #$4C45
    cpu.m_u = 0x4C45;

    // E32A: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E32B: LSRB 
    cpu.m_b >>= 1;

    // E32C: BRA $E37B
    goto label_E37B;

    // E32E: LSRA 
    cpu.m_a >>= 1;

    // E32F: COMA 
    cpu.m_a = ~cpu.m_a;

    // E330: ASLA 
    cpu.m_a <<= 1;

    // E331: BRA $E389
    goto label_E389;

    // E333: NEGA 
    cpu.m_a = -cpu.m_a;

    // E334: INCA 
    cpu.m_a++;

    label_E335:
    // E335: LSRB 
    cpu.m_b >>= 1;

    // E336: BITB #$52
    // TODO: Convert BITB #$52

    // E338: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    label_E339:
    // E339: ASRA 
    // TODO: Convert ASRA 

    // E33A: ASLA 
    cpu.m_a <<= 1;

    // E33B: LSRB 
    cpu.m_b >>= 1;

    // E33C: BRA $E38B
    goto label_E38B;

    // E33E: LSRA 
    cpu.m_a >>= 1;

    // E33F: COMA 
    cpu.m_a = ~cpu.m_a;

    // E340: ASLA 
    cpu.m_a <<= 1;

    // E341: BRA $E399
    goto label_E399;

    // E343: NEGA 
    cpu.m_a = -cpu.m_a;

    // E344: INCA 
    cpu.m_a++;

    // E345: LSRB 
    cpu.m_b >>= 1;

    // E346: BITB #$42
    // TODO: Convert BITB #$42

    // E348: CLRA 
    cpu.m_a = 0;

    // E349: XCLRA 
    // TODO: Convert XCLRA 

    // E34A: LSRB 
    cpu.m_b >>= 1;

    label_E34B:
    // E34B: COMB 
    cpu.m_b = ~cpu.m_b;

    // E34C: BRA $E38F
    goto label_E38F;

    // E34E: LSRA 
    cpu.m_a >>= 1;

    // E34F: LSRA 
    cpu.m_a >>= 1;

    label_E350:
    // E350: LSRA 
    cpu.m_a >>= 1;

    // E351: SBCB <$53
    cpu.sub_b_with_carry(0x53);

    // E353: LSRB 
    cpu.m_b >>= 1;

    // E354: NEGA 
    cpu.m_a = -cpu.m_a;

    // E355: XNCB 
    // TODO: Convert XNCB 

    // E356: LSRB 
    cpu.m_b >>= 1;

    // E357: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E358: XCLRA 
    // TODO: Convert XCLRA 

    // E359: ASRA 
    // TODO: Convert ASRA 

    // E35A: BRA $E3AF
    // TODO: External jump to 0xE3AF - not implemented

    // E35C: ASLA 
    cpu.m_a <<= 1;

    label_E35D:
    // E35D: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E35E: LSRA 
    cpu.m_a >>= 1;

    // E35F: INCA 
    cpu.m_a++;

    // E360: ANDB #$50
    cpu.m_b &= 0x50;

    label_E362:
    // E362: INCA 
    cpu.m_a++;

    // E363: NEGA 
    cpu.m_a = -cpu.m_a;

    label_E364:
    // E364: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // E365: BRA $E3AB
    goto label_E3AB;

    // E367: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    label_E368:
    // E368: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E369: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E36A: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E36B: COMA 
    cpu.m_a = ~cpu.m_a;

    // E36C: LSRB 
    cpu.m_b >>= 1;

    // E36D: INCA 
    cpu.m_a++;

    // E36E: LSRB 
    cpu.m_b >>= 1;

    label_E36F:
    // E36F: ADCB <$42
    cpu.add_b_with_carry(0x42);

    // E371: CLRA 
    cpu.m_a = 0;

    // E372: XCLRA 
    // TODO: Convert XCLRA 

    // E373: LSRB 
    cpu.m_b >>= 1;

    // E374: COMB 
    cpu.m_b = ~cpu.m_b;

    // E375: BRA $E3CA
    goto label_E3CA;

    // E377: ASLA 
    cpu.m_a <<= 1;

    // E378: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E379: LSRA 
    cpu.m_a >>= 1;

    // E37A: INCA 
    cpu.m_a++;

    label_E37B:
    // E37B: ANDB #$4D
    cpu.m_b &= 0x4D;

    // E37D: LSRB 
    cpu.m_b >>= 1;

    // E37E: COMB 
    cpu.m_b = ~cpu.m_b;

    // E37F: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E380: COMA 
    cpu.m_a = ~cpu.m_a;

    // E381: BRA $E3CC
    goto label_E3CC;

    // E383: XCLRA 
    // TODO: Convert XCLRA 

    // E384: BRA $E3C7
    goto label_E3C7;

    // E386: LSRB 
    cpu.m_b >>= 1;

    // E387: LSRB 
    cpu.m_b >>= 1;

    // E388: XNCB 
    // TODO: Convert XNCB 

    label_E389:
    // E389: NEGA 
    cpu.m_a = -cpu.m_a;

    // E38A: COMA 
    cpu.m_a = ~cpu.m_a;

    label_E38B:
    // E38B: ANDB <$52
    cpu.m_b &= 0x52;

    // E38D: LSRA 
    cpu.m_a >>= 1;

    // E38E: COMB 
    cpu.m_b = ~cpu.m_b;

    label_E38F:
    // E38F: LSRA 
    cpu.m_a >>= 1;

    // E390: LSRB 
    cpu.m_b >>= 1;

    // E391: BRA $E3DB
    goto label_E3DB;

    // E393: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E394: ASRA 
    // TODO: Convert ASRA 

    // E395: ASLA 
    cpu.m_a <<= 1;

    // E396: BRA $E3EB
    // TODO: External jump to 0xE3EB - not implemented

    // E398: COMA 
    cpu.m_a = ~cpu.m_a;

    label_E399:
    // E399: CLRA 
    cpu.m_a = 0;

    // E39A: XNCB 
    // TODO: Convert XNCB 

    // E39B: LSRA 
    cpu.m_a >>= 1;

    // E39C: ADDD <$52
    cpu.m_d += 0x52;

    // E39E: LSRA 
    cpu.m_a >>= 1;

    // E39F: COMB 
    cpu.m_b = ~cpu.m_b;

    // E3A0: LSRA 
    cpu.m_a >>= 1;

    // E3A1: LSRB 
    cpu.m_b >>= 1;

    // E3A2: BRA $E3F8
    goto label_E3F8;

    // E3A4: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E3A5: TSTA 
    cpu.test_a();

    // E3A6: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E3A7: XCLRA 
    // TODO: Convert XCLRA 

    // E3A8: ASRA 
    // TODO: Convert ASRA 

    // E3A9: BRA $E3F4
    goto label_E3F4;

    label_E3AB:
    // E3AB: XCLRA 
    // TODO: Convert XCLRA 

    // E3AC: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E3AD: XSTU #$5245
    // TODO: Convert XSTU #$5245

    // E3B0: COMB 
    cpu.m_b = ~cpu.m_b;

    // E3B1: LSRA 
    cpu.m_a >>= 1;

    // E3B2: LSRB 
    cpu.m_b >>= 1;

    // E3B3: BRA $E404
    goto label_E404;

    // E3B5: NEGB 
    cpu.m_b = -cpu.m_b;

    // E3B6: LSRB 
    cpu.m_b >>= 1;

    // E3B7: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E3B8: CLRA 
    cpu.m_a = 0;

    // E3B9: XCLRA 
    // TODO: Convert XCLRA 

    // E3BA: ADDD <$54
    cpu.m_d += 0x54;

    // E3BC: LSRA 
    cpu.m_a >>= 1;

    // E3BD: COMB 
    cpu.m_b = ~cpu.m_b;

    // E3BE: LSRB 
    cpu.m_b >>= 1;

    // E3BF: BRA $E40F
    goto label_E40F;

    // E3C1: CLRA 
    cpu.m_a = 0;

    // E3C2: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E3C3: XNCB 
    // TODO: Convert XNCB 

    // E3C4: NEGA 
    cpu.m_a = -cpu.m_a;

    // E3C5: XHCF 
    // TODO: Convert XHCF 

    // E3C6: LSRB 
    cpu.m_b >>= 1;

    label_E3C7:
    // E3C7: NEGB 
    cpu.m_b = -cpu.m_b;

    // E3C8: BGE $E40E
    // TODO: External jump to 0xE40E - not implemented

    label_E3CA:
    // E3CA: CLRA 
    cpu.m_a = 0;

    // E3CB: ASRB 
    // TODO: Convert ASRB 

    label_E3CC:
    // E3CC: XCLRA 
    // TODO: Convert XCLRA 

    // E3CD: BRA $E423
    // TODO: External jump to 0xE423 - not implemented

    // E3CF: CLRA 
    cpu.m_a = 0;

    // E3D0: BRA $E425
    goto label_E425;

    // E3D2: LSRA 
    cpu.m_a >>= 1;

    // E3D3: INCA 
    cpu.m_a++;

    // E3D4: LSRA 
    cpu.m_a >>= 1;

    // E3D5: COMA 
    cpu.m_a = ~cpu.m_a;

    // E3D6: LSRB 
    cpu.m_b >>= 1;

    // E3D7: BRA $E422
    goto label_E422;

    // E3D9: LSRB 
    cpu.m_b >>= 1;

    // E3DA: LSRA 
    cpu.m_a >>= 1;

    label_E3DB:
    // E3DB: XHCF 
    // TODO: Convert XHCF 

    // E3DC: NEGB 
    cpu.m_b = -cpu.m_b;

    // E3DD: LSRB 
    cpu.m_b >>= 1;

    // E3DE: INCA 
    cpu.m_a++;

    // E3DF: INCA 
    cpu.m_a++;

    // E3E0: BRA $E42E
    goto label_E42E;

    label_E3E2:
    // E3E2: LSRA 
    cpu.m_a >>= 1;

    // E3E3: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E3E4: LSRB 
    cpu.m_b >>= 1;

    // E3E5: BRA $E42D
    goto label_E42D;

    // E3E7: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E3E8: XNCB 
    // TODO: Convert XNCB 

    // E3E9: LSRA 
    cpu.m_a >>= 1;

    // E3EA: BRA $E440
    goto label_E440;

    // E3EC: CLRA 
    cpu.m_a = 0;

    // E3ED: BRA $E432
    // TODO: External jump to 0xE432 - not implemented

    // E3EF: ASLA 
    cpu.m_a <<= 1;

    // E3F0: NEGA 
    cpu.m_a = -cpu.m_a;

    // E3F1: XCLRA 
    // TODO: Convert XCLRA 

    // E3F2: ASRA 
    // TODO: Convert ASRA 

    // E3F3: LSRA 
    cpu.m_a >>= 1;

    label_E3F4:
    // E3F4: BRA $E449
    goto label_E449;

    // E3F6: LSRA 
    cpu.m_a >>= 1;

    // E3F7: LSRB 
    cpu.m_b >>= 1;

    label_E3F8:
    // E3F8: LSRB 
    cpu.m_b >>= 1;

    // E3F9: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E3FA: XCLRA 
    // TODO: Convert XCLRA 

    // E3FB: XSTB #$46
    // TODO: Convert XSTB #$46

    label_E3FD:
    // E3FD: XNCB 
    // TODO: Convert XNCB 

    // E3FE: LSRA 
    cpu.m_a >>= 1;

    // E3FF: LSRA 
    cpu.m_a >>= 1;

    // E400: BRA $E452
    goto label_E452;

    // E402: INCA 
    cpu.m_a++;

    // E403: NEGA 
    cpu.m_a = -cpu.m_a;

    label_E404:
    // E404: ADCB <$32
    cpu.add_b_with_carry(0x32);

    label_E406:
    // E406: BRA $E44B
    // TODO: External jump to 0xE44B - not implemented

    // E408: XNCB 
    // TODO: Convert XNCB 

    // E409: LSRA 
    cpu.m_a >>= 1;

    // E40A: LSRA 
    cpu.m_a >>= 1;

    // E40B: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E40C: LSRB 
    cpu.m_b >>= 1;

    // E40D: ADDD <$31
    cpu.m_d += 0x31;

    label_E40F:
    // E40F: BRA $E454
    // TODO: External jump to 0xE454 - not implemented

    // E411: XNCB 
    // TODO: Convert XNCB 

    // E412: LSRA 
    cpu.m_a >>= 1;

    // E413: LSRA 
    cpu.m_a >>= 1;

    // E414: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E415: ANDB <$25
    cpu.m_b &= 0x25;

    // E417: BRA $E45C
    // TODO: External jump to 0xE45C - not implemented

    // E419: XNCB 
    // TODO: Convert XNCB 

    // E41A: LSRA 
    cpu.m_a >>= 1;

    // E41B: LSRA 
    cpu.m_a >>= 1;

    // E41C: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E41D: ANDB <$B1
    cpu.m_b &= 0xB1;

    // E41F: SBCA $B1B4
    cpu.sub_a_with_carry(cpu.read_memory(0xB1B4));

    label_E422:
    // E422: BITA $B64E
    // TODO: Convert BITA $B64E

    label_E425:
    // E425: CLRA 
    cpu.m_a = 0;

    // E426: XCLRA 
    // TODO: Convert XCLRA 

    // E427: BITB #$32
    // TODO: Convert BITB #$32

    // E429: BRA $E472
    goto label_E472;

    // E42B: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E42C: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    label_E42D:
    // E42D: LSRA 
    cpu.m_a >>= 1;

    label_E42E:
    // E42E: COMB 
    cpu.m_b = ~cpu.m_b;

    // E42F: BRA $E3E2
    goto label_E3E2;

    // E431: PSHS Y
    // TODO: Convert PSHS Y

    // E433: ASRA 
    // TODO: Convert ASRA 

    // E434: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E435: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E436: LSRA 
    cpu.m_a >>= 1;

    // E437: COMB 
    cpu.m_b = ~cpu.m_b;

    // E438: BRA $E3EB
    // TODO: External jump to 0xE3EB - not implemented

    // E43A: PSHS Y
    // TODO: Convert PSHS Y

    // E43C: ASRA 
    // TODO: Convert ASRA 

    // E43D: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E43E: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E43F: LSRA 
    cpu.m_a >>= 1;

    label_E440:
    // E440: COMB 
    cpu.m_b = ~cpu.m_b;

    // E441: BRA $E3F5
    // TODO: External jump to 0xE3F5 - not implemented

    // E443: PULS Y
    // TODO: Convert PULS Y

    // E445: ASRA 
    // TODO: Convert ASRA 

    // E446: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E447: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E448: LSRA 
    cpu.m_a >>= 1;

    label_E449:
    // E449: COMB 
    cpu.m_b = ~cpu.m_b;

    // E44A: BRA $E3FD
    goto label_E3FD;

    // E44C: LEAU $0,Y
    // TODO: Fix comma operator: LEAU $0,Y

    // E44E: ASRA 
    // TODO: Convert ASRA 

    // E44F: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E450: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E451: LSRA 
    cpu.m_a >>= 1;

    label_E452:
    // E452: COMB 
    cpu.m_b = ~cpu.m_b;

    // E453: BRA $E406
    goto label_E406;

    // E455: XCLRA 
    // TODO: Convert XCLRA 

    // E456: CLRA 
    cpu.m_a = 0;

    // E457: XCLRA 
    // TODO: Convert XCLRA 

    // E458: BITB #$B6
    // TODO: Convert BITB #$B6

    // E45A: STA $B8B9
    cpu.write_memory(0xB8B9, cpu.m_a);

    // E45D: LSRA 
    cpu.m_a >>= 1;

    // E45E: NEGA 
    cpu.m_a = -cpu.m_a;

    // E45F: COMB 
    cpu.m_b = ~cpu.m_b;

    // E460: ADCB <$4D
    cpu.add_b_with_carry(0x4D);

    // E462: CLRA 
    cpu.m_a = 0;

    // E463: LSRA 
    cpu.m_a >>= 1;

    // E464: LSRA 
    cpu.m_a >>= 1;

    // E465: XNCB 
    // TODO: Convert XNCB 

    // E466: NEGA 
    cpu.m_a = -cpu.m_a;

    // E467: LSRB 
    cpu.m_b >>= 1;

    // E468: BITB #$48
    // TODO: Convert BITB #$48

    // E46A: NEGA 
    cpu.m_a = -cpu.m_a;

    // E46B: XNCB 
    // TODO: Convert XNCB 

    // E46C: ANDB #$48
    cpu.m_b &= 0x48;

    // E46E: NEGA 
    cpu.m_a = -cpu.m_a;

    // E46F: XNCB 
    // TODO: Convert XNCB 

    // E470: LSRA 
    cpu.m_a >>= 1;

    // E471: LSRA 
    cpu.m_a >>= 1;

    label_E472:
    // E472: COMB 
    cpu.m_b = ~cpu.m_b;

    // E473: ANDB <$B0
    cpu.m_b &= 0xB0;

    // E475: CMPA $B2B3
    cpu.compare_a(cpu.read_memory(cpu.read_memory(0xB2B3)));

    label_E478:
    // E478: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // E479: LSRA 
    cpu.m_a >>= 1;

    // E47A: ADDD <$4E
    cpu.m_d += 0x4E;

    // E47C: XSTU #$4ECF
    // TODO: Convert XSTU #$4ECF

    // E47F: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // E480: LSRA 
    cpu.m_a >>= 1;

    // E481: ADDD <$4E
    cpu.m_d += 0x4E;

    // E483: XSTU #$5945
    // TODO: Convert XSTU #$5945

    // E486: ADDD <$4E
    cpu.m_d += 0x4E;

    // E488: XSTU #$5945
    // TODO: Convert XSTU #$5945

    // E48B: ADDD <$4E
    cpu.m_d += 0x4E;

    // E48D: XSTU #$5945
    // TODO: Convert XSTU #$5945

    // E490: ADDD <$4E
    cpu.m_d += 0x4E;

    // E492: CLRA 
    cpu.m_a = 0;

    // E493: BRA $E4DA
    goto label_E4DA;

    // E495: XNCB 
    // TODO: Convert XNCB 

    // E496: XNCB 
    // TODO: Convert XNCB 

    // E497: CLRA 
    cpu.m_a = 0;

    // E498: XNCB 
    // TODO: Convert XNCB 

    // E499: ADDD <$45
    cpu.m_d += 0x45;

    // E49B: XNCB 
    // TODO: Convert XNCB 

    // E49C: XNCB 
    // TODO: Convert XNCB 

    // E49D: CLRA 
    cpu.m_a = 0;

    // E49E: XNCB 
    // TODO: Convert XNCB 

    // E49F: BRA $E4E2
    goto label_E4E2;

    // E4A1: ANDB <$53
    cpu.m_b &= 0x53;

    // E4A3: ASRB 
    // TODO: Convert ASRB 

    // E4A4: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E4A5: LSRB 
    cpu.m_b >>= 1;

    // E4A6: COMA 
    cpu.m_a = ~cpu.m_a;

    // E4A7: ASLA 
    cpu.m_a <<= 1;

    // E4A8: BRA $E4FE
    goto label_E4FE;

    // E4AA: LSRA 
    cpu.m_a >>= 1;

    // E4AB: COMB 
    cpu.m_b = ~cpu.m_b;

    // E4AC: ANDB <$4C
    cpu.m_b &= 0x4C;

    // E4AE: LSRA 
    cpu.m_a >>= 1;

    // E4AF: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E4B0: LSRB 
    cpu.m_b >>= 1;

    // E4B1: BRA $E4F9
    goto label_E4F9;

    // E4B3: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E4B4: XNCB 
    // TODO: Convert XNCB 

    // E4B5: BITB #$52
    // TODO: Convert BITB #$52

    // E4B7: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E4B8: ASRA 
    // TODO: Convert ASRA 

    // E4B9: ASLA 
    cpu.m_a <<= 1;

    // E4BA: LSRB 
    cpu.m_b >>= 1;

    // E4BB: BRA $E503
    goto label_E503;

    // E4BD: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    label_E4BE:
    // E4BE: XNCB 
    // TODO: Convert XNCB 

    // E4BF: BITB #$53
    // TODO: Convert BITB #$53

    // E4C1: NEGB 
    cpu.m_b = -cpu.m_b;

    // E4C2: NEGA 
    cpu.m_a = -cpu.m_a;

    // E4C3: XNCB 
    // TODO: Convert XNCB 

    // E4C4: LSRA 
    cpu.m_a >>= 1;

    // E4C5: BRA $E478
    goto label_E478;

    // E4C7: COMB 
    cpu.m_b = ~cpu.m_b;

    // E4C8: LSRA 
    cpu.m_a >>= 1;

    // E4C9: INCA 
    cpu.m_a++;

    // E4CA: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E4CB: BRA $E521
    goto label_E521;

    // E4CD: LSRA 
    cpu.m_a >>= 1;

    // E4CE: COMB 
    cpu.m_b = ~cpu.m_b;

    // E4CF: ANDB <$53
    cpu.m_b &= 0x53;

    // E4D1: INCA 
    cpu.m_a++;

    // E4D2: NEGA 
    cpu.m_a = -cpu.m_a;

    // E4D3: XHCF 
    // TODO: Convert XHCF 

    // E4D4: NEGA 
    cpu.m_a = -cpu.m_a;

    // E4D5: LSRB 
    cpu.m_b >>= 1;

    // E4D6: ASLB 
    cpu.m_b <<= 1;

    // E4D7: BRA $E51C
    goto label_E51C;

    // E4D9: CLRA 
    cpu.m_a = 0;

    label_E4DA:
    // E4DA: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E4DB: LDU #$4C45
    cpu.m_u = 0x4C45;

    // E4DE: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E4DF: LSRB 
    cpu.m_b >>= 1;

    // E4E0: BRA $E525
    goto label_E525;

    label_E4E2:
    // E4E2: CLRA 
    cpu.m_a = 0;

    // E4E3: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E4E4: LDU #$5249
    cpu.m_u = 0x5249;

    // E4E7: ASRA 
    // TODO: Convert ASRA 

    // E4E8: ASLA 
    cpu.m_a <<= 1;

    // E4E9: LSRB 
    cpu.m_b >>= 1;

    // E4EA: BRA $E52F
    goto label_E52F;

    // E4EC: CLRA 
    cpu.m_a = 0;

    // E4ED: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E4EE: LDU #$A04C
    cpu.m_u = 0xA04C;

    // E4F1: LSRA 
    cpu.m_a >>= 1;

    // E4F2: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E4F3: LSRB 
    cpu.m_b >>= 1;

    // E4F4: BRA $E54A
    goto label_E54A;

    // E4F6: ASLA 
    cpu.m_a <<= 1;

    // E4F7: LSRB 
    cpu.m_b >>= 1;

    // E4F8: TSTA 
    cpu.test_a();

    label_E4F9:
    // E4F9: SBCB #$52
    cpu.sub_b_with_carry(0x52);

    // E4FB: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E4FC: ASRA 
    // TODO: Convert ASRA 

    // E4FD: ASLA 
    cpu.m_a <<= 1;

    label_E4FE:
    // E4FE: LSRB 
    cpu.m_b >>= 1;

    // E4FF: BRA $E555
    goto label_E555;

    // E501: ASLA 
    cpu.m_a <<= 1;

    // E502: LSRB 
    cpu.m_b >>= 1;

    label_E503:
    // E503: TSTA 
    cpu.test_a();

    // E504: SBCB #$53
    cpu.sub_b_with_carry(0x53);

    // E506: NEGB 
    cpu.m_b = -cpu.m_b;

    // E507: NEGA 
    cpu.m_a = -cpu.m_a;

    // E508: XNCB 
    // TODO: Convert XNCB 

    // E509: LSRA 
    cpu.m_a >>= 1;

    // E50A: BRA $E4BE
    goto label_E4BE;

    // E50C: SUBA -$10,U
    // TODO: Fix comma operator: SUBA -$10,U

    // E50E: CLRA 
    cpu.m_a = 0;

    // E50F: LSRB 
    cpu.m_b >>= 1;

    // E510: BRA $E566
    goto label_E566;

    // E512: LSRA 
    cpu.m_a >>= 1;

    // E513: COMB 
    cpu.m_b = ~cpu.m_b;

    // E514: ANDB <$48
    cpu.m_b &= 0x48;

    // E516: NEGA 
    cpu.m_a = -cpu.m_a;

    // E517: XNCB 
    // TODO: Convert XNCB 

    // E518: LSRA 
    cpu.m_a >>= 1;

    // E519: ASRB 
    // TODO: Convert ASRB 

    // E51A: NEGA 
    cpu.m_a = -cpu.m_a;

    // E51B: XNCB 
    // TODO: Convert XNCB 

    label_E51C:
    // E51C: LSRA 
    cpu.m_a >>= 1;

    // E51D: BRA $E564
    // TODO: External jump to 0xE564 - not implemented

    // E51F: XNCB 
    // TODO: Convert XNCB 

    // E520: XNCB 
    // TODO: Convert XNCB 

    label_E521:
    // E521: CLRA 
    cpu.m_a = 0;

    // E522: XNCB 
    // TODO: Convert XNCB 

    // E523: ADDD <$4E
    cpu.m_d += 0x4E;

    label_E525:
    // E525: CLRA 
    cpu.m_a = 0;

    // E526: BRA $E56D
    goto label_E56D;

    // E528: XNCB 
    // TODO: Convert XNCB 

    // E529: XNCB 
    // TODO: Convert XNCB 

    // E52A: CLRA 
    cpu.m_a = 0;

    // E52B: XNCB 
    // TODO: Convert XNCB 

    // E52C: COMB 
    cpu.m_b = ~cpu.m_b;

    // E52D: BRA $E573
    goto label_E573;

    label_E52F:
    // E52F: LSRA 
    cpu.m_a >>= 1;

    // E530: LSRB 
    cpu.m_b >>= 1;

    // E531: LSRA 
    cpu.m_a >>= 1;

    // E532: COMA 
    cpu.m_a = ~cpu.m_a;

    // E533: LSRB 
    cpu.m_b >>= 1;

    // E534: LSRA 
    cpu.m_a >>= 1;

    // E535: ANDB #$50
    cpu.m_b &= 0x50;

    // E537: XNCB 
    // TODO: Convert XNCB 

    // E538: CLRA 
    cpu.m_a = 0;

    // E539: ASRA 
    // TODO: Convert ASRA 

    // E53A: XNCB 
    // TODO: Convert XNCB 

    // E53B: NEGA 
    cpu.m_a = -cpu.m_a;

    // E53C: TSTA 
    cpu.test_a();

    // E53D: BRA $E591
    goto label_E591;

    // E53F: NEGA 
    cpu.m_a = -cpu.m_a;

    // E540: TSTA 
    cpu.test_a();

    // E541: BRA $E584
    goto label_E584;

    // E543: LSRB 
    cpu.m_b >>= 1;

    // E544: BRA $E578
    // TODO: External jump to 0xE578 - not implemented

    // E546: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E547: EORB #$4D
    cpu.m_b ^= 0x4D;

    // E549: NEGA 
    cpu.m_a = -cpu.m_a;

    label_E54A:
    // E54A: LSRB 
    cpu.m_b >>= 1;

    // E54B: ASLA 
    cpu.m_a <<= 1;

    // E54C: BRA $E5A0
    goto label_E5A0;

    // E54E: NEGA 
    cpu.m_a = -cpu.m_a;

    // E54F: TSTA 
    cpu.test_a();

    // E550: BRA $E593
    goto label_E593;

    // E552: LSRB 
    cpu.m_b >>= 1;

    // E553: BRA $E58A
    goto label_E58A;

    label_E555:
    // E555: LDB #$4D
    cpu.m_b = 0x4D;

    // E557: NEGA 
    cpu.m_a = -cpu.m_a;

    // E558: LSRB 
    cpu.m_b >>= 1;

    // E559: ASLA 
    cpu.m_a <<= 1;

    // E55A: BRA $E5AE
    goto label_E5AE;

    // E55C: NEGA 
    cpu.m_a = -cpu.m_a;

    // E55D: TSTA 
    cpu.test_a();

    // E55E: BRA $E5A1
    goto label_E5A1;

    // E560: LSRB 
    cpu.m_b >>= 1;

    // E561: BRA $E598
    // TODO: External jump to 0xE598 - not implemented

    // E563: EORB #$56
    cpu.m_b ^= 0x56;

    // E565: ASRA 
    // TODO: Convert ASRA 

    label_E566:
    // E566: BRA $E5BA
    goto label_E5BA;

    // E568: NEGA 
    cpu.m_a = -cpu.m_a;

    // E569: TSTA 
    cpu.test_a();

    // E56A: LEAX $0,Y
    // TODO: Fix comma operator: LEAX $0,Y

    // E56C: NEGA 
    cpu.m_a = -cpu.m_a;

    label_E56D:
    // E56D: LSRB 
    cpu.m_b >>= 1;

    // E56E: BRA $E5A3
    // TODO: External jump to 0xE5A3 - not implemented

    // E570: LDD #$5647
    cpu.m_d = 0x5647;

    label_E573:
    // E573: BRA $E5C7
    goto label_E5C7;

    // E575: NEGA 
    cpu.m_a = -cpu.m_a;

    // E576: TSTA 
    cpu.test_a();

    // E577: LEAY $0,Y
    // TODO: Fix comma operator: LEAY $0,Y

    // E579: NEGA 
    cpu.m_a = -cpu.m_a;

    // E57A: LSRB 
    cpu.m_b >>= 1;

    // E57B: BRA $E5B0
    // TODO: External jump to 0xE5B0 - not implemented

    // E57D: XHCF 
    // TODO: Convert XHCF 

    // E57E: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E57F: ASRA 
    // TODO: Convert ASRA 

    // E580: BRA $E5D4
    // TODO: External jump to 0xE5D4 - not implemented

    // E582: NEGA 
    cpu.m_a = -cpu.m_a;

    // E583: TSTA 
    cpu.test_a();

    label_E584:
    // E584: LEAS $0,Y
    // TODO: Fix comma operator: LEAS $0,Y

    // E586: NEGA 
    cpu.m_a = -cpu.m_a;

    // E587: LSRB 
    cpu.m_b >>= 1;

    // E588: BRA $E5BD
    goto label_E5BD;

    label_E58A:
    // E58A: SUBB <$56
    cpu.m_b -= 0x56;

    // E58C: ASRA 
    // TODO: Convert ASRA 

    // E58D: BRA $E5E1
    goto label_E5E1;

    // E58F: NEGA 
    cpu.m_a = -cpu.m_a;

    // E590: TSTA 
    cpu.test_a();

    label_E591:
    // E591: LEAU $0,Y
    // TODO: Fix comma operator: LEAU $0,Y

    label_E593:
    // E593: NEGA 
    cpu.m_a = -cpu.m_a;

    // E594: LSRB 
    cpu.m_b >>= 1;

    // E595: BRA $E5CB
    goto label_E5CB;

    // E597: LDD #$5647
    cpu.m_d = 0x5647;

    // E59A: BRA $E5EE
    goto label_E5EE;

    // E59C: NEGA 
    cpu.m_a = -cpu.m_a;

    // E59D: TSTA 
    cpu.test_a();

    // E59E: PSHS Y
    // TODO: Convert PSHS Y

    label_E5A0:
    // E5A0: NEGA 
    cpu.m_a = -cpu.m_a;

    label_E5A1:
    // E5A1: LSRB 
    cpu.m_b >>= 1;

    // E5A2: BRA $E5D8
    // TODO: External jump to 0xE5D8 - not implemented

    // E5A4: XHCF 
    // TODO: Convert XHCF 

    // E5A5: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E5A6: ASRA 
    // TODO: Convert ASRA 

    // E5A7: BRA $E5FB
    goto label_E5FB;

    // E5A9: NEGA 
    cpu.m_a = -cpu.m_a;

    // E5AA: TSTA 
    cpu.test_a();

    // E5AB: PULS Y
    // TODO: Convert PULS Y

    // E5AD: NEGA 
    cpu.m_a = -cpu.m_a;

    label_E5AE:
    // E5AE: LSRB 
    cpu.m_b >>= 1;

    // E5AF: BRA $E5E5
    goto label_E5E5;

    // E5B1: SUBB <$4E
    cpu.m_b -= 0x4E;

    // E5B3: CLRA 
    cpu.m_a = 0;

    // E5B4: XCLRA 
    // TODO: Convert XCLRA 

    // E5B5: BRA $E60D
    goto label_E60D;

    // E5B7: CLRA 
    cpu.m_a = 0;

    // E5B8: INCA 
    cpu.m_a++;

    // E5B9: NEGA 
    cpu.m_a = -cpu.m_a;

    label_E5BA:
    // E5BA: LSRB 
    cpu.m_b >>= 1;

    // E5BB: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E5BC: INCA 
    cpu.m_a++;

    label_E5BD:
    // E5BD: LSRA 
    cpu.m_a >>= 1;

    // E5BE: BRA $E612
    goto label_E612;

    // E5C0: NEGA 
    cpu.m_a = -cpu.m_a;

    // E5C1: TSTA 
    cpu.test_a();

    // E5C2: BRA $E605
    goto label_E605;

    // E5C4: LSRB 
    cpu.m_b >>= 1;

    // E5C5: BRA $E5F8
    goto label_E5F8;

    label_E5C7:
    // E5C7: BITB #$50
    // TODO: Convert BITB #$50

    // E5C9: XNCB 
    // TODO: Convert XNCB 

    // E5CA: CLRA 
    cpu.m_a = 0;

    label_E5CB:
    // E5CB: ASRA 
    // TODO: Convert ASRA 

    // E5CC: XNCB 
    // TODO: Convert XNCB 

    // E5CD: NEGA 
    cpu.m_a = -cpu.m_a;

    // E5CE: TSTA 
    cpu.test_a();

    // E5CF: BRA $E623
    // TODO: External jump to 0xE623 - not implemented

    // E5D1: CLRA 
    cpu.m_a = 0;

    // E5D2: TSTA 
    cpu.test_a();

    // E5D3: LEAX $0,Y
    // TODO: Fix comma operator: LEAX $0,Y

    // E5D5: NEGA 
    cpu.m_a = -cpu.m_a;

    // E5D6: LSRB 
    cpu.m_b >>= 1;

    // E5D7: BRA $E60A
    goto label_E60A;

    // E5D9: LDB #$50
    cpu.m_b = 0x50;

    // E5DB: XNCB 
    // TODO: Convert XNCB 

    // E5DC: CLRA 
    cpu.m_a = 0;

    // E5DD: ASRA 
    // TODO: Convert ASRA 

    // E5DE: XNCB 
    // TODO: Convert XNCB 

    // E5DF: NEGA 
    cpu.m_a = -cpu.m_a;

    // E5E0: TSTA 
    cpu.test_a();

    label_E5E1:
    // E5E1: BRA $E635
    goto label_E635;

    // E5E3: CLRA 
    cpu.m_a = 0;

    // E5E4: TSTA 
    cpu.test_a();

    label_E5E5:
    // E5E5: LEAY $0,Y
    // TODO: Fix comma operator: LEAY $0,Y

    // E5E7: NEGA 
    cpu.m_a = -cpu.m_a;

    // E5E8: LSRB 
    cpu.m_b >>= 1;

    // E5E9: BRA $E61C
    goto label_E61C;

    // E5EB: ASLA 
    cpu.m_a <<= 1;

    // E5EC: ORB #$50
    cpu.m_b |= 0x50;

    label_E5EE:
    // E5EE: XNCB 
    // TODO: Convert XNCB 

    // E5EF: CLRA 
    cpu.m_a = 0;

    // E5F0: ASRA 
    // TODO: Convert ASRA 

    // E5F1: XNCB 
    // TODO: Convert XNCB 

    // E5F2: NEGA 
    cpu.m_a = -cpu.m_a;

    // E5F3: TSTA 
    cpu.test_a();

    // E5F4: BRA $E648
    goto label_E648;

    // E5F6: CLRA 
    cpu.m_a = 0;

    // E5F7: TSTA 
    cpu.test_a();

    label_E5F8:
    // E5F8: LEAS $0,Y
    // TODO: Fix comma operator: LEAS $0,Y

    // E5FA: NEGA 
    cpu.m_a = -cpu.m_a;

    label_E5FB:
    // E5FB: LSRB 
    cpu.m_b >>= 1;

    // E5FC: BRA $E62F
    // TODO: External jump to 0xE62F - not implemented

    // E5FE: DECA 
    cpu.m_a--;

    // E5FF: ADDB #$50
    cpu.m_b += 0x50;

    // E601: XNCB 
    // TODO: Convert XNCB 

    // E602: CLRA 
    cpu.m_a = 0;

    // E603: ASRA 
    // TODO: Convert ASRA 

    // E604: XNCB 
    // TODO: Convert XNCB 

    label_E605:
    // E605: NEGA 
    cpu.m_a = -cpu.m_a;

    // E606: TSTA 
    cpu.test_a();

    // E607: BRA $E65B
    goto label_E65B;

    // E609: CLRA 
    cpu.m_a = 0;

    label_E60A:
    // E60A: TSTA 
    cpu.test_a();

    // E60B: LEAU $0,Y
    // TODO: Fix comma operator: LEAU $0,Y

    label_E60D:
    // E60D: NEGA 
    cpu.m_a = -cpu.m_a;

    // E60E: LSRB 
    cpu.m_b >>= 1;

    // E60F: BRA $E642
    // TODO: External jump to 0xE642 - not implemented

    // E611: XDECA 
    cpu.m_a--;

    label_E612:
    // E612: LDD #$5052
    cpu.m_d = 0x5052;

    // E615: CLRA 
    cpu.m_a = 0;

    // E616: ASRA 
    // TODO: Convert ASRA 

    // E617: XNCB 
    // TODO: Convert XNCB 

    // E618: NEGA 
    cpu.m_a = -cpu.m_a;

    // E619: TSTA 
    cpu.test_a();

    // E61A: BRA $E66E
    goto label_E66E;

    label_E61C:
    // E61C: CLRA 
    cpu.m_a = 0;

    // E61D: TSTA 
    cpu.test_a();

    // E61E: PSHS Y
    // TODO: Convert PSHS Y

    // E620: NEGA 
    cpu.m_a = -cpu.m_a;

    // E621: LSRB 
    cpu.m_b >>= 1;

    // E622: BRA $E655
    goto label_E655;

    // E624: XHCF 
    // TODO: Convert XHCF 

    // E625: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E626: ASRA 
    // TODO: Convert ASRA 

    // E627: BRA $E67B
    goto label_E67B;

    // E629: CLRA 
    cpu.m_a = 0;

    // E62A: TSTA 
    cpu.test_a();

    // E62B: BRA $E66E
    goto label_E66E;

    // E62D: LSRB 
    cpu.m_b >>= 1;

    // E62E: BRA $E661
    goto label_E661;

    // E630: LDD #$4D41
    cpu.m_d = 0x4D41;

    // E633: LSRB 
    cpu.m_b >>= 1;

    // E634: ASLA 
    cpu.m_a <<= 1;

    label_E635:
    // E635: XNCA 
    // TODO: Convert XNCA 

    // E636: CLRA 
    cpu.m_a = 0;

    // E637: ASLB 
    cpu.m_b <<= 1;

    // E638: BRA $E68E
    goto label_E68E;

    // E63A: LSRA 
    cpu.m_a >>= 1;

    // E63B: COMB 
    cpu.m_b = ~cpu.m_b;

    // E63C: LSRB 
    cpu.m_b >>= 1;

    // E63D: ADDD <$42
    cpu.m_d += 0x42;

    // E63F: NEGA 
    cpu.m_a = -cpu.m_a;

    // E640: LSRA 
    cpu.m_a >>= 1;

    // E641: BRA $E690
    goto label_E690;

    // E643: NEGA 
    cpu.m_a = -cpu.m_a;

    // E644: LSRB 
    cpu.m_b >>= 1;

    // E645: ASLA 
    cpu.m_a <<= 1;

    // E646: XNCA 
    // TODO: Convert XNCA 

    // E647: CLRA 
    cpu.m_a = 0;

    label_E648:
    // E648: ASLB 
    cpu.m_b <<= 1;

    // E649: BRA $E69D
    goto label_E69D;

    // E64B: LSRA 
    cpu.m_a >>= 1;

    // E64C: NEGA 
    cpu.m_a = -cpu.m_a;

    // E64D: LSRA 
    cpu.m_a >>= 1;

    // E64E: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // E64F: BRA $E69D
    goto label_E69D;

    // E651: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E652: XCLRA 
    // TODO: Convert XCLRA 

    // E653: BITB #$44
    // TODO: Convert BITB #$44

    label_E655:
    // E655: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E656: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E657: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E658: LSRA 
    cpu.m_a >>= 1;

    // E659: LSRA 
    cpu.m_a >>= 1;

    // E65A: XNCB 
    // TODO: Convert XNCB 

    label_E65B:
    // E65B: BRA $E6A2
    goto label_E6A2;

    // E65D: XNCB 
    // TODO: Convert XNCB 

    // E65E: XNCB 
    // TODO: Convert XNCB 

    // E65F: CLRA 
    cpu.m_a = 0;

    // E660: XNCB 
    // TODO: Convert XNCB 

    label_E661:
    // E661: ADDD <$4E
    cpu.m_d += 0x4E;

    // E663: CLRA 
    cpu.m_a = 0;

    // E664: BRA $E6AA
    goto label_E6AA;

    // E666: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E667: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E668: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E669: LSRA 
    cpu.m_a >>= 1;

    // E66A: LSRA 
    cpu.m_a >>= 1;

    // E66B: XNCB 
    // TODO: Convert XNCB 

    // E66C: BRA $E6B3
    goto label_E6B3;

    label_E66E:
    // E66E: XNCB 
    // TODO: Convert XNCB 

    // E66F: XNCB 
    // TODO: Convert XNCB 

    // E670: CLRA 
    cpu.m_a = 0;

    // E671: XNCB 
    // TODO: Convert XNCB 

    // E672: ADDD <$4F
    cpu.m_d += 0x4F;

    // E674: NEGB 
    cpu.m_b = -cpu.m_b;

    // E675: LSRB 
    cpu.m_b >>= 1;

    // E676: BRA $E6CB
    // TODO: External jump to 0xE6CB - not implemented

    // E678: ASRB 
    // TODO: Convert ASRB 

    // E679: BRA $E69B
    goto label_E69B;

    label_E67B:
    // E67B: BRA $E69D
    goto label_E69D;

    // E67D: XCLRA 
    // TODO: Convert XCLRA 

    // E67E: LSRB 
    cpu.m_b >>= 1;

    // E67F: TSTA 
    cpu.test_a();

    // E680: BRA $E6C6
    goto label_E6C6;

    // E682: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E683: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E684: BRA $E6CA
    goto label_E6CA;

    // E686: LSRA 
    cpu.m_a >>= 1;

    // E687: XCLRA 
    // TODO: Convert XCLRA 

    // E688: BRA $E6D3
    goto label_E6D3;

    // E68A: COMB 
    cpu.m_b = ~cpu.m_b;

    // E68B: BRA $E6D2
    goto label_E6D2;

    // E68D: XNCB 
    // TODO: Convert XNCB 

    label_E68E:
    // E68E: XNCB 
    // TODO: Convert XNCB 

    // E68F: CLRA 
    cpu.m_a = 0;

    label_E690:
    // E690: SBCB <$4D
    cpu.sub_b_with_carry(0x4D);

    // E692: NEGA 
    cpu.m_a = -cpu.m_a;

    // E693: LSRB 
    cpu.m_b >>= 1;

    // E694: XNCB 
    // TODO: Convert XNCB 

    // E695: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E696: ASLB 
    cpu.m_b <<= 1;

    // E697: BRA $E6DE
    goto label_E6DE;

    // E699: XNCB 
    // TODO: Convert XNCB 

    // E69A: XNCB 
    // TODO: Convert XNCB 

    label_E69B:
    // E69B: CLRA 
    cpu.m_a = 0;

    // E69C: XNCB 
    // TODO: Convert XNCB 

    label_E69D:
    // E69D: ADDD <$4E
    cpu.m_d += 0x4E;

    // E69F: CLRA 
    cpu.m_a = 0;

    // E6A0: BRA $E6EF
    goto label_E6EF;

    label_E6A2:
    // E6A2: NEGA 
    cpu.m_a = -cpu.m_a;

    // E6A3: LSRB 
    cpu.m_b >>= 1;

    // E6A4: XNCB 
    // TODO: Convert XNCB 

    // E6A5: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E6A6: ASLB 
    cpu.m_b <<= 1;

    // E6A7: BRA $E6EE
    // TODO: External jump to 0xE6EE - not implemented

    // E6A9: XNCB 
    // TODO: Convert XNCB 

    label_E6AA:
    // E6AA: XNCB 
    // TODO: Convert XNCB 

    // E6AB: CLRA 
    cpu.m_a = 0;

    // E6AC: XNCB 
    // TODO: Convert XNCB 

    // E6AD: ADDD <$42
    cpu.m_d += 0x42;

    // E6AF: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E6B0: NEGB 
    cpu.m_b = -cpu.m_b;

    // E6B1: BRA $E707
    goto label_E707;

    label_E6B3:
    // E6B3: LSRA 
    cpu.m_a >>= 1;

    // E6B4: COMB 
    cpu.m_b = ~cpu.m_b;

    // E6B5: ANDB <$41
    cpu.m_b &= 0x41;

    // E6B7: INCA 
    cpu.m_a++;

    // E6B8: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E6B9: ASRA 
    // TODO: Convert ASRA 

    // E6BA: XCLRA 
    // TODO: Convert XCLRA 

    // E6BB: BRA $E711
    goto label_E711;

    // E6BD: ASLA 
    cpu.m_a <<= 1;

    // E6BE: LSRA 
    cpu.m_a >>= 1;

    // E6BF: BRA $E703
    goto label_E703;

    // E6C1: CLRA 
    cpu.m_a = 0;

    // E6C2: ASLB 
    cpu.m_b <<= 1;

    // E6C3: LSRA 
    cpu.m_a >>= 1;

    // E6C4: ADDD <$53
    cpu.m_d += 0x53;

    label_E6C6:
    // E6C6: COMA 
    cpu.m_a = ~cpu.m_a;

    // E6C7: NEGA 
    cpu.m_a = -cpu.m_a;

    // E6C8: INCA 
    cpu.m_a++;

    // E6C9: LSRA 
    cpu.m_a >>= 1;

    label_E6CA:
    // E6CA: BRA $E720
    goto label_E720;

    // E6CC: LSRA 
    cpu.m_a >>= 1;

    // E6CD: COMB 
    cpu.m_b = ~cpu.m_b;

    // E6CE: ANDB <$4C
    cpu.m_b &= 0x4C;

    // E6D0: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E6D1: XCLRA 
    // TODO: Convert XCLRA 

    label_E6D2:
    // E6D2: LSRA 
    cpu.m_a >>= 1;

    label_E6D3:
    // E6D3: NEGA 
    cpu.m_a = -cpu.m_a;

    // E6D4: SBCB <$4C
    cpu.sub_b_with_carry(0x4C);

    // E6D6: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E6D7: XCLRA 
    // TODO: Convert XCLRA 

    // E6D8: LSRA 
    cpu.m_a >>= 1;

    // E6D9: NEGA 
    cpu.m_a = -cpu.m_a;

    // E6DA: XNCB 
    // TODO: Convert XNCB 

    // E6DB: BRA $E71E
    goto label_E71E;

    // E6DD: XCLRA 
    // TODO: Convert XCLRA 

    label_E6DE:
    // E6DE: LSRA 
    cpu.m_a >>= 1;

    // E6DF: BRA $E723
    goto label_E723;

    // E6E1: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E6E2: XCLRA 
    // TODO: Convert XCLRA 

    // E6E3: NEGA 
    cpu.m_a = -cpu.m_a;

    // E6E4: XNCB 
    // TODO: Convert XNCB 

    // E6E5: ADCB <$30
    cpu.add_b_with_carry(0x30);

    // E6E7: BGT $E709
    // TODO: External jump to 0xE709 - not implemented

    // E6E9: CLRA 
    cpu.m_a = 0;

    // E6EA: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E6EB: LDB #$31
    cpu.m_b = 0x31;

    // E6ED: BGT $E70F
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xE70F;

    label_E6EF:
    // E6EF: LSRA 
    cpu.m_a >>= 1;

    // E6F0: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E6F1: XHCF 
    // TODO: Convert XHCF 

    // E6F2: LEAS $E,Y
    // TODO: Fix comma operator: LEAS $E,Y

    // E6F4: BRA $E742
    goto label_E742;

    // E6F6: CLRA 
    cpu.m_a = 0;

    // E6F7: STB <$33
    cpu.write_memory(0x33, cpu.m_b);

    // E6F9: BGT $E71B
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xE71B;

    // E6FB: ASLA 
    cpu.m_a <<= 1;

    // E6FC: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E6FD: ASRA 
    // TODO: Convert ASRA 

    // E6FE: EORB #$49
    cpu.m_b ^= 0x49;

    // E700: XCLRA 
    // TODO: Convert XCLRA 

    // E701: LSRB 
    cpu.m_b >>= 1;

    // E702: LSRA 
    cpu.m_a >>= 1;

    label_E703:
    // E703: XCLRA 
    // TODO: Convert XCLRA 

    // E704: COMB 
    cpu.m_b = ~cpu.m_b;

    // E705: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E706: LSRB 
    cpu.m_b >>= 1;

    label_E707:
    // E707: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // E708: BRA $E75E
    // TODO: External jump to 0xE75E - not implemented

    // E70A: LSRA 
    cpu.m_a >>= 1;

    // E70B: COMB 
    cpu.m_b = ~cpu.m_b;

    // E70C: ANDB <$50
    cpu.m_b &= 0x50;

    // E70E: XNCB 
    // TODO: Convert XNCB 

    // E70F: LSRA 
    cpu.m_a >>= 1;

    // E710: COMB 
    cpu.m_b = ~cpu.m_b;

    label_E711:
    // E711: COMB 
    cpu.m_b = ~cpu.m_b;

    // E712: BRA $E755
    goto label_E755;

    // E714: LSRB 
    cpu.m_b >>= 1;

    // E715: ASLB 
    cpu.m_b <<= 1;

    // E716: BRA $E75B
    goto label_E75B;

    // E718: CLRA 
    cpu.m_a = 0;

    // E719: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E71A: XCLRA 
    // TODO: Convert XCLRA 

    // E71B: BRA $E771
    // TODO: External jump to 0xE771 - not implemented

    // E71D: CLRA 
    cpu.m_a = 0;

    label_E71E:
    // E71E: BRA $E763
    goto label_E763;

    label_E720:
    // E720: CLRA 
    cpu.m_a = 0;

    // E721: XCLRA 
    // TODO: Convert XCLRA 

    // E722: LSRB 
    cpu.m_b >>= 1;

    label_E723:
    // E723: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E724: XCLRA 
    // TODO: Convert XCLRA 

    // E725: LSRB 
    cpu.m_b >>= 1;

    // E726: BITB #$50
    // TODO: Convert BITB #$50

    // E728: XNCB 
    // TODO: Convert XNCB 

    // E729: LSRA 
    cpu.m_a >>= 1;

    // E72A: COMB 
    cpu.m_b = ~cpu.m_b;

    // E72B: COMB 
    cpu.m_b = ~cpu.m_b;

    // E72C: BRA $E76F
    // TODO: External jump to 0xE76F - not implemented

    // E72E: LSRB 
    cpu.m_b >>= 1;

    // E72F: ASLB 
    cpu.m_b <<= 1;

    // E730: BRA $E775
    // TODO: External jump to 0xE775 - not implemented

    // E732: CLRA 
    cpu.m_a = 0;

    // E733: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E734: XCLRA 
    // TODO: Convert XCLRA 

    // E735: BRA $E77D
    goto label_E77D;

    // E737: CLRA 
    cpu.m_a = 0;

    // E738: XNCB 
    // TODO: Convert XNCB 

    // E739: BRA $E78E
    goto label_E78E;

    // E73B: LSRA 
    cpu.m_a >>= 1;

    // E73C: INCA 
    cpu.m_a++;

    // E73D: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E73E: BRA $E794
    goto label_E794;

    // E740: LSRA 
    cpu.m_a >>= 1;

    // E741: COMB 
    cpu.m_b = ~cpu.m_b;

    label_E742:
    // E742: ANDB <$50
    cpu.m_b &= 0x50;

    // E744: LSRB 
    cpu.m_b >>= 1;

    // E745: INCA 
    cpu.m_a++;

    // E746: INCA 
    cpu.m_a++;

    // E747: BRA $E79B
    goto label_E79B;

    // E749: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E74A: ASRA 
    // TODO: Convert ASRA 

    // E74B: ASLA 
    cpu.m_a <<= 1;

    // E74C: LSRB 
    cpu.m_b >>= 1;

    // E74D: BRA $E795
    goto label_E795;

    // E74F: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // E750: XNCB 
    // TODO: Convert XNCB 

    // E751: LSRA 
    cpu.m_a >>= 1;

    // E752: BRA $E7A8
    // TODO: External jump to 0xE7A8 - not implemented

    // E754: CLRA 
    cpu.m_a = 0;

    label_E755:
    // E755: BRA $E7A7
    goto label_E7A7;

    // E757: LSRA 
    cpu.m_a >>= 1;

    // E758: XNCB 
    // TODO: Convert XNCB 

    // E759: RORA 
    cpu.m_a = (cpu.m_a >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // E75A: CLRA 
    cpu.m_a = 0;

    label_E75B:
    // E75B: XNCB 
    // TODO: Convert XNCB 

    // E75C: TSTA 
    cpu.test_a();

    // E75D: BRA $E7B1
    // TODO: External jump to 0xE7B1 - not implemented

    // E75F: LSRA 
    cpu.m_a >>= 1;

    // E760: COMB 
    cpu.m_b = ~cpu.m_b;

    // E761: LSRA 
    cpu.m_a >>= 1;

    // E762: LSRB 
    cpu.m_b >>= 1;

    label_E763:
    // E763: ADDD <$A6
    cpu.m_d += 0xA6;

    // E764: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // E765: ANDA #$BD
    cpu.m_a &= 0xBD;

    // E766: JSR $E790
    cpu.call_function(0xE790);

    // E767: STB [,W]
    // TODO: Handle indexed addressing: STB [,W]

    // E769: LDA <$AD
    cpu.m_a = cpu.read_memory(0xAD);

    // E76B: BGT $E772
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xE772;

    // E76D: LDD #$B913
    cpu.m_d = 0xB913;

    // E770: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // E772: LDA $1,X
    // TODO: Fix comma operator: LDA $1,X

    // E774: JSR $E790
    cpu.call_function(0xE790);

    // E777: LDA $2,X
    // TODO: Fix comma operator: LDA $2,X

    // E779: LSRA 
    cpu.m_a >>= 1;

    // E77A: LSRA 
    cpu.m_a >>= 1;

    // E77B: LSRA 
    cpu.m_a >>= 1;

    // E77C: LSRA 
    cpu.m_a >>= 1;

    label_E77D:
    // E77D: JSR $E7AD
    cpu.call_function(0xE7AD);

    // E780: LDA <$AD
    cpu.m_a = cpu.read_memory(0xAD);

    // E782: BGT $E789
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xE789;

    // E784: LDD #$B913
    cpu.m_d = 0xB913;

    // E787: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // E789: LDA $2,X
    // TODO: Fix comma operator: LDA $2,X

    // E78B: JSR $E7AD
    cpu.call_function(0xE7AD);

    label_E78E:
    // E78E: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    label_E790:
    // E790: JMP $e790
    goto label_E790;

    // E792: LSRB 
    cpu.m_b >>= 1;

    // E793: LSRB 
    cpu.m_b >>= 1;

    label_E794:
    // E794: LSRB 
    cpu.m_b >>= 1;

    label_E795:
    // E795: ANDB #$1E
    cpu.m_b &= 0x1E;

    // E797: BNE $E7A2
    if (!cpu.zero_flag()) cpu.m_pc = 0xE7A2;

    // E799: TST <$AD
    // TODO: Convert TST <$AD

    label_E79B:
    // E79B: BLE $E7A2
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xE7A2;

    // E79D: LDU $3002
    cpu.m_u = cpu.read_memory16(0x3002);

    // E7A0: BRA $E7A9
    goto label_E7A9;

    // E7A2: CLR <$AD
    cpu.write_memory(0xAD, 0);

    // E7A4: LDU #$3004
    cpu.m_u = 0x3004;

    label_E7A7:
    // E7A7: LDU B,U
    // TODO: Fix comma operator: LDU B,U

    label_E7A9:
    // E7A9: DEC <$AD
    cpu.decrement_memory(0xAD);

    // E7AB: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // E7AD: ASLA 
    cpu.m_a <<= 1;

    // E7AE: ANDA #$1E
    cpu.m_a &= 0x1E;

    // E7B0: BNE $E7BB
    if (!cpu.zero_flag()) cpu.m_pc = 0xE7BB;

    // E7B2: TST <$AD
    // TODO: Convert TST <$AD

    // E7B4: BLE $E7BB
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xE7BB;

    // E7B6: LDU $3002
    cpu.m_u = cpu.read_memory16(0x3002);

    // E7B9: BRA $E7C2
    goto label_E7C2;

    // E7BB: CLR <$AD
    cpu.write_memory(0xAD, 0);

    // E7BD: LDU #$3004
    cpu.m_u = 0x3004;

    // E7C0: LDU A,U
    // TODO: Fix comma operator: LDU A,U

    label_E7C2:
    // E7C2: DEC <$AD
    cpu.decrement_memory(0xAD);

    // E7C4: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // E7C6: RTS 
    return;

    label_E7C7:
    // E7C7: JMP $e7c7
    goto label_E7C7;

    // E7C9: BCC $E7D2
    if (!cpu.carry_flag()) cpu.m_pc = 0xE7D2;

    // E7CB: STB $48AE
    cpu.write_memory(0x48AE, cpu.m_b);

    // E7CE: BSR $E7DD
    // TODO: Convert BSR $E7DD

    // E7D0: BSR $E7EA
    // TODO: Convert BSR $E7EA

    // E7D2: RTS 
    return;

    label_E7D3:
    // E7D3: CMPB #$D6
    cpu.compare_b(0xD6);

    // E7D5: BCC $E7DC
    if (!cpu.carry_flag()) cpu.m_pc = 0xE7DC;

    // E7D7: STB $48AE
    cpu.write_memory(0x48AE, cpu.m_b);

    // E7DA: BSR $E7EA
    // TODO: Convert BSR $E7EA

    label_E7DC:
    // E7DC: JMP $e7dc
    goto label_E7DC;

    // E7DD: LDB $48AE
    cpu.m_b = cpu.read_memory(0x48AE);

    // E7E0: LDX #$EDA8
    cpu.m_x = 0xEDA8;

    // E7E3: ABX 
    // TODO: Convert ABX 

    // E7E4: ABX 
    // TODO: Convert ABX 

    // E7E5: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // E7E7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // E7E9: RTS 
    return;

    // E7EA: LDB $48AE
    cpu.m_b = cpu.read_memory(0x48AE);

    // E7ED: LDX #$EA50
    cpu.m_x = 0xEA50;

    // E7F0: ABX 
    // TODO: Convert ABX 

    // E7F1: ABX 
    // TODO: Convert ABX 

    // E7F2: ABX 
    // TODO: Convert ABX 

    // E7F3: ABX 
    // TODO: Convert ABX 

    // E7F4: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // E7F6: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // E7F8: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // E7FA: BRA $E811
    goto label_E811;

    // E7FC: LDB $48AE
    cpu.m_b = cpu.read_memory(0x48AE);

    // E7FF: LDX #$EA50
    cpu.m_x = 0xEA50;

    // E802: ABX 
    // TODO: Convert ABX 

    // E803: ABX 
    // TODO: Convert ABX 

    // E804: ABX 
    // TODO: Convert ABX 

    // E805: ABX 
    // TODO: Convert ABX 

    // E806: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // E808: SUBD $48AF
    cpu.m_d -= 0x48AF;

    // E80B: ANDA #$1F
    cpu.m_a &= 0x1F;

    // E80D: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // E80F: LDD ,X
    // TODO: Complex indexed addressing: ,X

    label_E811:
    // E811: JMP $e811
    goto label_E811;

    // E813: JSR $E821
    cpu.call_function(0xE821);

    // E816: LDD #$7200
    cpu.m_d = 0x7200;

    // E819: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // E81B: LDD #$8040
    cpu.m_d = 0x8040;

    // E81E: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // E820: RTS 
    return;

    // E821: LDX #$E894
    cpu.m_x = 0xE894;

    // E824: LDB $48AE
    cpu.m_b = cpu.read_memory(0x48AE);

    // E827: ABX 
    // TODO: Convert ABX 

    // E828: ABX 
    // TODO: Convert ABX 

    // E829: LDX ,X
    // TODO: Complex indexed addressing: ,X

    label_E82B:
    // E82B: JMP $e82b
    goto label_E82B;

    // E82D: STX $48B1
    cpu.write_memory16(0x48B1, cpu.m_x);

    // E830: ASLB 
    cpu.m_b <<= 1;

    // E831: CMPB #$82
    cpu.compare_b(0x82);

    // E833: BCS $E83C
    if (cpu.carry_flag()) cpu.m_pc = 0xE83C;

    // E835: LDX #$3016
    cpu.m_x = 0x3016;

    // E838: ANDB #$7F
    cpu.m_b &= 0x7F;

    // E83A: BRA $E888
    goto label_E888;

    // E83C: CMPB #$74
    cpu.compare_b(0x74);

    // E83E: BNE $E845
    if (!cpu.zero_flag()) cpu.m_pc = 0xE845;

    // E840: LDX #$2FDE
    cpu.m_x = 0x2FDE;

    // E843: BRA $E888
    goto label_E888;

    label_E845:
    // E845: JMP $e845
    goto label_E845;

    // E847: BNE $E84F
    if (!cpu.zero_flag()) cpu.m_pc = 0xE84F;

    // E849: LDX #$3058
    cpu.m_x = 0x3058;

    // E84C: CLRB 
    cpu.m_b = 0;

    // E84D: BRA $E888
    goto label_E888;

    // E84F: CMPB #$60
    cpu.compare_b(0x60);

    // E851: BCS $E858
    if (cpu.carry_flag()) cpu.m_pc = 0xE858;

    // E853: LDX #$2FA4
    cpu.m_x = 0x2FA4;

    // E856: BRA $E888
    goto label_E888;

    // E858: CMPB #$40
    cpu.compare_b(0x40);

    // E85A: BNE $E861
    if (!cpu.zero_flag()) cpu.m_pc = 0xE861;

    // E85C: LDX #$2FC2
    cpu.m_x = 0x2FC2;

    // E85F: BRA $E888
    goto label_E888;

    // E861: CMPB #$4E
    cpu.compare_b(0x4E);

    // E863: BNE $E86A
    if (!cpu.zero_flag()) cpu.m_pc = 0xE86A;

    // E865: LDX #$2FFE
    cpu.m_x = 0x2FFE;

    // E868: BRA $E888
    goto label_E888;

    // E86A: CMPB #$58
    cpu.compare_b(0x58);

    // E86C: BNE $E873
    if (!cpu.zero_flag()) cpu.m_pc = 0xE873;

    // E86E: LDX #$2FF6
    cpu.m_x = 0x2FF6;

    // E871: BRA $E888
    goto label_E888;

    // E873: CMPB #$5A
    cpu.compare_b(0x5A);

    // E875: BNE $E87C
    if (!cpu.zero_flag()) cpu.m_pc = 0xE87C;

    // E877: LDX #$3000
    cpu.m_x = 0x3000;

    // E87A: BRA $E888
    goto label_E888;

    // E87C: CMPB #$4A
    cpu.compare_b(0x4A);

    // E87E: BNE $E885
    if (!cpu.zero_flag()) cpu.m_pc = 0xE885;

    // E880: LDX #$300C
    cpu.m_x = 0x300C;

    // E883: BRA $E888
    goto label_E888;

    // E885: LDX #$2FF4
    cpu.m_x = 0x2FF4;

    label_E888:
    // E888: LDD B,X
    // TODO: Fix comma operator: LDD B,X

    // E88A: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // E88C: LDX $48B1
    cpu.m_x = cpu.read_memory16(0x48B1);

    // E88F: TST -$1,X
    // TODO: Convert TST -$1,X

    // E891: BPL $E82B
    if (!cpu.negative_flag()) cpu.m_pc = 0xE82B;

    // E893: RTS 
    return;

    // E894: ADDB <$3F
    cpu.m_b += 0x3F;

    // E896: ADDB <$48
    cpu.m_b += 0x48;

    // E898: ADDB <$6C
    cpu.m_b += 0x6C;

    // E89A: ADDB <$80
    cpu.m_b += 0x80;

    // E89C: ADDB <$A8
    cpu.m_b += 0xA8;

    // E89E: ADDB <$A8
    cpu.m_b += 0xA8;

    // E8A0: ADDB <$B1
    cpu.m_b += 0xB1;

    // E8A2: ADDB <$BD
    cpu.m_b += 0xBD;

    // E8A4: ADDB <$C6
    cpu.m_b += 0xC6;

    // E8A6: ADDB <$D4
    cpu.m_b += 0xD4;

    // E8A8: ADDB <$E1
    cpu.m_b += 0xE1;

    // E8AA: ADDB <$EF
    cpu.m_b += 0xEF;

    // E8AC: LDD <$04
    cpu.m_d = cpu.read_memory16(0x04);

    // E8AE: LDD <$0B
    cpu.m_d = cpu.read_memory16(0x0B);

    // E8B0: LDD <$11
    cpu.m_d = cpu.read_memory16(0x11);

    // E8B2: LDD <$1C
    cpu.m_d = cpu.read_memory16(0x1C);

    // E8B4: LDD <$3B
    cpu.m_d = cpu.read_memory16(0x3B);

    // E8B6: LDD <$5E
    cpu.m_d = cpu.read_memory16(0x5E);

    // E8B8: LDD <$7D
    cpu.m_d = cpu.read_memory16(0x7D);

    // E8BA: LDD <$9F
    cpu.m_d = cpu.read_memory16(0x9F);

    // E8BC: LDD <$C2
    cpu.m_d = cpu.read_memory16(0xC2);

    // E8BE: LDD <$E3
    cpu.m_d = cpu.read_memory16(0xE3);

    // E8C0: STD <$03
    cpu.write_memory16(0x03, cpu.m_d);

    // E8C2: STD <$12
    cpu.write_memory16(0x12, cpu.m_d);

    // E8C4: STD <$34
    cpu.write_memory16(0x34, cpu.m_d);

    // E8C6: STD <$56
    cpu.write_memory16(0x56, cpu.m_d);

    // E8C8: STD <$74
    cpu.write_memory16(0x74, cpu.m_d);

    // E8CA: STD <$93
    cpu.write_memory16(0x93, cpu.m_d);

    // E8CC: STD <$A6
    cpu.write_memory16(0xA6, cpu.m_d);

    // E8CE: STD <$C9
    cpu.write_memory16(0xC9, cpu.m_d);

    // E8D0: STD <$EA
    cpu.write_memory16(0xEA, cpu.m_d);

    // E8D2: STD <$FC
    cpu.write_memory16(0xFC, cpu.m_d);

    // E8D4: STD <$FD
    cpu.write_memory16(0xFD, cpu.m_d);

    // E8D6: STD <$FE
    cpu.write_memory16(0xFE, cpu.m_d);

    // E8D8: STD <$FF
    cpu.write_memory16(0xFF, cpu.m_d);

    // E8DA: LDU <$00
    cpu.m_u = cpu.read_memory16(0x00);

    // E8DC: LDU <$07
    cpu.m_u = cpu.read_memory16(0x07);

    // E8DE: LDU <$29
    cpu.m_u = cpu.read_memory16(0x29);

    // E8E0: LDU <$4B
    cpu.m_u = cpu.read_memory16(0x4B);

    // E8E2: LDU <$6D
    cpu.m_u = cpu.read_memory16(0x6D);

    // E8E4: LDU <$8F
    cpu.m_u = cpu.read_memory16(0x8F);

    // E8E6: LDU <$B1
    cpu.m_u = cpu.read_memory16(0xB1);

    // E8E8: LDU <$D3
    cpu.m_u = cpu.read_memory16(0xD3);

    // E8EA: LDU <$F5
    cpu.m_u = cpu.read_memory16(0xF5);

    // E8EC: STU <$17
    cpu.write_memory16(0x17, cpu.m_u);

    // E8EE: STU <$2A
    cpu.write_memory16(0x2A, cpu.m_u);

    // E8F0: STU <$4A
    cpu.write_memory16(0x4A, cpu.m_u);

    // E8F2: STU <$53
    cpu.write_memory16(0x53, cpu.m_u);

    // E8F4: STU <$57
    cpu.write_memory16(0x57, cpu.m_u);

    // E8F6: STU <$5D
    cpu.write_memory16(0x5D, cpu.m_u);

    // E8F8: STU <$61
    cpu.write_memory16(0x61, cpu.m_u);

    // E8FA: STU <$67
    cpu.write_memory16(0x67, cpu.m_u);

    // E8FC: STU <$6D
    cpu.write_memory16(0x6D, cpu.m_u);

    // E8FE: STU <$73
    cpu.write_memory16(0x73, cpu.m_u);

    // E900: STU <$73
    cpu.write_memory16(0x73, cpu.m_u);

    // E902: STU <$78
    cpu.write_memory16(0x78, cpu.m_u);

    // E904: STU <$80
    cpu.write_memory16(0x80, cpu.m_u);

    // E906: STU <$87
    cpu.write_memory16(0x87, cpu.m_u);

    // E908: STU <$8E
    cpu.write_memory16(0x8E, cpu.m_u);

    // E90A: STU <$AD
    cpu.write_memory16(0xAD, cpu.m_u);

    // E90C: STU <$C7
    cpu.write_memory16(0xC7, cpu.m_u);

    // E90E: STU <$DC
    cpu.write_memory16(0xDC, cpu.m_u);

    // E910: STU <$EF
    cpu.write_memory16(0xEF, cpu.m_u);

    // E912: STU <$EF
    cpu.write_memory16(0xEF, cpu.m_u);

    // E914: SUBB $A,X
    // TODO: Fix comma operator: SUBB $A,X

    // E916: SUBB -$5,X
    // TODO: Fix comma operator: SUBB -$5,X

    // E918: SUBB $1,Y
    // TODO: Fix comma operator: SUBB $1,Y

    // E91A: SUBB -$7,Y
    // TODO: Fix comma operator: SUBB -$7,Y

    // E91C: SUBB -$9,U
    // TODO: Fix comma operator: SUBB -$9,U

    // E91E: SUBB $9,S
    // TODO: Fix comma operator: SUBB $9,S

    // E920: SUBB -$3,S
    // TODO: Fix comma operator: SUBB -$3,S

    // E922: SUBB [,W]
    // TODO: Complex indexed addressing: [,W]

    // E924: SUBB F,Y
    // TODO: Complex indexed addressing: F,Y

    // E926: SUBB Illegal Postbyte
    // TODO: Unrecognized operand: Illegal Postbyte

    // E928: SUBB D,U
    // TODO: Fix comma operator: SUBB D,U

    label_E929:
    // E929: ADDB #$E0
    cpu.m_b += 0xE0;

    // E92A: SUBB ,-S
    // TODO: Complex indexed addressing: ,-S

    // E92B: SBCB ,S+
    // TODO: Complex indexed addressing: ,S+

    // E92C: SUBB [B,S]
    // TODO: Complex indexed addressing: [B,S]

    // E92D: BITB $E104
    // TODO: Convert BITB $E104

    // E92E: CMPB $4,X
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_x + 0x04));

    // E930: CMPB -$A,X
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_x - 0x0A));

    // E932: CMPB $4,Y
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_y + 0x04));

    // E934: CMPB -$F,Y
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_y - 0x0F));

    // E936: CMPB $5,U
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_u + 0x05));

    // E938: CMPB $3,S
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_sp + 0x03));

    // E93A: CMPB B,X
    // TODO: Handle indexed addressing: CMPB B,X

    // E93C: CMPB E,Y
    // TODO: Handle indexed addressing: CMPB E,Y

    // E93E: CMPB -$1F,U
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_u - 0x1F));

    // E941: EORB ,-S
    // TODO: Complex indexed addressing: ,-S

    // E943: LSR <$E2
    // TODO: Convert LSR <$E2

    // E945: BRA $E929
    goto label_E929;

    // E947: BNE $E92B
    if (!cpu.zero_flag()) cpu.m_pc = 0xE92B;

    // E949: CWAI #$E2
    // TODO: Convert CWAI #$E2

    // E94B: LSRA 
    cpu.m_a >>= 1;

    // E94C: SBCB -$C,U
    // TODO: Fix comma operator: SBCB -$C,U

    // E94E: SBCB $4,S
    // TODO: Fix comma operator: SBCB $4,S

    // E950: SBCB -$C,S
    // TODO: Fix comma operator: SBCB -$C,S

    // E952: SBCB ,X+
    // TODO: Complex indexed addressing: ,X+

    // E954: SBCB -$1D56,X
    // TODO: Fix comma operator: SBCB -$1D56,X

    // E958: SBCB [D,Y]
    // TODO: Complex indexed addressing: [D,Y]

    // E95A: SBCB [F,U]
    // TODO: Complex indexed addressing: [F,U]

    // E95C: SBCB [-$1D,S]
    // TODO: Complex indexed addressing: [-$1D,S]

    // E95F: TST <$E3
    // TODO: Convert TST <$E3

    // E961: DAA 
    // TODO: Convert DAA 

    // E962: ADDD $8,Y
    // TODO: Fix comma operator: ADDD $8,Y

    // E964: ADDD -$9,Y
    // TODO: Fix comma operator: ADDD -$9,Y

    // E966: ADDD $7,U
    // TODO: Fix comma operator: ADDD $7,U

    // E968: ADDD -$E,U
    // TODO: Fix comma operator: ADDD -$E,U

    // E96A: ADDD $1,S
    // TODO: Fix comma operator: ADDD $1,S

    // E96C: ADDD -$10,S
    // TODO: Fix comma operator: ADDD -$10,S

    // E96E: ADDD -$4,S
    // TODO: Fix comma operator: ADDD -$4,S

    // E970: ADDD $E956,PCR
    // TODO: Fix comma operator: ADDD $E956,PCR

    // E973: JSR <$E3
    cpu.call_function(0xE3);

    // E975: LDX ,--S
    // TODO: Complex indexed addressing: ,--S

    // E977: ADDA $E3C6
    cpu.m_a += cpu.read_memory(0xE3C6);

    // E97A: ADDD [$E960,PCR]
    // TODO: Complex indexed addressing: [$E960,PCR]

    // E97D: LDD $E405
    cpu.m_d = cpu.read_memory16(0xE405);

    // E980: ANDB $E,X
    // TODO: Fix comma operator: ANDB $E,X

    // E982: ANDB -$A,X
    // TODO: Fix comma operator: ANDB -$A,X

    // E984: ANDB -$2,X
    // TODO: Fix comma operator: ANDB -$2,X

    // E986: ANDB -$1,X
    // TODO: Fix comma operator: ANDB -$1,X

    // E988: ANDB $0,Y
    // TODO: Fix comma operator: ANDB $0,Y

    // E98A: ANDB $1,Y
    // TODO: Fix comma operator: ANDB $1,Y

    // E98C: ANDB $2,Y
    // TODO: Fix comma operator: ANDB $2,Y

    // E98E: ANDB $3,Y
    // TODO: Fix comma operator: ANDB $3,Y

    // E990: ANDB $4,Y
    // TODO: Fix comma operator: ANDB $4,Y

    // E992: ANDB $8,Y
    // TODO: Fix comma operator: ANDB $8,Y

    // E994: ANDB -$F,Y
    // TODO: Fix comma operator: ANDB -$F,Y

    // E996: ANDB -$6,Y
    // TODO: Fix comma operator: ANDB -$6,Y

    // E998: ANDB $3,U
    // TODO: Fix comma operator: ANDB $3,U

    // E99A: ANDB $C,U
    // TODO: Fix comma operator: ANDB $C,U

    // E99C: ANDB -$B,U
    // TODO: Fix comma operator: ANDB -$B,U

    // E99E: ANDB -$B,U
    // TODO: Fix comma operator: ANDB -$B,U

    // E9A0: ANDB -$7,U
    // TODO: Fix comma operator: ANDB -$7,U

    // E9A2: ANDB -$6,U
    // TODO: Fix comma operator: ANDB -$6,U

    // E9A4: ANDB -$5,U
    // TODO: Fix comma operator: ANDB -$5,U

    // E9A6: ANDB -$4,U
    // TODO: Fix comma operator: ANDB -$4,U

    // E9A8: ANDB -$3,U
    // TODO: Fix comma operator: ANDB -$3,U

    // E9AA: ANDB $1,S
    // TODO: Fix comma operator: ANDB $1,S

    // E9AC: ANDB $9,S
    // TODO: Fix comma operator: ANDB $9,S

    // E9AE: ANDB $D,S
    // TODO: Fix comma operator: ANDB $D,S

    // E9B0: ANDB -$C,S
    // TODO: Fix comma operator: ANDB -$C,S

    // E9B2: ANDB -$B,S
    // TODO: Fix comma operator: ANDB -$B,S

    // E9B4: ANDB -$A,S
    // TODO: Fix comma operator: ANDB -$A,S

    // E9B6: ANDB -$9,S
    // TODO: Fix comma operator: ANDB -$9,S

    // E9B8: ANDB -$8,S
    // TODO: Fix comma operator: ANDB -$8,S

    // E9BA: ANDB -$5,S
    // TODO: Fix comma operator: ANDB -$5,S

    // E9BC: ANDB -$3,S
    // TODO: Fix comma operator: ANDB -$3,S

    // E9BE: ANDB -$1,S
    // TODO: Fix comma operator: ANDB -$1,S

    // E9C0: ANDB ,-X
    // TODO: Complex indexed addressing: ,-X

    // E9C2: ANDB ,X
    // TODO: Complex indexed addressing: ,X

    // E9C4: ANDB E,X
    // TODO: Complex indexed addressing: E,X

    // E9C6: ANDB -$1B74,X
    // TODO: Fix comma operator: ANDB -$1B74,X

    // E9CA: ANDB W,X
    // TODO: Complex indexed addressing: W,X

    // E9CC: ANDB [,X++]
    // TODO: Complex indexed addressing: [,X++]

    // E9CE: ANDB [F,X]
    // TODO: Complex indexed addressing: [F,X]

    // E9D0: ANDB ,-Y
    // TODO: Complex indexed addressing: ,-Y

    // E9D2: ANDB $CE8C,PCR
    // TODO: Fix comma operator: ANDB $CE8C,PCR

    // E9D6: ANDB ,U+
    // TODO: Complex indexed addressing: ,U+

    // E9D8: ANDB E,U
    // TODO: Complex indexed addressing: E,U

    // E9DA: ANDB [,W++]
    // TODO: Complex indexed addressing: [,W++]

    // E9DC: ANDB [,U]
    // TODO: Complex indexed addressing: [,U]

    // E9DE: ANDB [$E9C5,PCR]
    // TODO: Complex indexed addressing: [$E9C5,PCR]

    // E9E1: BITB ,S
    // TODO: Convert BITB ,S

    // E9E3: STU ,S
    cpu.write_memory16(cpu.m_sp, cpu.m_u);

    // E9E5: STU ,S
    cpu.write_memory16(cpu.m_sp, cpu.m_u);

    // E9E7: SUBB $E4FA
    cpu.m_b -= cpu.read_memory(0xE4FA);

    // E9EA: BITB $5,X
    // TODO: Convert BITB $5,X

    // E9EC: BITB $C,X
    // TODO: Convert BITB $C,X

    // E9EE: BITB $C,X
    // TODO: Convert BITB $C,X

    // E9F0: BITB $C,X
    // TODO: Convert BITB $C,X

    // E9F2: BITB $D,X
    // TODO: Convert BITB $D,X

    // E9F4: BITB -$B,X
    // TODO: Convert BITB -$B,X

    // E9F6: BITB $4,Y
    // TODO: Convert BITB $4,Y

    // E9F8: BITB -$A,Y
    // TODO: Convert BITB -$A,Y

    // E9FA: BITB $8,U
    // TODO: Convert BITB $8,U

    // E9FC: BITB -$A,U
    // TODO: Convert BITB -$A,U

    // E9FE: BITB $4,S
    // TODO: Convert BITB $4,S

    // EA00: BITB -$F,S
    // TODO: Convert BITB -$F,S

    // EA02: BITB -$2,S
    // TODO: Convert BITB -$2,S

    // EA04: BITB D,X
    // TODO: Convert BITB D,X

    // EA06: BITB [-$1B,X]
    // TODO: Convert BITB [-$1B,X]

    // EA09: BITA B,S
    // TODO: Convert BITA B,S

    // EA0B: SBCA $E5C8
    cpu.sub_a_with_carry(cpu.read_memory(0xE5C8));

    // EA0E: BITB [F,U]
    // TODO: Convert BITB [F,U]

    // EA10: BITB $D014,PCR
    // TODO: Convert BITB $D014,PCR

    // EA14: LDB -$D,X
    // TODO: Fix comma operator: LDB -$D,X

    // EA16: LDB $5,Y
    // TODO: Fix comma operator: LDB $5,Y

    // EA18: LDB -$F,Y
    // TODO: Fix comma operator: LDB -$F,Y

    // EA1A: LDB -$2,Y
    // TODO: Fix comma operator: LDB -$2,Y

    // EA1C: LDB -$C,U
    // TODO: Fix comma operator: LDB -$C,U

    // EA1E: LDB $2,S
    // TODO: Fix comma operator: LDB $2,S

    // EA20: LDB -$D,S
    // TODO: Fix comma operator: LDB -$D,S

    // EA22: LDB [,X++]
    // TODO: Complex indexed addressing: [,X++]

    // EA24: LDB [W,X]
    // TODO: Complex indexed addressing: [W,X]

    // EA26: LDB W,Y
    // TODO: Complex indexed addressing: W,Y

    // EA28: LDB [A,Y]
    // TODO: Complex indexed addressing: [A,Y]

    // EA2A: LDB B,U
    // TODO: Fix comma operator: LDB B,U

    // EA2C: LDB ,W++
    // TODO: Complex indexed addressing: ,W++

    // EA2E: LDB [B,U]
    // TODO: Complex indexed addressing: [B,U]

    // EA30: LDB A,S
    // TODO: Fix comma operator: LDB A,S

    // EA32: LDB $EA1B,PCR
    // TODO: Fix comma operator: LDB $EA1B,PCR

    // EA35: SBCB $E6F8
    cpu.sub_b_with_carry(cpu.read_memory(0xE6F8));

    // EA38: LDB [$E70D]
    // TODO: Unrecognized operand: [$E70D]

    // EA3C: STB $7,Y
    cpu.write_memory(cpu.m_y + 0x07, cpu.m_b);

    // EA3E: STB $3,U
    cpu.write_memory(cpu.m_u + 0x03, cpu.m_b);

    // EA40: LDU $9CFE
    cpu.m_u = cpu.read_memory16(0x9CFE);

    // EA43: INC [W,S]
    // TODO: Complex indexed addressing: [W,S]

    // EA45: INC [W,S]
    // TODO: Complex indexed addressing: [W,S]

    // EA47: ASL $FE84
    cpu.arithmetic_shift_left(0xFE84);

    // EA4A: LDU $A8FE
    cpu.m_u = cpu.read_memory16(0xA8FE);

    // EA4D: SUBB #$FF
    cpu.m_b -= 0xFF;

    // EA4F: CMPX $1F98
    cpu.compare_x(cpu.read_memory16(0x1F98));

    // EA52: EXG PC,inv
    // TODO: Convert EXG PC,inv

    // EA54: EXG inv,inv
    // TODO: Convert EXG inv,inv

    // EA56: EXG U,A
    // TODO: Convert EXG U,A

    // EA58: TFR Y,D
    cpu.m_d = cpu.m_y;

    // EA5A: EXG X,S
    // TODO: Convert EXG X,S

    // EA5C: EXG U,D
    // TODO: Convert EXG U,D

    // EA5E: SEX 
    // TODO: Convert SEX 

    // EA5F: SUBB $1F98
    cpu.m_b -= cpu.read_memory(0x1F98);

    // EA62: NEG <$00
    // TODO: Convert NEG <$00

    // EA64: TFR B,A
    cpu.m_a = cpu.m_b;

    // EA66: NEG <$E0
    // TODO: Convert NEG <$E0

    // EA68: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // EA6A: NEG <$E0
    // TODO: Convert NEG <$E0

    // EA6C: TFR B,A
    cpu.m_a = cpu.m_b;

    // EA6E: NEG <$B0
    // TODO: Convert NEG <$B0

    // EA70: TFR PC,inv
    cpu.m_inv = cpu.m_pc;

    // EA72: NEG <$B0
    // TODO: Convert NEG <$B0

    // EA74: TFR inv,A
    cpu.m_a = cpu.m_inv;

    // EA76: NEG <$B0
    // TODO: Convert NEG <$B0

    // EA78: TFR PC,inv
    cpu.m_inv = cpu.m_pc;

    // EA7A: NEG <$B0
    // TODO: Convert NEG <$B0

    // EA7C: TFR D,A
    cpu.m_a = cpu.m_d;

    // EA7E: NEG <$E0
    // TODO: Convert NEG <$E0

    // EA80: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // EA82: NEG <$B0
    // TODO: Convert NEG <$B0

    // EA84: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // EA86: NEG <$B0
    // TODO: Convert NEG <$B0

    // EA88: TFR A,inv
    cpu.m_inv = cpu.m_a;

    // EA8A: NEG <$E6
    // TODO: Convert NEG <$E6

    // EA8C: EXG inv,S
    // TODO: Convert EXG inv,S

    // EA8E: NEG <$20
    // TODO: Convert NEG <$20

    // EA90: EXG S,S
    // TODO: Convert EXG S,S

    // EA92: NEG <$D8
    // TODO: Convert NEG <$D8

    // EA94: EXG PC,inv
    // TODO: Convert EXG PC,inv

    // EA96: NEG <$B4
    // TODO: Convert NEG <$B4

    // EA98: EXG PC,inv
    // TODO: Convert EXG PC,inv

    // EA9A: NEG <$90
    // TODO: Convert NEG <$90

    // EA9C: EXG S,S
    // TODO: Convert EXG S,S

    // EA9E: NEG <$48
    // TODO: Convert NEG <$48

    // EAA0: EXG PC,inv
    // TODO: Convert EXG PC,inv

    // EAA2: NEG <$24
    // TODO: Convert NEG <$24

    // EAA4: EXG PC,inv
    // TODO: Convert EXG PC,inv

    // EAA6: NEG <$00
    // TODO: Convert NEG <$00

    // EAA8: EXG PC,inv
    // TODO: Convert EXG PC,inv

    // EAAA: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // EAAC: EXG S,S
    // TODO: Convert EXG S,S

    // EAAE: TFR B,S
    cpu.m_sp = cpu.m_b;

    // EAB0: EXG PC,inv
    // TODO: Convert EXG PC,inv

    // EAB2: TFR inv,D
    cpu.m_d = cpu.m_inv;

    // EAB4: EXG PC,inv
    // TODO: Convert EXG PC,inv

    // EAB6: TFR S,inv
    cpu.m_inv = cpu.m_sp;

    // EAB8: EXG S,S
    // TODO: Convert EXG S,S

    // EABA: TFR D,S
    cpu.m_sp = cpu.m_d;

    // EABC: EXG PC,inv
    // TODO: Convert EXG PC,inv

    // EABE: EXG inv,D
    // TODO: Convert EXG inv,D

    // EAC0: EXG S,S
    // TODO: Convert EXG S,S

    // EAC2: EXG B,A
    // TODO: Convert EXG B,A

    // EAC4: EXG PC,inv
    // TODO: Convert EXG PC,inv

    // EAC6: EXG inv,S
    // TODO: Convert EXG inv,S

    // EAC8: EXG PC,inv
    // TODO: Convert EXG PC,inv

    // EACA: EXG PC,D
    // TODO: Convert EXG PC,D

    // EACC: NEG <$54
    // TODO: Convert NEG <$54

    // EACE: NEG <$90
    // TODO: Convert NEG <$90

    // EAD0: NEG <$54
    // TODO: Convert NEG <$54

    // EAD2: NEG <$90
    // TODO: Convert NEG <$90

    // EAD4: NEG <$54
    // TODO: Convert NEG <$54

    // EAD6: NEG <$90
    // TODO: Convert NEG <$90

    // EAD8: NEG <$54
    // TODO: Convert NEG <$54

    // EADA: NEG <$90
    // TODO: Convert NEG <$90

    // EADC: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // EADE: NEG <$18
    // TODO: Convert NEG <$18

    // EAE0: EXG A,inv
    // TODO: Convert EXG A,inv

    // EAE2: NEG <$B4
    // TODO: Convert NEG <$B4

    // EAE4: EXG A,inv
    // TODO: Convert EXG A,inv

    // EAE6: NEG <$78
    // TODO: Convert NEG <$78

    // EAE8: EXG A,inv
    // TODO: Convert EXG A,inv

    // EAEA: NEG <$3C
    // TODO: Convert NEG <$3C

    // EAEC: EXG A,inv
    // TODO: Convert EXG A,inv

    // EAEE: NEG <$00
    // TODO: Convert NEG <$00

    // EAF0: EXG A,inv
    // TODO: Convert EXG A,inv

    // EAF2: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // EAF4: EXG A,inv
    // TODO: Convert EXG A,inv

    // EAF6: TFR A,A
    cpu.m_a = cpu.m_a;

    // EAF8: EXG A,inv
    // TODO: Convert EXG A,inv

    // EAFA: EXG inv,A
    // TODO: Convert EXG inv,A

    // EAFC: EXG A,inv
    // TODO: Convert EXG A,inv

    // EAFE: EXG CC,Y
    // TODO: Convert EXG CC,Y

    // EB00: TFR Y,D
    cpu.m_d = cpu.m_y;

    // EB02: NEG <$54
    // TODO: Convert NEG <$54

    // EB04: EXG A,S
    // TODO: Convert EXG A,S

    // EB06: NEG <$2C
    // TODO: Convert NEG <$2C

    // EB08: TFR B,A
    cpu.m_a = cpu.m_b;

    // EB0A: NEG <$04
    // TODO: Convert NEG <$04

    // EB0C: EXG inv,S
    // TODO: Convert EXG inv,S

    // EB0E: NEG <$20
    // TODO: Convert NEG <$20

    // EB10: TFR DP,inv
    cpu.m_inv = cpu.m_dp;

    // EB12: TFR U,A
    cpu.m_a = cpu.m_u;

    // EB14: NEG <$E0
    // TODO: Convert NEG <$E0

    // EB16: NEG <$20
    // TODO: Convert NEG <$20

    // EB18: EXG Y,inv
    // TODO: Convert EXG Y,inv

    // EB1A: NEG <$C8
    // TODO: Convert NEG <$C8

    // EB1C: TFR DP,inv
    cpu.m_inv = cpu.m_dp;

    // EB1E: TFR inv,D
    cpu.m_d = cpu.m_inv;

    // EB20: NEG <$4C
    // TODO: Convert NEG <$4C

    // EB22: NEG <$C8
    // TODO: Convert NEG <$C8

    // EB24: TFR inv,A
    cpu.m_a = cpu.m_inv;

    // EB26: EXG inv,D
    // TODO: Convert EXG inv,D

    // EB28: NEG <$58
    // TODO: Convert NEG <$58

    // EB2A: NEG <$00
    // TODO: Convert NEG <$00

    // EB2C: EXG X,S
    // TODO: Convert EXG X,S

    // EB2E: NEG <$00
    // TODO: Convert NEG <$00

    // EB30: TFR DP,D
    cpu.m_d = cpu.m_dp;

    // EB32: EXG S,A
    // TODO: Convert EXG S,A

    // EB34: NEG <$40
    // TODO: Convert NEG <$40

    // EB36: TFR inv,A
    cpu.m_a = cpu.m_inv;

    // EB38: EXG B,D
    // TODO: Convert EXG B,D

    // EB3A: NEG <$54
    // TODO: Convert NEG <$54

    // EB3C: EXG inv,inv
    // TODO: Convert EXG inv,inv

    // EB3E: NEG <$18
    // TODO: Convert NEG <$18

    // EB40: TFR D,A
    cpu.m_a = cpu.m_d;

    // EB42: NEG <$DC
    // TODO: Convert NEG <$DC

    // EB44: TFR Y,D
    cpu.m_d = cpu.m_y;

    // EB46: NEG <$78
    // TODO: Convert NEG <$78

    // EB48: EXG inv,D
    // TODO: Convert EXG inv,D

    // EB4A: NEG <$00
    // TODO: Convert NEG <$00

    // EB4C: EXG inv,D
    // TODO: Convert EXG inv,D

    // EB4E: NEG <$3C
    // TODO: Convert NEG <$3C

    // EB50: TFR A,D
    cpu.m_d = cpu.m_a;

    // EB52: NEG <$80
    // TODO: Convert NEG <$80

    // EB54: NEG <$3A
    // TODO: Convert NEG <$3A

    // EB56: NEG <$BC
    // TODO: Convert NEG <$BC

    // EB58: EXG inv,S
    // TODO: Convert EXG inv,S

    // EB5A: NEG <$80
    // TODO: Convert NEG <$80

    // EB5C: EXG B,inv
    // TODO: Convert EXG B,inv

    // EB5E: NEG <$80
    // TODO: Convert NEG <$80

    // EB60: TFR Y,inv
    cpu.m_inv = cpu.m_y;

    // EB62: NEG <$9C
    // TODO: Convert NEG <$9C

    // EB64: TFR X,S
    cpu.m_sp = cpu.m_x;

    // EB66: NEG <$38
    // TODO: Convert NEG <$38

    // EB68: TFR Y,D
    cpu.m_d = cpu.m_y;

    // EB6A: NEG <$9C
    // TODO: Convert NEG <$9C

    // EB6C: EXG inv,inv
    // TODO: Convert EXG inv,inv

    // EB6E: NEG <$C0
    // TODO: Convert NEG <$C0

    // EB70: TFR A,D
    cpu.m_d = cpu.m_a;

    // EB72: NEG <$90
    // TODO: Convert NEG <$90

    // EB74: EXG inv,D
    // TODO: Convert EXG inv,D

    // EB76: NEG <$48
    // TODO: Convert NEG <$48

    // EB78: EXG inv,D
    // TODO: Convert EXG inv,D

    // EB7A: NEG <$48
    // TODO: Convert NEG <$48

    // EB7C: TFR Y,D
    cpu.m_d = cpu.m_y;

    // EB7E: TFR inv,D
    cpu.m_d = cpu.m_inv;

    // EB80: TFR PC,D
    cpu.m_d = cpu.m_pc;

    // EB82: NEG <$80
    // TODO: Convert NEG <$80

    // EB84: TFR Y,inv
    cpu.m_inv = cpu.m_y;

    // EB86: NEG <$80
    // TODO: Convert NEG <$80

    // EB88: TFR PC,inv
    cpu.m_inv = cpu.m_pc;

    // EB8A: NEG <$80
    // TODO: Convert NEG <$80

    // EB8C: TFR inv,A
    cpu.m_a = cpu.m_inv;

    // EB8E: NEG <$50
    // TODO: Convert NEG <$50

    // EB90: NEG <$00
    // TODO: Convert NEG <$00

    // EB92: NEG <$00
    // TODO: Convert NEG <$00

    // EB94: NEG <$00
    // TODO: Convert NEG <$00

    // EB96: NEG <$00
    // TODO: Convert NEG <$00

    // EB98: NEG <$00
    // TODO: Convert NEG <$00

    // EB9A: NEG <$00
    // TODO: Convert NEG <$00

    // EB9C: NEG <$00
    // TODO: Convert NEG <$00

    // EB9E: NEG <$00
    // TODO: Convert NEG <$00

    // EBA0: NEG <$00
    // TODO: Convert NEG <$00

    // EBA2: NEG <$00
    // TODO: Convert NEG <$00

    // EBA4: NEG <$00
    // TODO: Convert NEG <$00

    // EBA6: NEG <$00
    // TODO: Convert NEG <$00

    // EBA8: NEG <$00
    // TODO: Convert NEG <$00

    // EBAA: NEG <$00
    // TODO: Convert NEG <$00

    // EBAC: NEG <$00
    // TODO: Convert NEG <$00

    // EBAE: NEG <$00
    // TODO: Convert NEG <$00

    // EBB0: NEG <$00
    // TODO: Convert NEG <$00

    // EBB2: NEG <$00
    // TODO: Convert NEG <$00

    // EBB4: EXG inv,inv
    // TODO: Convert EXG inv,inv

    // EBB6: NEG <$E0
    // TODO: Convert NEG <$E0

    // EBB8: TFR Y,A
    cpu.m_a = cpu.m_y;

    // EBBA: NEG <$B8
    // TODO: Convert NEG <$B8

    // EBBC: EXG B,A
    // TODO: Convert EXG B,A

    // EBBE: NEG <$90
    // TODO: Convert NEG <$90

    // EBC0: EXG A,D
    // TODO: Convert EXG A,D

    // EBC2: NEG <$68
    // TODO: Convert NEG <$68

    // EBC4: EXG A,D
    // TODO: Convert EXG A,D

    // EBC6: NEG <$40
    // TODO: Convert NEG <$40

    // EBC8: EXG inv,D
    // TODO: Convert EXG inv,D

    // EBCA: NEG <$18
    // TODO: Convert NEG <$18

    // EBCC: NEG <$FA
    // TODO: Convert NEG <$FA

    // EBCE: NEG <$40
    // TODO: Convert NEG <$40

    // EBD0: EXG B,A
    // TODO: Convert EXG B,A

    // EBD2: NEG <$DC
    // TODO: Convert NEG <$DC

    // EBD4: EXG inv,A
    // TODO: Convert EXG inv,A

    // EBD6: NEG <$B4
    // TODO: Convert NEG <$B4

    // EBD8: EXG inv,A
    // TODO: Convert EXG inv,A

    // EBDA: NEG <$78
    // TODO: Convert NEG <$78

    // EBDC: EXG PC,D
    // TODO: Convert EXG PC,D

    // EBDE: NEG <$50
    // TODO: Convert NEG <$50

    // EBE0: TFR D,A
    cpu.m_a = cpu.m_d;

    // EBE2: NEG <$00
    // TODO: Convert NEG <$00

    // EBE4: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // EBE6: NEG <$F4
    // TODO: Convert NEG <$F4

    // EBE8: EXG B,A
    // TODO: Convert EXG B,A

    // EBEA: NEG <$C2
    // TODO: Convert NEG <$C2

    // EBEC: EXG B,A
    // TODO: Convert EXG B,A

    // EBEE: NEG <$90
    // TODO: Convert NEG <$90

    // EBF0: EXG A,D
    // TODO: Convert EXG A,D

    // EBF2: NEG <$5E
    // TODO: Convert NEG <$5E

    // EBF4: EXG inv,A
    // TODO: Convert EXG inv,A

    // EBF6: NEG <$2C
    // TODO: Convert NEG <$2C

    // EBF8: EXG B,A
    // TODO: Convert EXG B,A

    // EBFA: NEG <$FA
    // TODO: Convert NEG <$FA

    // EBFC: EXG B,A
    // TODO: Convert EXG B,A

    // EBFE: NEG <$C8
    // TODO: Convert NEG <$C8

    // EC00: EXG inv,D
    // TODO: Convert EXG inv,D

    // EC02: NEG <$96
    // TODO: Convert NEG <$96

    // EC04: EXG A,D
    // TODO: Convert EXG A,D

    // EC06: NEG <$64
    // TODO: Convert NEG <$64

    // EC08: EXG inv,A
    // TODO: Convert EXG inv,A

    // EC0A: NEG <$00
    // TODO: Convert NEG <$00

    // EC0C: EXG inv,A
    // TODO: Convert EXG inv,A

    // EC0E: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // EC10: EXG inv,A
    // TODO: Convert EXG inv,A

    // EC12: TFR B,inv
    cpu.m_inv = cpu.m_b;

    // EC14: EXG inv,A
    // TODO: Convert EXG inv,A

    // EC16: TFR inv,CC
    cpu.m_cc = cpu.m_inv;

    // EC18: EXG inv,inv
    // TODO: Convert EXG inv,inv

    // EC1A: EXG inv,S
    // TODO: Convert EXG inv,S

    // EC1C: EXG B,D
    // TODO: Convert EXG B,D

    // EC1E: EXG CC,Y
    // TODO: Convert EXG CC,Y

    // EC20: NEG <$48
    // TODO: Convert NEG <$48

    // EC22: NEG <$C2
    // TODO: Convert NEG <$C2

    // EC24: NEG <$48
    // TODO: Convert NEG <$48

    // EC26: NEG <$C2
    // TODO: Convert NEG <$C2

    // EC28: NEG <$48
    // TODO: Convert NEG <$48

    // EC2A: NEG <$C2
    // TODO: Convert NEG <$C2

    // EC2C: NEG <$48
    // TODO: Convert NEG <$48

    // EC2E: NEG <$C2
    // TODO: Convert NEG <$C2

    // EC30: NEG <$48
    // TODO: Convert NEG <$48

    // EC32: NEG <$90
    // TODO: Convert NEG <$90

    // EC34: NEG <$48
    // TODO: Convert NEG <$48

    // EC36: NEG <$90
    // TODO: Convert NEG <$90

    // EC38: NEG <$48
    // TODO: Convert NEG <$48

    // EC3A: NEG <$5E
    // TODO: Convert NEG <$5E

    // EC3C: NEG <$48
    // TODO: Convert NEG <$48

    // EC3E: NEG <$5E
    // TODO: Convert NEG <$5E

    // EC40: NEG <$48
    // TODO: Convert NEG <$48

    // EC42: NEG <$5E
    // TODO: Convert NEG <$5E

    // EC44: NEG <$48
    // TODO: Convert NEG <$48

    // EC46: NEG <$5E
    // TODO: Convert NEG <$5E

    // EC48: NEG <$48
    // TODO: Convert NEG <$48

    // EC4A: NEG <$2C
    // TODO: Convert NEG <$2C

    // EC4C: NEG <$48
    // TODO: Convert NEG <$48

    // EC4E: NEG <$2C
    // TODO: Convert NEG <$2C

    // EC50: NEG <$48
    // TODO: Convert NEG <$48

    // EC52: NEG <$2C
    // TODO: Convert NEG <$2C

    // EC54: NEG <$48
    // TODO: Convert NEG <$48

    // EC56: NEG <$2C
    // TODO: Convert NEG <$2C

    // EC58: NEG <$48
    // TODO: Convert NEG <$48

    // EC5A: NEG <$2C
    // TODO: Convert NEG <$2C

    // EC5C: NEG <$48
    // TODO: Convert NEG <$48

    // EC5E: NEG <$2C
    // TODO: Convert NEG <$2C

    // EC60: NEG <$48
    // TODO: Convert NEG <$48

    // EC62: NEG <$2C
    // TODO: Convert NEG <$2C

    // EC64: NEG <$48
    // TODO: Convert NEG <$48

    // EC66: NEG <$2C
    // TODO: Convert NEG <$2C

    // EC68: NEG <$48
    // TODO: Convert NEG <$48

    // EC6A: NEG <$FA
    // TODO: Convert NEG <$FA

    // EC6C: NEG <$48
    // TODO: Convert NEG <$48

    // EC6E: NEG <$FA
    // TODO: Convert NEG <$FA

    // EC70: NEG <$48
    // TODO: Convert NEG <$48

    // EC72: NEG <$FA
    // TODO: Convert NEG <$FA

    // EC74: NEG <$48
    // TODO: Convert NEG <$48

    // EC76: NEG <$FA
    // TODO: Convert NEG <$FA

    // EC78: NEG <$48
    // TODO: Convert NEG <$48

    // EC7A: NEG <$C8
    // TODO: Convert NEG <$C8

    // EC7C: NEG <$48
    // TODO: Convert NEG <$48

    // EC7E: NEG <$C8
    // TODO: Convert NEG <$C8

    // EC80: NEG <$48
    // TODO: Convert NEG <$48

    // EC82: NEG <$C8
    // TODO: Convert NEG <$C8

    // EC84: NEG <$48
    // TODO: Convert NEG <$48

    // EC86: NEG <$C8
    // TODO: Convert NEG <$C8

    // EC88: NEG <$48
    // TODO: Convert NEG <$48

    // EC8A: NEG <$96
    // TODO: Convert NEG <$96

    // EC8C: NEG <$48
    // TODO: Convert NEG <$48

    // EC8E: NEG <$96
    // TODO: Convert NEG <$96

    // EC90: NEG <$48
    // TODO: Convert NEG <$48

    // EC92: NEG <$96
    // TODO: Convert NEG <$96

    // EC94: NEG <$48
    // TODO: Convert NEG <$48

    // EC96: NEG <$96
    // TODO: Convert NEG <$96

    // EC98: NEG <$48
    // TODO: Convert NEG <$48

    // EC9A: NEG <$64
    // TODO: Convert NEG <$64

    // EC9C: NEG <$48
    // TODO: Convert NEG <$48

    // EC9E: NEG <$64
    // TODO: Convert NEG <$64

    // ECA0: NEG <$48
    // TODO: Convert NEG <$48

    // ECA2: NEG <$00
    // TODO: Convert NEG <$00

    // ECA4: NEG <$48
    // TODO: Convert NEG <$48

    // ECA6: NEG <$00
    // TODO: Convert NEG <$00

    // ECA8: NEG <$48
    // TODO: Convert NEG <$48

    // ECAA: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // ECAC: NEG <$48
    // TODO: Convert NEG <$48

    // ECAE: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // ECB0: NEG <$48
    // TODO: Convert NEG <$48

    // ECB2: TFR B,inv
    cpu.m_inv = cpu.m_b;

    // ECB4: NEG <$48
    // TODO: Convert NEG <$48

    // ECB6: TFR B,inv
    cpu.m_inv = cpu.m_b;

    // ECB8: NEG <$48
    // TODO: Convert NEG <$48

    // ECBA: TFR inv,CC
    cpu.m_cc = cpu.m_inv;

    // ECBC: NEG <$48
    // TODO: Convert NEG <$48

    // ECBE: TFR inv,CC
    cpu.m_cc = cpu.m_inv;

    // ECC0: NEG <$B2
    // TODO: Convert NEG <$B2

    // ECC2: TFR inv,CC
    cpu.m_cc = cpu.m_inv;

    // ECC4: NEG <$B2
    // TODO: Convert NEG <$B2

    // ECC6: TFR inv,CC
    cpu.m_cc = cpu.m_inv;

    // ECC8: TFR A,D
    cpu.m_d = cpu.m_a;

    // ECCA: NEG <$90
    // TODO: Convert NEG <$90

    // ECCC: EXG inv,S
    // TODO: Convert EXG inv,S

    // ECCE: NEG <$2C
    // TODO: Convert NEG <$2C

    // ECD0: NEG <$64
    // TODO: Convert NEG <$64

    // ECD2: NEG <$2C
    // TODO: Convert NEG <$2C

    // ECD4: TFR DP,D
    cpu.m_d = cpu.m_dp;

    // ECD6: TFR inv,CC
    cpu.m_cc = cpu.m_inv;

    // ECD8: TFR B,A
    cpu.m_a = cpu.m_b;

    // ECDA: NEG <$C8
    // TODO: Convert NEG <$C8

    // ECDC: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // ECDE: NEG <$96
    // TODO: Convert NEG <$96

    // ECE0: TFR CC,S
    cpu.m_sp = cpu.m_cc;

    // ECE2: NEG <$64
    // TODO: Convert NEG <$64

    // ECE4: TFR B,A
    cpu.m_a = cpu.m_b;

    // ECE6: NEG <$32
    // TODO: Convert NEG <$32

    // ECE8: TFR A,inv
    cpu.m_inv = cpu.m_a;

    // ECEA: NEG <$00
    // TODO: Convert NEG <$00

    // ECEC: TFR inv,A
    cpu.m_a = cpu.m_inv;

    // ECEE: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // ECF0: TFR B,A
    cpu.m_a = cpu.m_b;

    // ECF2: TFR B,inv
    cpu.m_inv = cpu.m_b;

    // ECF4: EXG DP,inv
    // TODO: Convert EXG DP,inv

    // ECF6: NEG <$FA
    // TODO: Convert NEG <$FA

    // ECF8: NEG <$64
    // TODO: Convert NEG <$64

    // ECFA: NEG <$FA
    // TODO: Convert NEG <$FA

    // ECFC: TFR DP,D
    cpu.m_d = cpu.m_dp;

    // ECFE: TFR U,A
    cpu.m_a = cpu.m_u;

    // ED00: TFR A,inv
    cpu.m_inv = cpu.m_a;

    // ED02: TFR D,inv
    cpu.m_inv = cpu.m_d;

    // ED04: TFR DP,D
    cpu.m_d = cpu.m_dp;

    // ED06: EXG inv,S
    // TODO: Convert EXG inv,S

    // ED08: TFR DP,inv
    cpu.m_inv = cpu.m_dp;

    // ED0A: EXG inv,S
    // TODO: Convert EXG inv,S

    // ED0C: NEG <$E4
    // TODO: Convert NEG <$E4

    // ED0E: NEG <$D2
    // TODO: Convert NEG <$D2

    // ED10: TFR PC,D
    cpu.m_d = cpu.m_pc;

    // ED12: NEG <$C2
    // TODO: Convert NEG <$C2

    // ED14: TFR Y,inv
    cpu.m_inv = cpu.m_y;

    // ED16: NEG <$00
    // TODO: Convert NEG <$00

    // ED18: TFR U,A
    cpu.m_a = cpu.m_u;

    // ED1A: NEG <$90
    // TODO: Convert NEG <$90

    // ED1C: TFR PC,inv
    cpu.m_inv = cpu.m_pc;

    // ED1E: NEG <$5E
    // TODO: Convert NEG <$5E

    // ED20: TFR PC,inv
    cpu.m_inv = cpu.m_pc;

    // ED22: NEG <$2C
    // TODO: Convert NEG <$2C

    // ED24: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // ED26: NEG <$FA
    // TODO: Convert NEG <$FA

    // ED28: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // ED2A: NEG <$C8
    // TODO: Convert NEG <$C8

    // ED2C: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // ED2E: NEG <$96
    // TODO: Convert NEG <$96

    // ED30: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // ED32: NEG <$64
    // TODO: Convert NEG <$64

    // ED34: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // ED36: NEG <$32
    // TODO: Convert NEG <$32

    // ED38: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // ED3A: NEG <$00
    // TODO: Convert NEG <$00

    // ED3C: EXG inv,inv
    // TODO: Convert EXG inv,inv

    // ED3E: TFR inv,inv
    cpu.m_inv = cpu.m_inv;

    // ED40: TFR U,A
    cpu.m_a = cpu.m_u;

    // ED42: TFR U,A
    cpu.m_a = cpu.m_u;

    // ED44: TFR U,A
    cpu.m_a = cpu.m_u;

    // ED46: TFR D,inv
    cpu.m_inv = cpu.m_d;

    // ED48: TFR U,A
    cpu.m_a = cpu.m_u;

    // ED4A: EXG inv,S
    // TODO: Convert EXG inv,S

    // ED4C: TFR U,A
    cpu.m_a = cpu.m_u;

    // ED4E: EXG CC,Y
    // TODO: Convert EXG CC,Y

    // ED50: TFR U,A
    cpu.m_a = cpu.m_u;

    // ED52: EXG inv,D
    // TODO: Convert EXG inv,D

    // ED54: TFR inv,S
    cpu.m_sp = cpu.m_inv;

    // ED56: TFR inv,CC
    cpu.m_cc = cpu.m_inv;

    // ED58: TFR inv,A
    cpu.m_a = cpu.m_inv;

    // ED5A: NEG <$90
    // TODO: Convert NEG <$90

    // ED5C: EXG inv,inv
    // TODO: Convert EXG inv,inv

    // ED5E: NEG <$C8
    // TODO: Convert NEG <$C8

    // ED60: TFR PC,inv
    cpu.m_inv = cpu.m_pc;

    // ED62: NEG <$5E
    // TODO: Convert NEG <$5E

    // ED64: TFR U,A
    cpu.m_a = cpu.m_u;

    // ED66: NEG <$C8
    // TODO: Convert NEG <$C8

    // ED68: EXG B,A
    // TODO: Convert EXG B,A

    // ED6A: NEG <$13
    // TODO: Convert NEG <$13

    // ED6C: TFR inv,A
    cpu.m_a = cpu.m_inv;

    // ED6E: TFR B,inv
    cpu.m_inv = cpu.m_b;

    // ED70: TFR S,S
    cpu.m_sp = cpu.m_sp;

    // ED72: EXG inv,S
    // TODO: Convert EXG inv,S

    // ED74: TFR CC,S
    cpu.m_sp = cpu.m_cc;

    // ED76: NEG <$64
    // TODO: Convert NEG <$64

    // ED78: TFR PC,D
    cpu.m_d = cpu.m_pc;

    // ED7A: TFR B,inv
    cpu.m_inv = cpu.m_b;

    // ED7C: TFR A,inv
    cpu.m_inv = cpu.m_a;

    // ED7E: NEG <$FA
    // TODO: Convert NEG <$FA

    // ED80: TFR DP,inv
    cpu.m_inv = cpu.m_dp;

    // ED82: NEG <$BE
    // TODO: Convert NEG <$BE

    // ED84: TFR U,A
    cpu.m_a = cpu.m_u;

    // ED86: NEG <$BE
    // TODO: Convert NEG <$BE

    // ED88: TFR B,inv
    cpu.m_inv = cpu.m_b;

    // ED8A: TFR U,A
    cpu.m_a = cpu.m_u;

    // ED8C: TFR B,inv
    cpu.m_inv = cpu.m_b;

    // ED8E: TFR D,inv
    cpu.m_inv = cpu.m_d;

    // ED90: TFR B,inv
    cpu.m_inv = cpu.m_b;

    // ED92: EXG inv,S
    // TODO: Convert EXG inv,S

    // ED94: TFR B,inv
    cpu.m_inv = cpu.m_b;

    // ED96: EXG CC,Y
    // TODO: Convert EXG CC,Y

    // ED98: TFR PC,inv
    cpu.m_inv = cpu.m_pc;

    // ED9A: NEG <$2C
    // TODO: Convert NEG <$2C

    // ED9C: EXG inv,inv
    // TODO: Convert EXG inv,inv

    // ED9E: EXG U,inv
    // TODO: Convert EXG U,inv

    // EDA0: EXG DP,S
    // TODO: Convert EXG DP,S

    // EDA2: EXG U,inv
    // TODO: Convert EXG U,inv

    // EDA4: EXG inv,A
    // TODO: Convert EXG inv,A

    // EDA6: TFR D,inv
    cpu.m_inv = cpu.m_d;

    // EDA8: XNC ,X+
    // TODO: Convert XNC ,X+

    // EDAA: XNC ,X+
    // TODO: Convert XNC ,X+

    // EDAC: XNC ,X+
    // TODO: Convert XNC ,X+

    // EDAE: XNC ,X+
    // TODO: Convert XNC ,X+

    // EDB0: LSR [$6380]
    // TODO: Convert LSR [$6380]

    // EDB4: NEG ,X+
    // TODO: Convert NEG ,X+

    // EDB6: ROR ,X+
    // TODO: Convert ROR ,X+

    // EDB8: ROR ,X+
    // TODO: Convert ROR ,X+

    // EDBA: ROR ,X+
    // TODO: Convert ROR ,X+

    // EDBC: ROR ,X+
    // TODO: Convert ROR ,X+

    // EDBE: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EDC0: ASR ,X+
    // TODO: Convert ASR ,X+

    // EDC2: ASR ,X+
    // TODO: Convert ASR ,X+

    // EDC4: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EDC6: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDC8: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDCA: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDCC: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDCE: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDD0: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDD2: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDD4: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDD6: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDD8: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDDA: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDDC: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDDE: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDE0: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDE2: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDE4: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDE6: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDE8: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDEA: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDEC: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDEE: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDF0: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDF2: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDF4: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDF6: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDF8: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDFA: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDFC: LSR ,X+
    // TODO: Convert LSR ,X+

    // EDFE: LSR ,X+
    // TODO: Convert LSR ,X+

    // EE00: LSR ,X+
    // TODO: Convert LSR ,X+

    // EE02: LSR ,X+
    // TODO: Convert LSR ,X+

    // EE04: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EE06: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE08: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE0A: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE0C: LSR ,X+
    // TODO: Convert LSR ,X+

    // EE0E: LSR ,X+
    // TODO: Convert LSR ,X+

    // EE10: LSR ,X+
    // TODO: Convert LSR ,X+

    // EE12: NEG ,X+
    // TODO: Convert NEG ,X+

    // EE14: NEG ,X+
    // TODO: Convert NEG ,X+

    // EE16: NEG ,X+
    // TODO: Convert NEG ,X+

    // EE18: LSR ,X+
    // TODO: Convert LSR ,X+

    // EE1A: LSR ,X+
    // TODO: Convert LSR ,X+

    // EE1C: ROR ,X+
    // TODO: Convert ROR ,X+

    // EE1E: LSR ,X+
    // TODO: Convert LSR ,X+

    // EE20: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EE22: NEG ,X+
    // TODO: Convert NEG ,X+

    // EE24: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EE26: LSR ,X+
    // TODO: Convert LSR ,X+

    // EE28: LSR ,X+
    // TODO: Convert LSR ,X+

    // EE2A: LSR ,X+
    // TODO: Convert LSR ,X+

    // EE2C: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EE2E: LSR ,X+
    // TODO: Convert LSR ,X+

    // EE30: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EE32: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EE34: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EE36: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EE38: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EE3A: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EE3C: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EE3E: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EE40: ASR ,X+
    // TODO: Convert ASR ,X+

    // EE42: LSR ,X+
    // TODO: Convert LSR ,X+

    // EE44: LSR ,X+
    // TODO: Convert LSR ,X+

    // EE46: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EE48: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    // EE4A: NEG <$00
    // TODO: Convert NEG <$00

    // EE4C: NEG <$00
    // TODO: Convert NEG <$00

    // EE4E: NEG <$00
    // TODO: Convert NEG <$00

    // EE50: NEG <$00
    // TODO: Convert NEG <$00

    // EE52: NEG <$00
    // TODO: Convert NEG <$00

    // EE54: NEG <$00
    // TODO: Convert NEG <$00

    // EE56: NEG <$00
    // TODO: Convert NEG <$00

    // EE58: NEG <$00
    // TODO: Convert NEG <$00

    // EE5A: ASR ,X+
    // TODO: Convert ASR ,X+

    // EE5C: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE5E: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE60: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE62: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE64: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE66: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE68: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE6A: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE6C: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE6E: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE70: ASR ,X+
    // TODO: Convert ASR ,X+

    // EE72: ASR ,X+
    // TODO: Convert ASR ,X+

    // EE74: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE76: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE78: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE7A: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE7C: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE7E: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE80: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE82: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE84: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE86: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE88: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE8A: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE8C: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE8E: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE90: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE92: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE94: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE96: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE98: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE9A: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE9C: XNC ,X+
    // TODO: Convert XNC ,X+

    // EE9E: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEA0: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEA2: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEA4: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEA6: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEA8: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEAA: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEAC: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEAE: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEB0: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEB2: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEB4: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEB6: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEB8: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEBA: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEBC: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEBE: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEC0: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEC2: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEC4: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEC6: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEC8: XNC ,X+
    // TODO: Convert XNC ,X+

    // EECA: XNC ,X+
    // TODO: Convert XNC ,X+

    // EECC: XNC ,X+
    // TODO: Convert XNC ,X+

    // EECE: XNC ,X+
    // TODO: Convert XNC ,X+

    // EED0: XNC ,X+
    // TODO: Convert XNC ,X+

    // EED2: XNC ,X+
    // TODO: Convert XNC ,X+

    // EED4: XNC ,X+
    // TODO: Convert XNC ,X+

    // EED6: XNC ,X+
    // TODO: Convert XNC ,X+

    // EED8: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEDA: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEDC: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEDE: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEE0: LSR ,X+
    // TODO: Convert LSR ,X+

    // EEE2: LSR ,X+
    // TODO: Convert LSR ,X+

    // EEE4: ASR ,X+
    // TODO: Convert ASR ,X+

    // EEE6: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEE8: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEEA: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEEC: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEEE: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEF0: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEF2: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEF4: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEF6: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEF8: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEFA: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEFC: XNC ,X+
    // TODO: Convert XNC ,X+

    // EEFE: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF00: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF02: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF04: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF06: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF08: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF0A: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF0C: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF0E: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF10: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF12: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF14: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF16: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF18: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF1A: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF1C: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF1E: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF20: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF22: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF24: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF26: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF28: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF2A: XNC ,X+
    // TODO: Convert XNC ,X+

    // EF2C: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF2E: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF30: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF32: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF34: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF36: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF38: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF3A: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF3C: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF3E: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF40: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF42: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF44: ASR $0,X
    // TODO: Convert ASR $0,X

    // EF46: ASR -$10,X
    // TODO: Convert ASR -$10,X

    // EF48: ASR $0,Y
    // TODO: Convert ASR $0,Y

    // EF4A: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF4C: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF4E: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF50: ASR ,X+
    // TODO: Convert ASR ,X+

    // EF52: SUBA -$6,X
    // TODO: Fix comma operator: SUBA -$6,X

    label_EF54:
    // EF54: BRA $EF54
    goto label_EF54;

    // EF56: LDX $A,S
    // TODO: Fix comma operator: LDX $A,S

    // EF58: CMPX #$6000
    cpu.compare_x(0x6000);

    // EF5B: BCC $EF5E
    if (!cpu.carry_flag()) cpu.m_pc = 0xEF5E;

    // EF5D: SWI 
    // TODO: Convert SWI 

    // EF5E: CMPX #$EF54
    cpu.compare_x(0xEF54);

    // EF61: BCS $EF64
    if (cpu.carry_flag()) cpu.m_pc = 0xEF64;

    // EF63: SWI 
    // TODO: Convert SWI 

    // EF64: LDA #$48
    cpu.m_a = 0x48;

    // EF66: TFR A,DP
    cpu.m_dp = cpu.m_a;

    // EF68: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // EF6B: LDA <$00
    cpu.m_a = cpu.read_memory(0x00);

    // EF6D: CMPA #$3F
    cpu.compare_a(0x3F);

    // EF6F: BEQ $EF72
    if (cpu.zero_flag()) cpu.m_pc = 0xEF72;

    // EF71: SWI 
    // TODO: Convert SWI 

    // EF72: DEC <$3E
    cpu.decrement_memory(0x3E);

    // EF74: BPL $EF7F
    if (!cpu.negative_flag()) cpu.m_pc = 0xEF7F;

    // EF76: LDA #$0B
    cpu.m_a = 0x0B;

    // EF78: STA <$3E
    cpu.write_memory(0x3E, cpu.m_a);

    // EF7A: INC <$3D
    cpu.increment_memory(0x3D);

    // EF7C: BVC $EF7F
    // TODO: Convert BVC $EF7F

    // EF7E: SWI 
    // TODO: Convert SWI 

    label_EF7F:
    // EF7F: JMP $ef7f
    goto label_EF7F;

    // EF81: JSR $D776
    cpu.call_function(0xD776);

    // EF84: LDA <$14
    cpu.m_a = cpu.read_memory(0x14);

    // EF86: CMPA #$24
    cpu.compare_a(0x24);

    // EF88: BCS $EF8B
    if (cpu.carry_flag()) cpu.m_pc = 0xEF8B;

    // EF8A: SWI 
    // TODO: Convert SWI 

    // EF8B: LDX #$481C
    cpu.m_x = 0x481C;

    // EF8E: LDA $4300
    cpu.m_a = cpu.read_memory(0x4300);

    // EF91: JSR $F133
    cpu.call_function(0xF133);

    // EF94: LDA $4320
    cpu.m_a = cpu.read_memory(0x4320);

    // EF97: JSR $F133
    cpu.call_function(0xF133);

    // EF9A: LDA $4340
    cpu.m_a = cpu.read_memory(0x4340);

    // EF9D: JSR $F133
    cpu.call_function(0xF133);

    // EFA0: LDA $4360
    cpu.m_a = cpu.read_memory(0x4360);

    // EFA3: JSR $F133
    cpu.call_function(0xF133);

    // EFA6: LDA <$33
    cpu.m_a = cpu.read_memory(0x33);

    // EFA8: STA <$34
    cpu.write_memory(0x34, cpu.m_a);

    // EFAA: LDA $4821
    cpu.m_a = cpu.read_memory(0x4821);

    // EFAD: ANDA #$30
    cpu.m_a &= 0x30;

    // EFAF: STA -$1,S
    cpu.write_memory(cpu.m_sp - 0x01, cpu.m_a);

    // EFB1: LDA $481E
    cpu.m_a = cpu.read_memory(0x481E);

    // EFB4: ANDA #$CF
    cpu.m_a &= 0xCF;

    // EFB6: ORA -$1,S
    // TODO: Fix comma operator: ORA -$1,S

    // EFB8: STA <$33
    cpu.write_memory(0x33, cpu.m_a);

    // EFBA: EORA <$34
    cpu.m_a ^= 0x34;

    // EFBC: ANDA <$34
    cpu.m_a &= 0x34;

    // EFBE: STA <$32
    cpu.write_memory(0x32, cpu.m_a);

    // EFC0: LDA <$32
    cpu.m_a = cpu.read_memory(0x32);

    // EFC2: ANDA #$F0
    cpu.m_a &= 0xF0;

    // EFC4: BEQ $EFCA
    if (cpu.zero_flag()) cpu.m_pc = 0xEFCA;

    // EFC6: ORA <$31
    cpu.m_a |= 0x31;

    // EFC8: STA <$31
    cpu.write_memory(0x31, cpu.m_a);

    // EFCA: JSR $F146
    cpu.call_function(0xF146);

    // EFCD: LDA <$0A
    cpu.m_a = cpu.read_memory(0x0A);

    // EFCF: BNE $EFE6
    if (!cpu.zero_flag()) cpu.m_pc = 0xEFE6;

    // EFD1: LDA $4401
    cpu.m_a = cpu.read_memory(0x4401);

    // EFD4: ASLA 
    cpu.m_a <<= 1;

    // EFD5: BPL $EFDE
    if (!cpu.negative_flag()) cpu.m_pc = 0xEFDE;

    // EFD7: LDA $4400
    cpu.m_a = cpu.read_memory(0x4400);

    // EFDA: CMPA #$5A
    cpu.compare_a(0x5A);

    // EFDC: BEQ $EFE6
    if (cpu.zero_flag()) cpu.m_pc = 0xEFE6;

    // EFDE: STA $46E0
    cpu.write_memory(0x46E0, cpu.m_a);

    // EFE1: LDA #$00
    cpu.m_a = 0x00;

    // EFE3: STA $4400
    cpu.write_memory(0x4400, cpu.m_a);

    // EFE6: LDA <$0A
    cpu.m_a = cpu.read_memory(0x0A);

    // EFE8: ANDA #$03
    cpu.m_a &= 0x03;

    // EFEA: BNE $F034
    if (!cpu.zero_flag()) cpu.m_pc = 0xF034;

    // EFEC: LDA $481B
    cpu.m_a = cpu.read_memory(0x481B);

    // EFEF: ADDA #$01
    cpu.m_a += 0x01;

    // EFF1: CMPA #$FA
    cpu.compare_a(0xFA);

    // EFF3: BCS $EFF7
    if (cpu.carry_flag()) cpu.m_pc = 0xEFF7;

    // EFF5: LDA #$00
    cpu.m_a = 0x00;

    // EFF7: STA $481B
    cpu.write_memory(0x481B, cpu.m_a);

    // EFFA: BNE $F034
    if (!cpu.zero_flag()) cpu.m_pc = 0xF034;

    // EFFC: LDA $481A
    cpu.m_a = cpu.read_memory(0x481A);

    // EFFF: ADDA #$01
    cpu.m_a += 0x01;

    // F001: DAA 
    // TODO: Convert DAA 

    // F002: STA $481A
    cpu.write_memory(0x481A, cpu.m_a);

    // F005: LDA $4819
    cpu.m_a = cpu.read_memory(0x4819);

    // F008: ADCA #$00
    cpu.add_a_with_carry(0x00);

    // F00A: DAA 
    // TODO: Convert DAA 

    // F00B: BCS $F010
    if (cpu.carry_flag()) cpu.m_pc = 0xF010;

    // F00D: STA $4819
    cpu.write_memory(0x4819, cpu.m_a);

    // F010: LDA $4B07
    cpu.m_a = cpu.read_memory(0x4B07);

    // F013: ADDA #$01
    cpu.m_a += 0x01;

    // F015: DAA 
    // TODO: Convert DAA 

    // F016: STA $4B07
    cpu.write_memory(0x4B07, cpu.m_a);

    // F019: LDA $4B06
    cpu.m_a = cpu.read_memory(0x4B06);

    // F01C: ADCA #$00
    cpu.add_a_with_carry(0x00);

    // F01E: DAA 
    // TODO: Convert DAA 

    // F01F: STA $4B06
    cpu.write_memory(0x4B06, cpu.m_a);

    // F022: LDA $4B05
    cpu.m_a = cpu.read_memory(0x4B05);

    // F025: ADCA #$00
    cpu.add_a_with_carry(0x00);

    // F027: DAA 
    // TODO: Convert DAA 

    // F028: STA $4B05
    cpu.write_memory(0x4B05, cpu.m_a);

    // F02B: LDA $4B04
    cpu.m_a = cpu.read_memory(0x4B04);

    // F02E: ADCA #$00
    cpu.add_a_with_carry(0x00);

    // F030: DAA 
    // TODO: Convert DAA 

    // F031: STA $4B04
    cpu.write_memory(0x4B04, cpu.m_a);

    // F034: DEC <$40
    cpu.decrement_memory(0x40);

    // F036: BVC $F041
    // TODO: Convert BVC $F041

    // F038: STA $4620
    cpu.write_memory(0x4620, cpu.m_a);

    // F03B: JSR $611E
    cpu.call_function(0x611E);

    // F03E: JMP $F12F
    goto label_F12F;

    // F041: LBPL $F12F
    // TODO: Convert LBPL $F12F

    // F045: LDA $4320
    cpu.m_a = cpu.read_memory(0x4320);

    // F048: ASLA 
    cpu.m_a <<= 1;

    // F049: LBPL $F12F
    // TODO: Convert LBPL $F12F

    // F04D: LDA <$3F
    cpu.m_a = cpu.read_memory(0x3F);

    // F04F: BPL $F06A
    if (!cpu.negative_flag()) cpu.m_pc = 0xF06A;

    // F051: LDA >$0000
    cpu.m_a = cpu.read_memory(0x0000);

    // F054: ANDA #$0A
    cpu.m_a &= 0x0A;

    // F056: BEQ $F05A
    if (cpu.zero_flag()) cpu.m_pc = 0xF05A;

    // F058: LDA #$14
    cpu.m_a = 0x14;

    // F05A: ORA #$00
    cpu.m_a |= 0x00;

    // F05C: STA <$3F
    cpu.write_memory(0x3F, cpu.m_a);

    // F05E: LDB #$38
    cpu.m_b = 0x38;

    // F060: LSRA 
    cpu.m_a >>= 1;

    // F061: ANDA #$0A
    cpu.m_a &= 0x0A;

    // F063: EORA #$0A
    cpu.m_a ^= 0x0A;

    // F065: ORA #$E0
    cpu.m_a |= 0xE0;

    // F067: STD >$0000
    cpu.write_memory16(0x0000, cpu.m_d);

    // F06A: DEC <$28
    cpu.decrement_memory(0x28);

    // F06C: BPL $F073
    if (!cpu.negative_flag()) cpu.m_pc = 0xF073;

    // F06E: CLR <$28
    cpu.write_memory(0x28, 0);

    // F070: JSR $F18D
    cpu.call_function(0xF18D);

    // F073: JSR $F22B
    cpu.call_function(0xF22B);

    // F076: LDB <$3A
    cpu.m_b = cpu.read_memory(0x3A);

    // F078: ADDB #$02
    cpu.m_b += 0x02;

    // F07A: CMPB #$20
    cpu.compare_b(0x20);

    // F07C: BCS $F07F
    if (cpu.carry_flag()) cpu.m_pc = 0xF07F;

    // F07E: CLRB 
    cpu.m_b = 0;

    // F07F: STB <$3A
    cpu.write_memory(0x3A, cpu.m_b);

    // F081: LDX #$0004
    cpu.m_x = 0x0004;

    // F084: ABX 
    // TODO: Convert ABX 

    // F085: LDU #$D620
    cpu.m_u = 0xD620;

    // F088: LDD ,U++
    cpu.m_d = cpu.read_memory16(cpu.m_u++);

    // F08A: STD ,--X
    cpu.m_x--;
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // F08C: CMPX #$0002
    cpu.compare_x(0x0002);

    // F08F: BGT $F088
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xF088;

    // F091: LDX #$0022
    cpu.m_x = 0x0022;

    label_F094:
    // F094: CMPU #$D640
    cpu.execute_cmpu_immediate(0xD640);

    // F098: BCC $F0A0
    if (!cpu.carry_flag()) cpu.m_pc = 0xF0A0;

    // F09A: LDD ,U++
    cpu.m_d = cpu.read_memory16(cpu.m_u++);

    // F09C: STD ,--X
    cpu.m_x--;
    cpu.write_memory16(cpu.m_x, cpu.m_d);

    // F09E: BRA $F094
    goto label_F094;

    // F0A0: LDB <$3B
    cpu.m_b = cpu.read_memory(0x3B);

    // F0A2: ADDB #$02
    cpu.m_b += 0x02;

    // F0A4: CMPB #$08
    cpu.compare_b(0x08);

    // F0A6: BCS $F0A9
    if (cpu.carry_flag()) cpu.m_pc = 0xF0A9;

    // F0A8: CLRB 
    cpu.m_b = 0;

    // F0A9: STB <$3B
    cpu.write_memory(0x3B, cpu.m_b);

    // F0AB: LDU #$D640
    cpu.m_u = 0xD640;

    // F0AE: LDD B,U
    // TODO: Fix comma operator: LDD B,U

    // F0B0: STD >$0022
    cpu.write_memory16(0x0022, cpu.m_d);

    // F0B3: DEC <$36
    cpu.decrement_memory(0x36);

    // F0B5: BGT $F0D8
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xF0D8;

    // F0B7: LDB #$04
    cpu.m_b = 0x04;

    // F0B9: STB <$36
    cpu.write_memory(0x36, cpu.m_b);

    // F0BB: LDB <$37
    cpu.m_b = cpu.read_memory(0x37);

    // F0BD: ADDB #$02
    cpu.m_b += 0x02;

    // F0BF: CMPB #$08
    cpu.compare_b(0x08);

    // F0C1: BCS $F0C4
    if (cpu.carry_flag()) cpu.m_pc = 0xF0C4;

    // F0C3: CLRB 
    cpu.m_b = 0;

    // F0C4: STB <$37
    cpu.write_memory(0x37, cpu.m_b);

    // F0C6: LDU #$D648
    cpu.m_u = 0xD648;

    // F0C9: LDD B,U
    // TODO: Fix comma operator: LDD B,U

    // F0CB: STD >$002A
    cpu.write_memory16(0x002A, cpu.m_d);

    // F0CE: LDB <$37
    cpu.m_b = cpu.read_memory(0x37);

    // F0D0: LDU #$D650
    cpu.m_u = 0xD650;

    // F0D3: LDD B,U
    // TODO: Fix comma operator: LDD B,U

    // F0D5: STD >$002E
    cpu.write_memory16(0x002E, cpu.m_d);

    // F0D8: DEC <$38
    cpu.decrement_memory(0x38);

    // F0DA: BGT $F0F3
    if (!cpu.zero_flag() && cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xF0F3;

    // F0DC: LDB #$01
    cpu.m_b = 0x01;

    // F0DE: STB <$38
    cpu.write_memory(0x38, cpu.m_b);

    // F0E0: LDB <$39
    cpu.m_b = cpu.read_memory(0x39);

    // F0E2: ADDB #$02
    cpu.m_b += 0x02;

    // F0E4: CMPB #$08
    cpu.compare_b(0x08);

    // F0E6: BCS $F0E9
    if (cpu.carry_flag()) cpu.m_pc = 0xF0E9;

    // F0E8: CLRB 
    cpu.m_b = 0;

    // F0E9: STB <$39
    cpu.write_memory(0x39, cpu.m_b);

    // F0EB: LDU #$D658
    cpu.m_u = 0xD658;

    // F0EE: LDD B,U
    // TODO: Fix comma operator: LDD B,U

    // F0F0: STD >$002C
    cpu.write_memory16(0x002C, cpu.m_d);

    // F0F3: LDB <$35
    cpu.m_b = cpu.read_memory(0x35);

    // F0F5: ADDB #$02
    cpu.m_b += 0x02;

    // F0F7: CMPB #$0E
    cpu.compare_b(0x0E);

    // F0F9: BCS $F0FC
    if (cpu.carry_flag()) cpu.m_pc = 0xF0FC;

    // F0FB: CLRB 
    cpu.m_b = 0;

    // F0FC: STB <$35
    cpu.write_memory(0x35, cpu.m_b);

    // F0FE: LDU #$D604
    cpu.m_u = 0xD604;

    // F101: LDD B,U
    // TODO: Fix comma operator: LDD B,U

    // F103: STD >$0030
    cpu.write_memory16(0x0030, cpu.m_d);

    // F106: LDD #$C000
    cpu.m_d = 0xC000;

    // F109: STD >$0032
    cpu.write_memory16(0x0032, cpu.m_d);

    // F10C: LDB <$3C
    cpu.m_b = cpu.read_memory(0x3C);

    // F10E: ADDB #$02
    cpu.m_b += 0x02;

    // F110: CMPB #$0E
    cpu.compare_b(0x0E);

    // F112: BCS $F115
    if (cpu.carry_flag()) cpu.m_pc = 0xF115;

    // F114: CLRB 
    cpu.m_b = 0;

    // F115: STB <$3C
    cpu.write_memory(0x3C, cpu.m_b);

    // F117: LDU #$D612
    cpu.m_u = 0xD612;

    // F11A: LDD B,U
    // TODO: Fix comma operator: LDD B,U

    // F11C: STD >$0034
    cpu.write_memory16(0x0034, cpu.m_d);

    // F11F: LDD #$C000
    cpu.m_d = 0xC000;

    // F122: STD >$0036
    cpu.write_memory16(0x0036, cpu.m_d);

    // F125: JSR $D660
    cpu.call_function(0xD660);

    // F128: STA $4600
    cpu.write_memory(0x4600, cpu.m_a);

    // F12B: LDA #$05
    cpu.m_a = 0x05;

    // F12D: STA <$40
    cpu.write_memory(0x40, cpu.m_a);

    label_F12F:
    // F12F: STA $4660
    cpu.write_memory(0x4660, cpu.m_a);

    // F132: RTI 
    // TODO: Convert RTI 

    // F133: LDB ,X
    // TODO: Complex indexed addressing: ,X

    // F135: STB $1,X
    cpu.write_memory(cpu.m_x + 0x01, cpu.m_b);

    // F137: STA ,X
    cpu.write_memory(cpu.m_x, cpu.m_a);

    // F139: ANDA $1,X
    // TODO: Fix comma operator: ANDA $1,X

    // F13B: ORA $2,X
    // TODO: Fix comma operator: ORA $2,X

    // F13D: STA $2,X
    cpu.write_memory(cpu.m_x + 0x02, cpu.m_a);

    // F13F: ORB ,X++
    cpu.m_b |= cpu.m_x++;

    // F141: ANDB ,X
    // TODO: Complex indexed addressing: ,X

    // F143: STB ,X+
    cpu.write_memory(cpu.m_x, cpu.m_b);
    cpu.m_x++;

    // F145: RTS 
    return;

    // F146: LDA <$0A
    cpu.m_a = cpu.read_memory(0x0A);

    // F148: LSRA 
    cpu.m_a >>= 1;

    // F149: LDY #$4829
    cpu.m_y = 0x4829;

    // F14D: BCS $F153
    if (cpu.carry_flag()) cpu.m_pc = 0xF153;

    // F14F: LDY #$482B
    cpu.m_y = 0x482B;

    // F153: LDB $1,Y
    // TODO: Fix comma operator: LDB $1,Y

    // F155: LDA $4380
    cpu.m_a = cpu.read_memory(0x4380);

    // F158: STA $1,Y
    cpu.write_memory(cpu.m_y + 0x01, cpu.m_a);

    // F15A: CMPA ,Y
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_y));

    // F15C: BCS $F16C
    if (cpu.carry_flag()) cpu.m_pc = 0xF16C;

    // F15E: CMPB ,Y
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_y));

    // F160: BLS $F16A
    // TODO: Convert BLS $F16A

    // F162: CMPB $1,Y
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_y + 0x01));

    // F164: BLS $F168
    // TODO: Convert BLS $F168

    // F166: LDB $1,Y
    // TODO: Fix comma operator: LDB $1,Y

    // F168: STB ,Y
    cpu.write_memory(cpu.m_y, cpu.m_b);

    // F16A: BRA $F178
    goto label_F178;

    // F16C: CMPB ,Y
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_y));

    // F16E: BCC $F178
    if (!cpu.carry_flag()) cpu.m_pc = 0xF178;

    // F170: CMPB $1,Y
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_y + 0x01));

    // F172: BCC $F176
    if (!cpu.carry_flag()) cpu.m_pc = 0xF176;

    // F174: LDB $1,Y
    // TODO: Fix comma operator: LDB $1,Y

    // F176: STB ,Y
    cpu.write_memory(cpu.m_y, cpu.m_b);

    label_F178:
    // F178: CMPY #$4829
    cpu.execute_cmpy_immediate(0x4829);

    // F17C: BNE $F186
    if (!cpu.zero_flag()) cpu.m_pc = 0xF186;

    // F17E: STA $46C0
    cpu.write_memory(0x46C0, cpu.m_a);

    // F181: STA $46C0
    cpu.write_memory(0x46C0, cpu.m_a);

    // F184: BRA $F18C
    goto label_F18C;

    // F186: STA $46C1
    cpu.write_memory(0x46C1, cpu.m_a);

    // F189: STA $46C1
    cpu.write_memory(0x46C1, cpu.m_a);

    label_F18C:
    // F18C: RTS 
    return;

    // F18D: LDX #$4866
    cpu.m_x = 0x4866;

    // F190: LDA <$2B
    cpu.m_a = cpu.read_memory(0x2B);

    // F192: NOP 
    // NOP;

    // F193: JSR $F1C6
    cpu.call_function(0xF1C6);

    // F196: LDA $4,X
    // TODO: Fix comma operator: LDA $4,X

    // F198: CMPA #$78
    cpu.compare_a(0x78);

    // F19A: BLE $F19E
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xF19E;

    // F19C: LDA #$78
    cpu.m_a = 0x78;

    // F19E: CMPA #$98
    cpu.compare_a(0x98);

    // F1A0: BGE $F1A4
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xF1A4;

    // F1A2: LDA #$98
    cpu.m_a = 0x98;

    // F1A4: STA $4,X
    cpu.write_memory(cpu.m_x + 0x04, cpu.m_a);

    // F1A6: JSR $F1FD
    cpu.call_function(0xF1FD);

    // F1A9: LDX #$486F
    cpu.m_x = 0x486F;

    // F1AC: LDA <$29
    cpu.m_a = cpu.read_memory(0x29);

    // F1AE: NOP 
    // NOP;

    // F1AF: JSR $F1C6
    cpu.call_function(0xF1C6);

    // F1B2: LDA $4,X
    // TODO: Fix comma operator: LDA $4,X

    // F1B4: CMPA #$70
    cpu.compare_a(0x70);

    // F1B6: BLE $F1BA
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xF1BA;

    // F1B8: LDA #$70
    cpu.m_a = 0x70;

    // F1BA: CMPA #$90
    cpu.compare_a(0x90);

    // F1BC: BGE $F1C0
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xF1C0;

    // F1BE: LDA #$90
    cpu.m_a = 0x90;

    // F1C0: STA $4,X
    cpu.write_memory(cpu.m_x + 0x04, cpu.m_a);

    // F1C2: JSR $F1FD
    cpu.call_function(0xF1FD);

    // F1C5: RTS 
    return;

    // F1C6: CMPA ,X
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_x));

    // F1C8: BCC $F1D0
    if (!cpu.carry_flag()) cpu.m_pc = 0xF1D0;

    // F1CA: CMPA $1,X
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_x + 0x01));

    // F1CC: BCS $F1D0
    if (cpu.carry_flag()) cpu.m_pc = 0xF1D0;

    // F1CE: DEC ,X
    // TODO: Complex indexed addressing: ,X

    // F1D0: STA $1,X
    cpu.write_memory(cpu.m_x + 0x01, cpu.m_a);

    // F1D2: CMPA ,X
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_x));

    // F1D4: BCC $F1D8
    if (!cpu.carry_flag()) cpu.m_pc = 0xF1D8;

    // F1D6: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // F1D8: SUBA ,X
    // TODO: Complex indexed addressing: ,X

    // F1DA: STA <$51
    cpu.write_memory(0x51, cpu.m_a);

    // F1DC: LDB $2,X
    // TODO: Fix comma operator: LDB $2,X

    // F1DE: MUL 
    // TODO: Convert MUL 

    // F1DF: ADDA <$51
    cpu.m_a += 0x51;

    // F1E1: BNE $F1E5
    if (!cpu.zero_flag()) cpu.m_pc = 0xF1E5;

    // F1E3: LDA #$01
    cpu.m_a = 0x01;

    // F1E5: BCS $F1EB
    if (cpu.carry_flag()) cpu.m_pc = 0xF1EB;

    // F1E7: CLR $3,X
    // TODO: Fix comma operator: CLR $3,X

    // F1E9: BRA $F1F7
    goto label_F1F7;

    // F1EB: LDA #$FF
    cpu.m_a = 0xFF;

    // F1ED: INC $3,X
    // TODO: Fix comma operator: INC $3,X

    // F1EF: LDB $3,X
    // TODO: Fix comma operator: LDB $3,X

    // F1F1: CMPB #$02
    cpu.compare_b(0x02);

    // F1F3: BCS $F1F7
    if (cpu.carry_flag()) cpu.m_pc = 0xF1F7;

    // F1F5: DEC $2,X
    // TODO: Fix comma operator: DEC $2,X

    label_F1F7:
    // F1F7: CLRB 
    cpu.m_b = 0;

    // F1F8: SUBA #$80
    cpu.m_a -= 0x80;

    // F1FA: STA $4,X
    cpu.write_memory(cpu.m_x + 0x04, cpu.m_a);

    // F1FC: RTS 
    return;

    // F1FD: CLR <$51
    cpu.write_memory(0x51, 0);

    // F1FF: LDA $4,X
    // TODO: Fix comma operator: LDA $4,X

    // F201: LDB #$80
    cpu.m_b = 0x80;

    // F203: SUBD $5,X
    // TODO: Fix comma operator: SUBD $5,X

    // F205: BGE $F20A
    if (cpu.negative_flag() == cpu.overflow_flag()) cpu.m_pc = 0xF20A;

    // F207: NEGA 
    cpu.m_a = -cpu.m_a;

    // F208: DEC <$51
    cpu.decrement_memory(0x51);

    // F20A: BLE $F20F
    if (cpu.zero_flag() || cpu.negative_flag() != cpu.overflow_flag()) cpu.m_pc = 0xF20F;

    // F20C: ADDD #$00FF
    cpu.m_d += 0x00FF;

    // F20F: CMPA #$F8
    cpu.compare_a(0xF8);

    // F211: BLS $F215
    // TODO: Convert BLS $F215

    // F213: LDA #$F8
    cpu.m_a = 0xF8;

    // F215: LDB #$60
    cpu.m_b = 0x60;

    // F217: CMPA #$40
    cpu.compare_a(0x40);

    // F219: BCC $F21D
    if (!cpu.carry_flag()) cpu.m_pc = 0xF21D;

    // F21B: LDB #$30
    cpu.m_b = 0x30;

    // F21D: MUL 
    // TODO: Convert MUL 

    // F21E: TST <$51
    // TODO: Convert TST <$51

    // F220: BPL $F226
    if (!cpu.negative_flag()) cpu.m_pc = 0xF226;

    // F222: COMA 
    cpu.m_a = ~cpu.m_a;

    // F223: NEGB 
    cpu.m_b = -cpu.m_b;

    // F224: SBCA #$FF
    cpu.sub_a_with_carry(0xFF);

    // F226: ADDD $5,X
    // TODO: Fix comma operator: ADDD $5,X

    // F228: STD $5,X
    cpu.write_memory16(cpu.m_x + 0x05, cpu.m_d);

    // F22A: RTS 
    return;

    // F22B: LDB <$6B
    cpu.m_b = cpu.read_memory(0x6B);

    // F22D: LDA <$6C
    cpu.m_a = cpu.read_memory(0x6C);

    // F22F: ANDA #$C0
    cpu.m_a &= 0xC0;

    // F231: ASLA 
    cpu.m_a <<= 1;

    // F232: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // F233: BCC $F237
    if (!cpu.carry_flag()) cpu.m_pc = 0xF237;

    // F235: ORA #$3F
    cpu.m_a |= 0x3F;

    // F237: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // F238: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // F239: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // F23A: STD <$2F
    cpu.write_memory16(0x2F, cpu.m_d);

    // F23C: ADDD #$FF98
    cpu.m_d += 0xFF98;

    // F23F: ANDA #$1F
    cpu.m_a &= 0x1F;

    // F241: STD >$0024
    cpu.write_memory16(0x0024, cpu.m_d);

    // F244: LDB <$74
    cpu.m_b = cpu.read_memory(0x74);

    // F246: LDA <$75
    cpu.m_a = cpu.read_memory(0x75);

    // F248: ANDA #$C0
    cpu.m_a &= 0xC0;

    // F24A: ASLA 
    cpu.m_a <<= 1;

    // F24B: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // F24C: BCC $F250
    if (!cpu.carry_flag()) cpu.m_pc = 0xF250;

    // F24E: ORA #$3F
    cpu.m_a |= 0x3F;

    // F250: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // F251: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // F252: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // F253: STD <$2D
    cpu.write_memory16(0x2D, cpu.m_d);

    // F255: ANDA #$1F
    cpu.m_a &= 0x1F;

    // F257: STD >$0026
    cpu.write_memory16(0x0026, cpu.m_d);

    // F25A: LDD #$C000
    cpu.m_d = 0xC000;

    // F25D: STD >$0028
    cpu.write_memory16(0x0028, cpu.m_d);

    // F260: RTS 
    return;

    label_F261:
    // F261: JMP $f261
    goto label_F261;

    // F263: CLR $4684
    cpu.write_memory(0x4684, 0);

    // F266: LDA #$00
    cpu.m_a = 0x00;

    // F268: STA $4686
    cpu.write_memory(0x4686, cpu.m_a);

    // F26B: STA $4683
    cpu.write_memory(0x4683, cpu.m_a);

    // F26E: STA $4682
    cpu.write_memory(0x4682, cpu.m_a);

    // F271: LDA #$00
    cpu.m_a = 0x00;

    // F273: STA $4685
    cpu.write_memory(0x4685, cpu.m_a);

    // F276: LDA #$80
    cpu.m_a = 0x80;

    // F278: STA $4685
    cpu.write_memory(0x4685, cpu.m_a);

    // F27B: STA $4620
    cpu.write_memory(0x4620, cpu.m_a);

    // F27E: LDU #$0000
    cpu.m_u = 0x0000;

    // F281: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F284: LEAU -$1,U
    // TODO: Fix comma operator: LEAU -$1,U

    // F286: CMPU #$0000
    cpu.execute_cmpu_immediate(0x0000);

    // F28A: BNE $F281
    if (!cpu.zero_flag()) cpu.m_pc = 0xF281;

    // F28C: LDS #$4FFF
    cpu.m_sp = 0x4FFF;

    // F290: LDA #$48
    cpu.m_a = 0x48;

    // F292: TFR A,DP
    cpu.m_dp = cpu.m_a;

    // F294: STA $46E0
    cpu.write_memory(0x46E0, cpu.m_a);

    // F297: LDA #$00
    cpu.m_a = 0x00;

    // F299: STA $4400
    cpu.write_memory(0x4400, cpu.m_a);

    // F29C: LDX #$4800
    cpu.m_x = 0x4800;

    // F29F: LDD #$0000
    cpu.m_d = 0x0000;

    // F2A2: STD ,X++
    cpu.write_memory16(cpu.m_x++, cpu.m_d);

    // F2A4: CMPX #$5000
    cpu.compare_x(0x5000);

    // F2A7: BCS $F2A2
    if (cpu.carry_flag()) cpu.m_pc = 0xF2A2;

    // F2A9: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F2AC: LDX #$5000
    cpu.m_x = 0x5000;

    // F2AF: LDD #$0000
    cpu.m_d = 0x0000;

    // F2B2: STD ,X++
    cpu.write_memory16(cpu.m_x++, cpu.m_d);

    // F2B4: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F2B7: CMPX #$6000
    cpu.compare_x(0x6000);

    // F2BA: BCS $F2B2
    if (cpu.carry_flag()) cpu.m_pc = 0xF2B2;

    // F2BC: LDX #$0000
    cpu.m_x = 0x0000;

    // F2BF: LDD #$0000
    cpu.m_d = 0x0000;

    // F2C2: STD ,X++
    cpu.write_memory16(cpu.m_x++, cpu.m_d);

    // F2C4: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F2C7: CMPX #$3000
    cpu.compare_x(0x3000);

    // F2CA: BCS $F2C2
    if (cpu.carry_flag()) cpu.m_pc = 0xF2C2;

    // F2CC: LDA $4300
    cpu.m_a = cpu.read_memory(0x4300);

    // F2CF: ANDA #$10
    cpu.m_a &= 0x10;

    // F2D1: BNE $F2D6
    if (!cpu.zero_flag()) cpu.m_pc = 0xF2D6;

    // F2D3: JMP $F36E
    // TODO: External jump to 0xF36E - not implemented

    // F2D6: LDA $4340
    cpu.m_a = cpu.read_memory(0x4340);

    // F2D9: LDB $4360
    cpu.m_b = cpu.read_memory(0x4360);

    // F2DC: STA <$24
    cpu.write_memory(0x24, cpu.m_a);

    // F2DE: STB <$27
    cpu.write_memory(0x27, cpu.m_b);

    // F2E0: LDX #$0800
    cpu.m_x = 0x0800;

    // F2E3: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // F2E5: BNE $F2E3
    if (!cpu.zero_flag()) cpu.m_pc = 0xF2E3;

    // F2E7: LDA $4340
    cpu.m_a = cpu.read_memory(0x4340);

    // F2EA: LDB $4360
    cpu.m_b = cpu.read_memory(0x4360);

    // F2ED: CMPA <$24
    cpu.compare_a(cpu.read_memory(0x24));

    // F2EF: BNE $F2DC
    if (!cpu.zero_flag()) cpu.m_pc = 0xF2DC;

    // F2F1: CMPB <$27
    cpu.compare_b(cpu.read_memory(0x27));

    // F2F3: BNE $F2DC
    if (!cpu.zero_flag()) cpu.m_pc = 0xF2DC;

    // F2F5: LDD #$2020
    cpu.m_d = 0x2020;

    // F2F8: LDX #$0000
    cpu.m_x = 0x0000;

    // F2FB: STD ,X++
    cpu.write_memory16(cpu.m_x++, cpu.m_d);

    // F2FD: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F300: CMPX #$2800
    cpu.compare_x(0x2800);

    // F303: BCS $F2FB
    if (cpu.carry_flag()) cpu.m_pc = 0xF2FB;

    // F305: LDD #$E038
    cpu.m_d = 0xE038;

    // F308: STD >$0000
    cpu.write_memory16(0x0000, cpu.m_d);

    // F30B: LDA #$FF
    cpu.m_a = 0xFF;

    // F30D: STA <$3F
    cpu.write_memory(0x3F, cpu.m_a);

    // F30F: LDA #$3F
    cpu.m_a = 0x3F;

    // F311: STA <$00
    cpu.write_memory(0x00, cpu.m_a);

    // F313: LDA #$40
    cpu.m_a = 0x40;

    // F315: STA <$28
    cpu.write_memory(0x28, cpu.m_a);

    // F317: JSR $C306
    cpu.call_function(0xC306);

    // F31A: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F31D: LDA #$FF
    cpu.m_a = 0xFF;

    // F31F: STA $4686
    cpu.write_memory(0x4686, cpu.m_a);

    // F322: STA $4683
    cpu.write_memory(0x4683, cpu.m_a);

    // F325: STA $4682
    cpu.write_memory(0x4682, cpu.m_a);

    // F328: STA $4660
    cpu.write_memory(0x4660, cpu.m_a);

    // F32B: JMP $6036
    goto label_6036;

    // F32E: ASLA 
    cpu.m_a <<= 1;

    // F32F: NEG <$50
    // TODO: Convert NEG <$50

    // F331: NEG <$50
    // TODO: Convert NEG <$50

    // F333: NEG <$00
    // TODO: Convert NEG <$00

    // F335: NEG <$08
    // TODO: Convert NEG <$08

    // F337: NEG <$10
    // TODO: Convert NEG <$10

    // F339: NEG <$18
    // TODO: Convert NEG <$18

    // F33B: NEG <$20
    // TODO: Convert NEG <$20

    // F33D: NEG <$28
    // TODO: Convert NEG <$28

    // F33F: NEG <$45
    // TODO: Convert NEG <$45

    // F341: NEG <$60
    // TODO: Convert NEG <$60

    // F343: NEG <$80
    // TODO: Convert NEG <$80

    // F345: NEG <$A0
    // TODO: Convert NEG <$A0

    // F347: NEG <$C0
    // TODO: Convert NEG <$C0

    // F349: NEG <$E0
    // TODO: Convert NEG <$E0

    // F34B: NEG <$28
    // TODO: Convert NEG <$28

    // F34D: NEG <$00
    // TODO: Convert NEG <$00

    // F34F: NEG <$00
    // TODO: Convert NEG <$00

    // F351: XNC <$00
    // TODO: Convert XNC <$00

    // F353: LSR <$00
    // TODO: Convert LSR <$00

    // F355: ASL <$00
    cpu.arithmetic_shift_left(0x00);

    // F357: NEG <$20
    // TODO: Convert NEG <$20

    // F35A: NEG <$40
    // TODO: Convert NEG <$40

    // F35C: NEG <$80
    // TODO: Convert NEG <$80

    // F35E: NEG <$00
    // TODO: Convert NEG <$00

    // F360: XNC <$00
    // TODO: Convert XNC <$00

    // F362: LSR <$00
    // TODO: Convert LSR <$00

    // F364: ASL <$00
    cpu.arithmetic_shift_left(0x00);

    // F366: NEG <$20
    // TODO: Convert NEG <$20

    // F369: NEG <$40
    // TODO: Convert NEG <$40

    // F36B: NEG <$80
    // TODO: Convert NEG <$80

    // F36D: NEG <$B6
    // TODO: Convert NEG <$B6

    // F36F: COMA 
    cpu.m_a = ~cpu.m_a;

    // F370: BRA $F2F6
    // TODO: External jump to 0xF2F6 - not implemented

    // F372: LSR <$26
    // TODO: Convert LSR <$26

    // F374: XDEC <$B6
    // TODO: Convert XDEC <$B6

    // F376: COMA 
    cpu.m_a = ~cpu.m_a;

    // F377: NEGA 
    cpu.m_a = -cpu.m_a;

    // F378: COMA 
    cpu.m_a = ~cpu.m_a;

    // F379: ANDA #$7F
    cpu.m_a &= 0x7F;

    // F37B: BEQ $F380
    if (cpu.zero_flag()) cpu.m_pc = 0xF380;

    // F37D: JMP $FD07
    goto label_FD07;

    // F380: LDS #$0000
    cpu.m_sp = 0x0000;

    // F384: LDU #$F32E
    cpu.m_u = 0xF32E;

    // F387: LDX ,U++
    cpu.m_x = cpu.read_memory16(cpu.m_u++);

    // F389: LDY #$0800
    cpu.m_y = 0x0800;

    // F38D: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // F38F: BEQ $F39D
    if (cpu.zero_flag()) cpu.m_pc = 0xF39D;

    // F391: TFR S,D
    cpu.m_d = cpu.m_sp;

    // F393: ORA $1E,U
    // TODO: Fix comma operator: ORA $1E,U

    // F396: ORB $1F,U
    // TODO: Fix comma operator: ORB $1F,U

    // F399: TFR D,S
    cpu.m_sp = cpu.m_d;

    // F39B: BRA $F3DC
    goto label_F3DC;

    // F39D: LDA #$80
    cpu.m_a = 0x80;

    // F39F: ASLA 
    cpu.m_a <<= 1;

    label_F3A0:
    // F3A0: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // F3A1: STA ,X
    cpu.write_memory(cpu.m_x, cpu.m_a);

    // F3A3: TFR A,B
    cpu.m_b = cpu.m_a;

    // F3A5: EORB ,X
    // TODO: Complex indexed addressing: ,X

    // F3A7: BEQ $F3B5
    if (cpu.zero_flag()) cpu.m_pc = 0xF3B5;

    // F3A9: TFR S,D
    cpu.m_d = cpu.m_sp;

    // F3AB: ORA $1E,U
    // TODO: Fix comma operator: ORA $1E,U

    // F3AE: ORB $1F,U
    // TODO: Fix comma operator: ORB $1F,U

    // F3B1: TFR D,S
    cpu.m_sp = cpu.m_d;

    // F3B3: BRA $F3DC
    goto label_F3DC;

    // F3B5: BCC $F3BE
    if (!cpu.carry_flag()) cpu.m_pc = 0xF3BE;

    // F3B7: TSTA 
    cpu.test_a();

    // F3B8: BNE $F3A0
    if (!cpu.zero_flag()) cpu.m_pc = 0xF3A0;

    // F3BA: ADDA #$FF
    cpu.m_a += 0xFF;

    // F3BC: BRA $F3A0
    goto label_F3A0;

    // F3BE: TFR A,B
    cpu.m_b = cpu.m_a;

    // F3C0: INCB 
    cpu.m_b++;

    // F3C1: BNE $F3A0
    if (!cpu.zero_flag()) cpu.m_pc = 0xF3A0;

    // F3C3: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F3C6: CMPU #$F332
    cpu.execute_cmpu_immediate(0xF332);

    // F3CA: BEQ $F3D2
    if (cpu.zero_flag()) cpu.m_pc = 0xF3D2;

    // F3CC: CMPU #$F334
    cpu.execute_cmpu_immediate(0xF334);

    // F3D0: BNE $F3D6
    if (!cpu.zero_flag()) cpu.m_pc = 0xF3D6;

    // F3D2: LEAX $2,X
    // TODO: Fix comma operator: LEAX $2,X

    // F3D4: BRA $F3D8
    goto label_F3D8;

    // F3D6: LEAX $1,X
    // TODO: Fix comma operator: LEAX $1,X

    label_F3D8:
    // F3D8: LEAY -$1,Y
    // TODO: Fix comma operator: LEAY -$1,Y

    // F3DA: BNE $F38D
    if (!cpu.zero_flag()) cpu.m_pc = 0xF38D;

    label_F3DC:
    // F3DC: CMPU #$F340
    cpu.execute_cmpu_immediate(0xF340);

    // F3E0: BCS $F387
    if (cpu.carry_flag()) cpu.m_pc = 0xF387;

    // F3E2: LDU #$F32E
    cpu.m_u = 0xF32E;

    // F3E5: LDX ,U++
    cpu.m_x = cpu.read_memory16(cpu.m_u++);

    // F3E7: LDY #$0800
    cpu.m_y = 0x0800;

    // F3EB: INC ,X
    // TODO: Complex indexed addressing: ,X

    // F3ED: BEQ $F3FB
    if (cpu.zero_flag()) cpu.m_pc = 0xF3FB;

    // F3EF: TFR S,D
    cpu.m_d = cpu.m_sp;

    // F3F1: ORA $1E,U
    // TODO: Fix comma operator: ORA $1E,U

    // F3F4: ORB $1F,U
    // TODO: Fix comma operator: ORB $1F,U

    // F3F7: TFR D,S
    cpu.m_sp = cpu.m_d;

    // F3F9: BRA $F424
    goto label_F424;

    // F3FB: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // F3FD: BEQ $F40B
    if (cpu.zero_flag()) cpu.m_pc = 0xF40B;

    // F3FF: TFR S,D
    cpu.m_d = cpu.m_sp;

    // F401: ORA $1E,U
    // TODO: Fix comma operator: ORA $1E,U

    // F404: ORB $1F,U
    // TODO: Fix comma operator: ORB $1F,U

    // F407: TFR D,S
    cpu.m_sp = cpu.m_d;

    // F409: BRA $F424
    goto label_F424;

    // F40B: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F40E: CMPU #$F332
    cpu.execute_cmpu_immediate(0xF332);

    // F412: BEQ $F41A
    if (cpu.zero_flag()) cpu.m_pc = 0xF41A;

    // F414: CMPU #$F334
    cpu.execute_cmpu_immediate(0xF334);

    // F418: BNE $F41E
    if (!cpu.zero_flag()) cpu.m_pc = 0xF41E;

    // F41A: LEAX $2,X
    // TODO: Fix comma operator: LEAX $2,X

    // F41C: BRA $F420
    goto label_F420;

    // F41E: LEAX $1,X
    // TODO: Fix comma operator: LEAX $1,X

    label_F420:
    // F420: LEAY -$1,Y
    // TODO: Fix comma operator: LEAY -$1,Y

    // F422: BNE $F3EB
    if (!cpu.zero_flag()) cpu.m_pc = 0xF3EB;

    label_F424:
    // F424: CMPU #$F340
    cpu.execute_cmpu_immediate(0xF340);

    // F428: BCS $F3E5
    if (cpu.carry_flag()) cpu.m_pc = 0xF3E5;

    // F42A: TFR S,D
    cpu.m_d = cpu.m_sp;

    // F42C: ANDB #$01
    cpu.m_b &= 0x01;

    // F42E: BNE $F43F
    if (!cpu.zero_flag()) cpu.m_pc = 0xF43F;

    // F430: LDX #$4500
    cpu.m_x = 0x4500;

    // F433: LDU #$4C00
    cpu.m_u = 0x4C00;

    // F436: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // F438: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // F43A: CMPX #$4600
    cpu.compare_x(0x4600);

    // F43D: BCS $F436
    if (cpu.carry_flag()) cpu.m_pc = 0xF436;

    // F43F: LDU #$F342
    cpu.m_u = 0xF342;

    // F442: LDX #$4500
    cpu.m_x = 0x4500;

    // F445: LDD #$0000
    cpu.m_d = 0x0000;

    // F448: STD ,X++
    cpu.write_memory16(cpu.m_x++, cpu.m_d);

    // F44A: CMPX #$4600
    cpu.compare_x(0x4600);

    // F44D: BCS $F448
    if (cpu.carry_flag()) cpu.m_pc = 0xF448;

    // F44F: LDX #$4500
    cpu.m_x = 0x4500;

    // F452: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // F454: ANDA #$0F
    cpu.m_a &= 0x0F;

    // F456: BEQ $F464
    if (cpu.zero_flag()) cpu.m_pc = 0xF464;

    // F458: TFR S,D
    cpu.m_d = cpu.m_sp;

    // F45A: ORA $1E,U
    // TODO: Fix comma operator: ORA $1E,U

    // F45D: ORB $1F,U
    // TODO: Fix comma operator: ORB $1F,U

    // F460: TFR D,S
    cpu.m_sp = cpu.m_d;

    // F462: BRA $F4B7
    goto label_F4B7;

    // F464: LDA #$80
    cpu.m_a = 0x80;

    // F466: ASLA 
    cpu.m_a <<= 1;

    // F467: LDY #$0004
    cpu.m_y = 0x0004;

    label_F46B:
    // F46B: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // F46C: STA ,X
    cpu.write_memory(cpu.m_x, cpu.m_a);

    // F46E: TFR A,B
    cpu.m_b = cpu.m_a;

    // F470: EORB ,X
    // TODO: Complex indexed addressing: ,X

    // F472: ANDB #$0F
    cpu.m_b &= 0x0F;

    // F474: BEQ $F482
    if (cpu.zero_flag()) cpu.m_pc = 0xF482;

    // F476: TFR S,D
    cpu.m_d = cpu.m_sp;

    // F478: ORA $1E,U
    // TODO: Fix comma operator: ORA $1E,U

    // F47B: ORB $1F,U
    // TODO: Fix comma operator: ORB $1F,U

    // F47E: TFR D,S
    cpu.m_sp = cpu.m_d;

    // F480: BRA $F4B7
    goto label_F4B7;

    // F482: LEAY -$1,Y
    // TODO: Fix comma operator: LEAY -$1,Y

    // F484: BNE $F46B
    if (!cpu.zero_flag()) cpu.m_pc = 0xF46B;

    // F486: TSTA 
    cpu.test_a();

    // F487: BMI $F491
    if (cpu.negative_flag()) cpu.m_pc = 0xF491;

    // F489: LDA #$FF
    cpu.m_a = 0xFF;

    // F48B: LDY #$0005
    cpu.m_y = 0x0005;

    // F48F: BRA $F46B
    goto label_F46B;

    // F491: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F494: LEAX $1,X
    // TODO: Fix comma operator: LEAX $1,X

    // F496: CMPX #$4600
    cpu.compare_x(0x4600);

    // F499: BCS $F452
    if (cpu.carry_flag()) cpu.m_pc = 0xF452;

    // F49B: LDX #$4500
    cpu.m_x = 0x4500;

    // F49E: INC ,X
    // TODO: Complex indexed addressing: ,X

    // F4A0: LDA ,X+
    // TODO: Complex indexed addressing: ,X+

    // F4A2: ANDA #$0F
    cpu.m_a &= 0x0F;

    // F4A4: BEQ $F4B2
    if (cpu.zero_flag()) cpu.m_pc = 0xF4B2;

    // F4A6: TFR S,D
    cpu.m_d = cpu.m_sp;

    // F4A8: ORA $1E,U
    // TODO: Fix comma operator: ORA $1E,U

    // F4AB: ORB $1F,U
    // TODO: Fix comma operator: ORB $1F,U

    // F4AE: TFR D,S
    cpu.m_sp = cpu.m_d;

    // F4B0: BRA $F4B7
    goto label_F4B7;

    // F4B2: CMPX #$4600
    cpu.compare_x(0x4600);

    // F4B5: BCS $F49E
    if (cpu.carry_flag()) cpu.m_pc = 0xF49E;

    label_F4B7:
    // F4B7: TFR S,D
    cpu.m_d = cpu.m_sp;

    // F4B9: ANDB #$01
    cpu.m_b &= 0x01;

    // F4BB: BNE $F4CE
    if (!cpu.zero_flag()) cpu.m_pc = 0xF4CE;

    // F4BD: LDX #$4C00
    cpu.m_x = 0x4C00;

    // F4C0: LDU #$4500
    cpu.m_u = 0x4500;

    // F4C3: LDD ,X++
    cpu.m_d = cpu.read_memory16(cpu.m_x++);

    // F4C5: STD ,U++
    cpu.write_memory16(cpu.m_u++, cpu.m_d);

    // F4C7: CMPX #$4D00
    cpu.compare_x(0x4D00);

    // F4CA: BCS $F4C3
    if (cpu.carry_flag()) cpu.m_pc = 0xF4C3;

    // F4CC: BRA $F4EC
    goto label_F4EC;

    // F4CE: LDA #$FF
    cpu.m_a = 0xFF;

    // F4D0: STA $4687
    cpu.write_memory(0x4687, cpu.m_a);

    // F4D3: LDX #$0100
    cpu.m_x = 0x0100;

    // F4D6: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F4D9: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // F4DB: BNE $F4D6
    if (!cpu.zero_flag()) cpu.m_pc = 0xF4D6;

    // F4DD: LDA #$00
    cpu.m_a = 0x00;

    // F4DF: STA $4687
    cpu.write_memory(0x4687, cpu.m_a);

    // F4E2: LDX #$A000
    cpu.m_x = 0xA000;

    // F4E5: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F4E8: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // F4EA: BNE $F4E5
    if (!cpu.zero_flag()) cpu.m_pc = 0xF4E5;

    label_F4EC:
    // F4EC: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F4EF: LDA #$00
    cpu.m_a = 0x00;

    // F4F1: STA $4684
    cpu.write_memory(0x4684, cpu.m_a);

    // F4F4: LDX $F342
    cpu.m_x = cpu.read_memory16(0xF342);

    // F4F7: LDY #$2000
    cpu.m_y = 0x2000;

    // F4FB: TFR X,D
    cpu.m_d = cpu.m_x;

    // F4FD: ADCB $1,X
    // TODO: Fix comma operator: ADCB $1,X

    // F4FF: ADCA ,X++
    cpu.add_a_with_carry(cpu.m_x++);

    // F501: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F504: LEAY -$2,Y
    // TODO: Fix comma operator: LEAY -$2,Y

    // F506: BNE $F4FD
    if (!cpu.zero_flag()) cpu.m_pc = 0xF4FD;

    // F508: TFR D,X
    cpu.m_x = cpu.m_d;

    // F50A: LDA #$FF
    cpu.m_a = 0xFF;

    // F50C: STA $4684
    cpu.write_memory(0x4684, cpu.m_a);

    // F50F: LDU #$F344
    cpu.m_u = 0xF344;

    // F512: TFR X,D
    cpu.m_d = cpu.m_x;

    // F514: LDY #$2000
    cpu.m_y = 0x2000;

    // F518: LDX $F342
    cpu.m_x = cpu.read_memory16(0xF342);

    // F51B: BRA $F528
    goto label_F528;

    // F51D: LDU #$F344
    cpu.m_u = 0xF344;

    // F520: LDX ,U++
    cpu.m_x = cpu.read_memory16(cpu.m_u++);

    // F522: LDY #$2000
    cpu.m_y = 0x2000;

    label_F526:
    // F526: TFR X,D
    cpu.m_d = cpu.m_x;

    label_F528:
    // F528: ADCB $1,X
    // TODO: Fix comma operator: ADCB $1,X

    // F52A: ADCA ,X++
    cpu.add_a_with_carry(cpu.m_x++);

    // F52C: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F52F: LEAY -$2,Y
    // TODO: Fix comma operator: LEAY -$2,Y

    // F531: BNE $F528
    if (!cpu.zero_flag()) cpu.m_pc = 0xF528;

    // F533: STD $5593,U
    cpu.write_memory16(cpu.m_u + 0x5593, cpu.m_d);

    // F537: BEQ $F543
    if (cpu.zero_flag()) cpu.m_pc = 0xF543;

    // F539: TFR S,D
    cpu.m_d = cpu.m_sp;

    // F53B: ORA $1E,U
    // TODO: Fix comma operator: ORA $1E,U

    // F53E: ORB $1F,U
    // TODO: Fix comma operator: ORB $1F,U

    // F541: TFR D,S
    cpu.m_sp = cpu.m_d;

    // F543: CMPU #$F34C
    cpu.execute_cmpu_immediate(0xF34C);

    // F547: BCS $F520
    if (cpu.carry_flag()) cpu.m_pc = 0xF520;

    // F549: CMPU #$F34E
    cpu.execute_cmpu_immediate(0xF34E);

    // F54D: BCC $F557
    if (!cpu.carry_flag()) cpu.m_pc = 0xF557;

    // F54F: LDX ,U++
    cpu.m_x = cpu.read_memory16(cpu.m_u++);

    // F551: LDY #$1000
    cpu.m_y = 0x1000;

    // F555: BRA $F526
    goto label_F526;

    // F557: LDA #$FF
    cpu.m_a = 0xFF;

    // F559: STA $4686
    cpu.write_memory(0x4686, cpu.m_a);

    // F55C: STA $4683
    cpu.write_memory(0x4683, cpu.m_a);

    // F55F: STA $4682
    cpu.write_memory(0x4682, cpu.m_a);

    // F562: CLR <$D1
    cpu.write_memory(0xD1, 0);

    // F564: LDA $4320
    cpu.m_a = cpu.read_memory(0x4320);

    // F567: ANDA #$04
    cpu.m_a &= 0x04;

    // F569: BNE $F56E
    if (!cpu.zero_flag()) cpu.m_pc = 0xF56E;

    // F56B: JMP $FD07
    goto label_FD07;

    // F56E: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F571: STS <$D2
    cpu.write_memory16(0xD2, cpu.m_sp);

    // F574: TFR S,D
    cpu.m_d = cpu.m_sp;

    // F576: ANDB #$01
    cpu.m_b &= 0x01;

    // F578: BNE $F5ED
    if (!cpu.zero_flag()) cpu.m_pc = 0xF5ED;

    // F57A: LDY #$0000
    cpu.m_y = 0x0000;

    // F57E: LDD #$6000
    cpu.m_d = 0x6000;

    // F581: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F583: LDD #$BFAE
    cpu.m_d = 0xBFAE;

    // F586: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F588: LDD #$8040
    cpu.m_d = 0x8040;

    // F58B: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F58D: LDA #$48
    cpu.m_a = 0x48;

    // F58F: TFR A,DP
    cpu.m_dp = cpu.m_a;

    // F591: STS <$CC
    cpu.write_memory16(0xCC, cpu.m_sp);

    // F594: LDS #$4FFF
    cpu.m_sp = 0x4FFF;

    // F598: LDB #$D3
    cpu.m_b = 0xD3;

    // F59A: JSR $E7C7
    cpu.call_function(0xE7C7);

    // F59D: LDB #$B0
    cpu.m_b = 0xB0;

    // F59F: JSR $E7C7
    cpu.call_function(0xE7C7);

    // F5A2: LDB #$B2
    cpu.m_b = 0xB2;

    // F5A4: STB <$CE
    cpu.write_memory(0xCE, cpu.m_b);

    // F5A6: LDD <$CC
    cpu.m_d = cpu.read_memory16(0xCC);

    // F5A8: BNE $F5B1
    if (!cpu.zero_flag()) cpu.m_pc = 0xF5B1;

    // F5AA: LDB #$B1
    cpu.m_b = 0xB1;

    // F5AC: JSR $E7C7
    cpu.call_function(0xE7C7);

    // F5AF: BRA $F5EB
    goto label_F5EB;

    // F5B1: LSRA 
    cpu.m_a >>= 1;

    // F5B2: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // F5B3: STD <$CC
    cpu.write_memory16(0xCC, cpu.m_d);

    // F5B5: BCC $F5E5
    if (!cpu.carry_flag()) cpu.m_pc = 0xF5E5;

    // F5B7: LDB <$CE
    cpu.m_b = cpu.read_memory(0xCE);

    // F5B9: JSR $E7C7
    cpu.call_function(0xE7C7);

    // F5BC: LDB <$CE
    cpu.m_b = cpu.read_memory(0xCE);

    // F5BE: SUBB #$BC
    cpu.m_b -= 0xBC;

    // F5C0: BCS $F5E5
    if (cpu.carry_flag()) cpu.m_pc = 0xF5E5;

    // F5C2: ASLB 
    cpu.m_b <<= 1;

    // F5C3: LDX #$F743
    cpu.m_x = 0xF743;

    // F5C6: ABX 
    // TODO: Convert ABX 

    // F5C7: LDU ,X
    // TODO: Complex indexed addressing: ,X

    // F5C9: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // F5CB: LDU #$0120
    cpu.m_u = 0x0120;

    // F5CE: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // F5D0: LDX #$48D7
    cpu.m_x = 0x48D7;

    // F5D3: ABX 
    // TODO: Convert ABX 

    // F5D4: LDA ,X+
    // TODO: Complex indexed addressing: ,X+

    // F5D6: COMA 
    cpu.m_a = ~cpu.m_a;

    // F5D7: JSR $E790
    cpu.call_function(0xE790);

    // F5DA: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // F5DC: COMA 
    cpu.m_a = ~cpu.m_a;

    // F5DD: JSR $E790
    cpu.call_function(0xE790);

    // F5E0: LDD #$8040
    cpu.m_d = 0x8040;

    // F5E3: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F5E5: INC <$CE
    cpu.increment_memory(0xCE);

    // F5E7: LDD <$CC
    cpu.m_d = cpu.read_memory16(0xCC);

    // F5E9: BNE $F5B1
    if (!cpu.zero_flag()) cpu.m_pc = 0xF5B1;

    label_F5EB:
    // F5EB: BRA $F643
    goto label_F643;

    label_F5ED:
    // F5ED: LDX #$0008
    cpu.m_x = 0x0008;

    // F5F0: TFR S,D
    cpu.m_d = cpu.m_sp;

    // F5F2: LSRB 
    cpu.m_b >>= 1;

    // F5F3: BCC $F5F9
    if (!cpu.carry_flag()) cpu.m_pc = 0xF5F9;

    // F5F5: LDA #$29
    cpu.m_a = 0x29;

    // F5F7: BRA $F5FB
    goto label_F5FB;

    // F5F9: LDA #$3B
    cpu.m_a = 0x3B;

    label_F5FB:
    // F5FB: STA $4400
    cpu.write_memory(0x4400, cpu.m_a);

    // F5FE: LDU #$0000
    cpu.m_u = 0x0000;

    // F601: STB $4640
    cpu.write_memory(0x4640, cpu.m_b);

    // F604: LEAU $1,U
    // TODO: Fix comma operator: LEAU $1,U

    // F606: CMPU #$A000
    cpu.execute_cmpu_immediate(0xA000);

    // F60A: BCS $F601
    if (cpu.carry_flag()) cpu.m_pc = 0xF601;

    // F60C: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // F60E: BNE $F5F2
    if (!cpu.zero_flag()) cpu.m_pc = 0xF5F2;

    // F610: LDX #$0008
    cpu.m_x = 0x0008;

    // F613: TFR S,D
    cpu.m_d = cpu.m_sp;

    // F615: LSRA 
    cpu.m_a >>= 1;

    // F616: BCC $F61C
    if (!cpu.carry_flag()) cpu.m_pc = 0xF61C;

    // F618: LDB #$29
    cpu.m_b = 0x29;

    // F61A: BRA $F61E
    goto label_F61E;

    // F61C: LDB #$3B
    cpu.m_b = 0x3B;

    label_F61E:
    // F61E: STB $4400
    cpu.write_memory(0x4400, cpu.m_b);

    // F621: LDU #$0000
    cpu.m_u = 0x0000;

    // F624: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F627: LEAU $1,U
    // TODO: Fix comma operator: LEAU $1,U

    // F629: CMPU #$A000
    cpu.execute_cmpu_immediate(0xA000);

    // F62D: BCS $F624
    if (cpu.carry_flag()) cpu.m_pc = 0xF624;

    // F62F: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // F631: BNE $F615
    if (!cpu.zero_flag()) cpu.m_pc = 0xF615;

    // F633: LDU #$0000
    cpu.m_u = 0x0000;

    // F636: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F639: LEAU $1,U
    // TODO: Fix comma operator: LEAU $1,U

    // F63B: CMPU #$FF00
    cpu.execute_cmpu_immediate(0xFF00);

    // F63F: BCS $F636
    if (cpu.carry_flag()) cpu.m_pc = 0xF636;

    // F641: BRA $F5ED
    goto label_F5ED;

    label_F643:
    // F643: LDD #$2020
    cpu.m_d = 0x2020;

    // F646: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F648: LDU #$F723
    cpu.m_u = 0xF723;

    // F64B: CLR <$C0
    cpu.write_memory(0xC0, 0);

    // F64D: LDA #$03
    cpu.m_a = 0x03;

    // F64F: STA <$C5
    cpu.write_memory(0xC5, cpu.m_a);

    // F651: STA <$C6
    cpu.write_memory(0xC6, cpu.m_a);

    // F653: STA <$C7
    cpu.write_memory(0xC7, cpu.m_a);

    // F655: STA <$D6
    cpu.write_memory(0xD6, cpu.m_a);

    // F657: LDX #$F34E
    cpu.m_x = 0xF34E;

    // F65A: STX <$D4
    cpu.write_memory16(0xD4, cpu.m_x);

    // F65C: LDD #$0001
    cpu.m_d = 0x0001;

    // F65F: LDX #$0000
    cpu.m_x = 0x0000;

    // F662: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // F665: LEAX D,X
    // TODO: Fix comma operator: LEAX D,X

    // F667: CMPX #$0708
    cpu.compare_x(0x0708);

    // F66A: BCS $F662
    if (cpu.carry_flag()) cpu.m_pc = 0xF662;

    // F66C: STA $4620
    cpu.write_memory(0x4620, cpu.m_a);

    // F66F: LDA $4320
    cpu.m_a = cpu.read_memory(0x4320);

    // F672: ANDA #$04
    cpu.m_a &= 0x04;

    // F674: BNE $F679
    if (!cpu.zero_flag()) cpu.m_pc = 0xF679;

    // F676: JMP $F720
    goto label_F720;

    // F679: LDA $4300
    cpu.m_a = cpu.read_memory(0x4300);

    // F67C: ANDA #$04
    cpu.m_a &= 0x04;

    // F67E: BNE $F69F
    if (!cpu.zero_flag()) cpu.m_pc = 0xF69F;

    // F680: LDA <$C5
    cpu.m_a = cpu.read_memory(0xC5);

    // F682: BEQ $F69D
    if (cpu.zero_flag()) cpu.m_pc = 0xF69D;

    // F684: DECA 
    cpu.m_a--;

    // F685: BNE $F69D
    if (!cpu.zero_flag()) cpu.m_pc = 0xF69D;

    // F687: LEAU $2,U
    // TODO: Fix comma operator: LEAU $2,U

    // F689: CMPU #$F735
    cpu.execute_cmpu_immediate(0xF735);

    // F68D: BCS $F692
    if (cpu.carry_flag()) cpu.m_pc = 0xF692;

    // F68F: LDU #$F725
    cpu.m_u = 0xF725;

    // F692: LDD #$0000
    cpu.m_d = 0x0000;

    // F695: STD <$C2
    cpu.write_memory16(0xC2, cpu.m_d);

    // F697: STA <$C4
    cpu.write_memory(0xC4, cpu.m_a);

    // F699: STA <$C0
    cpu.write_memory(0xC0, cpu.m_a);

    // F69B: LDA #$80
    cpu.m_a = 0x80;

    // F69D: BRA $F6A1
    goto label_F6A1;

    // F69F: LDA #$03
    cpu.m_a = 0x03;

    label_F6A1:
    // F6A1: STA <$C5
    cpu.write_memory(0xC5, cpu.m_a);

    // F6A3: LDA $4300
    cpu.m_a = cpu.read_memory(0x4300);

    // F6A6: COMA 
    cpu.m_a = ~cpu.m_a;

    // F6A7: ANDA #$C0
    cpu.m_a &= 0xC0;

    // F6A9: BEQ $F6C7
    if (cpu.zero_flag()) cpu.m_pc = 0xF6C7;

    // F6AB: LDA <$C6
    cpu.m_a = cpu.read_memory(0xC6);

    // F6AD: BEQ $F6C5
    if (cpu.zero_flag()) cpu.m_pc = 0xF6C5;

    // F6AF: DECA 
    cpu.m_a--;

    // F6B0: BNE $F6C5
    if (!cpu.zero_flag()) cpu.m_pc = 0xF6C5;

    // F6B2: LDB <$C0
    cpu.m_b = cpu.read_memory(0xC0);

    // F6B4: ADDB #$02
    cpu.m_b += 0x02;

    // F6B6: CMPB #$0E
    cpu.compare_b(0x0E);

    // F6B8: BCS $F6BB
    if (cpu.carry_flag()) cpu.m_pc = 0xF6BB;

    // F6BA: CLRB 
    cpu.m_b = 0;

    // F6BB: STB <$C0
    cpu.write_memory(0xC0, cpu.m_b);

    // F6BD: CMPB #$04
    cpu.compare_b(0x04);

    // F6BF: BNE $F6C3
    if (!cpu.zero_flag()) cpu.m_pc = 0xF6C3;

    // F6C1: CLR <$C1
    cpu.write_memory(0xC1, 0);

    // F6C3: LDA #$80
    cpu.m_a = 0x80;

    // F6C5: BRA $F6C9
    goto label_F6C9;

    // F6C7: LDA #$03
    cpu.m_a = 0x03;

    label_F6C9:
    // F6C9: STA <$C6
    cpu.write_memory(0xC6, cpu.m_a);

    // F6CB: CMPU #$F733
    cpu.execute_cmpu_immediate(0xF733);

    // F6CF: BNE $F6F0
    if (!cpu.zero_flag()) cpu.m_pc = 0xF6F0;

    // F6D1: LDA $4320
    cpu.m_a = cpu.read_memory(0x4320);

    // F6D4: COMA 
    cpu.m_a = ~cpu.m_a;

    // F6D5: ANDA #$30
    cpu.m_a &= 0x30;

    // F6D7: BEQ $F6EA
    if (cpu.zero_flag()) cpu.m_pc = 0xF6EA;

    // F6D9: LDA <$C7
    cpu.m_a = cpu.read_memory(0xC7);

    // F6DB: BEQ $F6E8
    if (cpu.zero_flag()) cpu.m_pc = 0xF6E8;

    // F6DD: DECA 
    cpu.m_a--;

    // F6DE: BNE $F6E8
    if (!cpu.zero_flag()) cpu.m_pc = 0xF6E8;

    // F6E0: LDB <$C1
    cpu.m_b = cpu.read_memory(0xC1);

    // F6E2: EORB #$01
    cpu.m_b ^= 0x01;

    // F6E4: STB <$C1
    cpu.write_memory(0xC1, cpu.m_b);

    // F6E6: LDA #$80
    cpu.m_a = 0x80;

    // F6E8: BRA $F6EC
    goto label_F6EC;

    // F6EA: LDA #$03
    cpu.m_a = 0x03;

    label_F6EC:
    // F6EC: STA <$C7
    cpu.write_memory(0xC7, cpu.m_a);

    // F6EE: BRA $F6F2
    goto label_F6F2;

    // F6F0: CLR <$C1
    cpu.write_memory(0xC1, 0);

    label_F6F2:
    // F6F2: LDY #$0000
    cpu.m_y = 0x0000;

    // F6F6: LDB <$C0
    cpu.m_b = cpu.read_memory(0xC0);

    // F6F8: LDX #$F735
    cpu.m_x = 0xF735;

    // F6FB: LDD B,X
    // TODO: Fix comma operator: LDD B,X

    // F6FD: CMPD #$6780
    cpu.execute_cmpd_immediate(0x6780);

    // F701: BNE $F709
    if (!cpu.zero_flag()) cpu.m_pc = 0xF709;

    // F703: TST <$C1
    // TODO: Convert TST <$C1

    // F705: BEQ $F709
    if (cpu.zero_flag()) cpu.m_pc = 0xF709;

    // F707: LDB #$20
    cpu.m_b = 0x20;

    // F709: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F70B: JMP [,U]
    // TODO: Invalid branch offset: [,U]

    label_F70D:
    // F70D: LDD #$2020
    cpu.m_d = 0x2020;

    // F710: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F712: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    label_F714:
    // F714: STA $4600
    cpu.write_memory(0x4600, cpu.m_a);

    // F717: LDA $4300
    cpu.m_a = cpu.read_memory(0x4300);

    // F71A: ANDA #$10
    cpu.m_a &= 0x10;

    // F71C: LBEQ $F65C
    // TODO: Convert LBEQ $F65C

    label_F720:
    // F720: JMP $F720
    goto label_F720;

    // F723: STB $4FF7
    cpu.write_memory(0x4FF7, cpu.m_b);

    // F726: CLR $F958
    cpu.write_memory(0xF958, 0);

    // F729: EORB $8CF8
    cpu.m_b ^= cpu.read_memory(0x8CF8);

    // F72C: ANDA #$F8
    cpu.m_a &= 0xF8;

    // F72E: ANDA <$F8
    cpu.m_a &= 0xF8;

    // F730: ORA [-$34,S]
    // TODO: Complex indexed addressing: [-$34,S]

    // F733: ADCB $3F64
    cpu.add_b_with_carry(cpu.read_memory(0x3F64));

    // F736: SUBA #$62
    cpu.m_a -= 0x62;

    // F738: SUBA #$61
    cpu.m_a -= 0x61;

    // F73A: SUBA #$65
    cpu.m_a -= 0x65;

    // F73C: SUBA #$67
    cpu.m_a -= 0x67;

    // F73E: SUBA #$66
    cpu.m_a -= 0x66;

    // F740: SUBA #$63
    cpu.m_a -= 0x63;

    // F742: SUBA #$1F
    cpu.m_a -= 0x1F;

    // F744: XANDCC #$1F
    // TODO: Convert XANDCC #$1F

    // F746: ROR <$1E
    // TODO: Convert ROR <$1E

    // F748: ANDB <$1E
    cpu.m_b &= 0x1E;

    // F74A: SBCA -$2,X
    // TODO: Fix comma operator: SBCA -$2,X

    // F74C: NEG $1F6A
    // TODO: Convert NEG $1F6A

    // F74F: DEC <$D6
    cpu.decrement_memory(0xD6);

    // F751: BPL $F77C
    if (!cpu.negative_flag()) cpu.m_pc = 0xF77C;

    // F753: LDA #$10
    cpu.m_a = 0x10;

    // F755: STA <$D6
    cpu.write_memory(0xD6, cpu.m_a);

    // F757: LDX <$D4
    cpu.m_x = cpu.read_memory16(0xD4);

    // F759: LDD <$D2
    cpu.m_d = cpu.read_memory16(0xD2);

    // F75B: ANDA ,X
    // TODO: Complex indexed addressing: ,X

    // F75D: BNE $F767
    if (!cpu.zero_flag()) cpu.m_pc = 0xF767;

    // F75F: ANDB $1,X
    // TODO: Fix comma operator: ANDB $1,X

    // F761: BNE $F767
    if (!cpu.zero_flag()) cpu.m_pc = 0xF767;

    // F763: LDA #$3B
    cpu.m_a = 0x3B;

    // F765: BRA $F769
    goto label_F769;

    // F767: LDA #$29
    cpu.m_a = 0x29;

    label_F769:
    // F769: STA $4400
    cpu.write_memory(0x4400, cpu.m_a);

    // F76C: LEAX $2,X
    // TODO: Fix comma operator: LEAX $2,X

    // F76E: CMPX #$F36E
    cpu.compare_x(0xF36E);

    // F771: BCS $F77A
    if (cpu.carry_flag()) cpu.m_pc = 0xF77A;

    // F773: LDA #$20
    cpu.m_a = 0x20;

    // F775: STA <$D6
    cpu.write_memory(0xD6, cpu.m_a);

    // F777: LDX #$F34E
    cpu.m_x = 0xF34E;

    // F77A: STX <$D4
    cpu.write_memory16(0xD4, cpu.m_x);

    // F77C: JMP $F714
    goto label_F714;

    // F77F: STA $46C0
    cpu.write_memory(0x46C0, cpu.m_a);

    // F782: STA $46C0
    cpu.write_memory(0x46C0, cpu.m_a);

    // F785: LDD #$BFAE
    cpu.m_d = 0xBFAE;

    // F788: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F78A: LDD #$8040
    cpu.m_d = 0x8040;

    // F78D: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F78F: LDS #$4FFF
    cpu.m_sp = 0x4FFF;

    // F793: LDB #$9E
    cpu.m_b = 0x9E;

    // F795: JSR $E7C7
    cpu.call_function(0xE7C7);

    // F798: LDB #$D3
    cpu.m_b = 0xD3;

    // F79A: JSR $E7C7
    cpu.call_function(0xE7C7);

    // F79D: LDB #$9F
    cpu.m_b = 0x9F;

    // F79F: STB <$CE
    cpu.write_memory(0xCE, cpu.m_b);

    // F7A1: LDA $4300
    cpu.m_a = cpu.read_memory(0x4300);

    // F7A4: LDB $4320
    cpu.m_b = cpu.read_memory(0x4320);

    // F7A7: ORB #$C7
    cpu.m_b |= 0xC7;

    // F7A9: STD <$CC
    cpu.write_memory16(0xCC, cpu.m_d);

    // F7AB: ASLB 
    cpu.m_b <<= 1;

    // F7AC: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // F7AD: STD <$CC
    cpu.write_memory16(0xCC, cpu.m_d);

    // F7AF: BCS $F7B6
    if (cpu.carry_flag()) cpu.m_pc = 0xF7B6;

    // F7B1: LDB <$CE
    cpu.m_b = cpu.read_memory(0xCE);

    // F7B3: JSR $E7C7
    cpu.call_function(0xE7C7);

    // F7B6: INC <$CE
    cpu.increment_memory(0xCE);

    // F7B8: LDD <$CC
    cpu.m_d = cpu.read_memory16(0xCC);

    // F7BA: BNE $F7AB
    if (!cpu.zero_flag()) cpu.m_pc = 0xF7AB;

    // F7BC: LDD <$C8
    cpu.m_d = cpu.read_memory16(0xC8);

    // F7BE: STD <$CA
    cpu.write_memory16(0xCA, cpu.m_d);

    // F7C0: LDA $4300
    cpu.m_a = cpu.read_memory(0x4300);

    // F7C3: ANDA #$CF
    cpu.m_a &= 0xCF;

    // F7C5: LDB $4320
    cpu.m_b = cpu.read_memory(0x4320);

    // F7C8: ANDB #$3A
    cpu.m_b &= 0x3A;

    // F7CA: STD <$C8
    cpu.write_memory16(0xC8, cpu.m_d);

    // F7CC: EORA <$CA
    cpu.m_a ^= 0xCA;

    // F7CE: ANDA <$CA
    cpu.m_a &= 0xCA;

    // F7D0: EORB <$CB
    cpu.m_b ^= 0xCB;

    // F7D2: ANDB <$CB
    cpu.m_b &= 0xCB;

    // F7D4: CMPD #$0000
    cpu.execute_cmpd_immediate(0x0000);

    // F7D8: BEQ $F7DF
    if (cpu.zero_flag()) cpu.m_pc = 0xF7DF;

    // F7DA: LDA #$3B
    cpu.m_a = 0x3B;

    // F7DC: STA $4400
    cpu.write_memory(0x4400, cpu.m_a);

    // F7DF: LDD #$1EA2
    cpu.m_d = 0x1EA2;

    // F7E2: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F7E4: LDD #$1F74
    cpu.m_d = 0x1F74;

    // F7E7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F7E9: LDA #$10
    cpu.m_a = 0x10;

    // F7EB: JSR $E790
    cpu.call_function(0xE790);

    // F7EE: LDD $301E
    cpu.m_d = cpu.read_memory16(0x301E);

    // F7F1: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F7F3: LDD $3002
    cpu.m_d = cpu.read_memory16(0x3002);

    // F7F6: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F7F8: LDA $4340
    cpu.m_a = cpu.read_memory(0x4340);

    // F7FB: JSR $F86C
    cpu.call_function(0xF86C);

    // F7FE: LDD #$1E70
    cpu.m_d = 0x1E70;

    // F801: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F803: LDD #$1F5C
    cpu.m_d = 0x1F5C;

    // F806: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F808: LDA #$10
    cpu.m_a = 0x10;

    // F80A: JSR $E790
    cpu.call_function(0xE790);

    // F80D: LDD $3020
    cpu.m_d = cpu.read_memory16(0x3020);

    // F810: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F812: LDD $3022
    cpu.m_d = cpu.read_memory16(0x3022);

    // F815: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F817: LDD $3002
    cpu.m_d = cpu.read_memory16(0x3002);

    // F81A: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F81C: LDA $4360
    cpu.m_a = cpu.read_memory(0x4360);

    // F81F: JSR $F86C
    cpu.call_function(0xF86C);

    // F822: LDB #$AF
    cpu.m_b = 0xAF;

    // F824: JSR $E7C7
    cpu.call_function(0xE7C7);

    // F827: LDD #$BFD5
    cpu.m_d = 0xBFD5;

    // F82A: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F82C: LDD #$0000
    cpu.m_d = 0x0000;

    // F82F: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F831: LDD #$0140
    cpu.m_d = 0x0140;

    // F834: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F836: LDB $4380
    cpu.m_b = cpu.read_memory(0x4380);

    // F839: SUBB #$80
    cpu.m_b -= 0x80;

    // F83B: SEX 
    // TODO: Convert SEX 

    // F83C: TFR D,U
    cpu.m_u = cpu.m_d;

    // F83E: ASRA 
    // TODO: Convert ASRA 

    // F83F: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // F840: LEAU D,U
    // TODO: Fix comma operator: LEAU D,U

    // F842: TFR U,D
    cpu.m_d = cpu.m_u;

    // F844: ANDA #$1F
    cpu.m_a &= 0x1F;

    // F846: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F848: STA $46C1
    cpu.write_memory(0x46C1, cpu.m_a);

    // F84B: STA $46C1
    cpu.write_memory(0x46C1, cpu.m_a);

    // F84E: LDX #$0014
    cpu.m_x = 0x0014;

    // F851: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // F853: BNE $F851
    if (!cpu.zero_flag()) cpu.m_pc = 0xF851;

    // F855: LDB $4380
    cpu.m_b = cpu.read_memory(0x4380);

    // F858: SUBB #$80
    cpu.m_b -= 0x80;

    // F85A: SEX 
    // TODO: Convert SEX 

    // F85B: ANDA #$1F
    cpu.m_a &= 0x1F;

    // F85D: ORA #$E0
    cpu.m_a |= 0xE0;

    // F85F: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F861: LDD #$8040
    cpu.m_d = 0x8040;

    // F864: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F866: LDU #$F725
    cpu.m_u = 0xF725;

    // F869: JMP $F70D
    goto label_F70D;

    // F86C: LDB #$07
    cpu.m_b = 0x07;

    // F86E: LSRA 
    cpu.m_a >>= 1;

    // F86F: BCC $F876
    if (!cpu.carry_flag()) cpu.m_pc = 0xF876;

    // F871: LDX $3022
    cpu.m_x = cpu.read_memory16(0x3022);

    // F874: BRA $F879
    goto label_F879;

    // F876: LDX $3032
    cpu.m_x = cpu.read_memory16(0x3032);

    label_F879:
    // F879: STX ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_x);

    // F87B: DECB 
    cpu.m_b--;

    // F87C: BPL $F86E
    if (!cpu.negative_flag()) cpu.m_pc = 0xF86E;

    // F87E: LDD #$8040
    cpu.m_d = 0x8040;

    // F881: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F883: RTS 
    return;

    // F89B: STB <$CE
    cpu.write_memory(0xCE, cpu.m_b);

    // F89D: JSR $E7C7
    cpu.call_function(0xE7C7);

    // F8A0: LDB <$CE
    cpu.m_b = cpu.read_memory(0xCE);

    // F8A2: INCB 
    cpu.m_b++;

    // F8A3: CMPB #$D3
    cpu.compare_b(0xD3);

    // F8A5: BCS $F89B
    if (cpu.carry_flag()) cpu.m_pc = 0xF89B;

    // F8A7: JMP $F70D
    goto label_F70D;

    // F8AA: LDD #$BFAE
    cpu.m_d = 0xBFAE;

    // F8AD: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F8AF: LDD #$BFB3
    cpu.m_d = 0xBFB3;

    // F8B2: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F8B4: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F8B6: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F8B8: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F8BA: LDD #$8040
    cpu.m_d = 0x8040;

    // F8BD: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F8BF: LDB #$C9
    cpu.m_b = 0xC9;

    // F8C1: JSR $E7C7
    cpu.call_function(0xE7C7);

    // F8C4: LDB #$CA
    cpu.m_b = 0xCA;

    // F8C6: JSR $E7C7
    cpu.call_function(0xE7C7);

    // F8C9: JMP $F70D
    goto label_F70D;

    // F8CC: LDA <$C6
    cpu.m_a = cpu.read_memory(0xC6);

    // F8CE: CMPA #$01
    cpu.compare_a(0x01);

    // F8D0: BHI $F8D9
    // TODO: Convert BHI $F8D9

    // F8D2: LDD #$0000
    cpu.m_d = 0x0000;

    // F8D5: STD <$C2
    cpu.write_memory16(0xC2, cpu.m_d);

    // F8D7: STA <$C4
    cpu.write_memory(0xC4, cpu.m_a);

    label_F8D9:
    // F8D9: JMP $f8d9
    goto label_F8D9;

    // F8DC: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F8DE: LDD #$BFAF
    cpu.m_d = 0xBFAF;

    // F8E1: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F8E3: LDD #$8040
    cpu.m_d = 0x8040;

    // F8E6: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F8E8: LDD <$C2
    cpu.m_d = cpu.read_memory16(0xC2);

    // F8EA: ADDD #$0001
    cpu.m_d += 0x0001;

    // F8ED: TST <$C4
    // TODO: Convert TST <$C4

    // F8EF: BNE $F900
    if (!cpu.zero_flag()) cpu.m_pc = 0xF900;

    // F8F1: CMPB #$FC
    cpu.compare_b(0xFC);

    // F8F3: BCS $F8FC
    if (cpu.carry_flag()) cpu.m_pc = 0xF8FC;

    // F8F5: LDA #$01
    cpu.m_a = 0x01;

    // F8F7: STA <$C4
    cpu.write_memory(0xC4, cpu.m_a);

    // F8F9: LDD #$0000
    cpu.m_d = 0x0000;

    // F8FC: STD <$C2
    cpu.write_memory16(0xC2, cpu.m_d);

    // F8FE: BRA $F917
    goto label_F917;

    // F900: CMPB #$B0
    cpu.compare_b(0xB0);

    // F902: BCS $F906
    if (cpu.carry_flag()) cpu.m_pc = 0xF906;

    // F904: CLRB 
    cpu.m_b = 0;

    // F905: INCA 
    cpu.m_a++;

    // F906: CMPA #$08
    cpu.compare_a(0x08);

    // F908: BCS $F90F
    if (cpu.carry_flag()) cpu.m_pc = 0xF90F;

    // F90A: CLR <$C4
    cpu.write_memory(0xC4, 0);

    // F90C: LDD #$0000
    cpu.m_d = 0x0000;

    // F90F: STD <$C2
    cpu.write_memory16(0xC2, cpu.m_d);

    // F911: CMPB #$7F
    cpu.compare_b(0x7F);

    // F913: BCS $F917
    if (cpu.carry_flag()) cpu.m_pc = 0xF917;

    // F915: LDB #$7F
    cpu.m_b = 0x7F;

    label_F917:
    // F917: ORA #$70
    cpu.m_a |= 0x70;

    // F919: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F91B: LDD #$6280
    cpu.m_d = 0x6280;

    // F91E: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F920: LDD #$BFBC
    cpu.m_d = 0xBFBC;

    // F923: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F925: LDD #$7200
    cpu.m_d = 0x7200;

    // F928: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F92A: LDB <$C4
    cpu.m_b = cpu.read_memory(0xC4);

    // F92C: BNE $F932
    if (!cpu.zero_flag()) cpu.m_pc = 0xF932;

    // F92E: LDB #$CC
    cpu.m_b = 0xCC;

    // F930: BRA $F934
    goto label_F934;

    // F932: LDB #$CD
    cpu.m_b = 0xCD;

    label_F934:
    // F934: JSR $E7C7
    cpu.call_function(0xE7C7);

    // F937: LDB #$CB
    cpu.m_b = 0xCB;

    // F939: JSR $E7C7
    cpu.call_function(0xE7C7);

    // F93C: JMP $F70D
    goto label_F70D;

    // F93F: LDD #$BFC8
    cpu.m_d = 0xBFC8;

    // F942: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F944: LDX #$0038
    cpu.m_x = 0x0038;

    // F947: LDD #$BFCC
    cpu.m_d = 0xBFCC;

    // F94A: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F94C: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // F94E: BNE $F94A
    if (!cpu.zero_flag()) cpu.m_pc = 0xF94A;

    // F950: LDD #$8040
    cpu.m_d = 0x8040;

    // F953: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F955: JMP $F70D
    goto label_F70D;

    // F958: LDD #$BFAE
    cpu.m_d = 0xBFAE;

    // F95B: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F95D: LDD #$8040
    cpu.m_d = 0x8040;

    // F960: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F962: LDD #$7200
    cpu.m_d = 0x7200;

    // F965: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F967: LDS #$4FFF
    cpu.m_sp = 0x4FFF;

    // F96B: LDB #$C2
    cpu.m_b = 0xC2;

    // F96D: JSR $E7C7
    cpu.call_function(0xE7C7);

    // F970: LDA #$5D
    cpu.m_a = 0x5D;

    // F972: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // F975: TST $4320
    // TODO: Convert TST $4320

    // F978: BPL $F97F
    if (!cpu.negative_flag()) cpu.m_pc = 0xF97F;

    // F97A: TST $4320
    // TODO: Convert TST $4320

    // F97D: BPL $F98A
    if (!cpu.negative_flag()) cpu.m_pc = 0xF98A;

    // F97F: LDB #$C3
    cpu.m_b = 0xC3;

    // F981: JSR $E7C7
    cpu.call_function(0xE7C7);

    // F984: LDU #$F727
    cpu.m_u = 0xF727;

    // F987: JMP $F70D
    goto label_F70D;

    // F98A: LDD #$6280
    cpu.m_d = 0x6280;

    // F98D: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F98F: CLR <$CC
    cpu.write_memory(0xCC, 0);

    // F991: LDX #$FB4B
    cpu.m_x = 0xFB4B;

    // F994: LDS #$F99B
    cpu.m_sp = 0xF99B;

    // F998: JMP $FB38
    goto label_FB38;

    // F99B: BEQ $FA19
    if (cpu.zero_flag()) cpu.m_pc = 0xFA19;

    // F99D: STD <$D2
    cpu.write_memory16(0xD2, cpu.m_d);

    // F99F: INC <$CC
    cpu.increment_memory(0xCC);

    // F9A1: LDS #$4FFF
    cpu.m_sp = 0x4FFF;

    // F9A5: LDD $6,X
    // TODO: Fix comma operator: LDD $6,X

    // F9A7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F9A9: LDD #$1E98
    cpu.m_d = 0x1E98;

    // F9AC: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F9AE: LDD $3032
    cpu.m_d = cpu.read_memory16(0x3032);

    // F9B1: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F9B3: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F9B5: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F9B7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F9B9: LDD $3002
    cpu.m_d = cpu.read_memory16(0x3002);

    // F9BC: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F9BE: TFR X,D
    cpu.m_d = cpu.m_x;

    // F9C0: SUBD #$FB4B
    cpu.m_d -= 0xFB4B;

    // F9C3: ASLB 
    cpu.m_b <<= 1;

    // F9C4: LDA #$03
    cpu.m_a = 0x03;

    // F9C6: ASLB 
    cpu.m_b <<= 1;

    // F9C7: BCS $F9CE
    if (cpu.carry_flag()) cpu.m_pc = 0xF9CE;

    // F9C9: LDU $3022
    cpu.m_u = cpu.read_memory16(0x3022);

    // F9CC: BRA $F9D1
    goto label_F9D1;

    // F9CE: LDU $3032
    cpu.m_u = cpu.read_memory16(0x3032);

    label_F9D1:
    // F9D1: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // F9D3: DECA 
    cpu.m_a--;

    // F9D4: BPL $F9C6
    if (!cpu.negative_flag()) cpu.m_pc = 0xF9C6;

    // F9D6: LDD $3002
    cpu.m_d = cpu.read_memory16(0x3002);

    // F9D9: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F9DB: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F9DD: LDA ,X
    // TODO: Complex indexed addressing: ,X

    // F9DF: JSR $E790
    cpu.call_function(0xE790);

    // F9E2: LDA $1,X
    // TODO: Fix comma operator: LDA $1,X

    // F9E4: JSR $E790
    cpu.call_function(0xE790);

    // F9E7: LDD $3002
    cpu.m_d = cpu.read_memory16(0x3002);

    // F9EA: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F9EC: LDA $2,X
    // TODO: Fix comma operator: LDA $2,X

    // F9EE: JSR $E790
    cpu.call_function(0xE790);

    // F9F1: LDA $3,X
    // TODO: Fix comma operator: LDA $3,X

    // F9F3: JSR $E790
    cpu.call_function(0xE790);

    // F9F6: LDD $3002
    cpu.m_d = cpu.read_memory16(0x3002);

    // F9F9: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // F9FB: LDA $4,X
    // TODO: Fix comma operator: LDA $4,X

    // F9FD: JSR $E790
    cpu.call_function(0xE790);

    // FA00: LDA $5,X
    // TODO: Fix comma operator: LDA $5,X

    // FA02: JSR $E790
    cpu.call_function(0xE790);

    // FA05: LDD $3002
    cpu.m_d = cpu.read_memory16(0x3002);

    // FA08: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FA0A: LDA <$D2
    cpu.m_a = cpu.read_memory(0xD2);

    // FA0C: JSR $E790
    cpu.call_function(0xE790);

    // FA0F: LDA <$D3
    cpu.m_a = cpu.read_memory(0xD3);

    // FA11: JSR $E790
    cpu.call_function(0xE790);

    // FA14: LDD #$8040
    cpu.m_d = 0x8040;

    // FA17: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    label_FA19:
    // FA19: JMP $fa19
    goto label_FA19;

    // FA1B: CMPX #$FB73
    cpu.compare_x(0xFB73);

    // FA1E: LBCS $F994
    // TODO: Convert LBCS $F994

    // FA22: LDS #$4FFF
    cpu.m_sp = 0x4FFF;

    // FA26: TST <$CC
    // TODO: Convert TST <$CC

    // FA28: BNE $FA2E
    if (!cpu.zero_flag()) cpu.m_pc = 0xFA2E;

    // FA2A: LDB #$C5
    cpu.m_b = 0xC5;

    // FA2C: BRA $FA35
    goto label_FA35;

    // FA2E: LDB #$C4
    cpu.m_b = 0xC4;

    // FA30: JSR $E7C7
    cpu.call_function(0xE7C7);

    // FA33: LDB #$C6
    cpu.m_b = 0xC6;

    label_FA35:
    // FA35: JSR $E7C7
    cpu.call_function(0xE7C7);

    // FA38: LDX #$FAE1
    cpu.m_x = 0xFAE1;

    // FA3B: CLR <$CC
    cpu.write_memory(0xCC, 0);

    // FA3D: LDD #$6480
    cpu.m_d = 0x6480;

    // FA40: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FA42: TFR X,D
    cpu.m_d = cpu.m_x;

    // FA44: SUBD #$FAE9
    cpu.m_d -= 0xFAE9;

    // FA47: LSRB 
    cpu.m_b >>= 1;

    // FA48: LDS #$FA4E
    cpu.m_sp = 0xFA4E;

    // FA4C: JMP [,X]
    // TODO: Invalid branch offset: [,X]

    label_FA4E:
    // FA4E: BEQ $FAC1
    if (cpu.zero_flag()) cpu.m_pc = 0xFAC1;

    // FA50: STD <$D2
    cpu.write_memory16(0xD2, cpu.m_d);

    // FA52: INC <$CC
    cpu.increment_memory(0xCC);

    // FA54: CMPX #$FAF9
    cpu.compare_x(0xFAF9);

    // FA57: BCC $FA92
    if (!cpu.carry_flag()) cpu.m_pc = 0xFA92;

    // FA59: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // FA5B: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FA5D: LDD #$1EA2
    cpu.m_d = 0x1EA2;

    // FA60: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FA62: LDD $3032
    cpu.m_d = cpu.read_memory16(0x3032);

    // FA65: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FA67: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FA69: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FA6B: LDD $3022
    cpu.m_d = cpu.read_memory16(0x3022);

    // FA6E: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FA70: LDD $3002
    cpu.m_d = cpu.read_memory16(0x3002);

    // FA73: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FA75: TFR X,D
    cpu.m_d = cpu.m_x;

    // FA77: SUBD #$FAE1
    cpu.m_d -= 0xFAE1;

    // FA7A: ASLB 
    cpu.m_b <<= 1;

    // FA7B: ASLB 
    cpu.m_b <<= 1;

    // FA7C: ADDB #$50
    cpu.m_b += 0x50;

    // FA7E: LDA #$03
    cpu.m_a = 0x03;

    // FA80: ASLB 
    cpu.m_b <<= 1;

    // FA81: BCS $FA88
    if (cpu.carry_flag()) cpu.m_pc = 0xFA88;

    // FA83: LDU $3022
    cpu.m_u = cpu.read_memory16(0x3022);

    // FA86: BRA $FA8B
    goto label_FA8B;

    // FA88: LDU $3032
    cpu.m_u = cpu.read_memory16(0x3032);

    label_FA8B:
    // FA8B: STU ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_u);

    // FA8D: DECA 
    cpu.m_a--;

    // FA8E: BPL $FA80
    if (!cpu.negative_flag()) cpu.m_pc = 0xFA80;

    // FA90: BRA $FAA9
    goto label_FAA9;

    // FA92: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // FA94: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FA96: LDD #$0096
    cpu.m_d = 0x0096;

    // FA99: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FA9B: TFR X,D
    cpu.m_d = cpu.m_x;

    // FA9D: SUBD #$FAF9
    cpu.m_d -= 0xFAF9;

    // FAA0: LSRB 
    cpu.m_b >>= 1;

    // FAA1: LDS #$3018
    cpu.m_sp = 0x3018;

    // FAA5: LDD B,S
    // TODO: Fix comma operator: LDD B,S

    // FAA7: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    label_FAA9:
    // FAA9: LDD $3002
    cpu.m_d = cpu.read_memory16(0x3002);

    // FAAC: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FAAE: LDS #$4FFF
    cpu.m_sp = 0x4FFF;

    // FAB2: LDA <$D2
    cpu.m_a = cpu.read_memory(0xD2);

    // FAB4: JSR $E790
    cpu.call_function(0xE790);

    // FAB7: LDA <$D3
    cpu.m_a = cpu.read_memory(0xD3);

    // FAB9: JSR $E790
    cpu.call_function(0xE790);

    // FABC: LDD #$8040
    cpu.m_d = 0x8040;

    // FABF: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FAC1: LEAX $4,X
    // TODO: Fix comma operator: LEAX $4,X

    // FAC3: CMPX #$FB09
    cpu.compare_x(0xFB09);

    // FAC6: LBCS $FA42
    // TODO: Convert LBCS $FA42

    // FACA: LDS #$4FFF
    cpu.m_sp = 0x4FFF;

    // FACE: TST <$CC
    // TODO: Convert TST <$CC

    // FAD0: BNE $FAD6
    if (!cpu.zero_flag()) cpu.m_pc = 0xFAD6;

    // FAD2: LDB #$C8
    cpu.m_b = 0xC8;

    // FAD4: BRA $FAD8
    goto label_FAD8;

    // FAD6: LDB #$C7
    cpu.m_b = 0xC7;

    label_FAD8:
    // FAD8: JSR $E7C7
    cpu.call_function(0xE7C7);

    // FADB: LDU #$F727
    cpu.m_u = 0xF727;

    // FADE: JMP $F70D
    goto label_F70D;

    // FAE1: ADDB $AA1F
    cpu.m_b += cpu.read_memory(0xAA1F);

    // FAE4: DEC [D,S]
    // TODO: Complex indexed addressing: [D,S]

    // FAE6: STX $1F38
    cpu.write_memory16(0x1F38, cpu.m_x);

    // FAE9: LDD $AC1F
    cpu.m_d = cpu.read_memory16(0xAC1F);

    // FAEC: ROR <$FC
    // TODO: Convert ROR <$FC

    // FAEE: CMPX -$2,X
    cpu.execute_cmpx_immediate(cpu.read_memory16(cpu.m_x - 0x02));

    // FAF0: ANDB <$FC
    cpu.m_b &= 0xFC;

    // FAF2: CMPX -$2,X
    cpu.execute_cmpx_immediate(cpu.read_memory16(cpu.m_x - 0x02));

    // FAF4: SBCA [$FAA3,PCR]
    // TODO: Complex indexed addressing: [$FAA3,PCR]

    // FAF7: EXG inv,D
    // TODO: Convert EXG inv,D

    // FAF9: ADDB $091F
    cpu.m_b += cpu.read_memory(0x091F);

    // FAFC: DEC [$FB1B,PCR]
    // TODO: Complex indexed addressing: [$FB1B,PCR]

    // FAFF: TFR U,A
    cpu.m_a = cpu.m_u;

    // FB01: LDD $721F
    cpu.m_d = cpu.read_memory16(0x721F);

    // FB04: ROR <$FB
    // TODO: Convert ROR <$FB

    // FB06: ANDB <$1E
    cpu.m_b &= 0x1E;

    // FB08: ANDB <$10
    cpu.m_b &= 0x10;

    // FB0A: LDU #$FB10
    cpu.m_u = 0xFB10;

    // FB0D: JMP $FBF6
    goto label_FBF6;

    // FB10: CMPD #$0001
    cpu.execute_cmpd_immediate(0x0001);

    // FB14: BEQ $FB19
    if (cpu.zero_flag()) cpu.m_pc = 0xFB19;

    // FB16: JMP $FA4E
    goto label_FA4E;

    // FB19: LDU #$0002
    cpu.m_u = 0x0002;

    // FB1C: LDS #$FB23
    cpu.m_sp = 0xFB23;

    // FB20: JMP $FC0D
    goto label_FC0D;

    // FB23: CMPD -$0CB2,U
    cpu.execute_cmpd_immediate(cpu.read_memory16(cpu.m_u - 0xCB2));

    // FB28: BEQ $FB2D
    if (cpu.zero_flag()) cpu.m_pc = 0xFB2D;

    // FB2A: JMP $FA4E
    goto label_FA4E;

    // FB2D: LEAU $2,U
    // TODO: Fix comma operator: LEAU $2,U

    // FB2F: CMPU #$0020
    cpu.execute_cmpu_immediate(0x0020);

    // FB33: BCS $FB1C
    if (cpu.carry_flag()) cpu.m_pc = 0xFB1C;

    // FB35: JMP $FA4E
    goto label_FA4E;

    label_FB38:
    // FB38: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // FB3A: STD $4706
    cpu.write_memory16(0x4706, cpu.m_d);

    // FB3D: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // FB3F: STD $4704
    cpu.write_memory16(0x4704, cpu.m_d);

    // FB42: MUL 
    // TODO: Convert MUL 

    // FB43: LDD $4700
    cpu.m_d = cpu.read_memory16(0x4700);

    // FB46: CMPD $4,X
    cpu.execute_cmpd_immediate(cpu.read_memory16(cpu.m_x + 0x04));

    // FB49: JMP ,S
    // TODO: Invalid branch offset: ,S

    // FB4B: NEGA 
    cpu.m_a = -cpu.m_a;

    // FB4C: NEG <$40
    // TODO: Convert NEG <$40

    // FB4E: NEG <$40
    // TODO: Convert NEG <$40

    // FB50: NEG <$00
    // TODO: Convert NEG <$00

    // FB52: EORB #$55
    cpu.m_b ^= 0x55;

    // FB54: LSRB 
    cpu.m_b >>= 1;

    // FB55: NEGA 
    cpu.m_a = -cpu.m_a;

    // FB56: NEG <$55
    // TODO: Convert NEG <$55

    // FB58: LSRB 
    cpu.m_b >>= 1;

    // FB59: NEG <$96
    // TODO: Convert NEG <$96

    // FB5B: BPL $FB07
    // TODO: External jump to 0xFB07 - not implemented

    // FB5D: NEGA 
    cpu.m_a = -cpu.m_a;

    // FB5E: NEG <$2A
    // TODO: Convert NEG <$2A

    // FB60: ORA $0,X
    // TODO: Fix comma operator: ORA $0,X

    // FB62: LSR $A,Y
    // TODO: Convert LSR $A,Y

    // FB64: ORA $A,Y
    // TODO: Fix comma operator: ORA $A,Y

    // FB66: ORA $0,U
    // TODO: Fix comma operator: ORA $0,U

    // FB68: NEG <$00
    // TODO: Convert NEG <$00

    // FB6A: LEAS -$B,U
    // TODO: Fix comma operator: LEAS -$B,U

    // FB6C: LSRB 
    cpu.m_b >>= 1;

    // FB6D: LSRB 
    cpu.m_b >>= 1;

    // FB6E: LSRB 
    cpu.m_b >>= 1;

    // FB6F: NEGA 
    cpu.m_a = -cpu.m_a;

    // FB70: NEG <$00
    // TODO: Convert NEG <$00

    // FB72: NEG <$6E
    // TODO: Convert NEG <$6E

    // FB74: ANDB $FBCC,PCR
    // TODO: Fix comma operator: ANDB $FBCC,PCR

    // FB77: LSRB 
    cpu.m_b >>= 1;

    // FB78: STD $501E
    cpu.write_memory16(0x501E, cpu.m_d);

    // FB7B: LDA #$57
    cpu.m_a = 0x57;

    // FB7D: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // FB80: BRA $FB73
    // TODO: External jump to 0xFB73 - not implemented

    // FB82: LDD #$AAAA
    cpu.m_d = 0xAAAA;

    // FB85: STD $501E
    cpu.write_memory16(0x501E, cpu.m_d);

    // FB88: LDA #$58
    cpu.m_a = 0x58;

    // FB8A: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // FB8D: BRA $FB73
    // TODO: External jump to 0xFB73 - not implemented

    // FB8F: LDD #$5555
    cpu.m_d = 0x5555;

    // FB92: STD $501E
    cpu.write_memory16(0x501E, cpu.m_d);

    // FB95: LDA #$59
    cpu.m_a = 0x59;

    // FB97: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // FB9A: BRA $FB73
    // TODO: External jump to 0xFB73 - not implemented

    // FB9C: LDA #$5A
    cpu.m_a = 0x5A;

    // FB9E: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // FBA1: BRA $FB73
    // TODO: External jump to 0xFB73 - not implemented

    // FBA3: LDA #$5B
    cpu.m_a = 0x5B;

    // FBA5: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // FBA8: BRA $FB73
    // TODO: External jump to 0xFB73 - not implemented

    // FBAA: LDD #$5555
    cpu.m_d = 0x5555;

    // FBAD: STD $5000
    cpu.write_memory16(0x5000, cpu.m_d);

    // FBB0: LDA #$5C
    cpu.m_a = 0x5C;

    // FBB2: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // FBB5: NOP 
    // NOP;

    // FBB6: LDD $5002
    cpu.m_d = cpu.read_memory16(0x5002);

    // FBB9: CMPD #$5555
    cpu.execute_cmpd_immediate(0x5555);

    // FBBD: BRA $FB73
    // TODO: External jump to 0xFB73 - not implemented

    // FBBF: LDD #$AAAA
    cpu.m_d = 0xAAAA;

    // FBC2: STD $5000
    cpu.write_memory16(0x5000, cpu.m_d);

    // FBC5: LDA #$5C
    cpu.m_a = 0x5C;

    // FBC7: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // FBCA: NOP 
    // NOP;

    // FBCB: LDD $5002
    cpu.m_d = cpu.read_memory16(0x5002);

    // FBCE: CMPD #$AAAA
    cpu.execute_cmpd_immediate(0xAAAA);

    // FBD2: BRA $FB73
    // TODO: External jump to 0xFB73 - not implemented

    // FBD4: LDD #$2696
    cpu.m_d = 0x2696;

    // FBD7: STD $5018
    cpu.write_memory16(0x5018, cpu.m_d);

    // FBDA: LDD #$1B2C
    cpu.m_d = 0x1B2C;

    // FBDD: STD $501A
    cpu.write_memory16(0x501A, cpu.m_d);

    // FBE0: LDD #$4000
    cpu.m_d = 0x4000;

    // FBE3: STD $501C
    cpu.write_memory16(0x501C, cpu.m_d);

    // FBE6: LDA #$5D
    cpu.m_a = 0x5D;

    // FBE8: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // FBEB: MUL 
    // TODO: Convert MUL 

    // FBEC: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // FBEF: CMPD #$0B6A
    cpu.execute_cmpd_immediate(0x0B6A);

    // FBF3: JMP $FB73
    // TODO: External jump to 0xFB73 - not implemented

    label_FBF6:
    // FBF6: LDA #$5A
    cpu.m_a = 0x5A;

    // FBF8: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // FBFB: LDD #$0000
    cpu.m_d = 0x0000;

    // FBFE: STD $501A
    cpu.write_memory16(0x501A, cpu.m_d);

    // FC01: LDD #$4000
    cpu.m_d = 0x4000;

    // FC04: STD $501C
    cpu.write_memory16(0x501C, cpu.m_d);

    // FC07: LDD #$0001
    cpu.m_d = 0x0001;

    // FC0A: STD $5018
    cpu.write_memory16(0x5018, cpu.m_d);

    label_FC0D:
    // FC0D: STD $5018
    cpu.write_memory16(0x5018, cpu.m_d);

    // FC10: LDA #$5E
    cpu.m_a = 0x5E;

    // FC12: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // FC15: MUL 
    // TODO: Convert MUL 

    // FC16: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // FC19: JMP $FB73
    // TODO: External jump to 0xFB73 - not implemented

    // FC1C: LDU #$5028
    cpu.m_u = 0x5028;

    // FC1F: LDD #$0005
    cpu.m_d = 0x0005;

    // FC22: STD ,U
    cpu.write_memory16(cpu.m_u, cpu.m_d);

    // FC24: ADDD #$0001
    cpu.m_d += 0x0001;

    // FC27: LEAU $8,U
    // TODO: Fix comma operator: LEAU $8,U

    // FC29: CMPU #$6000
    cpu.execute_cmpu_immediate(0x6000);

    // FC2D: BCS $FC22
    if (cpu.carry_flag()) cpu.m_pc = 0xFC22;

    // FC2F: LDD #$0000
    cpu.m_d = 0x0000;

    // FC32: STD $501E
    cpu.write_memory16(0x501E, cpu.m_d);

    // FC35: LDD #$4000
    cpu.m_d = 0x4000;

    // FC38: STD $5020
    cpu.write_memory16(0x5020, cpu.m_d);

    // FC3B: LDD #$0004
    cpu.m_d = 0x0004;

    // FC3E: STD $4701
    cpu.write_memory16(0x4701, cpu.m_d);

    // FC41: LDU #$0008
    cpu.m_u = 0x0008;

    // FC44: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // FC47: TFR U,D
    cpu.m_d = cpu.m_u;

    // FC49: LSRA 
    cpu.m_a >>= 1;

    // FC4A: RORB 
    cpu.m_b = (cpu.m_b >> 1) | (cpu.carry_flag() ? 0x80 : 0);

    // FC4B: LDA #$5B
    cpu.m_a = 0x5B;

    // FC4D: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // FC50: DECB 
    cpu.m_b--;

    // FC51: BNE $FC4B
    if (!cpu.zero_flag()) cpu.m_pc = 0xFC4B;

    // FC53: LDA #$5F
    cpu.m_a = 0x5F;

    // FC55: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // FC58: MUL 
    // TODO: Convert MUL 

    // FC59: CMPU $5000
    cpu.execute_cmpu_immediate(0x5000);

    // FC5D: BEQ $FC62
    if (cpu.zero_flag()) cpu.m_pc = 0xFC62;

    // FC5F: JMP $FB73
    // TODO: External jump to 0xFB73 - not implemented

    // FC62: TFR U,D
    cpu.m_d = cpu.m_u;

    // FC64: LEAU D,U
    // TODO: Fix comma operator: LEAU D,U

    // FC66: CMPU #$0200
    cpu.execute_cmpu_immediate(0x0200);

    // FC6A: BCS $FC44
    if (cpu.carry_flag()) cpu.m_pc = 0xFC44;

    // FC6C: LDD #$0000
    cpu.m_d = 0x0000;

    // FC6F: JMP $FB73
    // TODO: External jump to 0xFB73 - not implemented

    // FC72: LDD #$1B2C
    cpu.m_d = 0x1B2C;

    // FC75: STD $5018
    cpu.write_memory16(0x5018, cpu.m_d);

    // FC78: LDD #$0000
    cpu.m_d = 0x0000;

    // FC7B: STD $501A
    cpu.write_memory16(0x501A, cpu.m_d);

    // FC7E: LDD #$4000
    cpu.m_d = 0x4000;

    // FC81: STD $501C
    cpu.write_memory16(0x501C, cpu.m_d);

    // FC84: LDA #$5D
    cpu.m_a = 0x5D;

    // FC86: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // FC89: MUL 
    // TODO: Convert MUL 

    // FC8A: LDD #$196A
    cpu.m_d = 0x196A;

    // FC8D: STD $5018
    cpu.write_memory16(0x5018, cpu.m_d);

    // FC90: LDD #$0000
    cpu.m_d = 0x0000;

    // FC93: STD $501A
    cpu.write_memory16(0x501A, cpu.m_d);

    // FC96: LDD #$4000
    cpu.m_d = 0x4000;

    // FC99: STD $501C
    cpu.write_memory16(0x501C, cpu.m_d);

    // FC9C: LDA #$5E
    cpu.m_a = 0x5E;

    // FC9E: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // FCA1: MUL 
    // TODO: Convert MUL 

    // FCA2: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // FCA5: CMPD #$3496
    cpu.execute_cmpd_immediate(0x3496);

    // FCA9: JMP $FB73
    // TODO: External jump to 0xFB73 - not implemented

    // FCAC: ASLB 
    cpu.m_b <<= 1;

    // FCAD: ASLB 
    cpu.m_b <<= 1;

    // FCAE: LDU #$FCD1
    cpu.m_u = 0xFCD1;

    // FCB1: LEAU B,U
    // TODO: Fix comma operator: LEAU B,U

    // FCB3: LDD ,U
    // TODO: Complex indexed addressing: ,U

    // FCB5: STD $5018
    cpu.write_memory16(0x5018, cpu.m_d);

    // FCB8: LDD $2,U
    // TODO: Fix comma operator: LDD $2,U

    // FCBA: STD $501A
    cpu.write_memory16(0x501A, cpu.m_d);

    // FCBD: LDD $4,U
    // TODO: Fix comma operator: LDD $4,U

    // FCBF: STD $501C
    cpu.write_memory16(0x501C, cpu.m_d);

    // FCC2: LDA #$5D
    cpu.m_a = 0x5D;

    // FCC4: STA $4700
    cpu.write_memory(0x4700, cpu.m_a);

    // FCC7: MUL 
    // TODO: Convert MUL 

    // FCC8: LDD $5000
    cpu.m_d = cpu.read_memory16(0x5000);

    // FCCB: CMPD $6,U
    cpu.execute_cmpd_immediate(cpu.read_memory16(cpu.m_u + 0x06));

    // FCCE: JMP $FB73
    // TODO: External jump to 0xFB73 - not implemented

    // FCD1: LSRB 
    cpu.m_b >>= 1;

    // FCD2: LSRB 
    cpu.m_b >>= 1;

    // FCD3: NEG <$00
    // TODO: Convert NEG <$00

    // FCD5: NEGA 
    cpu.m_a = -cpu.m_a;

    // FCD6: NEG <$55
    // TODO: Convert NEG <$55

    // FCD8: LSRB 
    cpu.m_b >>= 1;

    // FCD9: NEG <$00
    // TODO: Convert NEG <$00

    // FCDB: LSRB 
    cpu.m_b >>= 1;

    // FCDC: LSRB 
    cpu.m_b >>= 1;

    // FCDD: SUBB #$00
    cpu.m_b -= 0x00;

    // FCDF: LSRB 
    cpu.m_b >>= 1;

    // FCE0: LSRB 
    cpu.m_b >>= 1;

    // FCE1: BPL $FC8D
    if (!cpu.negative_flag()) cpu.m_pc = 0xFC8D;

    // FCE3: NEG <$00
    // TODO: Convert NEG <$00

    // FCE5: NEGA 
    cpu.m_a = -cpu.m_a;

    // FCE6: NEG <$2A
    // TODO: Convert NEG <$2A

    // FCE8: ORA $0,X
    // TODO: Fix comma operator: ORA $0,X

    // FCEA: NEG <$2A
    // TODO: Convert NEG <$2A

    // FCEC: ORA ,U+
    // TODO: Complex indexed addressing: ,U+

    // FCEE: NEG <$2A
    // TODO: Convert NEG <$2A

    // FCF0: ORA [D,S]
    // TODO: Complex indexed addressing: [D,S]

    // FCF2: LSR $FB82
    // TODO: Convert LSR $FB82

    // FCF5: ADDB $8FFB
    cpu.m_b += cpu.read_memory(0x8FFB);

    // FCF8: CMPX <$FB
    cpu.compare_x(cpu.read_memory16(0xFB));

    // FCFA: SUBD [D,S]
    // TODO: Complex indexed addressing: [D,S]

    // FCFC: ORA [D,S]
    // TODO: Complex indexed addressing: [D,S]

    // FCFE: STX $FCAC
    cpu.write_memory16(0xFCAC, cpu.m_x);

    // FD01: LDD $ACFC
    cpu.m_d = cpu.read_memory16(0xACFC);

    // FD04: CMPX [$FCB3,PCR]
    // TODO: Handle indexed addressing: CMPX [$FCB3,PCR]

    label_FD07:
    // FD07: LDA $4300
    cpu.m_a = cpu.read_memory(0x4300);

    // FD0A: ANDA #$10
    cpu.m_a &= 0x10;

    // FD0C: LDB $4320
    cpu.m_b = cpu.read_memory(0x4320);

    // FD0F: ANDB #$04
    cpu.m_b &= 0x04;

    // FD11: CMPD #$0000
    cpu.execute_cmpd_immediate(0x0000);

    // FD15: BEQ $FD1A
    if (cpu.zero_flag()) cpu.m_pc = 0xFD1A;

    // FD17: JMP $F720
    goto label_F720;

    // FD1A: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // FD1D: LDA #$FF
    cpu.m_a = 0xFF;

    // FD1F: STA $4686
    cpu.write_memory(0x4686, cpu.m_a);

    // FD22: STA $4683
    cpu.write_memory(0x4683, cpu.m_a);

    // FD25: STA $4682
    cpu.write_memory(0x4682, cpu.m_a);

    // FD28: LDB $4340
    cpu.m_b = cpu.read_memory(0x4340);

    // FD2B: COMB 
    cpu.m_b = ~cpu.m_b;

    // FD2C: LDU #$FD9A
    cpu.m_u = 0xFD9A;

    // FD2F: CMPB ,U+
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_u));

    // FD31: BNE $FD5A
    if (!cpu.zero_flag()) cpu.m_pc = 0xFD5A;

    // FD33: STA $4620
    cpu.write_memory(0x4620, cpu.m_a);

    // FD36: LDY #$0000
    cpu.m_y = 0x0000;

    // FD3A: LDD #$BFAE
    cpu.m_d = 0xBFAE;

    // FD3D: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FD3F: LDD #$8040
    cpu.m_d = 0x8040;

    // FD42: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FD44: LDA ,U
    // TODO: Complex indexed addressing: ,U

    // FD46: LDS #$4FFF
    cpu.m_sp = 0x4FFF;

    // FD4A: JSR $E790
    cpu.call_function(0xE790);

    // FD4D: LDD #$2020
    cpu.m_d = 0x2020;

    // FD50: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FD52: STD ,Y++
    cpu.write_memory16(cpu.m_y++, cpu.m_d);

    // FD54: STA $4600
    cpu.write_memory(0x4600, cpu.m_a);

    // FD57: LDU #$FDBC
    cpu.m_u = 0xFDBC;

    // FD5A: LEAU $1,U
    // TODO: Fix comma operator: LEAU $1,U

    // FD5C: CMPU #$FDBC
    cpu.execute_cmpu_immediate(0xFDBC);

    // FD60: BCS $FD2F
    if (cpu.carry_flag()) cpu.m_pc = 0xFD2F;

    // FD62: LDB $4340
    cpu.m_b = cpu.read_memory(0x4340);

    // FD65: COMB 
    cpu.m_b = ~cpu.m_b;

    // FD66: TFR B,A
    cpu.m_a = cpu.m_b;

    // FD68: ANDB #$0F
    cpu.m_b &= 0x0F;

    // FD6A: ANDA #$F8
    cpu.m_a &= 0xF8;

    // FD6C: CMPA #$C0
    cpu.compare_a(0xC0);

    // FD6E: BEQ $FD72
    if (cpu.zero_flag()) cpu.m_pc = 0xFD72;

    // FD70: CLR <$D1
    cpu.write_memory(0xD1, 0);

    // FD72: LDX #$FD85
    cpu.m_x = 0xFD85;

    // FD75: CMPA ,X+
    cpu.execute_cmpa_immediate(cpu.read_memory(cpu.m_x));

    // FD77: BNE $FD7B
    if (!cpu.zero_flag()) cpu.m_pc = 0xFD7B;

    // FD79: JMP [,X]
    // TODO: Invalid branch offset: [,X]

    // FD7B: LEAX $2,X
    // TODO: Fix comma operator: LEAX $2,X

    // FD7D: CMPX #$FD9A
    cpu.compare_x(0xFD9A);

    // FD80: BCS $FD75
    if (cpu.carry_flag()) cpu.m_pc = 0xFD75;

    // FD82: JMP $FF24
    goto label_FF24;

    // FD85: NEG <$FD
    // TODO: Convert NEG <$FD

    // FD87: CMPX $80FD
    cpu.compare_x(cpu.read_memory16(0x80FD));

    // FD8A: STB <$C0
    cpu.write_memory(0xC0, cpu.m_b);

    // FD8C: STD $F2E0
    cpu.write_memory16(0xF2E0, cpu.m_d);

    // FD8F: LDU $4FE8
    cpu.m_u = cpu.read_memory16(0x4FE8);

    // FD92: LDU $4FF0
    cpu.m_u = cpu.read_memory16(0x4FF0);

    // FD95: LDU $7CF8
    cpu.m_u = cpu.read_memory16(0x7CF8);

    // FD98: LDU $A7E0
    cpu.m_u = cpu.read_memory16(0xA7E0);

    // FD9B: CMPB -$F,X
    cpu.execute_cmpb_immediate(cpu.read_memory(cpu.m_x - 0x0F));

    // FD9E: SBCB -$E,X
    // TODO: Fix comma operator: SBCB -$E,X

    // FDA0: ADDD -$D,X
    // TODO: Fix comma operator: ADDD -$D,X

    // FDA2: ANDB -$C,X
    // TODO: Fix comma operator: ANDB -$C,X

    // FDA4: BITB -$B,X
    // TODO: Convert BITB -$B,X

    // FDA6: LDB -$A,X
    // TODO: Fix comma operator: LDB -$A,X

    // FDA8: STB -$9,X
    cpu.write_memory(cpu.m_x - 0x09, cpu.m_b);

    // FDAA: EORB -$8,X
    // TODO: Fix comma operator: EORB -$8,X

    // FDAC: ADCB -$7,X
    // TODO: Fix comma operator: ADCB -$7,X

    // FDAE: ORB $0,Y
    // TODO: Fix comma operator: ORB $0,Y

    // FDB0: SUBB $21F1
    cpu.m_b -= cpu.read_memory(0x21F1);

    // FDB3: BHI $FDA7
    // TODO: Convert BHI $FDA7

    // FDB5: BLS $FDAA
    // TODO: Convert BLS $FDAA

    // FDB7: BCC $FDAD
    // TODO: External jump to 0xFDAD - not implemented

    // FDB9: BCS $FDB3
    if (cpu.carry_flag()) cpu.m_pc = 0xFDB3;

    // FDBB: BNE $FE1A
    // TODO: External jump to 0xFE1A - not implemented

    // FDBD: BEQ $FDC2
    if (cpu.zero_flag()) cpu.m_pc = 0xFDC2;

    // FDBF: JMP $FF24
    goto label_FF24;

    // FDC2: TFR S,D
    cpu.m_d = cpu.m_sp;

    // FDC4: ANDA #$40
    cpu.m_a &= 0x40;

    // FDC6: ANDB #$01
    cpu.m_b &= 0x01;

    // FDC8: CMPD #$0000
    cpu.execute_cmpd_immediate(0x0000);

    // FDCC: BNE $FDD4
    if (!cpu.zero_flag()) cpu.m_pc = 0xFDD4;

    // FDCE: LDU #$4686
    cpu.m_u = 0x4686;

    // FDD1: JMP $FEFF
    goto label_FEFF;

    // FDD4: JMP $FD07
    goto label_FD07;

    // FDD7: TSTB 
    cpu.test_b();

    // FDD8: BEQ $FDDD
    if (cpu.zero_flag()) cpu.m_pc = 0xFDDD;

    // FDDA: JMP $FF24
    goto label_FF24;

    // FDDD: TFR S,D
    cpu.m_d = cpu.m_sp;

    label_FDDE:
    // FDDE: NEGA 
    cpu.m_a = -cpu.m_a;

    // FDDF: ANDA #$81
    cpu.m_a &= 0x81;

    // FDE1: ANDB #$F8
    cpu.m_b &= 0xF8;

    // FDE3: CMPD #$0000
    cpu.execute_cmpd_immediate(0x0000);

    // FDE7: BNE $FDEF
    if (!cpu.zero_flag()) cpu.m_pc = 0xFDEF;

    // FDE9: LDU #$4683
    cpu.m_u = 0x4683;

    // FDEC: JMP $FEFF
    goto label_FEFF;

    // FDEF: JMP $FD07
    goto label_FD07;

    // FDF2: CMPB #$06
    cpu.compare_b(0x06);

    // FDF4: BNE $FE0E
    if (!cpu.zero_flag()) cpu.m_pc = 0xFE0E;

    // FDF6: TST <$D1
    // TODO: Convert TST <$D1

    // FDF8: BNE $FE0C
    if (!cpu.zero_flag()) cpu.m_pc = 0xFE0C;

    // FDFA: LDX #$0800
    cpu.m_x = 0x0800;

    // FDFD: LDA #$00
    cpu.m_a = 0x00;

    // FDFF: STA ,X+
    cpu.write_memory(cpu.m_x, cpu.m_a);
    cpu.m_x++;

    // FE01: ADDA #$05
    cpu.m_a += 0x05;

    // FE03: CMPX #$1000
    cpu.compare_x(0x1000);

    // FE06: BCS $FDFF
    if (cpu.carry_flag()) cpu.m_pc = 0xFDFF;

    // FE08: LDA #$FF
    cpu.m_a = 0xFF;

    // FE0A: STA <$D1
    cpu.write_memory(0xD1, cpu.m_a);

    // FE0C: BRA $FE34
    goto label_FE34;

    // FE0E: CLR <$D1
    cpu.write_memory(0xD1, 0);

    // FE10: STA $4620
    cpu.write_memory(0x4620, cpu.m_a);

    // FE13: LDX #$FE37
    cpu.m_x = 0xFE37;

    // FE16: ASLB 
    cpu.m_b <<= 1;

    // FE17: ASLB 
    cpu.m_b <<= 1;

    // FE18: ABX 
    // TODO: Convert ABX 

    // FE19: CMPX #$FE4F
    cpu.compare_x(0xFE4F);

    // FE1C: BCS $FE21
    if (cpu.carry_flag()) cpu.m_pc = 0xFE21;

    // FE1E: JMP $FF24
    goto label_FF24;

    // FE21: LDD ,X
    // TODO: Complex indexed addressing: ,X

    // FE23: STD >$0000
    cpu.write_memory16(0x0000, cpu.m_d);

    // FE26: LDD $2,X
    // TODO: Fix comma operator: LDD $2,X

    // FE28: STD >$0002
    cpu.write_memory16(0x0002, cpu.m_d);

    // FE2B: LDD #$2020
    cpu.m_d = 0x2020;

    // FE2E: STD >$0004
    cpu.write_memory16(0x0004, cpu.m_d);

    // FE31: STA $4600
    cpu.write_memory(0x4600, cpu.m_a);

    label_FE34:
    // FE34: JMP $FD07
    goto label_FD07;

    // FE37: BRA $FE59
    // TODO: External jump to 0xFE59 - not implemented

    // FE39: BRA $FE5B
    goto label_FE5B;

    // FE3B: NEG <$00
    // TODO: Convert NEG <$00

    // FE3D: NEG <$00
    // TODO: Convert NEG <$00

    // FE3F: NEGB 
    cpu.m_b = -cpu.m_b;

    // FE40: XLBRA $1EC4
    // TODO: Convert XLBRA $1EC4

    // FE44: NEGA 
    cpu.m_a = -cpu.m_a;

    // FE45: BRA $FE67
    // TODO: External jump to 0xFE67 - not implemented

    // FE47: XNC $4020
    // TODO: Convert XNC $4020

    // FE4A: BRA $FEB3
    goto label_FEB3;

    // FE4C: SUBA #$20
    cpu.m_a -= 0x20;

    // FE4E: BRA $FDDE
    goto label_FDDE;

    // FE50: LDD $F158
    cpu.m_d = cpu.read_memory16(0xF158);

    // FE53: ABX 
    // TODO: Convert ABX 

    // FE54: LDY #$0000
    cpu.m_y = 0x0000;

    // FE58: CMPX #$FD07
    cpu.compare_x(0xFD07);

    label_FE5B:
    // FE5B: BCS $FE60
    if (cpu.carry_flag()) cpu.m_pc = 0xFE60;

    // FE5D: JMP $FF24
    goto label_FF24;

    // FE60: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // FE63: LEAY $1,Y
    // TODO: Fix comma operator: LEAY $1,Y

    // FE65: CMPY #$0200
    cpu.execute_cmpy_immediate(0x0200);

    // FE69: BCS $FE71
    if (cpu.carry_flag()) cpu.m_pc = 0xFE71;

    // FE6B: LDS #$FD07
    cpu.m_sp = 0xFD07;

    // FE6F: BRA $FE75
    goto label_FE75;

    // FE71: LDS #$FE58
    cpu.m_sp = 0xFE58;

    label_FE75:
    // FE75: TFR X,D
    cpu.m_d = cpu.m_x;

    // FE77: SUBD #$FCFF
    cpu.m_d -= 0xFCFF;

    // FE7A: JMP [,X]
    // TODO: Invalid branch offset: [,X]

    // FE7C: LDX #$FB4B
    cpu.m_x = 0xFB4B;

    // FE7F: ASLB 
    cpu.m_b <<= 1;

    // FE80: ASLB 
    cpu.m_b <<= 1;

    // FE81: ASLB 
    cpu.m_b <<= 1;

    // FE82: ABX 
    // TODO: Convert ABX 

    // FE83: LDY #$0000
    cpu.m_y = 0x0000;

    // FE87: CMPX #$FB73
    cpu.compare_x(0xFB73);

    // FE8A: BCS $FE8F
    if (cpu.carry_flag()) cpu.m_pc = 0xFE8F;

    // FE8C: JMP $FF24
    goto label_FF24;

    // FE8F: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // FE92: LEAY $1,Y
    // TODO: Fix comma operator: LEAY $1,Y

    // FE94: CMPY #$0200
    cpu.execute_cmpy_immediate(0x0200);

    // FE98: BCS $FEA0
    if (cpu.carry_flag()) cpu.m_pc = 0xFEA0;

    // FE9A: LDS #$FD07
    cpu.m_sp = 0xFD07;

    // FE9E: BRA $FEA4
    goto label_FEA4;

    // FEA0: LDS #$FE87
    cpu.m_sp = 0xFE87;

    label_FEA4:
    // FEA4: JMP $FB38
    goto label_FB38;

    // FEA7: ANDB #$07
    cpu.m_b &= 0x07;

    // FEA9: BEQ $FEAE
    if (cpu.zero_flag()) cpu.m_pc = 0xFEAE;

    // FEAB: JMP $FF24
    goto label_FF24;

    // FEAE: LDA #$01
    cpu.m_a = 0x01;

    // FEB0: STB $46E0
    cpu.write_memory(0x46E0, cpu.m_b);

    label_FEB3:
    // FEB3: TFR X,U
    cpu.m_u = cpu.m_x;

    // FEB5: LDB $4400
    cpu.m_b = cpu.read_memory(0x4400);

    // FEB8: LDB $4401
    cpu.m_b = cpu.read_memory(0x4401);

    // FEBB: ANDB #$40
    cpu.m_b &= 0x40;

    // FEBD: BNE $FF03
    if (!cpu.zero_flag()) cpu.m_pc = 0xFF03;

    // FEBF: LDB #$80
    cpu.m_b = 0x80;

    // FEC1: DECB 
    cpu.m_b--;

    // FEC2: BMI $FF03
    if (cpu.negative_flag()) cpu.m_pc = 0xFF03;

    // FEC4: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // FEC7: TST $4401
    // TODO: Convert TST $4401

    // FECA: BMI $FEC1
    if (cpu.negative_flag()) cpu.m_pc = 0xFEC1;

    // FECC: STA $4400
    cpu.write_memory(0x4400, cpu.m_a);

    // FECF: LDB $4401
    cpu.m_b = cpu.read_memory(0x4401);

    // FED2: BPL $FF03
    if (!cpu.negative_flag()) cpu.m_pc = 0xFF03;

    // FED4: LDX #$0100
    cpu.m_x = 0x0100;

    // FED7: LEAX -$1,X
    // TODO: Fix comma operator: LEAX -$1,X

    // FED9: BEQ $FF03
    if (cpu.zero_flag()) cpu.m_pc = 0xFF03;

    // FEDB: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // FEDE: LDB $4401
    cpu.m_b = cpu.read_memory(0x4401);

    // FEE1: ANDB #$40
    cpu.m_b &= 0x40;

    // FEE3: BEQ $FED7
    if (cpu.zero_flag()) cpu.m_pc = 0xFED7;

    // FEE5: TST $4401
    // TODO: Convert TST $4401

    // FEE8: BMI $FF03
    if (cpu.negative_flag()) cpu.m_pc = 0xFF03;

    // FEEA: CMPA $4400
    cpu.compare_a(cpu.read_memory(cpu.read_memory(0x4400)));

    // FEED: BNE $FF03
    if (!cpu.zero_flag()) cpu.m_pc = 0xFF03;

    // FEEF: LDB $4401
    cpu.m_b = cpu.read_memory(0x4401);

    // FEF2: ANDB #$40
    cpu.m_b &= 0x40;

    // FEF4: BMI $FF03
    if (cpu.negative_flag()) cpu.m_pc = 0xFF03;

    // FEF6: ASLA 
    cpu.m_a <<= 1;

    // FEF7: BCC $FEB0
    if (!cpu.carry_flag()) cpu.m_pc = 0xFEB0;

    // FEF9: LDU #$4682
    cpu.m_u = 0x4682;

    // FEFC: JMP $FEFF
    goto label_FEFF;

    label_FEFF:
    // FEFF: LDA #$00
    cpu.m_a = 0x00;

    // FF01: STA ,U
    cpu.write_memory(cpu.m_u, cpu.m_a);

    // FF03: LDX #$0000
    cpu.m_x = 0x0000;

    // FF06: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // FF09: LEAX $1,X
    // TODO: Fix comma operator: LEAX $1,X

    // FF0B: CMPX #$AC55
    cpu.compare_x(0xAC55);

    // FF0E: BCS $FF06
    if (cpu.carry_flag()) cpu.m_pc = 0xFF06;

    // FF10: LDA #$FF
    cpu.m_a = 0xFF;

    // FF12: STA ,U
    cpu.write_memory(cpu.m_u, cpu.m_a);

    // FF14: LDX #$0000
    cpu.m_x = 0x0000;

    // FF17: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // FF1A: LEAX $1,X
    // TODO: Fix comma operator: LEAX $1,X

    // FF1C: CMPX #$AC55
    cpu.compare_x(0xAC55);

    // FF1F: BCS $FF17
    if (cpu.carry_flag()) cpu.m_pc = 0xFF17;

    // FF21: JMP $FD07
    goto label_FD07;

    label_FF24:
    // FF24: LDA #$00
    cpu.m_a = 0x00;

    // FF26: STA $4686
    cpu.write_memory(0x4686, cpu.m_a);

    // FF29: STA $4683
    cpu.write_memory(0x4683, cpu.m_a);

    // FF2C: STA $4682
    cpu.write_memory(0x4682, cpu.m_a);

    // FF2F: LDX #$0000
    cpu.m_x = 0x0000;

    // FF32: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // FF35: LEAX $1,X
    // TODO: Fix comma operator: LEAX $1,X

    // FF37: CMPX #$5600
    cpu.compare_x(0x5600);

    // FF3A: BCS $FF32
    if (cpu.carry_flag()) cpu.m_pc = 0xFF32;

    // FF3C: LDA #$FF
    cpu.m_a = 0xFF;

    // FF3E: STA $4686
    cpu.write_memory(0x4686, cpu.m_a);

    // FF41: STA $4683
    cpu.write_memory(0x4683, cpu.m_a);

    // FF44: STA $4682
    cpu.write_memory(0x4682, cpu.m_a);

    // FF47: LDX #$0000
    cpu.m_x = 0x0000;

    // FF4A: STA $4640
    cpu.write_memory(0x4640, cpu.m_a);

    // FF4D: LEAX $1,X
    // TODO: Fix comma operator: LEAX $1,X

    // FF4F: CMPX #$5600
    cpu.compare_x(0x5600);

    // FF52: BCS $FF4A
    if (cpu.carry_flag()) cpu.m_pc = 0xFF4A;

    // FF54: JMP $FD07
    goto label_FD07;

    // FF57: LDA [$C840]
    // TODO: Unrecognized operand: [$C840]

    // FF5B: LDA <$1F
    cpu.m_a = cpu.read_memory(0x1F);

    // FF5D: LSR -$10,X
    // TODO: Convert LSR -$10,X

    // FF5F: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // FF60: SUBA -$C,S
    // TODO: Fix comma operator: SUBA -$C,S

    // FF62: LDA $0,Y
    // TODO: Fix comma operator: LDA $0,Y

    // FF64: XDEC $6EE0
    // TODO: Convert XDEC $6EE0

    // FF67: TST $E8AE
    // TODO: Convert TST $E8AE

    // FF6A: XHCF 
    // TODO: Convert XHCF 

    // FF6B: ASL $9207
    cpu.arithmetic_shift_left(0x9207);

    // FF6E: ANDB >$0018
    cpu.m_b &= 0x0018;

    // FF71: ADCB $0,U
    // TODO: Fix comma operator: ADCB $0,U

    // FF73: ORA <$F5
    cpu.m_a |= 0xF5;

    // FF75: SUBA $3807
    cpu.m_a -= cpu.read_memory(0x3807);

    // FF78: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FF7B: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FF7E: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FF81: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FF84: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FF87: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FF8A: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FF8D: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FF90: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FF93: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FF96: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FF99: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FF9C: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FF9F: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFA2: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFA5: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFA8: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFAB: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFAE: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFB1: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFB4: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFB7: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFBA: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFBD: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFC0: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFC3: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFC6: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFC9: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFCC: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFCF: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFD2: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFD5: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFD8: STU $FFFF
    cpu.write_memory16(0xFFFF, cpu.m_u);

    // FFDB: STU $434F
    cpu.write_memory16(0x434F, cpu.m_u);

    // FFDE: NEGB 
    cpu.m_b = -cpu.m_b;

    // FFDF: ROLB 
    cpu.m_b = (cpu.m_b << 1) | (cpu.carry_flag() ? 1 : 0);

    // FFE0: XNCB 
    // TODO: Convert XNCB 

    // FFE1: ROLA 
    cpu.m_a = (cpu.m_a << 1) | (cpu.carry_flag() ? 1 : 0);

    // FFE2: ASRA 
    // TODO: Convert ASRA 

    // FFE3: ASLA 
    cpu.m_a <<= 1;

    // FFE4: LSRB 
    cpu.m_b >>= 1;

    // FFE5: BRA $0018
    // TODO: External jump to 0x0018 - not implemented

    // FFE7: RTS 
    return;

}

} // namespace StarWars