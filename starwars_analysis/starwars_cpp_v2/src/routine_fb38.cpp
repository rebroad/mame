#include "cpu_0x6809.h"

namespace StarWars {

void routine_0xFB38_impl(StarWarsCPU& cpu) {
    // Converted from rom_disasm_auto_0xFB38.md
    // Address: 0x0xFB38

    // Converted from rom_disasm_auto_0xFB38.md
    // Address: 0xROUTINE_0xFB38
    // 0xFB38: LDD ,cpu.state_.x
    cpu.state_.d = ,cpu.state_.x;
    // 0xFB3A: STD 0x0x4706
    cpu.cpu.write_memory(0x4706,  cpu.state_.d);
    // 0xFB3D: LDD 0x2,cpu.state_.x
    cpu.state_.d = 0x2,cpu.state_.x;
    // 0xFB3F: STD 0x0x4704
    cpu.cpu.write_memory(0x4704,  cpu.state_.d);
    // 0xFB43: LDD 0x0x4700
    cpu.state_.d = 0x4700;
    // 0xFB46: CMPD 0x4,cpu.state_.x
    // TODO: Convert CMPD 0x4,cpu.state_.x
    // 0xFB49: JMP ,cpu.state_.sp
    cpu.state_.pc = ,cpu.state_.sp;
    // 0xFB4C: NEG <0x40
    // TODO: Convert NEG <0x40
    // 0xFB4E: NEG <0x40
    // TODO: Convert NEG <0x40
    // 0xFB50: NEG <0x00
    // TODO: Convert NEG <0x00
    // 0xFB52: EORB 0x55
    cpu.state_.b ^= 0x55;
    // 0xFB56: NEG <0x55
    // TODO: Convert NEG <0x55
    // 0xFB59: NEG <0x96
    // TODO: Convert NEG <0x96
    // 0xFB5B: BPL 0x0xFB07
    if (!cpu.cpu.negative_flag()) cpu.state_.pc += 0xFB07;
    // 0xFB5E: NEG <0x2A
    // TODO: Convert NEG <0x2A
    // 0xFB60: ORA 0x0,cpu.state_.x
    cpu.state_.a |= 0x0,cpu.state_.x;
    // 0xFB62: LSR 0xcpu.state_.a,cpu.state_.y
    // TODO: Convert LSR 0xcpu.state_.a,cpu.state_.y
    // 0xFB64: ORA 0xcpu.state_.a,cpu.state_.y
    cpu.state_.a |= 0xcpu.state_.a,cpu.state_.y;
    // 0xFB66: ORA 0x0,cpu.state_.u
    cpu.state_.a |= 0x0,cpu.state_.u;
    // 0xFB68: NEG <0x00
    // TODO: Convert NEG <0x00
    // 0xFB6A: LEAS -0xcpu.state_.b,cpu.state_.u
    cpu.state_.sp += -0xcpu.state_.b,cpu.state_.u;
    // 0xFB70: NEG <0x00
    // TODO: Convert NEG <0x00
    // 0xFB72: NEG <0x6E
    // TODO: Convert NEG <0x6E
    // 0xFB74: ANDB 0x0xFBCC,PCR
    cpu.state_.b &= 0x0xFBCC,PCR;
    // 0xFB78: STD 0x500x1E
    cpu.cpu.write_memory(500x1E,  cpu.state_.d);
    // 0xFB7B: LDA 0x57
    cpu.state_.a = 0x57;
    // 0xFB7D: STA 0x0x4700
    cpu.cpu.write_memory(0x4700,  cpu.state_.a);
    // 0xFB80: BRA 0x0xFB73
    cpu.state_.pc += 0xFB73;
    // 0xFB82: LDD 0x0xAAAA
    cpu.state_.d = 0xAAAA;
    // 0xFB85: STD 0x500x1E
    cpu.cpu.write_memory(500x1E,  cpu.state_.d);
    // 0xFB88: LDA 0x58
    cpu.state_.a = 0x58;
    // 0xFB8A: STA 0x0x4700
    cpu.cpu.write_memory(0x4700,  cpu.state_.a);
    // 0xFB8D: BRA 0x0xFB73
    cpu.state_.pc += 0xFB73;
    // 0xFB8F: LDD 0x0x5555
    cpu.state_.d = 0x5555;
    // 0xFB92: STD 0x500x1E
    cpu.cpu.write_memory(500x1E,  cpu.state_.d);
    // 0xFB95: LDA 0x59
    cpu.state_.a = 0x59;
    // 0xFB97: STA 0x0x4700
    cpu.cpu.write_memory(0x4700,  cpu.state_.a);
    // 0xFB9A: BRA 0x0xFB73
    cpu.state_.pc += 0xFB73;
    // 0xFB9C: LDA 0x5A
    cpu.state_.a = 0x5A;
    // 0xFB9E: STA 0x0x4700
    cpu.cpu.write_memory(0x4700,  cpu.state_.a);
    // 0xFBA1: BRA 0x0xFB73
    cpu.state_.pc += 0xFB73;
    // 0xFBA3: LDA 0x5B
    cpu.state_.a = 0x5B;
    // 0xFBA5: STA 0x0x4700
    cpu.cpu.write_memory(0x4700,  cpu.state_.a);
    // 0xFBA8: BRA 0x0xFB73
    cpu.state_.pc += 0xFB73;
    // 0xFBAA: LDD 0x0x5555
    cpu.state_.d = 0x5555;
    // 0xFBAD: STD 0x0x5000
    cpu.cpu.write_memory(0x5000,  cpu.state_.d);
    // 0xFBB0: LDA 0x5C
    cpu.state_.a = 0x5C;
    // 0xFBB2: STA 0x0x4700
    cpu.cpu.write_memory(0x4700,  cpu.state_.a);
    // 0xFBB6: LDD 0x0x5002
    cpu.state_.d = 0x5002;
    // 0xFBB9: CMPD 0x0x5555
    // TODO: Convert CMPD 0x0x5555
    // 0xFBBD: BRA 0x0xFB73
    cpu.state_.pc += 0xFB73;
    // 0xFBBF: LDD 0x0xAAAA
    cpu.state_.d = 0xAAAA;
    // 0xFBC2: STD 0x0x5000
    cpu.cpu.write_memory(0x5000,  cpu.state_.d);
    // 0xFBC5: LDA 0x5C
    cpu.state_.a = 0x5C;
    // 0xFBC7: STA 0x0x4700
    cpu.cpu.write_memory(0x4700,  cpu.state_.a);
    // 0xFBCB: LDD 0x0x5002
    cpu.state_.d = 0x5002;
    // 0xFBCE: CMPD 0x0xAAAA
    // TODO: Convert CMPD 0x0xAAAA
    // 0xFBD2: BRA 0x0xFB73
    cpu.state_.pc += 0xFB73;
    // 0xFBD4: LDD 0x0x2696
    cpu.state_.d = 0x2696;
    // 0xFBD7: STD 0x0x5018
    cpu.cpu.write_memory(0x5018,  cpu.state_.d);
    // 0xFBDA: LDD 0x0x1B2C
    cpu.state_.d = 0x1B2C;
    // 0xFBDD: STD 0x0x501A
    cpu.cpu.write_memory(0x501A,  cpu.state_.d);
    // 0xFBE0: LDD 0x0x4000
    cpu.state_.d = 0x4000;
    // 0xFBE3: STD 0x0x501C
    cpu.cpu.write_memory(0x501C,  cpu.state_.d);
    // 0xFBE6: LDA 0x5D
    cpu.state_.a = 0x5D;
    // 0xFBE8: STA 0x0x4700
    cpu.cpu.write_memory(0x4700,  cpu.state_.a);
    // 0xFBEC: LDD 0x0x5000
    cpu.state_.d = 0x5000;
    // 0xFBEF: CMPD 0x0x0B6A
    // TODO: Convert CMPD 0x0x0B6A
    // 0xFBF3: JMP 0x0xFB73
    cpu.state_.pc = 0xFB73;
    // 0xFBF6: LDA 0x5A
    cpu.state_.a = 0x5A;
    // 0xFBF8: STA 0x0x4700
    cpu.cpu.write_memory(0x4700,  cpu.state_.a);
    // 0xFBFB: LDD 0x0x0000
    cpu.state_.d = 0x0000;
    // 0xFBFE: STD 0x0x501A
    cpu.cpu.write_memory(0x501A,  cpu.state_.d);
    // 0xFC01: LDD 0x0x4000
    cpu.state_.d = 0x4000;
    // 0xFC04: STD 0x0x501C
    cpu.cpu.write_memory(0x501C,  cpu.state_.d);
    // 0xFC07: LDD 0x0x0001
    cpu.state_.d = 0x0001;
    // 0xFC0A: STD 0x0x5018
    cpu.cpu.write_memory(0x5018,  cpu.state_.d);
    // 0xFC0D: STD 0x0x5018
    cpu.cpu.write_memory(0x5018,  cpu.state_.d);
    // 0xFC10: LDA 0x5E
    cpu.state_.a = 0x5E;
    // 0xFC12: STA 0x0x4700
    cpu.cpu.write_memory(0x4700,  cpu.state_.a);
    // 0xFC16: LDD 0x0x5000
    cpu.state_.d = 0x5000;
    // 0xFC19: JMP 0x0xFB73
    cpu.state_.pc = 0xFB73;
    // 0xFC1C: LDU 0x0x5028
    cpu.state_.u = 0x5028;
    // 0xFC1F: LDD 0x0x0005
    cpu.state_.d = 0x0005;
    // 0xFC22: STD ,cpu.state_.u
    cpu.cpu.write_memory(0, cpu.state_.u,  cpu.state_.d);
    // 0xFC24: 0xADDD 0x0x0001
    cpu.state_.d += 0x0001;
    // 0xFC27: LEAU 0x8,cpu.state_.u
    cpu.state_.u += 0x8,cpu.state_.u;
    // 0xFC29: CMPU 0x0x6000
    // TODO: Convert CMPU 0x0x6000
    // 0xFC2D: BCS 0x0xFC22
    if (cpu.cpu.carry_flag()) cpu.state_.pc += 0xFC22;
    // 0xFC2F: LDD 0x0x0000
    cpu.state_.d = 0x0000;
    // 0xFC32: STD 0x500x1E
    cpu.cpu.write_memory(500x1E,  cpu.state_.d);
    // 0xFC35: LDD 0x0x4000
    cpu.state_.d = 0x4000;
    // 0xFC38: STD 0x0x5020
    cpu.cpu.write_memory(0x5020,  cpu.state_.d);
    // 0xFC3B: LDD 0x0x0004
    cpu.state_.d = 0x0004;
    // 0xFC3E: STD 0x0x4701
    cpu.cpu.write_memory(0x4701,  cpu.state_.d);
    // 0xFC41: LDU 0x0x0008
    cpu.state_.u = 0x0008;
    // 0xFC44: STA 0x0x4640
    cpu.cpu.write_memory(0x4640,  cpu.state_.a);
    // 0xFC47: TFR cpu.state_.u,cpu.state_.d
    cpu.state_.cpu.state_.d = cpu.state_.cpu.state_.u;
    // 0xFC4B: LDA 0x5B
    cpu.state_.a = 0x5B;
    // 0xFC4D: STA 0x0x4700
    cpu.cpu.write_memory(0x4700,  cpu.state_.a);
    // 0xFC51: BNE 0x0xFC4B
    if (!cpu.cpu.zero_flag()) cpu.state_.pc += 0xFC4B;
    // 0xFC53: LDA 0x5F
    cpu.state_.a = 0x5F;
    // 0xFC55: STA 0x0x4700
    cpu.cpu.write_memory(0x4700,  cpu.state_.a);
    // 0xFC59: CMPU 0x0x5000
    // TODO: Convert CMPU 0x0x5000
    // 0xFC5D: BEQ 0x0xFC62
    if (cpu.cpu.zero_flag()) cpu.state_.pc += 0xFC62;
    // 0xFC5F: JMP 0x0xFB73
    cpu.state_.pc = 0xFB73;
    // 0xFC62: TFR cpu.state_.u,cpu.state_.d
    cpu.state_.cpu.state_.d = cpu.state_.cpu.state_.u;
    // 0xFC64: LEAU cpu.state_.d,cpu.state_.u
    cpu.state_.u += cpu.state_.d,cpu.state_.u;
    // 0xFC66: CMPU 0x0x0200
    // TODO: Convert CMPU 0x0x0200
    // 0xFC6A: BCS 0x0xFC44
    if (cpu.cpu.carry_flag()) cpu.state_.pc += 0xFC44;
    // 0xFC6C: LDD 0x0x0000
    cpu.state_.d = 0x0000;
    // 0xFC6F: JMP 0x0xFB73
    cpu.state_.pc = 0xFB73;
    // 0xFC72: LDD 0x0x1B2C
    cpu.state_.d = 0x1B2C;
    // 0xFC75: STD 0x0x5018
    cpu.cpu.write_memory(0x5018,  cpu.state_.d);
    // 0xFC78: LDD 0x0x0000
    cpu.state_.d = 0x0000;
    // 0xFC7B: STD 0x0x501A
    cpu.cpu.write_memory(0x501A,  cpu.state_.d);
    // 0xFC7E: LDD 0x0x4000
    cpu.state_.d = 0x4000;
    // 0xFC81: STD 0x0x501C
    cpu.cpu.write_memory(0x501C,  cpu.state_.d);
    // 0xFC84: LDA 0x5D
    cpu.state_.a = 0x5D;
    // 0xFC86: STA 0x0x4700
    cpu.cpu.write_memory(0x4700,  cpu.state_.a);
    // 0xFC8A: LDD 0x0x196A
    cpu.state_.d = 0x196A;
    // 0xFC8D: STD 0x0x5018
    cpu.cpu.write_memory(0x5018,  cpu.state_.d);
    // 0xFC90: LDD 0x0x0000
    cpu.state_.d = 0x0000;
    // 0xFC93: STD 0x0x501A
    cpu.cpu.write_memory(0x501A,  cpu.state_.d);
    // 0xFC96: LDD 0x0x4000
    cpu.state_.d = 0x4000;
    // 0xFC99: STD 0x0x501C
    cpu.cpu.write_memory(0x501C,  cpu.state_.d);
    // 0xFC9C: LDA 0x5E
    cpu.state_.a = 0x5E;
    // 0xFC9E: STA 0x0x4700
    cpu.cpu.write_memory(0x4700,  cpu.state_.a);
    // 0xFCA2: LDD 0x0x5000
    cpu.state_.d = 0x5000;
    // 0xFCA5: CMPD 0x0x3496
    // TODO: Convert CMPD 0x0x3496
    // 0xFCA9: JMP 0x0xFB73
    cpu.state_.pc = 0xFB73;
    // 0xFCAE: LDU 0x0xFCD1
    cpu.state_.u = 0xFCD1;
    // 0xFCB1: LEAU cpu.state_.b,cpu.state_.u
    cpu.state_.u += cpu.state_.b,cpu.state_.u;
    // 0xFCB3: LDD ,cpu.state_.u
    cpu.state_.d = ,cpu.state_.u;
    // 0xFCB5: STD 0x0x5018
    cpu.cpu.write_memory(0x5018,  cpu.state_.d);
    // 0xFCB8: LDD 0x2,cpu.state_.u
    cpu.state_.d = 0x2,cpu.state_.u;
    // 0xFCBA: STD 0x0x501A
    cpu.cpu.write_memory(0x501A,  cpu.state_.d);
    // 0xFCBD: LDD 0x4,cpu.state_.u
    cpu.state_.d = 0x4,cpu.state_.u;
    // 0xFCBF: STD 0x0x501C
    cpu.cpu.write_memory(0x501C,  cpu.state_.d);
    // 0xFCC2: LDA 0x5D
    cpu.state_.a = 0x5D;
    // 0xFCC4: STA 0x0x4700
    cpu.cpu.write_memory(0x4700,  cpu.state_.a);
    // 0xFCC8: LDD 0x0x5000
    cpu.state_.d = 0x5000;
    // 0xFCCB: CMPD 0x6,cpu.state_.u
    // TODO: Convert CMPD 0x6,cpu.state_.u
    // 0xFCCE: JMP 0x0xFB73
    cpu.state_.pc = 0xFB73;
    // 0xFCD3: NEG <0x00
    // TODO: Convert NEG <0x00
    // 0xFCD6: NEG <0x55
    // TODO: Convert NEG <0x55
    // 0xFCD9: NEG <0x00
    // TODO: Convert NEG <0x00
    // 0xFCDD: SUBB 0x00
    cpu.state_.b -= 0x00;
    // 0xFCE1: BPL 0x0xFC8D
    if (!cpu.cpu.negative_flag()) cpu.state_.pc += 0xFC8D;
    // 0xFCE3: NEG <0x00
    // TODO: Convert NEG <0x00
    // 0xFCE6: NEG <0x2A
    // TODO: Convert NEG <0x2A
    // 0xFCE8: ORA 0x0,cpu.state_.x
    cpu.state_.a |= 0x0,cpu.state_.x;
    // 0xFCEA: NEG <0x2A
    // TODO: Convert NEG <0x2A
    // 0xFCEC: ORA ,cpu.state_.u+
    cpu.state_.a |= ,cpu.state_.u+;
    // 0xFCEE: NEG <0x2A
    // TODO: Convert NEG <0x2A
    // 0xFCF0: ORA [cpu.state_.d,cpu.state_.sp]
    cpu.state_.a |= [cpu.state_.d,cpu.state_.sp];
    // 0xFCF2: LSR 0x0xFB82
    // TODO: Convert LSR 0x0xFB82
    // 0xFCF5: 0xADDB 0x0x8FFB
    cpu.state_.b += 0x8FFB;
    // 0xFCF8: CMPX <0xFB
    cpu.cpu.compare_x(0xFB);
    // 0xFCFA: SUBD [cpu.state_.d,cpu.state_.sp]
    cpu.state_.d -= [cpu.state_.d,cpu.state_.sp];
    // 0xFCFC: ORA [cpu.state_.d,cpu.state_.sp]
    cpu.state_.a |= [cpu.state_.d,cpu.state_.sp];
    // 0xFCFE: STX 0x0xFCAC
    cpu.cpu.write_memory(0xFCAC,  cpu.state_.x);
    // 0xFD01: LDD 0x0xACFC
    cpu.state_.d = 0xACFC;
    // 0xFD04: CMPX [0x0xFCB3,PCR]
    cpu.cpu.compare_x([0x0xFCB3,PCR]);
    // 0xFD07: LDA 0x0x4300
    cpu.state_.a = 0x4300;
    // 0xFD0A: ANDA 0x10
    cpu.state_.a &= 0x10;
    // 0xFD0C: LDB 0x0x4320
    cpu.state_.b = 0x4320;
    // 0xFD0F: ANDB 0x04
    cpu.state_.b &= 0x04;
    // 0xFD11: CMPD 0x0x0000
    // TODO: Convert CMPD 0x0x0000
    // 0xFD15: BEQ 0x0xFD1A
    if (cpu.cpu.zero_flag()) cpu.state_.pc += 0xFD1A;
    // 0xFD17: JMP 0x0xF720
    cpu.state_.pc = 0xF720;
    // 0xFD1A: STA 0x0x4640
    cpu.cpu.write_memory(0x4640,  cpu.state_.a);
    // 0xFD1D: LDA 0xFF
    cpu.state_.a = 0xFF;
    // 0xFD1F: STA 0x0x4686
    cpu.cpu.write_memory(0x4686,  cpu.state_.a);
    // 0xFD22: STA 0x0x4683
    cpu.cpu.write_memory(0x4683,  cpu.state_.a);
    // 0xFD25: STA 0x0x4682
    cpu.cpu.write_memory(0x4682,  cpu.state_.a);
    // 0xFD28: LDB 0x0x4340
    cpu.state_.b = 0x4340;
    // 0xFD2C: LDU 0x0xFD9A
    cpu.state_.u = 0xFD9A;
    // 0xFD2F: CMPB ,cpu.state_.u+
    cpu.cpu.compare_b(,cpu.state_.u+);
    // 0xFD31: BNE 0x0xFD5A
    if (!cpu.cpu.zero_flag()) cpu.state_.pc += 0xFD5A;
    // 0xFD33: STA 0x0x4620
    cpu.cpu.write_memory(0x4620,  cpu.state_.a);
    // 0xFD36: LDY 0x0x0000
    cpu.state_.y = 0x0000;
    // 0xFD3A: LDD 0x0xBFAE
    cpu.state_.d = 0xBFAE;
    // 0xFD3D: STD ,cpu.state_.y++
    cpu.cpu.write_memory(0, cpu.state_.y++,  cpu.state_.d);
    // 0xFD3F: LDD 0x0x8040
    cpu.state_.d = 0x8040;
    // 0xFD42: STD ,cpu.state_.y++
    cpu.cpu.write_memory(0, cpu.state_.y++,  cpu.state_.d);
    // 0xFD44: LDA ,cpu.state_.u
    cpu.state_.a = ,cpu.state_.u;
    // 0xFD46: LDS 0x0x4FFF
    cpu.state_.sp = 0x4FFF;
    // 0xFD4A: JSR 0x0xE790
    cpu.cpu.call_function(0xE790);
    // 0xFD4D: LDD 0x0x2020
    cpu.state_.d = 0x2020;
    // 0xFD50: STD ,cpu.state_.y++
    cpu.cpu.write_memory(0, cpu.state_.y++,  cpu.state_.d);
    // 0xFD52: STD ,cpu.state_.y++
    cpu.cpu.write_memory(0, cpu.state_.y++,  cpu.state_.d);
    // 0xFD54: STA 0x0x4600
    cpu.cpu.write_memory(0x4600,  cpu.state_.a);
    // 0xFD57: LDU 0x0xFDBC
    cpu.state_.u = 0xFDBC;
    // 0xFD5A: LEAU 0x1,cpu.state_.u
    cpu.state_.u += 0x1,cpu.state_.u;
    // 0xFD5C: CMPU 0x0xFDBC
    // TODO: Convert CMPU 0x0xFDBC
    // 0xFD60: BCS 0x0xFD2F
    if (cpu.cpu.carry_flag()) cpu.state_.pc += 0xFD2F;
    // 0xFD62: LDB 0x0x4340
    cpu.state_.b = 0x4340;
    // 0xFD66: TFR cpu.state_.b,cpu.state_.a
    cpu.state_.cpu.state_.a = cpu.state_.cpu.state_.b;
    // 0xFD68: ANDB 0x0F
    cpu.state_.b &= 0x0F;
    // 0xFD6A: ANDA 0xF8
    cpu.state_.a &= 0xF8;
    // 0xFD6C: CMPA 0xC0
    cpu.cpu.compare_a(C0);
    // 0xFD6E: BEQ 0x0xFD72
    if (cpu.cpu.zero_flag()) cpu.state_.pc += 0xFD72;
    // 0xFD70: CLR <0xD1
    cpu.cpu.write_memory(0xD1,  0);
    // 0xFD72: LDX 0x0xFD85
    cpu.state_.x = 0xFD85;
    // 0xFD75: CMPA ,cpu.state_.x+
    cpu.cpu.compare_a(,cpu.state_.x+);
    // 0xFD77: BNE 0x0xFD7B
    if (!cpu.cpu.zero_flag()) cpu.state_.pc += 0xFD7B;
    // 0xFD79: JMP [,cpu.state_.x]
    cpu.state_.pc = [,cpu.state_.x];
    // 0xFD7B: LEAX 0x2,cpu.state_.x
    cpu.state_.x += 0x2,cpu.state_.x;
    // 0xFD7D: CMPX 0x0xFD9A
    cpu.cpu.compare_x(0xFD9A);
    // 0xFD80: BCS 0x0xFD75
    if (cpu.cpu.carry_flag()) cpu.state_.pc += 0xFD75;
    // 0xFD82: JMP 0x0xFF24
    cpu.state_.pc = 0xFF24;
    // 0xFD85: NEG <0xFD
    // TODO: Convert NEG <0xFD
    // 0xFD87: CMPX 0x0x80FD
    cpu.cpu.compare_x(0x80FD);
    // 0xFD8A: STB <0xC0
    cpu.cpu.write_memory(0xC0,  cpu.state_.b);
    // 0xFD8C: STD 0x0xF2E0
    cpu.cpu.write_memory(0xF2E0,  cpu.state_.d);
    // 0xFD8F: LDU 0x0x4FE8
    cpu.state_.u = 0x4FE8;
    // 0xFD92: LDU 0x0x4FF0
    cpu.state_.u = 0x4FF0;
    // 0xFD95: LDU 0x0x7CF8
    cpu.state_.u = 0x7CF8;
    // 0xFD98: LDU 0x0xA7E0
    cpu.state_.u = 0xA7E0;
    // 0xFD9B: CMPB -0xF,cpu.state_.x
    cpu.cpu.compare_b(-0xF,cpu.state_.x);
    // 0xFD9E: SBCB -0xE,cpu.state_.x
    // TODO: Convert SBCB -0xE,cpu.state_.x
    // 0xFDA0: 0xADDD -0xcpu.state_.d,cpu.state_.x
    cpu.state_.d += -0xcpu.state_.d,cpu.state_.x;
    // 0xFDA2: ANDB -0xC,cpu.state_.x
    cpu.state_.b &= -0xC,cpu.state_.x;
    // 0xFDA4: BITB -0xcpu.state_.b,cpu.state_.x
    // TODO: Convert BITB -0xcpu.state_.b,cpu.state_.x
    // 0xFDA6: LDB -0xcpu.state_.a,cpu.state_.x
    cpu.state_.b = -0xcpu.state_.a,cpu.state_.x;
    // 0xFDA8: STB -0x9,cpu.state_.x
    cpu.cpu.write_memory(-0x9, cpu.state_.x, cpu.state_.b);
    // 0xFDAA: EORB -0x8,cpu.state_.x
    cpu.state_.b ^= -0x8,cpu.state_.x;
    // 0xFDAC: 0xADCB -0x7,cpu.state_.x
    // TODO: Convert 0xADCB -0x7,cpu.state_.x
    // 0xFDAE: ORB 0x0,cpu.state_.y
    cpu.state_.b |= 0x0,cpu.state_.y;
    // 0xFDB0: SUBB 0x0x21F1
    cpu.state_.b -= 0x21F1;
    // 0xFDB3: BHI 0x0xFDA7
    // TODO: Convert BHI 0x0xFDA7
    // 0xFDB5: BLS 0x0xFDAA
    // TODO: Convert BLS 0x0xFDAA
    // 0xFDB7: BCC 0x0xFDAD
    if (!cpu.cpu.carry_flag()) cpu.state_.pc += 0xFDAD;
    // 0xFDB9: BCS 0x0xFDB3
    if (cpu.cpu.carry_flag()) cpu.state_.pc += 0xFDB3;
    // 0xFDBB: BNE 0x0xFE1A
    if (!cpu.cpu.zero_flag()) cpu.state_.pc += 0xFE1A;
    // 0xFDBD: BEQ 0x0xFDC2
    if (cpu.cpu.zero_flag()) cpu.state_.pc += 0xFDC2;
    // 0xFDBF: JMP 0x0xFF24
    cpu.state_.pc = 0xFF24;
    // 0xFDC2: TFR cpu.state_.sp,cpu.state_.d
    cpu.state_.cpu.state_.d = cpu.state_.cpu.state_.sp;
    // 0xFDC4: ANDA 0x40
    cpu.state_.a &= 0x40;
    // 0xFDC6: ANDB 0x01
    cpu.state_.b &= 0x01;
    // 0xFDC8: CMPD 0x0x0000
    // TODO: Convert CMPD 0x0x0000
    // 0xFDCC: BNE 0x0xFDD4
    if (!cpu.cpu.zero_flag()) cpu.state_.pc += 0xFDD4;
    // 0xFDCE: LDU 0x0x4686
    cpu.state_.u = 0x4686;
    // 0xFDD1: JMP 0x0xFEFF
    cpu.state_.pc = 0xFEFF;
    // 0xFDD4: JMP 0x0xFD07
    cpu.state_.pc = 0xFD07;
    // 0xFDD8: BEQ 0x0xFDDD
    if (cpu.cpu.zero_flag()) cpu.state_.pc += 0xFDDD;
    // 0xFDDA: JMP 0x0xFF24
    cpu.state_.pc = 0xFF24;
    // 0xFDDD: TFR cpu.state_.sp,cpu.state_.d
    cpu.state_.cpu.state_.d = cpu.state_.cpu.state_.sp;
    // 0xFDDF: ANDA 0x81
    cpu.state_.a &= 0x81;
    // 0xFDE1: ANDB 0xF8
    cpu.state_.b &= 0xF8;
    // 0xFDE3: CMPD 0x0x0000
    // TODO: Convert CMPD 0x0x0000
    // 0xFDE7: BNE 0x0xFDEF
    if (!cpu.cpu.zero_flag()) cpu.state_.pc += 0xFDEF;
    // 0xFDE9: LDU 0x0x4683
    cpu.state_.u = 0x4683;
    // 0xFDEC: JMP 0x0xFEFF
    cpu.state_.pc = 0xFEFF;
    // 0xFDEF: JMP 0x0xFD07
    cpu.state_.pc = 0xFD07;
    // 0xFDF2: CMPB 0x06
    cpu.cpu.compare_b(06);
    // 0xFDF4: BNE 0x0xFE0E
    if (!cpu.cpu.zero_flag()) cpu.state_.pc += 0xFE0E;
    // 0xFDF6: TST <0xD1
    // TODO: Convert TST <0xD1
    // 0xFDF8: BNE 0x0xFE0C
    if (!cpu.cpu.zero_flag()) cpu.state_.pc += 0xFE0C;
    // 0xFDFA: LDX 0x0x0800
    cpu.state_.x = 0x0800;
    // 0xFDFD: LDA 0x00
    cpu.state_.a = 0x00;
    // 0xFDFF: STA ,cpu.state_.x+
    cpu.cpu.write_memory(0, cpu.state_.x+,  cpu.state_.a);
    // 0xFE01: 0xADDA 0x05
    cpu.state_.a += 0x05;
    // 0xFE03: CMPX 0x0x1000
    cpu.cpu.compare_x(0x1000);
    // 0xFE06: BCS 0x0xFDFF
    if (cpu.cpu.carry_flag()) cpu.state_.pc += 0xFDFF;
    // 0xFE08: LDA 0xFF
    cpu.state_.a = 0xFF;
    // 0xFE0A: STA <0xD1
    cpu.cpu.write_memory(0xD1,  cpu.state_.a);
    // 0xFE0C: BRA 0x0xFE34
    cpu.state_.pc += 0xFE34;
    // 0xFE0E: CLR <0xD1
    cpu.cpu.write_memory(0xD1,  0);
    // 0xFE10: STA 0x0x4620
    cpu.cpu.write_memory(0x4620,  cpu.state_.a);
    // 0xFE13: LDX 0x0xFE37
    cpu.state_.x = 0xFE37;
    // 0xFE19: CMPX 0x0xFE4F
    cpu.cpu.compare_x(0xFE4F);
    // 0xFE1C: BCS 0x0xFE21
    if (cpu.cpu.carry_flag()) cpu.state_.pc += 0xFE21;
    // FE0x1E: JMP 0x0xFF24
    cpu.state_.pc = 0xFF24;
    // 0xFE21: LDD ,cpu.state_.x
    cpu.state_.d = ,cpu.state_.x;
    // 0xFE23: STD >0x0x0000
    cpu.cpu.write_memory(0x0x0000,  cpu.state_.d);
    // 0xFE26: LDD 0x2,cpu.state_.x
    cpu.state_.d = 0x2,cpu.state_.x;
    // 0xFE28: STD >0x0x0002
    cpu.cpu.write_memory(0x0x0002,  cpu.state_.d);
    // 0xFE2B: LDD 0x0x2020
    cpu.state_.d = 0x2020;
    // 0xFE2E: STD >0x0x0004
    cpu.cpu.write_memory(0x0x0004,  cpu.state_.d);
    // 0xFE31: STA 0x0x4600
    cpu.cpu.write_memory(0x4600,  cpu.state_.a);
    // 0xFE34: JMP 0x0xFD07
    cpu.state_.pc = 0xFD07;
    // 0xFE37: BRA 0x0xFE59
    cpu.state_.pc += 0xFE59;
    // 0xFE39: BRA 0x0xFE5B
    cpu.state_.pc += 0xFE5B;
    // 0xFE3B: NEG <0x00
    // TODO: Convert NEG <0x00
    // 0xFE3D: NEG <0x00
    // TODO: Convert NEG <0x00
    // 0xFE40: XLBRA 0x0x0x1EC4
    // TODO: Convert XLBRA 0x0x0x1EC4
    // 0xFE45: BRA 0x0xFE67
    cpu.state_.pc += 0xFE67;
    // 0xFE47: XNC 0x0x4020
    // TODO: Convert XNC 0x0x4020
    // 0xFE4A: BRA 0x0xFEB3
    cpu.state_.pc += 0xFEB3;
    // 0xFE4C: SUBA 0x20
    cpu.state_.a -= 0x20;
    // 0xFE4E: BRA 0x0xFDDE
    cpu.state_.pc += 0xFDDE;
    // 0xFE50: LDD 0x0xF158
    cpu.state_.d = 0xF158;
    // 0xFE54: LDY 0x0x0000
    cpu.state_.y = 0x0000;
    // 0xFE58: CMPX 0x0xFD07
    cpu.cpu.compare_x(0xFD07);
    // 0xFE5B: BCS 0x0xFE60
    if (cpu.cpu.carry_flag()) cpu.state_.pc += 0xFE60;
    // 0xFE5D: JMP 0x0xFF24
    cpu.state_.pc = 0xFF24;
    // 0xFE60: STA 0x0x4640
    cpu.cpu.write_memory(0x4640,  cpu.state_.a);
    // 0xFE63: LEAY 0x1,cpu.state_.y
    cpu.state_.y += 0x1,cpu.state_.y;
    // 0xFE65: CMPY 0x0x0200
    // TODO: Convert CMPY 0x0x0200
    // 0xFE69: BCS 0x0xFE71
    if (cpu.cpu.carry_flag()) cpu.state_.pc += 0xFE71;
    // 0xFE6B: LDS 0x0xFD07
    cpu.state_.sp = 0xFD07;
    // 0xFE6F: BRA 0x0xFE75
    cpu.state_.pc += 0xFE75;
    // 0xFE71: LDS 0x0xFE58
    cpu.state_.sp = 0xFE58;
    // 0xFE75: TFR cpu.state_.x,cpu.state_.d
    cpu.state_.cpu.state_.d = cpu.state_.cpu.state_.x;
    // 0xFE77: SUBD 0x0xFCFF
    cpu.state_.d -= 0xFCFF;
    // 0xFE7A: JMP [,cpu.state_.x]
    cpu.state_.pc = [,cpu.state_.x];
    // 0xFE7C: LDX 0x0xFB4B
    cpu.state_.x = 0xFB4B;
    // 0xFE83: LDY 0x0x0000
    cpu.state_.y = 0x0000;
    // 0xFE87: CMPX 0x0xFB73
    cpu.cpu.compare_x(0xFB73);
    // 0xFE8A: BCS 0x0xFE8F
    if (cpu.cpu.carry_flag()) cpu.state_.pc += 0xFE8F;
    // 0xFE8C: JMP 0x0xFF24
    cpu.state_.pc = 0xFF24;
    // 0xFE8F: STA 0x0x4640
    cpu.cpu.write_memory(0x4640,  cpu.state_.a);
    // 0xFE92: LEAY 0x1,cpu.state_.y
    cpu.state_.y += 0x1,cpu.state_.y;
    // 0xFE94: CMPY 0x0x0200
    // TODO: Convert CMPY 0x0x0200
    // 0xFE98: BCS 0x0xFEA0
    if (cpu.cpu.carry_flag()) cpu.state_.pc += 0xFEA0;
    // 0xFE9A: LDS 0x0xFD07
    cpu.state_.sp = 0xFD07;
    // 0xFE9E: BRA 0x0xFEA4
    cpu.state_.pc += 0xFEA4;
    // 0xFEA0: LDS 0x0xFE87
    cpu.state_.sp = 0xFE87;
    // 0xFEA4: JMP 0x0xFB38
    cpu.state_.pc = 0xFB38;
    // 0xFEA7: ANDB 0x07
    cpu.state_.b &= 0x07;
    // 0xFEA9: BEQ 0x0xFEAE
    if (cpu.cpu.zero_flag()) cpu.state_.pc += 0xFEAE;
    // 0xFEAB: JMP 0x0xFF24
    cpu.state_.pc = 0xFF24;
    // 0xFEAE: LDA 0x01
    cpu.state_.a = 0x01;
    // 0xFEB0: STB 0x0x46E0
    cpu.cpu.write_memory(0x46E0,  cpu.state_.b);
    // 0xFEB3: TFR cpu.state_.x,cpu.state_.u
    cpu.state_.cpu.state_.u = cpu.state_.cpu.state_.x;
    // 0xFEB5: LDB 0x0x4400
    cpu.state_.b = 0x4400;
    // 0xFEB8: LDB 0x0x4401
    cpu.state_.b = 0x4401;
    // 0xFEBB: ANDB 0x40
    cpu.state_.b &= 0x40;
    // 0xFEBD: BNE 0x0xFF03
    if (!cpu.cpu.zero_flag()) cpu.state_.pc += 0xFF03;
    // 0xFEBF: LDB 0x80
    cpu.state_.b = 0x80;
    // 0xFEC2: BMI 0x0xFF03
    if (cpu.cpu.negative_flag()) cpu.state_.pc += 0xFF03;
    // 0xFEC4: STA 0x0x4640
    cpu.cpu.write_memory(0x4640,  cpu.state_.a);
    // 0xFEC7: TST 0x0x4401
    // TODO: Convert TST 0x0x4401
    // 0xFECA: BMI 0x0xFEC1
    if (cpu.cpu.negative_flag()) cpu.state_.pc += 0xFEC1;
    // 0xFECC: STA 0x0x4400
    cpu.cpu.write_memory(0x4400,  cpu.state_.a);
    // 0xFECF: LDB 0x0x4401
    cpu.state_.b = 0x4401;
    // 0xFED2: BPL 0x0xFF03
    if (!cpu.cpu.negative_flag()) cpu.state_.pc += 0xFF03;
    // 0xFED4: LDX 0x0x0100
    cpu.state_.x = 0x0100;
    // 0xFED7: LEAX -0x1,cpu.state_.x
    cpu.state_.x += -0x1,cpu.state_.x;
    // 0xFED9: BEQ 0x0xFF03
    if (cpu.cpu.zero_flag()) cpu.state_.pc += 0xFF03;
    // 0xFEDB: STA 0x0x4640
    cpu.cpu.write_memory(0x4640,  cpu.state_.a);
    // 0xFEDE: LDB 0x0x4401
    cpu.state_.b = 0x4401;
    // 0xFEE1: ANDB 0x40
    cpu.state_.b &= 0x40;
    // 0xFEE3: BEQ 0x0xFED7
    if (cpu.cpu.zero_flag()) cpu.state_.pc += 0xFED7;
    // 0xFEE5: TST 0x0x4401
    // TODO: Convert TST 0x0x4401
    // 0xFEE8: BMI 0x0xFF03
    if (cpu.cpu.negative_flag()) cpu.state_.pc += 0xFF03;
    // 0xFEEA: CMPA 0x0x4400
    cpu.cpu.compare_a(0x4400);
    // 0xFEED: BNE 0x0xFF03
    if (!cpu.cpu.zero_flag()) cpu.state_.pc += 0xFF03;
    // 0xFEEF: LDB 0x0x4401
    cpu.state_.b = 0x4401;
    // 0xFEF2: ANDB 0x40
    cpu.state_.b &= 0x40;
    // 0xFEF4: BMI 0x0xFF03
    if (cpu.cpu.negative_flag()) cpu.state_.pc += 0xFF03;
    // 0xFEF7: BCC 0x0xFEB0
    if (!cpu.cpu.carry_flag()) cpu.state_.pc += 0xFEB0;
    // 0xFEF9: LDU 0x0x4682
    cpu.state_.u = 0x4682;
    // 0xFEFC: JMP 0x0xFEFF
    cpu.state_.pc = 0xFEFF;
    // 0xFEFF: LDA 0x00
    cpu.state_.a = 0x00;
    // 0xFF01: STA ,cpu.state_.u
    cpu.cpu.write_memory(0, cpu.state_.u,  cpu.state_.a);
    // 0xFF03: LDX 0x0x0000
    cpu.state_.x = 0x0000;
    // 0xFF06: STA 0x0x4640
    cpu.cpu.write_memory(0x4640,  cpu.state_.a);
    // 0xFF09: LEAX 0x1,cpu.state_.x
    cpu.state_.x += 0x1,cpu.state_.x;
    // 0xFF0B: CMPX 0x0xAC55
    cpu.cpu.compare_x(0xAC55);
    // 0xFF0E: BCS 0x0xFF06
    if (cpu.cpu.carry_flag()) cpu.state_.pc += 0xFF06;
    // 0xFF10: LDA 0xFF
    cpu.state_.a = 0xFF;
    // 0xFF12: STA ,cpu.state_.u
    cpu.cpu.write_memory(0, cpu.state_.u,  cpu.state_.a);
    // 0xFF14: LDX 0x0x0000
    cpu.state_.x = 0x0000;
    // 0xFF17: STA 0x0x4640
    cpu.cpu.write_memory(0x4640,  cpu.state_.a);
    // 0xFF1A: LEAX 0x1,cpu.state_.x
    cpu.state_.x += 0x1,cpu.state_.x;
    // 0xFF1C: CMPX 0x0xAC55
    cpu.cpu.compare_x(0xAC55);
    // 0xFF1F: BCS 0x0xFF17
    if (cpu.cpu.carry_flag()) cpu.state_.pc += 0xFF17;
    // 0xFF21: JMP 0x0xFD07
    cpu.state_.pc = 0xFD07;
    // 0xFF24: LDA 0x00
    cpu.state_.a = 0x00;
    // 0xFF26: STA 0x0x4686
    cpu.cpu.write_memory(0x4686,  cpu.state_.a);
    // 0xFF29: STA 0x0x4683
    cpu.cpu.write_memory(0x4683,  cpu.state_.a);
    // 0xFF2C: STA 0x0x4682
    cpu.cpu.write_memory(0x4682,  cpu.state_.a);
    // 0xFF2F: LDX 0x0x0000
    cpu.state_.x = 0x0000;
    // 0xFF32: STA 0x0x4640
    cpu.cpu.write_memory(0x4640,  cpu.state_.a);
    // 0xFF35: LEAX 0x1,cpu.state_.x
    cpu.state_.x += 0x1,cpu.state_.x;
    // 0xFF37: CMPX 0x0x5600
    cpu.cpu.compare_x(0x5600);
    // 0xFF3A: BCS 0x0xFF32
    if (cpu.cpu.carry_flag()) cpu.state_.pc += 0xFF32;
    // 0xFF3C: LDA 0xFF
    cpu.state_.a = 0xFF;
    // 0xFF3E: STA 0x0x4686
    cpu.cpu.write_memory(0x4686,  cpu.state_.a);
    // 0xFF41: STA 0x0x4683
    cpu.cpu.write_memory(0x4683,  cpu.state_.a);
    // 0xFF44: STA 0x0x4682
    cpu.cpu.write_memory(0x4682,  cpu.state_.a);
    // 0xFF47: LDX 0x0x0000
    cpu.state_.x = 0x0000;
    // 0xFF4A: STA 0x0x4640
    cpu.cpu.write_memory(0x4640,  cpu.state_.a);
    // 0xFF4D: LEAX 0x1,cpu.state_.x
    cpu.state_.x += 0x1,cpu.state_.x;
    // 0xFF4F: CMPX 0x0x5600
    cpu.cpu.compare_x(0x5600);
    // 0xFF52: BCS 0x0xFF4A
    if (cpu.cpu.carry_flag()) cpu.state_.pc += 0xFF4A;
    // 0xFF54: JMP 0x0xFD07
    cpu.state_.pc = 0xFD07;
    // 0xFF57: LDA [0x0xC840]
    cpu.state_.a = [0x0xC840];
    // 0xFF5B: LDA <0x1F
    cpu.state_.a = 0x1F;
    // 0xFF5D: LSR -0x10,cpu.state_.x
    // TODO: Convert LSR -0x10,cpu.state_.x
    // 0xFF60: SUBA -0xC,cpu.state_.sp
    cpu.state_.a -= -0xC,cpu.state_.sp;
    // 0xFF62: LDA 0x0,cpu.state_.y
    cpu.state_.a = 0x0,cpu.state_.y;
    // 0xFF64: XDEC 0x0x6EE0
    // TODO: Convert XDEC 0x0x6EE0
    // 0xFF67: TST 0x0xE8AE
    // TODO: Convert TST 0x0xE8AE
    // 0xFF6B: ASL 0x0x9207
    // TODO: Convert ASL 0x0x9207
    // 0xFF6E: ANDB >0x0x0018
    cpu.state_.b &= 0x0x0018;
    // 0xFF71: 0xADCB 0x0,cpu.state_.u
    // TODO: Convert 0xADCB 0x0,cpu.state_.u
    // 0xFF73: ORA <0xF5
    cpu.state_.a |= 0xF5;
    // 0xFF75: SUBA 0x0x3807
    cpu.state_.a -= 0x3807;
    // 0xFF78: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFF7B: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFF7E: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFF81: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFF84: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFF87: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFF8A: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFF8D: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFF90: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFF93: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFF96: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFF99: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFF9C: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFF9F: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFA2: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFA5: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFA8: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFAB: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFAE: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFB1: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFB4: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFB7: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFBA: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFBD: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFC0: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFC3: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFC6: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFC9: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFCC: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFCF: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFD2: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFD5: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFD8: STU 0x0xFFFF
    cpu.cpu.write_memory(0xFFFF,  cpu.state_.u);
    // 0xFFDB: STU 0x0x434F
    cpu.cpu.write_memory(0x434F,  cpu.state_.u);
    // 0xFFE5: BRA 0x0x0018
    cpu.state_.pc += 0x0018;
}

} // namespace StarWars
